
main.or32:     file format elf32-dv10


Disassembly of section .code:

01000000 <_START>:
 1000000:	81 61       	R1 = 0x30 (X);		/*		R1=0x30( 48) */
 1000002:	11 3e       	SYSCFG = R1;
 1000004:	38 e1 00 00 	B0 = 0x0 (X);		/*		B0=0x0 <data_addr>(  0) */
 1000008:	39 e1 00 00 	B1 = 0x0 (X);		/*		B1=0x0 <data_addr>(  0) */
 100000c:	3a e1 00 00 	B2 = 0x0 (X);		/*		B2=0x0 <data_addr>(  0) */
 1000010:	3b e1 00 00 	B3 = 0x0 (X);		/*		B3=0x0 <data_addr>(  0) */
 1000014:	3c e1 00 00 	L0 = 0x0 (X);		/*		L0=0x0 <data_addr>(  0) */
 1000018:	3d e1 00 00 	L1 = 0x0 (X);		/*		L1=0x0 <data_addr>(  0) */
 100001c:	3e e1 00 00 	L2 = 0x0 (X);		/*		L2=0x0 <data_addr>(  0) */
 1000020:	3f e1 00 00 	L3 = 0x0 (X);		/*		L3=0x0 <data_addr>(  0) */
 1000024:	30 e1 00 00 	I0 = 0x0 (X);		/*		I0=0x0 <data_addr>(  0) */
 1000028:	31 e1 00 00 	I1 = 0x0 (X);		/*		I1=0x0 <data_addr>(  0) */
 100002c:	32 e1 00 00 	I2 = 0x0 (X);		/*		I2=0x0 <data_addr>(  0) */
 1000030:	33 e1 00 00 	I3 = 0x0 (X);		/*		I3=0x0 <data_addr>(  0) */
 1000034:	0e e1 68 10 	SP.L = 0x1068;		/* (4200)	SP=0x1068 <_bredr_base_addr> */
 1000038:	4e e1 00 00 	SP.H = 0x0;		/* (  0)	SP=0x1068 <_bredr_base_addr> */
 100003c:	00 e1 68 08 	R0.L = 0x868;		/* (2152)	R0=0x868 <_intr_stack>(2152) */
 1000040:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x868 <_intr_stack>(2152) */
 1000044:	10 3e       	SYSCFG = R0;
 1000046:	7e 32       	FP = SP;
 1000048:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100004a:	02 68       	P2 = 0x0 (X);		/*		P2=0x0(  0) */
 100004c:	03 68       	P3 = 0x0 (X);		/*		P3=0x0(  0) */
 100004e:	04 68       	P4 = 0x0 (X);		/*		P4=0x0(  0) */
 1000050:	05 68       	P5 = 0x0 (X);		/*		P5=0x0(  0) */
 1000052:	34 e1 04 00 	M0 = 0x4 (X);		/*		M0=0x4 <_att_client_handler>(  4) */

01000056 <_clean_bss>:
 1000056:	08 e1 68 00 	P0.L = 0x68;		/* (104)	P0=0x68 <bss_begin> */
 100005a:	48 e1 00 00 	P0.H = 0x0;		/* (  0)	P0=0x68 <bss_begin> */
 100005e:	09 e1 68 45 	P1.L = 0x4568;		/* (17768)	P1=0x4568 */
 1000062:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x4568 */
 1000066:	c9 44       	P1 = P1 >> 0x2;
 1000068:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100006a:	a2 e0 02 10 	LSETUP(0x100006e <.10>, 0x100006e <.10>) LC0 = P1;

0100006e <.10>:
 100006e:	00 92       	[P0++] = R0;

01000070 <_movedata>:
 1000070:	08 e1 40 00 	P0.L = 0x40;		/* ( 64)	P0=0x40 */
 1000074:	48 e1 01 01 	P0.H = 0x101;		/* (257)	P0=0x1010040 <_text_end> */
 1000078:	09 e1 6c 00 	P1.L = 0x6c;		/* (108)	P1=0x6c */
 100007c:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x6c */
 1000080:	c9 44       	P1 = P1 >> 0x2;
 1000082:	0a e1 00 00 	P2.L = 0x0;		/* (  0)	P2=0x0 <data_addr> */
 1000086:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x0 <data_addr> */
 100008a:	41 0c       	CC = P1 == 0x0;
 100008c:	05 18       	IF CC JUMP 0x1000096 <_jump_to_cmain>;
 100008e:	a2 e0 03 10 	LSETUP(0x1000092 <.16>, 0x1000094 <.17>) LC0 = P1;

01000092 <.16>:
 1000092:	00 90       	R0 = [P0++];

01000094 <.17>:
 1000094:	10 92       	[P2++] = R0;

01000096 <_jump_to_cmain>:
 1000096:	01 68       	P1 = 0x0 (X);		/*		P1=0x0(  0) */
 1000098:	02 68       	P2 = 0x0 (X);		/*		P2=0x0(  0) */
 100009a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100009c:	08 e1 48 d6 	P0.L = 0xd648;		/* (-10680)	P0=0x101d648 */
 10000a0:	48 e1 00 01 	P0.H = 0x100;		/* (256)	P0=0x100d648 <_main> */
 10000a4:	60 00       	CALL (P0);
 10000a6:	23 00       	CSYNC;

010000a8 <_ISR_PUSH_REG>:
 10000a8:	66 01       	[--SP] = ASTAT;
 10000aa:	7b 01       	[--SP] = RETI;
 10000ac:	c0 05       	[--SP] = (R7:0, P5:0);
 10000ae:	4f 01       	[--SP] = FP;
 10000b0:	50 01       	[--SP] = I0;
 10000b2:	51 01       	[--SP] = I1;
 10000b4:	52 01       	[--SP] = I2;
 10000b6:	53 01       	[--SP] = I3;
 10000b8:	58 01       	[--SP] = B0;
 10000ba:	59 01       	[--SP] = B1;
 10000bc:	5a 01       	[--SP] = B2;
 10000be:	5b 01       	[--SP] = B3;
 10000c0:	5c 01       	[--SP] = L0;
 10000c2:	5d 01       	[--SP] = L1;
 10000c4:	5e 01       	[--SP] = L2;
 10000c6:	5f 01       	[--SP] = L3;
 10000c8:	54 01       	[--SP] = M0;
 10000ca:	55 01       	[--SP] = M1;
 10000cc:	56 01       	[--SP] = M2;
 10000ce:	57 01       	[--SP] = M3;
 10000d0:	0a c4 3f 02 	R1.L = A0.X;
 10000d4:	41 01       	[--SP] = R1;
 10000d6:	61 01       	[--SP] = A0.W;
 10000d8:	0a c4 3f 42 	R1.L = A1.X;
 10000dc:	41 01       	[--SP] = R1;
 10000de:	63 01       	[--SP] = A1.W;
 10000e0:	70 01       	[--SP] = LC0;
 10000e2:	03 60       	R3 = 0x0 (X);		/*		R3=0x0(  0) */
 10000e4:	03 3c       	LC0 = R3;
 10000e6:	73 01       	[--SP] = LC1;
 10000e8:	1b 3c       	LC1 = R3;
 10000ea:	71 01       	[--SP] = LT0;
 10000ec:	74 01       	[--SP] = LT1;
 10000ee:	72 01       	[--SP] = LB0;
 10000f0:	75 01       	[--SP] = LB1;
 10000f2:	3c e1 00 00 	L0 = 0x0 (X);		/*		L0=0x0 <data_addr>(  0) */
 10000f6:	3d e1 00 00 	L1 = 0x0 (X);		/*		L1=0x0 <data_addr>(  0) */
 10000fa:	3e e1 00 00 	L2 = 0x0 (X);		/*		L2=0x0 <data_addr>(  0) */
 10000fe:	3f e1 00 00 	L3 = 0x0 (X);		/*		L3=0x0 <data_addr>(  0) */
 1000102:	10 00       	RTS;

01000104 <_ISR_POP_REG>:
 1000104:	35 01       	LB1 = [SP++];
 1000106:	32 01       	LB0 = [SP++];
 1000108:	34 01       	LT1 = [SP++];
 100010a:	31 01       	LT0 = [SP++];
 100010c:	33 01       	LC1 = [SP++];
 100010e:	30 01       	LC0 = [SP++];
 1000110:	30 90       	R0 = [SP++];
 1000112:	09 c4 00 a0 	A1 = R0;
 1000116:	30 90       	R0 = [SP++];
 1000118:	09 c4 00 c0 	A1.X = R0.L;
 100011c:	30 90       	R0 = [SP++];
 100011e:	09 c4 00 20 	A0 = R0;
 1000122:	30 90       	R0 = [SP++];
 1000124:	09 c4 00 40 	A0.X = R0.L;
 1000128:	17 01       	M3 = [SP++];
 100012a:	16 01       	M2 = [SP++];
 100012c:	15 01       	M1 = [SP++];
 100012e:	14 01       	M0 = [SP++];
 1000130:	1f 01       	L3 = [SP++];
 1000132:	1e 01       	L2 = [SP++];
 1000134:	1d 01       	L1 = [SP++];
 1000136:	1c 01       	L0 = [SP++];
 1000138:	1b 01       	B3 = [SP++];
 100013a:	1a 01       	B2 = [SP++];
 100013c:	19 01       	B1 = [SP++];
 100013e:	18 01       	B0 = [SP++];
 1000140:	13 01       	I3 = [SP++];
 1000142:	12 01       	I2 = [SP++];
 1000144:	11 01       	I1 = [SP++];
 1000146:	10 01       	I0 = [SP++];
 1000148:	77 90       	FP = [SP++];
 100014a:	80 05       	(R7:0, P5:0) = [SP++];
 100014c:	3b 01       	RETI = [SP++];
 100014e:	26 01       	ASTAT = [SP++];
 1000150:	01 e8 00 00 	UNLINK;
 1000154:	11 00       	RTI;

01000156 <___udivsi3>:
 1000156:	08 42       	DIVQ (R0, R1);
 1000158:	10 00       	RTS;

0100015a <___divsi3>:
 100015a:	48 42       	DIVS (R0, R1);
 100015c:	10 00       	RTS;
	...

01000160 <___initcall_bt16_machine_init>:
 1000160:	58 d4       	ILLEGAL;
 1000162:	00 01       	ILLEGAL;

01000164 <___initcall_irq_handler_init>:
 1000164:	c4 d4       	ILLEGAL;
 1000166:	00 01       	ILLEGAL;

01000168 <__early_initcall_end>:
 1000168:	78 07       	IF CC R7 = P0;
 100016a:	00 01       	ILLEGAL;

0100016c <_ble_h4_packet_handler>:
 100016c:	f4 52       	R3 = R4 - R6;
 100016e:	00 01       	ILLEGAL;

01000170 <___ble_ops>:
 1000170:	7c d0       	ILLEGAL;
 1000172:	00 01       	ILLEGAL;

01000174 <___alloc_event>:
 1000174:	70 05       	[--SP] = (R7:6);
 1000176:	38 30       	R7 = R0;
 1000178:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100017c:	31 30       	R6 = R1;
 100017e:	01 30       	R0 = R1;
 1000180:	00 e3 8e 74 	CALL 0x100ea9c <___vsprintf_len>;
 1000184:	f8 51       	R7 = R0 + R7;
 1000186:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x0 <data_addr> */
 100018a:	0a e1 20 45 	P2.L = 0x4520;		/* (17696)	P2=0x4520 <_hci_event_buf> */
 100018e:	0f 30       	R1 = R7;
 1000190:	11 64       	R1 += 0x2;		/* (  2) */
 1000192:	10 91       	R0 = [P2];
 1000194:	00 e3 3e 72 	CALL 0x100e610 <_lbuf_alloc>;
 1000198:	00 0c       	CC = R0 == 0x0;
 100019a:	0a 14       	IF !CC JUMP 0x10001ae <___alloc_event+0x3a> (BP);
 100019c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 10001a0:	00 e1 98 09 	R0.L = 0x998;		/* (2456)	R0=0x1000998(16779672) */
 10001a4:	0f 30       	R1 = R7;
 10001a6:	16 30       	R2 = R6;
 10001a8:	00 e3 ec 76 	CALL 0x100ef80 <_printf>;
 10001ac:	00 20       	JUMP.S 0x10001ac <___alloc_event+0x38>;
 10001ae:	10 32       	P2 = R0;
 10001b0:	97 e6 01 00 	B[P2 + 0x1] = R7;
 10001b4:	01 e8 00 00 	UNLINK;
 10001b8:	30 05       	(R7:6) = [SP++];
 10001ba:	10 00       	RTS;

010001bc <___hci_emit_event_of_cmd_complete>:
 10001bc:	f5 05       	[--SP] = (R7:6, P5:5);
 10001be:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10001c2:	30 30       	R6 = R0;
 10001c4:	fa b1       	[FP + 0x1c] = R2;
 10001c6:	39 30       	R7 = R1;
 10001c8:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 10001ca:	ff e3 d5 ff 	CALL 0x1000174 <___alloc_event>;
 10001ce:	28 32       	P5 = R0;
 10001d0:	45 0c       	CC = P5 == 0x0;
 10001d2:	08 14       	IF !CC JUMP 0x10001e2 <___hci_emit_event_of_cmd_complete+0x26> (BP);
 10001d4:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000003(16777219) */
 10001d8:	00 e1 bc 09 	R0.L = 0x9bc;		/* (2492)	R0=0x10009bc(16779708) */
 10001dc:	00 e3 ee 76 	CALL 0x100efb8 <_puts>;
 10001e0:	00 20       	JUMP.S 0x10001e0 <___hci_emit_event_of_cmd_complete+0x24>;
 10001e2:	70 60       	R0 = 0xe (X);		/*		R0=0xe( 14) */
 10001e4:	28 9b       	B[P5] = R0;
 10001e6:	ae e6 03 00 	B[P5 + 0x3] = R6;
 10001ea:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 10001ec:	a8 e6 02 00 	B[P5 + 0x2] = R0;
 10001f0:	f6 42       	R6 = R6.L (Z);
 10001f2:	46 4e       	R6 >>= 0x8;
 10001f4:	45 30       	R0 = P5;
 10001f6:	57 30       	R2 = FP;
 10001f8:	0f 30       	R1 = R7;
 10001fa:	ae e6 04 00 	B[P5 + 0x4] = R6;
 10001fe:	e2 64       	R2 += 0x1c;		/* ( 28) */
 1000200:	28 64       	R0 += 0x5;		/* (  5) */
 1000202:	00 e3 8d 74 	CALL 0x100eb1c <___vsprintf>;
 1000206:	45 30       	R0 = P5;
 1000208:	00 e3 50 72 	CALL 0x100e6a8 <_lbuf_push>;
 100020c:	01 e8 00 00 	UNLINK;
 1000210:	b5 05       	(R7:6, P5:5) = [SP++];
 1000212:	10 00       	RTS;

01000214 <_le_send_event>:
 1000214:	f5 05       	[--SP] = (R7:6, P5:5);
 1000216:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100021a:	30 30       	R6 = R0;
 100021c:	fa b1       	[FP + 0x1c] = R2;
 100021e:	39 30       	R7 = R1;
 1000220:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1000222:	ff e3 a9 ff 	CALL 0x1000174 <___alloc_event>;
 1000226:	28 32       	P5 = R0;
 1000228:	57 30       	R2 = FP;
 100022a:	0f 30       	R1 = R7;
 100022c:	e2 64       	R2 += 0x1c;		/* ( 28) */
 100022e:	10 64       	R0 += 0x2;		/* (  2) */
 1000230:	2e 9b       	B[P5] = R6;
 1000232:	00 e3 75 74 	CALL 0x100eb1c <___vsprintf>;
 1000236:	45 30       	R0 = P5;
 1000238:	00 e3 38 72 	CALL 0x100e6a8 <_lbuf_push>;
 100023c:	01 e8 00 00 	UNLINK;
 1000240:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1000242:	b5 05       	(R7:6, P5:5) = [SP++];
 1000244:	10 00       	RTS;
	...

01000248 <_ctrl_baseband_cmd_handler>:
 1000248:	78 05       	[--SP] = (R7:7);
 100024a:	38 30       	R7 = R0;
 100024c:	20 e1 ff 03 	R0 = 0x3ff (X);		/*		R0=0x3ff(1023) */
 1000250:	38 54       	R0 = R0 & R7;
 1000252:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1000256:	18 0c       	CC = R0 == 0x3;
 1000258:	06 18       	IF CC JUMP 0x1000264 <_ctrl_baseband_cmd_handler+0x1c>;
 100025a:	21 e1 6d 00 	R1 = 0x6d (X);		/*		R1=0x6d(109) */
 100025e:	08 08       	CC = R0 == R1;
 1000260:	1b 14       	IF !CC JUMP 0x1000296 <_ctrl_baseband_cmd_handler+0x4e> (BP);
 1000262:	0f 20       	JUMP.S 0x1000280 <_ctrl_baseband_cmd_handler+0x38>;
 1000264:	00 e3 a6 0a 	CALL 0x10017b0 <_ll_init>;
 1000268:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10003ff(16778239) */
 100026c:	00 e1 a0 05 	R0.L = 0x5a0;		/* (1440)	R0=0x10005a0 <_le_hci_handler>(16778656) */
 1000270:	00 e3 96 0a 	CALL 0x100179c <_ll_handler_register>;
 1000274:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10005a0 <_le_hci_handler>(16778656) */
 1000278:	00 e1 d8 09 	R0.L = 0x9d8;		/* (2520)	R0=0x10009d8(16779736) */
 100027c:	00 e3 9e 76 	CALL 0x100efb8 <_puts>;
 1000280:	07 30       	R0 = R7;
 1000282:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x100006d(16777325) */
 1000286:	01 e8 00 00 	UNLINK;
 100028a:	01 e1 48 70 	R1.L = 0x7048;		/* (28744)	R1=0x1007048(16805960) */
 100028e:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1000290:	38 05       	(R7:7) = [SP++];
 1000292:	ff e2 95 ff 	JUMP.L 0x10001bc <___hci_emit_event_of_cmd_complete>;
 1000296:	01 e8 00 00 	UNLINK;
 100029a:	38 05       	(R7:7) = [SP++];
 100029c:	10 00       	RTS;
	...

010002a0 <_hci_thread_process>:
 10002a0:	f5 05       	[--SP] = (R7:6, P5:5);
 10002a2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4520 <_hci_event_buf> */
 10002a6:	00 e8 09 00 	LINK 0x24;		/* (36) */
 10002aa:	0a e1 b4 45 	P2.L = 0x45b4;		/* (17844)	P2=0x45b4 <_hci_cmd_ptr> */
 10002ae:	10 91       	R0 = [P2];
 10002b0:	00 e3 1a 72 	CALL 0x100e6e4 <_lbuf_pop>;
 10002b4:	28 32       	P5 = R0;
 10002b6:	45 0c       	CC = P5 == 0x0;
 10002b8:	d1 18       	IF CC JUMP 0x100045a <_hci_thread_process+0x1ba>;
 10002ba:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10009d8(16779736) */
 10002be:	00 e1 e4 09 	R0.L = 0x9e4;		/* (2532)	R0=0x10009e4(16779748) */
 10002c2:	00 e3 7b 76 	CALL 0x100efb8 <_puts>;
 10002c6:	45 30       	R0 = P5;
 10002c8:	29 95       	R1 = W[P5] (Z);
 10002ca:	10 64       	R0 += 0x2;		/* (  2) */
 10002cc:	00 e3 a8 6f 	CALL 0x100e21c <_printf_buf>;
 10002d0:	af e4 03 00 	R7 = B[P5 + 0x3] (Z);
 10002d4:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 10002d8:	47 4f       	R7 <<= 0x8;
 10002da:	c7 57       	R7 = R7 | R0;
 10002dc:	f8 42       	R0 = R7.L (Z);
 10002de:	82 c6 b0 83 	R1 = R0 >> 0xa;
 10002e2:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 10002e4:	37 30       	R6 = R7;
 10002e6:	11 08       	CC = R1 == R2;
 10002e8:	0e 18       	IF CC JUMP 0x1000304 <_hci_thread_process+0x64>;
 10002ea:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 10002ec:	11 08       	CC = R1 == R2;
 10002ee:	22 18       	IF CC JUMP 0x1000332 <_hci_thread_process+0x92>;
 10002f0:	19 0c       	CC = R1 == 0x3;
 10002f2:	b1 14       	IF !CC JUMP 0x1000454 <_hci_thread_process+0x1b4> (BP);
 10002f4:	4d 30       	R1 = P5;
 10002f6:	2a 95       	R2 = W[P5] (Z);
 10002f8:	29 64       	R1 += 0x5;		/* (  5) */
 10002fa:	ea 67       	R2 += -0x3;		/* ( -3) */
 10002fc:	07 30       	R0 = R7;
 10002fe:	ff e3 a5 ff 	CALL 0x1000248 <_ctrl_baseband_cmd_handler>;
 1000302:	a9 20       	JUMP.S 0x1000454 <_hci_thread_process+0x1b4>;
 1000304:	21 e1 ff 03 	R1 = 0x3ff (X);		/*		R1=0x3ff(1023) */
 1000308:	08 54       	R0 = R0 & R1;
 100030a:	49 60       	R1 = 0x9 (X);		/*		R1=0x9(  9) */
 100030c:	08 08       	CC = R0 == R1;
 100030e:	a3 14       	IF !CC JUMP 0x1000454 <_hci_thread_process+0x1b4> (BP);
 1000310:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10009e4(16779748) */
 1000314:	00 e1 f4 09 	R0.L = 0x9f4;		/* (2548)	R0=0x10009f4(16779764) */
 1000318:	00 e3 50 76 	CALL 0x100efb8 <_puts>;
 100031c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10009f4(16779764) */
 1000320:	00 e1 1c 0d 	R0.L = 0xd1c;		/* (3356)	R0=0x1000d1c <_local_addr>(16780572) */
 1000324:	f0 b0       	[SP + 0xc] = R0;
 1000326:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000009(16777225) */
 100032a:	07 30       	R0 = R7;
 100032c:	01 e1 0c 0a 	R1.L = 0xa0c;		/* (2572)	R1=0x1000a0c(16779788) */
 1000330:	5b 20       	JUMP.S 0x10003e6 <_hci_thread_process+0x146>;
 1000332:	21 e1 ff 03 	R1 = 0x3ff (X);		/*		R1=0x3ff(1023) */
 1000336:	08 54       	R0 = R0 & R1;
 1000338:	f0 67       	R0 += -0x2;		/* ( -2) */
 100033a:	e2 60       	R2 = 0x1c (X);		/*		R2=0x1c( 28) */
 100033c:	10 0a       	CC = R0 <= R2 (IU);
 100033e:	8b 14       	IF !CC JUMP 0x1000454 <_hci_thread_process+0x1b4> (BP);
 1000340:	08 32       	P1 = R0;
 1000342:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x10045b4 */
 1000346:	0a e1 a8 0c 	P2.L = 0xca8;		/* (3240)	P2=0x1000ca8 */
 100034a:	8a 5e       	P2 = P2 + (P1 << 0x2);
 100034c:	52 91       	P2 = [P2];
 100034e:	52 00       	JUMP (P2);
 1000350:	20 e1 40 00 	R0 = 0x40 (X);		/*		R0=0x40( 64) */
 1000354:	f0 b0       	[SP + 0xc] = R0;
 1000356:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 1000358:	30 b1       	[SP + 0x10] = R0;
 100035a:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x10003ff(16778239) */
 100035e:	07 30       	R0 = R7;
 1000360:	01 e1 10 0a 	R1.L = 0xa10;		/* (2576)	R1=0x1000a10(16779792) */
 1000364:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1000366:	ff e3 2b ff 	CALL 0x10001bc <___hci_emit_event_of_cmd_complete>;
 100036a:	75 20       	JUMP.S 0x1000454 <_hci_thread_process+0x1b4>;
 100036c:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000a10(16779792) */
 1000370:	07 30       	R0 = R7;
 1000372:	01 e1 48 70 	R1.L = 0x7048;		/* (28744)	R1=0x1007048(16805960) */
 1000376:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1000378:	ff e3 22 ff 	CALL 0x10001bc <___hci_emit_event_of_cmd_complete>;
 100037c:	a8 e4 05 00 	R0 = B[P5 + 0x5] (Z);
 1000380:	00 0c       	CC = R0 == 0x0;
 1000382:	69 1c       	IF CC JUMP 0x1000454 <_hci_thread_process+0x1b4> (BP);
 1000384:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000008(16777224) */
 1000388:	00 e1 14 0a 	R0.L = 0xa14;		/* (2580)	R0=0x1000a14(16779796) */
 100038c:	00 e3 16 76 	CALL 0x100efb8 <_puts>;
 1000390:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 1000392:	0e 20       	JUMP.S 0x10003ae <_hci_thread_process+0x10e>;
 1000394:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1007048(16805960) */
 1000398:	07 30       	R0 = R7;
 100039a:	01 e1 48 70 	R1.L = 0x7048;		/* (28744)	R1=0x1007048(16805960) */
 100039e:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 10003a0:	ff e3 0e ff 	CALL 0x10001bc <___hci_emit_event_of_cmd_complete>;
 10003a4:	a8 e4 05 00 	R0 = B[P5 + 0x5] (Z);
 10003a8:	00 0c       	CC = R0 == 0x0;
 10003aa:	55 1c       	IF CC JUMP 0x1000454 <_hci_thread_process+0x1b4> (BP);
 10003ac:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 10003ae:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1007048(16805960) */
 10003b2:	01 e1 1c 0d 	R1.L = 0xd1c;		/* (3356)	R1=0x1000d1c <_local_addr>(16780572) */
 10003b6:	00 e3 7b 09 	CALL 0x10016ac <_ll_open>;
 10003ba:	4d 20       	JUMP.S 0x1000454 <_hci_thread_process+0x1b4>;
 10003bc:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000003(16777219) */
 10003c0:	00 e1 24 0a 	R0.L = 0xa24;		/* (2596)	R0=0x1000a24(16779812) */
 10003c4:	00 e3 fa 75 	CALL 0x100efb8 <_puts>;
 10003c8:	7f 30       	R7 = FP;
 10003ca:	87 67       	R7 += -0x10;		/* (-16) */
 10003cc:	45 30       	R0 = P5;
 10003ce:	4d 30       	R1 = P5;
 10003d0:	a9 64       	R1 += 0x15;		/* ( 21) */
 10003d2:	28 64       	R0 += 0x5;		/* (  5) */
 10003d4:	17 30       	R2 = R7;
 10003d6:	00 e3 d9 08 	CALL 0x1001588 <_aes128_start>;
 10003da:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000d1c <_local_addr>(16780572) */
 10003de:	f7 b0       	[SP + 0xc] = R7;
 10003e0:	06 30       	R0 = R6;
 10003e2:	01 e1 34 0a 	R1.L = 0xa34;		/* (2612)	R1=0x1000a34(16779828) */
 10003e6:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 10003e8:	ff e3 ea fe 	CALL 0x10001bc <___hci_emit_event_of_cmd_complete>;
 10003ec:	34 20       	JUMP.S 0x1000454 <_hci_thread_process+0x1b4>;
 10003ee:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000a24(16779812) */
 10003f2:	00 e1 3c 0a 	R0.L = 0xa3c;		/* (2620)	R0=0x1000a3c(16779836) */
 10003f6:	00 e3 e1 75 	CALL 0x100efb8 <_puts>;
 10003fa:	47 30       	R0 = FP;
 10003fc:	80 67       	R0 += -0x10;		/* (-16) */
 10003fe:	f0 b0       	[SP + 0xc] = R0;
 1000400:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000a34(16779828) */
 1000404:	07 30       	R0 = R7;
 1000406:	01 e1 4c 0a 	R1.L = 0xa4c;		/* (2636)	R1=0x1000a4c(16779852) */
 100040a:	ee 2f       	JUMP.S 0x10003e6 <_hci_thread_process+0x146>;
 100040c:	af e4 06 00 	R7 = B[P5 + 0x6] (Z);
 1000410:	a8 e4 05 00 	R0 = B[P5 + 0x5] (Z);
 1000414:	47 4f       	R7 <<= 0x8;
 1000416:	c7 57       	R7 = R7 | R0;
 1000418:	4d 30       	R1 = P5;
 100041a:	39 64       	R1 += 0x7;		/* (  7) */
 100041c:	07 30       	R0 = R7;
 100041e:	00 e3 19 09 	CALL 0x1001650 <_ll_long_term_key_request_replay>;
 1000422:	0a 20       	JUMP.S 0x1000436 <_hci_thread_process+0x196>;
 1000424:	af e4 06 00 	R7 = B[P5 + 0x6] (Z);
 1000428:	a8 e4 05 00 	R0 = B[P5 + 0x5] (Z);
 100042c:	47 4f       	R7 <<= 0x8;
 100042e:	c7 57       	R7 = R7 | R0;
 1000430:	07 30       	R0 = R7;
 1000432:	00 e3 2b 09 	CALL 0x1001688 <_ll_long_term_key_request_nagative_replay>;
 1000436:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000a4c(16779852) */
 100043a:	f7 b0       	[SP + 0xc] = R7;
 100043c:	06 30       	R0 = R6;
 100043e:	01 e1 54 0a 	R1.L = 0xa54;		/* (2644)	R1=0x1000a54(16779860) */
 1000442:	d2 2f       	JUMP.S 0x10003e6 <_hci_thread_process+0x146>;
 1000444:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000a54(16779860) */
 1000448:	07 30       	R0 = R7;
 100044a:	01 e1 48 70 	R1.L = 0x7048;		/* (28744)	R1=0x1007048(16805960) */
 100044e:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1000450:	ff e3 b6 fe 	CALL 0x10001bc <___hci_emit_event_of_cmd_complete>;
 1000454:	45 30       	R0 = P5;
 1000456:	00 e3 63 71 	CALL 0x100e71c <_lbuf_free>;
 100045a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0xca8 */
 100045e:	0a e1 20 45 	P2.L = 0x4520;		/* (17696)	P2=0x4520 <_hci_event_buf> */
 1000462:	10 91       	R0 = [P2];
 1000464:	00 e3 40 71 	CALL 0x100e6e4 <_lbuf_pop>;
 1000468:	28 32       	P5 = R0;
 100046a:	45 0c       	CC = P5 == 0x0;
 100046c:	1b 18       	IF CC JUMP 0x10004a2 <_hci_thread_process+0x202>;
 100046e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000a3c(16779836) */
 1000472:	00 e1 58 0a 	R0.L = 0xa58;		/* (2648)	R0=0x1000a58(16779864) */
 1000476:	00 e3 a1 75 	CALL 0x100efb8 <_puts>;
 100047a:	a9 e4 01 00 	R1 = B[P5 + 0x1] (Z);
 100047e:	11 64       	R1 += 0x2;		/* (  2) */
 1000480:	45 30       	R0 = P5;
 1000482:	00 e3 cd 6e 	CALL 0x100e21c <_printf_buf>;
 1000486:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1004520 */
 100048a:	0a e1 6c 01 	P2.L = 0x16c;		/* (364)	P2=0x100016c <_ble_h4_packet_handler> */
 100048e:	52 91       	P2 = [P2];
 1000490:	aa e4 01 00 	R2 = B[P5 + 0x1] (Z);
 1000494:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1000496:	12 64       	R2 += 0x2;		/* (  2) */
 1000498:	4d 30       	R1 = P5;
 100049a:	62 00       	CALL (P2);
 100049c:	45 30       	R0 = P5;
 100049e:	00 e3 3f 71 	CALL 0x100e71c <_lbuf_free>;
 10004a2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x16c */
 10004a6:	0a e1 b8 45 	P2.L = 0x45b8;		/* (17848)	P2=0x45b8 <_hci_rx_buf> */
 10004aa:	10 91       	R0 = [P2];
 10004ac:	00 e3 1c 71 	CALL 0x100e6e4 <_lbuf_pop>;
 10004b0:	28 32       	P5 = R0;
 10004b2:	45 0c       	CC = P5 == 0x0;
 10004b4:	1b 18       	IF CC JUMP 0x10004ea <_hci_thread_process+0x24a>;
 10004b6:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000004(16777220) */
 10004ba:	00 e1 6c 0a 	R0.L = 0xa6c;		/* (2668)	R0=0x1000a6c(16779884) */
 10004be:	00 e3 7d 75 	CALL 0x100efb8 <_puts>;
 10004c2:	7d 30       	R7 = P5;
 10004c4:	0f 64       	R7 += 0x1;		/* (  1) */
 10004c6:	29 99       	R1 = B[P5] (Z);
 10004c8:	21 64       	R1 += 0x4;		/* (  4) */
 10004ca:	07 30       	R0 = R7;
 10004cc:	00 e3 a8 6e 	CALL 0x100e21c <_printf_buf>;
 10004d0:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x10045b8 */
 10004d4:	0a e1 6c 01 	P2.L = 0x16c;		/* (364)	P2=0x100016c <_ble_h4_packet_handler> */
 10004d8:	52 91       	P2 = [P2];
 10004da:	2a 99       	R2 = B[P5] (Z);
 10004dc:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 10004de:	22 64       	R2 += 0x4;		/* (  4) */
 10004e0:	0f 30       	R1 = R7;
 10004e2:	62 00       	CALL (P2);
 10004e4:	45 30       	R0 = P5;
 10004e6:	00 e3 1b 71 	CALL 0x100e71c <_lbuf_free>;
 10004ea:	01 e8 00 00 	UNLINK;
 10004ee:	b5 05       	(R7:6, P5:5) = [SP++];
 10004f0:	10 00       	RTS;
	...

010004f4 <_le_hci_emit_meta_event>:
 10004f4:	10 32       	P2 = R0;
 10004f6:	00 e8 0c 00 	LINK 0x30;		/* (48) */
 10004fa:	19 30       	R3 = R1;
 10004fc:	f2 b0       	[SP + 0xc] = R2;
 10004fe:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1007048(16805960) */
 1000502:	d0 a4       	R0 = W[P2 + 0x6] (Z);
 1000504:	30 b1       	[SP + 0x10] = R0;
 1000506:	90 e4 01 00 	R0 = B[P2 + 0x1] (Z);
 100050a:	70 b1       	[SP + 0x14] = R0;
 100050c:	90 e4 27 00 	R0 = B[P2 + 0x27] (Z);
 1000510:	b0 b1       	[SP + 0x18] = R0;
 1000512:	42 30       	R0 = P2;
 1000514:	40 65       	R0 += 0x28;		/* ( 40) */
 1000516:	f0 b1       	[SP + 0x1c] = R0;
 1000518:	50 e4 19 00 	R0 = W[P2 + 0x32] (Z);
 100051c:	30 b2       	[SP + 0x20] = R0;
 100051e:	50 e4 1a 00 	R0 = W[P2 + 0x34] (Z);
 1000522:	70 b2       	[SP + 0x24] = R0;
 1000524:	50 e4 1b 00 	R0 = W[P2 + 0x36] (Z);
 1000528:	b0 b2       	[SP + 0x28] = R0;
 100052a:	90 e4 02 00 	R0 = B[P2 + 0x2] (Z);
 100052e:	f0 b2       	[SP + 0x2c] = R0;
 1000530:	f0 61       	R0 = 0x3e (X);		/*		R0=0x3e( 62) */
 1000532:	01 e1 7c 0a 	R1.L = 0xa7c;		/* (2684)	R1=0x1000a7c(16779900) */
 1000536:	13 30       	R2 = R3;
 1000538:	ff e3 6e fe 	CALL 0x1000214 <_le_send_event>;
 100053c:	01 e8 00 00 	UNLINK;
 1000540:	10 00       	RTS;
	...

01000544 <_le_hci_adv_pdu_handler>:
 1000544:	09 32       	P1 = R1;
 1000546:	00 e8 0c 00 	LINK 0x30;		/* (48) */
 100054a:	10 32       	P2 = R0;
 100054c:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 100054e:	88 e4 01 00 	R0 = B[P1 + 0x1] (Z);
 1000552:	08 08       	CC = R0 == R1;
 1000554:	22 14       	IF !CC JUMP 0x1000598 <_le_hci_adv_pdu_handler+0x54> (BP);
 1000556:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1000558:	f0 b0       	[SP + 0xc] = R0;
 100055a:	d0 a4       	R0 = W[P2 + 0x6] (Z);
 100055c:	30 b1       	[SP + 0x10] = R0;
 100055e:	90 e4 01 00 	R0 = B[P2 + 0x1] (Z);
 1000562:	70 b1       	[SP + 0x14] = R0;
 1000564:	90 e4 27 00 	R0 = B[P2 + 0x27] (Z);
 1000568:	b0 b1       	[SP + 0x18] = R0;
 100056a:	42 30       	R0 = P2;
 100056c:	40 65       	R0 += 0x28;		/* ( 40) */
 100056e:	f0 b1       	[SP + 0x1c] = R0;
 1000570:	50 e4 19 00 	R0 = W[P2 + 0x32] (Z);
 1000574:	30 b2       	[SP + 0x20] = R0;
 1000576:	50 e4 1a 00 	R0 = W[P2 + 0x34] (Z);
 100057a:	70 b2       	[SP + 0x24] = R0;
 100057c:	50 e4 1b 00 	R0 = W[P2 + 0x36] (Z);
 1000580:	b0 b2       	[SP + 0x28] = R0;
 1000582:	90 e4 02 00 	R0 = B[P2 + 0x2] (Z);
 1000586:	f0 b2       	[SP + 0x2c] = R0;
 1000588:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000005(16777221) */
 100058c:	f0 61       	R0 = 0x3e (X);		/*		R0=0x3e( 62) */
 100058e:	01 e1 7c 0a 	R1.L = 0xa7c;		/* (2684)	R1=0x1000a7c(16779900) */
 1000592:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 1000594:	ff e3 40 fe 	CALL 0x1000214 <_le_send_event>;
 1000598:	01 e8 00 00 	UNLINK;
 100059c:	10 00       	RTS;
	...

010005a0 <_le_hci_handler>:
 10005a0:	c3 04       	[--SP] = (P5:3);
 10005a2:	21 32       	P4 = R1;
 10005a4:	00 e8 0c 00 	LINK 0x30;		/* (48) */
 10005a8:	28 32       	P5 = R0;
 10005aa:	a1 e5 02 00 	R1 = B[P4 + 0x2] (X);
 10005ae:	4a 43       	R2 = R1.B (Z);
 10005b0:	02 0c       	CC = R2 == 0x0;
 10005b2:	07 14       	IF !CC JUMP 0x10005c0 <_le_hci_handler+0x20> (BP);
 10005b4:	4c 30       	R1 = P4;
 10005b6:	01 e8 00 00 	UNLINK;
 10005ba:	83 04       	(P5:3) = [SP++];
 10005bc:	ff e2 c4 ff 	JUMP.L 0x1000544 <_le_hci_adv_pdu_handler>;
 10005c0:	1a 0c       	CC = R2 == 0x3;
 10005c2:	a0 e5 0d 00 	R0 = B[P4 + 0xd] (X);
 10005c6:	57 14       	IF !CC JUMP 0x1000674 <_le_hci_handler+0xd4> (BP);
 10005c8:	40 43       	R0 = R0.B (Z);
 10005ca:	18 0c       	CC = R0 == 0x3;
 10005cc:	14 18       	IF CC JUMP 0x10005f4 <_le_hci_handler+0x54>;
 10005ce:	18 0e       	CC = R0 <= 0x3 (IU);
 10005d0:	04 14       	IF !CC JUMP 0x10005d8 <_le_hci_handler+0x38> (BP);
 10005d2:	10 0c       	CC = R0 == 0x2;
 10005d4:	8a 14       	IF !CC JUMP 0x10006e8 <_le_hci_handler+0x148> (BP);
 10005d6:	08 20       	JUMP.S 0x10005e6 <_le_hci_handler+0x46>;
 10005d8:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 10005da:	08 08       	CC = R0 == R1;
 10005dc:	1c 18       	IF CC JUMP 0x1000614 <_le_hci_handler+0x74>;
 10005de:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 10005e0:	08 08       	CC = R0 == R1;
 10005e2:	83 14       	IF !CC JUMP 0x10006e8 <_le_hci_handler+0x148> (BP);
 10005e4:	25 20       	JUMP.S 0x100062e <_le_hci_handler+0x8e>;
 10005e6:	e8 a4       	R0 = W[P5 + 0x6] (Z);
 10005e8:	f0 b0       	[SP + 0xc] = R0;
 10005ea:	a0 e4 0e 00 	R0 = B[P4 + 0xe] (Z);
 10005ee:	30 b1       	[SP + 0x10] = R0;
 10005f0:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 10005f2:	16 20       	JUMP.S 0x100061e <_le_hci_handler+0x7e>;
 10005f4:	e8 a4       	R0 = W[P5 + 0x6] (Z);
 10005f6:	f0 b0       	[SP + 0xc] = R0;
 10005f8:	44 30       	R0 = P4;
 10005fa:	70 64       	R0 += 0xe;		/* ( 14) */
 10005fc:	30 b1       	[SP + 0x10] = R0;
 10005fe:	b4 6c       	P4 += 0x16;		/* ( 22) */
 1000600:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x100000c(16777228) */
 1000604:	74 bd       	[SP + 0x14] = P4;
 1000606:	01 e1 8c 0a 	R1.L = 0xa8c;		/* (2700)	R1=0x1000a8c(16779916) */
 100060a:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 100060c:	f0 61       	R0 = 0x3e (X);		/*		R0=0x3e( 62) */
 100060e:	ff e3 03 fe 	CALL 0x1000214 <_le_send_event>;
 1000612:	6b 20       	JUMP.S 0x10006e8 <_le_hci_handler+0x148>;
 1000614:	e8 a4       	R0 = W[P5 + 0x6] (Z);
 1000616:	f0 b0       	[SP + 0xc] = R0;
 1000618:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100061a:	30 b1       	[SP + 0x10] = R0;
 100061c:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 100061e:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000a8c(16779916) */
 1000622:	01 e1 88 0a 	R1.L = 0xa88;		/* (2696)	R1=0x1000a88(16779912) */
 1000626:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1000628:	ff e3 f6 fd 	CALL 0x1000214 <_le_send_event>;
 100062c:	5e 20       	JUMP.S 0x10006e8 <_le_hci_handler+0x148>;
 100062e:	a8 e4 01 00 	R0 = B[P5 + 0x1] (Z);
 1000632:	00 0c       	CC = R0 == 0x0;
 1000634:	5a 14       	IF !CC JUMP 0x10006e8 <_le_hci_handler+0x148> (BP);
 1000636:	f0 b0       	[SP + 0xc] = R0;
 1000638:	70 b1       	[SP + 0x14] = R0;
 100063a:	a8 e4 27 00 	R0 = B[P5 + 0x27] (Z);
 100063e:	b0 b1       	[SP + 0x18] = R0;
 1000640:	45 30       	R0 = P5;
 1000642:	40 65       	R0 += 0x28;		/* ( 40) */
 1000644:	f0 b1       	[SP + 0x1c] = R0;
 1000646:	68 e4 19 00 	R0 = W[P5 + 0x32] (Z);
 100064a:	30 b2       	[SP + 0x20] = R0;
 100064c:	68 e4 1a 00 	R0 = W[P5 + 0x34] (Z);
 1000650:	70 b2       	[SP + 0x24] = R0;
 1000652:	68 e4 1b 00 	R0 = W[P5 + 0x36] (Z);
 1000656:	e9 a4       	R1 = W[P5 + 0x6] (Z);
 1000658:	b0 b2       	[SP + 0x28] = R0;
 100065a:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 100065e:	31 b1       	[SP + 0x10] = R1;
 1000660:	f0 b2       	[SP + 0x2c] = R0;
 1000662:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000a88(16779912) */
 1000666:	01 e1 7c 0a 	R1.L = 0xa7c;		/* (2684)	R1=0x1000a7c(16779900) */
 100066a:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100066c:	f0 61       	R0 = 0x3e (X);		/*		R0=0x3e( 62) */
 100066e:	ff e3 d3 fd 	CALL 0x1000214 <_le_send_event>;
 1000672:	3b 20       	JUMP.S 0x10006e8 <_le_hci_handler+0x148>;
 1000674:	f9 67       	R1 += -0x1;		/* ( -1) */
 1000676:	49 43       	R1 = R1.B (Z);
 1000678:	09 0e       	CC = R1 <= 0x1 (IU);
 100067a:	37 14       	IF !CC JUMP 0x10006e8 <_le_hci_handler+0x148> (BP);
 100067c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x16c */
 1000680:	a1 e4 06 00 	R1 = B[P4 + 0x6] (Z);
 1000684:	0a e1 b8 45 	P2.L = 0x45b8;		/* (17848)	P2=0x45b8 <_hci_rx_buf> */
 1000688:	29 64       	R1 += 0x5;		/* (  5) */
 100068a:	10 91       	R0 = [P2];
 100068c:	00 e3 c2 6f 	CALL 0x100e610 <_lbuf_alloc>;
 1000690:	18 32       	P3 = R0;
 1000692:	a0 e5 06 00 	R0 = B[P4 + 0x6] (X);
 1000696:	18 9b       	B[P3] = R0;
 1000698:	a8 e5 06 00 	R0 = B[P5 + 0x6] (X);
 100069c:	98 e6 01 00 	B[P3 + 0x1] = R0;
 10006a0:	a0 e4 02 00 	R0 = B[P4 + 0x2] (Z);
 10006a4:	08 0c       	CC = R0 == 0x1;
 10006a6:	05 14       	IF !CC JUMP 0x10006b0 <_le_hci_handler+0x110> (BP);
 10006a8:	a8 e4 07 00 	R0 = B[P5 + 0x7] (Z);
 10006ac:	20 4a       	BITSET (R0, 0x4);		/* bit  4 */
 10006ae:	06 20       	JUMP.S 0x10006ba <_le_hci_handler+0x11a>;
 10006b0:	10 0c       	CC = R0 == 0x2;
 10006b2:	06 14       	IF !CC JUMP 0x10006be <_le_hci_handler+0x11e> (BP);
 10006b4:	a8 e4 07 00 	R0 = B[P5 + 0x7] (Z);
 10006b8:	28 4a       	BITSET (R0, 0x5);		/* bit  5 */
 10006ba:	98 e6 02 00 	B[P3 + 0x2] = R0;
 10006be:	4c 30       	R1 = P4;
 10006c0:	a0 e5 06 00 	R0 = B[P4 + 0x6] (X);
 10006c4:	98 e6 03 00 	B[P3 + 0x3] = R0;
 10006c8:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10006ca:	98 e6 04 00 	B[P3 + 0x4] = R0;
 10006ce:	43 30       	R0 = P3;
 10006d0:	a2 e4 06 00 	R2 = B[P4 + 0x6] (Z);
 10006d4:	28 64       	R0 += 0x5;		/* (  5) */
 10006d6:	69 64       	R1 += 0xd;		/* ( 13) */
 10006d8:	00 e3 16 7b 	CALL 0x100fd04 <_memcpy>;
 10006dc:	43 30       	R0 = P3;
 10006de:	01 e8 00 00 	UNLINK;
 10006e2:	83 04       	(P5:3) = [SP++];
 10006e4:	00 e2 e2 6f 	JUMP.L 0x100e6a8 <_lbuf_push>;
 10006e8:	01 e8 00 00 	UNLINK;
 10006ec:	83 04       	(P5:3) = [SP++];
 10006ee:	10 00       	RTS;

010006f0 <_le_hci_push_command>:
 10006f0:	68 05       	[--SP] = (R7:5);
 10006f2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45b8 <_hci_rx_buf> */
 10006f6:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10006fa:	0a e1 b4 45 	P2.L = 0x45b4;		/* (17844)	P2=0x45b4 <_hci_cmd_ptr> */
 10006fe:	28 30       	R5 = R0;
 1000700:	39 30       	R7 = R1;
 1000702:	11 64       	R1 += 0x2;		/* (  2) */
 1000704:	10 91       	R0 = [P2];
 1000706:	00 e3 85 6f 	CALL 0x100e610 <_lbuf_alloc>;
 100070a:	30 30       	R6 = R0;
 100070c:	00 0c       	CC = R0 == 0x0;
 100070e:	0d 18       	IF CC JUMP 0x1000728 <_le_hci_push_command+0x38>;
 1000710:	16 32       	P2 = R6;
 1000712:	0d 30       	R1 = R5;
 1000714:	17 30       	R2 = R7;
 1000716:	17 96       	W[P2++] = R7;
 1000718:	42 30       	R0 = P2;
 100071a:	00 e3 f5 7a 	CALL 0x100fd04 <_memcpy>;
 100071e:	06 30       	R0 = R6;
 1000720:	00 e3 c4 6f 	CALL 0x100e6a8 <_lbuf_push>;
 1000724:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1000726:	02 20       	JUMP.S 0x100072a <_le_hci_push_command+0x3a>;
 1000728:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100072a:	01 e8 00 00 	UNLINK;
 100072e:	28 05       	(R7:5) = [SP++];
 1000730:	10 00       	RTS;
	...

01000734 <_le_hci_push_data>:
 1000734:	fd 05       	[--SP] = (R7:7, P5:5);
 1000736:	28 32       	P5 = R0;
 1000738:	39 30       	R7 = R1;
 100073a:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100073e:	a8 e4 01 00 	R0 = B[P5 + 0x1] (Z);
 1000742:	29 99       	R1 = B[P5] (Z);
 1000744:	40 4f       	R0 <<= 0x8;
 1000746:	08 56       	R0 = R0 | R1;
 1000748:	21 e1 ff 0f 	R1 = 0xfff (X);		/*		R1=0xfff(4095) */
 100074c:	08 54       	R0 = R0 & R1;
 100074e:	00 e3 29 07 	CALL 0x10015a0 <_ll_link_for_handle>;
 1000752:	00 0c       	CC = R0 == 0x0;
 1000754:	08 14       	IF !CC JUMP 0x1000764 <_le_hci_push_data+0x30> (BP);
 1000756:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100ffff(16842751) */
 100075a:	00 e1 98 0a 	R0.L = 0xa98;		/* (2712)	R0=0x1000a98(16779928) */
 100075e:	00 e3 2d 74 	CALL 0x100efb8 <_puts>;
 1000762:	00 20       	JUMP.S 0x1000762 <_le_hci_push_data+0x2e>;
 1000764:	4d 30       	R1 = P5;
 1000766:	17 30       	R2 = R7;
 1000768:	01 e8 00 00 	UNLINK;
 100076c:	21 64       	R1 += 0x4;		/* (  4) */
 100076e:	e2 67       	R2 += -0x4;		/* ( -4) */
 1000770:	bd 05       	(R7:7, P5:5) = [SP++];
 1000772:	00 e2 01 08 	JUMP.L 0x1001774 <_ll_send_acl_packet>;
	...

01000778 <_ble_hci_h4_download_data>:
 1000778:	68 05       	[--SP] = (R7:5);
 100077a:	28 30       	R5 = R0;
 100077c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000a98(16779928) */
 1000780:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1000784:	31 30       	R6 = R1;
 1000786:	3a 30       	R7 = R2;
 1000788:	00 e1 b4 0a 	R0.L = 0xab4;		/* (2740)	R0=0x1000ab4(16779956) */
 100078c:	00 e3 16 74 	CALL 0x100efb8 <_puts>;
 1000790:	0d 0c       	CC = R5 == 0x1;
 1000792:	12 14       	IF !CC JUMP 0x10007b6 <_ble_hci_h4_download_data+0x3e> (BP);
 1000794:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000ab4(16779956) */
 1000798:	00 e1 c0 0a 	R0.L = 0xac0;		/* (2752)	R0=0x1000ac0(16779968) */
 100079c:	00 e3 0e 74 	CALL 0x100efb8 <_puts>;
 10007a0:	0f 30       	R1 = R7;
 10007a2:	06 30       	R0 = R6;
 10007a4:	00 e3 3c 6d 	CALL 0x100e21c <_printf_buf>;
 10007a8:	06 30       	R0 = R6;
 10007aa:	0f 30       	R1 = R7;
 10007ac:	01 e8 00 00 	UNLINK;
 10007b0:	28 05       	(R7:5) = [SP++];
 10007b2:	ff e2 9f ff 	JUMP.L 0x10006f0 <_le_hci_push_command>;
 10007b6:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000ac0(16779968) */
 10007ba:	00 e1 c8 0a 	R0.L = 0xac8;		/* (2760)	R0=0x1000ac8(16779976) */
 10007be:	00 e3 fd 73 	CALL 0x100efb8 <_puts>;
 10007c2:	0f 30       	R1 = R7;
 10007c4:	06 30       	R0 = R6;
 10007c6:	00 e3 2b 6d 	CALL 0x100e21c <_printf_buf>;
 10007ca:	06 30       	R0 = R6;
 10007cc:	0f 30       	R1 = R7;
 10007ce:	01 e8 00 00 	UNLINK;
 10007d2:	28 05       	(R7:5) = [SP++];
 10007d4:	ff e2 b0 ff 	JUMP.L 0x1000734 <_le_hci_push_data>;

010007d8 <_hci_firmware_init>:
 10007d8:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0xac8(2760) */
 10007dc:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10007e0:	21 e1 00 02 	R1 = 0x200 (X);		/*		R1=0x200(512) */
 10007e4:	00 e1 68 10 	R0.L = 0x1068;		/* (4200)	R0=0x1068 <_bredr_base_addr>(4200) */
 10007e8:	00 e3 f4 6e 	CALL 0x100e5d0 <_lbuf_init>;
 10007ec:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45b4 <_hci_cmd_ptr> */
 10007f0:	0a e1 b4 45 	P2.L = 0x45b4;		/* (17844)	P2=0x45b4 <_hci_cmd_ptr> */
 10007f4:	10 93       	[P2] = R0;
 10007f6:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x1068 <_bredr_base_addr>(4200) */
 10007fa:	21 e1 00 02 	R1 = 0x200 (X);		/*		R1=0x200(512) */
 10007fe:	00 e1 68 12 	R0.L = 0x1268;		/* (4712)	R0=0x1268(4712) */
 1000802:	00 e3 e7 6e 	CALL 0x100e5d0 <_lbuf_init>;
 1000806:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45b4 <_hci_cmd_ptr> */
 100080a:	0a e1 20 45 	P2.L = 0x4520;		/* (17696)	P2=0x4520 <_hci_event_buf> */
 100080e:	10 93       	[P2] = R0;
 1000810:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x1268(4712) */
 1000814:	21 e1 00 04 	R1 = 0x400 (X);		/*		R1=0x400(1024) */
 1000818:	00 e1 68 14 	R0.L = 0x1468;		/* (5224)	R0=0x1468(5224) */
 100081c:	00 e3 da 6e 	CALL 0x100e5d0 <_lbuf_init>;
 1000820:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4520 <_hci_event_buf> */
 1000824:	0a e1 b8 45 	P2.L = 0x45b8;		/* (17848)	P2=0x45b8 <_hci_rx_buf> */
 1000828:	10 93       	[P2] = R0;
 100082a:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x1468(5224) */
 100082e:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000400(16778240) */
 1000832:	00 e1 68 18 	R0.L = 0x1868;		/* (6248)	R0=0x1868 <_hci_thread>(6248) */
 1000836:	01 e1 a0 02 	R1.L = 0x2a0;		/* (672)	R1=0x10002a0 <_hci_thread_process>(16777888) */
 100083a:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100083c:	01 e8 00 00 	UNLINK;
 1000840:	00 e2 c2 74 	JUMP.L 0x100f1c4 <_thread_create>;

01000844 <_debug_link>:
 1000844:	10 32       	P2 = R0;
 1000846:	fd 05       	[--SP] = (R7:7, P5:5);
 1000848:	00 e8 07 00 	LINK 0x1c;		/* (28) */
 100084c:	97 e4 03 00 	R7 = B[P2 + 0x3] (Z);
 1000850:	90 e4 04 00 	R0 = B[P2 + 0x4] (Z);
 1000854:	47 4f       	R7 <<= 0x8;
 1000856:	c7 57       	R7 = R7 | R0;
 1000858:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1001868(16783464) */
 100085c:	0f 30       	R1 = R7;
 100085e:	00 e1 d0 0a 	R0.L = 0xad0;		/* (2768)	R0=0x1000ad0(16779984) */
 1000862:	00 e3 8f 73 	CALL 0x100ef80 <_printf>;
 1000866:	07 30       	R0 = R7;
 1000868:	00 e3 9c 06 	CALL 0x10015a0 <_ll_link_for_handle>;
 100086c:	28 32       	P5 = R0;
 100086e:	45 0c       	CC = P5 == 0x0;
 1000870:	08 14       	IF !CC JUMP 0x1000880 <_debug_link+0x3c> (BP);
 1000872:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000ad0(16779984) */
 1000876:	00 e1 98 0a 	R0.L = 0xa98;		/* (2712)	R0=0x1000a98(16779928) */
 100087a:	00 e3 9f 73 	CALL 0x100efb8 <_puts>;
 100087e:	00 20       	JUMP.S 0x100087e <_debug_link+0x3a>;
 1000880:	80 61       	R0 = 0x30 (X);		/*		R0=0x30( 48) */
 1000882:	e8 b4       	W[P5 + 0x6] = R0;
 1000884:	a9 e4 20 00 	R1 = B[P5 + 0x20] (Z);
 1000888:	aa e4 21 00 	R2 = B[P5 + 0x21] (Z);
 100088c:	a8 e4 22 00 	R0 = B[P5 + 0x22] (Z);
 1000890:	f0 b0       	[SP + 0xc] = R0;
 1000892:	a8 e4 23 00 	R0 = B[P5 + 0x23] (Z);
 1000896:	30 b1       	[SP + 0x10] = R0;
 1000898:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000030(16777264) */
 100089c:	00 e1 e4 0a 	R0.L = 0xae4;		/* (2788)	R0=0x1000ae4(16780004) */
 10008a0:	00 e3 70 73 	CALL 0x100ef80 <_printf>;
 10008a4:	aa e4 25 00 	R2 = B[P5 + 0x25] (Z);
 10008a8:	a9 e4 24 00 	R1 = B[P5 + 0x24] (Z);
 10008ac:	a8 e4 26 00 	R0 = B[P5 + 0x26] (Z);
 10008b0:	f0 b0       	[SP + 0xc] = R0;
 10008b2:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000ae4(16780004) */
 10008b6:	00 e1 0c 0b 	R0.L = 0xb0c;		/* (2828)	R0=0x1000b0c(16780044) */
 10008ba:	00 e3 63 73 	CALL 0x100ef80 <_printf>;
 10008be:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000b0c(16780044) */
 10008c2:	a9 e4 27 00 	R1 = B[P5 + 0x27] (Z);
 10008c6:	00 e1 34 0b 	R0.L = 0xb34;		/* (2868)	R0=0x1000b34(16780084) */
 10008ca:	00 e3 5b 73 	CALL 0x100ef80 <_printf>;
 10008ce:	aa e4 29 00 	R2 = B[P5 + 0x29] (Z);
 10008d2:	a9 e4 28 00 	R1 = B[P5 + 0x28] (Z);
 10008d6:	a8 e4 2a 00 	R0 = B[P5 + 0x2a] (Z);
 10008da:	f0 b0       	[SP + 0xc] = R0;
 10008dc:	a8 e4 2b 00 	R0 = B[P5 + 0x2b] (Z);
 10008e0:	30 b1       	[SP + 0x10] = R0;
 10008e2:	a8 e4 2c 00 	R0 = B[P5 + 0x2c] (Z);
 10008e6:	70 b1       	[SP + 0x14] = R0;
 10008e8:	a8 e4 2d 00 	R0 = B[P5 + 0x2d] (Z);
 10008ec:	b0 b1       	[SP + 0x18] = R0;
 10008ee:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000b34(16780084) */
 10008f2:	00 e1 5c 0b 	R0.L = 0xb5c;		/* (2908)	R0=0x1000b5c(16780124) */
 10008f6:	00 e3 45 73 	CALL 0x100ef80 <_printf>;
 10008fa:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000b5c(16780124) */
 10008fe:	a9 e4 2e 00 	R1 = B[P5 + 0x2e] (Z);
 1000902:	00 e1 98 0b 	R0.L = 0xb98;		/* (2968)	R0=0x1000b98(16780184) */
 1000906:	00 e3 3d 73 	CALL 0x100ef80 <_printf>;
 100090a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000b98(16780184) */
 100090e:	69 e4 18 00 	R1 = W[P5 + 0x30] (Z);
 1000912:	00 e1 b8 0b 	R0.L = 0xbb8;		/* (3000)	R0=0x1000bb8(16780216) */
 1000916:	00 e3 35 73 	CALL 0x100ef80 <_printf>;
 100091a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000bb8(16780216) */
 100091e:	69 e4 19 00 	R1 = W[P5 + 0x32] (Z);
 1000922:	00 e1 d8 0b 	R0.L = 0xbd8;		/* (3032)	R0=0x1000bd8(16780248) */
 1000926:	00 e3 2d 73 	CALL 0x100ef80 <_printf>;
 100092a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000bd8(16780248) */
 100092e:	69 e4 1a 00 	R1 = W[P5 + 0x34] (Z);
 1000932:	00 e1 f8 0b 	R0.L = 0xbf8;		/* (3064)	R0=0x1000bf8(16780280) */
 1000936:	00 e3 25 73 	CALL 0x100ef80 <_printf>;
 100093a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000bf8(16780280) */
 100093e:	69 e4 1b 00 	R1 = W[P5 + 0x36] (Z);
 1000942:	00 e1 18 0c 	R0.L = 0xc18;		/* (3096)	R0=0x1000c18(16780312) */
 1000946:	00 e3 1d 73 	CALL 0x100ef80 <_printf>;
 100094a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000c18(16780312) */
 100094e:	69 e4 1c 00 	R1 = W[P5 + 0x38] (Z);
 1000952:	00 e1 38 0c 	R0.L = 0xc38;		/* (3128)	R0=0x1000c38(16780344) */
 1000956:	00 e3 15 73 	CALL 0x100ef80 <_printf>;
 100095a:	a9 e4 3a 00 	R1 = B[P5 + 0x3a] (Z);
 100095e:	a8 e4 3c 00 	R0 = B[P5 + 0x3c] (Z);
 1000962:	aa e4 3b 00 	R2 = B[P5 + 0x3b] (Z);
 1000966:	f0 b0       	[SP + 0xc] = R0;
 1000968:	a8 e4 3d 00 	R0 = B[P5 + 0x3d] (Z);
 100096c:	30 b1       	[SP + 0x10] = R0;
 100096e:	a8 e4 3e 00 	R0 = B[P5 + 0x3e] (Z);
 1000972:	70 b1       	[SP + 0x14] = R0;
 1000974:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000c38(16780344) */
 1000978:	00 e1 58 0c 	R0.L = 0xc58;		/* (3160)	R0=0x1000c58(16780376) */
 100097c:	00 e3 02 73 	CALL 0x100ef80 <_printf>;
 1000980:	a9 e4 3f 00 	R1 = B[P5 + 0x3f] (Z);
 1000984:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000c58(16780376) */
 1000988:	01 e8 00 00 	UNLINK;
 100098c:	00 e1 8c 0c 	R0.L = 0xc8c;		/* (3212)	R0=0x1000c8c(16780428) */
 1000990:	bd 05       	(R7:7, P5:5) = [SP++];
 1000992:	00 e2 f7 72 	JUMP.L 0x100ef80 <_printf>;
 1000996:	00 00       	NOP;
 1000998:	41 53       	R5 = R1 - R0;
 100099a:	53 45       	P3 += P2 (BREV);
 100099c:	52 54       	R1 = R2 & R2;
 100099e:	2d 46       	ILLEGAL;
 10009a0:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 10009a2:	4c 44       	P4 = P1 << 0x2;
 10009a4:	3a 20       	JUMP.S 0x1000a18 <_debug_link+0x1d4>;
 10009a6:	65 76       	ILLEGAL;
 10009a8:	65 6e       	P5 += -0x34;		/* (-52) */
 10009aa:	74 21       	JUMP.S 0x1000c92 <_debug_link+0x44e>;
 10009ac:	3d 20       	JUMP.S 0x1000a26 <_debug_link+0x1e2>;
 10009ae:	4e 55       	R5 = R6 & R1;
 10009b0:	4c 4c       	BITCLR (R4, 0x9);		/* bit  9 */
 10009b2:	0a 25       	JUMP.S 0x10013c6 <_ll_rx_handler+0x22a>;
 10009b4:	64 2c       	JUMP.S 0x100027c <_ctrl_baseband_cmd_handler+0x34>;
 10009b6:	20 25       	JUMP.S 0x10013f6 <_ll_rx_handler+0x25a>;
 10009b8:	73 0a       	CC = P3 <= SP (IU);
 10009ba:	00 00       	NOP;
 10009bc:	41 53       	R5 = R1 - R0;
 10009be:	53 45       	P3 += P2 (BREV);
 10009c0:	52 54       	R1 = R2 & R2;
 10009c2:	2d 46       	ILLEGAL;
 10009c4:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 10009c6:	4c 44       	P4 = P1 << 0x2;
 10009c8:	3a 20       	JUMP.S 0x1000a3c <_debug_link+0x1f8>;
 10009ca:	65 76       	ILLEGAL;
 10009cc:	65 6e       	P5 += -0x34;		/* (-52) */
 10009ce:	74 20       	JUMP.S 0x1000ab6 <_debug_link+0x272>;
 10009d0:	21 3d       	LT1 = A0.W;
 10009d2:	20 4e       	R0 >>= 0x4;
 10009d4:	55 4c       	BITCLR (R5, 0xa);		/* bit 10 */
 10009d6:	4c 00       	ILLEGAL;
 10009d8:	65 6d       	P5 += 0x2c;		/* ( 44) */
 10009da:	69 74       	ILLEGAL;
 10009dc:	5f 65       	R7 += 0x2b;		/* ( 43) */
 10009de:	76 65       	R6 += 0x2e;		/* ( 46) */
 10009e0:	6e 74       	ILLEGAL;
 10009e2:	0a 00       	ILLEGAL;
 10009e4:	0a 42       	DIVQ (R2, R1);
 10009e6:	4c 45       	P4 += P1 (BREV);
 10009e8:	20 52       	R0 = R0 - R4;
 10009ea:	58 20       	JUMP.S 0x1000a9a <_debug_link+0x256>;
 10009ec:	3a 20       	JUMP.S 0x1000a60 <_debug_link+0x21c>;
 10009ee:	43 4d       	R3 >>>= 0x8;
 10009f0:	44 20       	JUMP.S 0x1000a78 <_debug_link+0x234>;
 10009f2:	00 00       	NOP;
 10009f4:	68 63       	R0 = -0x13 (X);		/*		R0=0xffffffed(-19) */
 10009f6:	69 5f       	P5 = P1 + (P5 << 0x2);
 10009f8:	6c 65       	R4 += 0x2d;		/* ( 45) */
 10009fa:	3a 20       	JUMP.S 0x1000a6e <_debug_link+0x22a>;
 10009fc:	72 65       	R2 += 0x2e;		/* ( 46) */
 10009fe:	61 64       	R1 += 0xc;		/* ( 12) */
 1000a00:	5f 62       	R7 = -0x35 (X);		/*		R7=0xffffffcb(-53) */
 1000a02:	64 5f       	P5 = P4 + (P4 << 0x2);
 1000a04:	61 64       	R1 += 0xc;		/* ( 12) */
 1000a06:	64 72       	ILLEGAL;
 1000a08:	0a 00       	ILLEGAL;
 1000a0a:	00 00       	NOP;
 1000a0c:	31 41       	R1 = (R1 + R6) << 0x1;
 1000a0e:	00 00       	NOP;
 1000a10:	31 32       	SP = R1;
 1000a12:	31 00       	CLI R1;
 1000a14:	6c 6c       	P4 += 0xd;		/* ( 13) */
 1000a16:	20 61       	R0 = 0x24 (X);		/*		R0=0x24( 36) */
 1000a18:	64 76       	ILLEGAL;
 1000a1a:	65 72       	ILLEGAL;
 1000a1c:	73 74       	ILLEGAL;
 1000a1e:	69 6e       	P1 += -0x33;		/* (-51) */
 1000a20:	67 0a       	CC = FP <= P4 (IU);
 1000a22:	00 00       	NOP;
 1000a24:	68 63       	R0 = -0x13 (X);		/*		R0=0xffffffed(-19) */
 1000a26:	69 5f       	P5 = P1 + (P5 << 0x2);
 1000a28:	6c 65       	R4 += 0x2d;		/* ( 45) */
 1000a2a:	5f 65       	R7 += 0x2b;		/* ( 43) */
 1000a2c:	6e 63       	R6 = -0x13 (X);		/*		R6=0xffffffed(-19) */
 1000a2e:	72 79       	ILLEGAL;
 1000a30:	70 74       	ILLEGAL;
 1000a32:	0a 00       	ILLEGAL;
 1000a34:	31 63       	R1 = -0x1a (X);		/*		R1=0xffffffe6(-26) */
 1000a36:	31 36       	L2 = R1;
 1000a38:	00 00       	NOP;
 1000a3a:	00 00       	NOP;
 1000a3c:	68 63       	R0 = -0x13 (X);		/*		R0=0xffffffed(-19) */
 1000a3e:	69 5f       	P5 = P1 + (P5 << 0x2);
 1000a40:	6c 65       	R4 += 0x2d;		/* ( 45) */
 1000a42:	5f 72       	ILLEGAL;
 1000a44:	61 6e       	P1 += -0x34;		/* (-52) */
 1000a46:	64 0a       	CC = P4 <= P4 (IU);
 1000a48:	00 00       	NOP;
 1000a4a:	00 00       	NOP;
 1000a4c:	31 63       	R1 = -0x1a (X);		/*		R1=0xffffffe6(-26) */
 1000a4e:	30 38       	ASTAT = R0;
 1000a50:	00 00       	NOP;
 1000a52:	00 00       	NOP;
 1000a54:	31 32       	SP = R1;
 1000a56:	00 00       	NOP;
 1000a58:	0a 42       	DIVQ (R2, R1);
 1000a5a:	4c 45       	P4 += P1 (BREV);
 1000a5c:	20 52       	R0 = R0 - R4;
 1000a5e:	58 20       	JUMP.S 0x1000b0e <_debug_link+0x2ca>;
 1000a60:	3a 20       	JUMP.S 0x1000ad4 <_debug_link+0x290>;
 1000a62:	45 56       	R1 = R5 | R0;
 1000a64:	45 4e       	R5 >>= 0x8;
 1000a66:	54 20       	JUMP.S 0x1000b0e <_debug_link+0x2ca>;
 1000a68:	00 00       	NOP;
 1000a6a:	00 00       	NOP;
 1000a6c:	0a 42       	DIVQ (R2, R1);
 1000a6e:	4c 45       	P4 += P1 (BREV);
 1000a70:	20 52       	R0 = R0 - R4;
 1000a72:	58 20       	JUMP.S 0x1000b22 <_debug_link+0x2de>;
 1000a74:	3a 20       	JUMP.S 0x1000ae8 <_debug_link+0x2a4>;
 1000a76:	44 41       	R4 = (R4 + R0) << 0x2;
 1000a78:	54 41       	R4 = (R4 + R2) << 0x2;
 1000a7a:	20 00       	IDLE;
 1000a7c:	31 31       	R6 = A0.W;
 1000a7e:	48 31       	ILLEGAL;
 1000a80:	31 41       	R1 = (R1 + R6) << 0x1;
 1000a82:	32 32       	SP = R2;
 1000a84:	32 31       	R6 = A1.X;
 1000a86:	00 00       	NOP;
 1000a88:	31 48       	CC = !BITTST (R1, 0x6);		/* bit  6 */
 1000a8a:	31 00       	CLI R1;
 1000a8c:	31 48       	CC = !BITTST (R1, 0x6);		/* bit  6 */
 1000a8e:	63 30       	R4 = P3;
 1000a90:	38 63       	R0 = -0x19 (X);		/*		R0=0xffffffe7(-25) */
 1000a92:	30 32       	SP = R0;
 1000a94:	00 00       	NOP;
 1000a96:	00 00       	NOP;
 1000a98:	41 53       	R5 = R1 - R0;
 1000a9a:	53 45       	P3 += P2 (BREV);
 1000a9c:	52 54       	R1 = R2 & R2;
 1000a9e:	2d 46       	ILLEGAL;
 1000aa0:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 1000aa2:	4c 44       	P4 = P1 << 0x2;
 1000aa4:	3a 20       	JUMP.S 0x1000b18 <_debug_link+0x2d4>;
 1000aa6:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 1000aa8:	6e 6b       	SP = -0x13 (X);		/*		SP=0xffffffed(-19) */
 1000aaa:	20 21       	JUMP.S 0x1000cea <_debug_link+0x4a6>;
 1000aac:	3d 20       	JUMP.S 0x1000b26 <_debug_link+0x2e2>;
 1000aae:	4e 55       	R5 = R6 & R1;
 1000ab0:	4c 4c       	BITCLR (R4, 0x9);		/* bit  9 */
 1000ab2:	00 00       	NOP;
 1000ab4:	0a 42       	DIVQ (R2, R1);
 1000ab6:	4c 45       	P4 += P1 (BREV);
 1000ab8:	20 54       	R0 = R0 & R4;
 1000aba:	58 20       	JUMP.S 0x1000b6a <_debug_link+0x326>;
 1000abc:	3a 20       	JUMP.S 0x1000b30 <_debug_link+0x2ec>;
 1000abe:	00 00       	NOP;
 1000ac0:	43 4d       	R3 >>>= 0x8;
 1000ac2:	44 20       	JUMP.S 0x1000b4a <_debug_link+0x306>;
 1000ac4:	00 00       	NOP;
 1000ac6:	00 00       	NOP;
 1000ac8:	44 41       	R4 = (R4 + R0) << 0x2;
 1000aca:	54 41       	R4 = (R4 + R2) << 0x2;
 1000acc:	20 00       	IDLE;
 1000ace:	00 00       	NOP;
 1000ad0:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 1000ad2:	6e 6b       	SP = -0x13 (X);		/*		SP=0xffffffed(-19) */
 1000ad4:	20 68       	P0 = 0x4 (X);		/*		P0=0x4(  4) */
 1000ad6:	61 6e       	P1 += -0x34;		/* (-52) */
 1000ad8:	64 6c       	P4 += 0xc;		/* ( 12) */
 1000ada:	65 20       	JUMP.S 0x1000ba4 <_debug_link+0x360>;
 1000adc:	3a 20       	JUMP.S 0x1000b50 <_debug_link+0x30c>;
 1000ade:	25 30       	R4 = R5;
 1000ae0:	34 78       	ILLEGAL;
 1000ae2:	0a 00       	ILLEGAL;
 1000ae4:	63 6f       	P3 += -0x14;		/* (-20) */
 1000ae6:	6e 6e       	SP += -0x33;		/* (-51) */
 1000ae8:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1000aea:	74 20       	JUMP.S 0x1000bd2 <_debug_link+0x38e>;
 1000aec:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1000aee:	72 61       	R2 = 0x2e (X);		/*		R2=0x2e( 46) */
 1000af0:	6d 20       	JUMP.S 0x1000bca <_debug_link+0x386>;
 1000af2:	61 61       	R1 = 0x2c (X);		/*		R1=0x2c( 44) */
 1000af4:	20 3a       	ILLEGAL;
 1000af6:	20 25       	JUMP.S 0x1001536 <_ll_rx_handler+0x39a>;
 1000af8:	30 32       	SP = R0;
 1000afa:	78 20       	JUMP.S 0x1000bea <_debug_link+0x3a6>;
 1000afc:	25 30       	R4 = R5;
 1000afe:	32 78       	ILLEGAL;
 1000b00:	20 25       	JUMP.S 0x1001540 <_ll_rx_handler+0x3a4>;
 1000b02:	30 32       	SP = R0;
 1000b04:	78 20       	JUMP.S 0x1000bf4 <_debug_link+0x3b0>;
 1000b06:	25 30       	R4 = R5;
 1000b08:	32 78       	ILLEGAL;
 1000b0a:	0a 00       	ILLEGAL;
 1000b0c:	63 6f       	P3 += -0x14;		/* (-20) */
 1000b0e:	6e 6e       	SP += -0x33;		/* (-51) */
 1000b10:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1000b12:	74 20       	JUMP.S 0x1000bfa <_debug_link+0x3b6>;
 1000b14:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1000b16:	72 61       	R2 = 0x2e (X);		/*		R2=0x2e( 46) */
 1000b18:	6d 20       	JUMP.S 0x1000bf2 <_debug_link+0x3ae>;
 1000b1a:	63 72       	ILLEGAL;
 1000b1c:	63 69       	P3 = 0x2c (X);		/*		P3=0x2c( 44) */
 1000b1e:	6e 74       	ILLEGAL;
 1000b20:	20 3a       	ILLEGAL;
 1000b22:	20 25       	JUMP.S 0x1001562 <_ll_rx_handler+0x3c6>;
 1000b24:	30 32       	SP = R0;
 1000b26:	78 20       	JUMP.S 0x1000c16 <_debug_link+0x3d2>;
 1000b28:	25 30       	R4 = R5;
 1000b2a:	32 78       	ILLEGAL;
 1000b2c:	20 25       	JUMP.S 0x100156c <_ll_rx_handler+0x3d0>;
 1000b2e:	30 32       	SP = R0;
 1000b30:	78 0a       	CC = P0 <= FP (IU);
 1000b32:	00 00       	NOP;
 1000b34:	63 6f       	P3 += -0x14;		/* (-20) */
 1000b36:	6e 6e       	SP += -0x33;		/* (-51) */
 1000b38:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1000b3a:	74 20       	JUMP.S 0x1000c22 <_debug_link+0x3de>;
 1000b3c:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1000b3e:	72 61       	R2 = 0x2e (X);		/*		R2=0x2e( 46) */
 1000b40:	6d 20       	JUMP.S 0x1000c1a <_debug_link+0x3d6>;
 1000b42:	70 65       	R0 += 0x2e;		/* ( 46) */
 1000b44:	65 72       	ILLEGAL;
 1000b46:	5f 61       	R7 = 0x2b (X);		/*		R7=0x2b( 43) */
 1000b48:	64 64       	R4 += 0xc;		/* ( 12) */
 1000b4a:	72 5f       	P5 = P2 + (SP << 0x2);
 1000b4c:	74 79       	ILLEGAL;
 1000b4e:	70 65       	R0 += 0x2e;		/* ( 46) */
 1000b50:	20 3a       	ILLEGAL;
 1000b52:	20 25       	JUMP.S 0x1001592 <_aes128_start+0xa>;
 1000b54:	30 32       	SP = R0;
 1000b56:	78 0a       	CC = P0 <= FP (IU);
 1000b58:	00 00       	NOP;
 1000b5a:	00 00       	NOP;
 1000b5c:	63 6f       	P3 += -0x14;		/* (-20) */
 1000b5e:	6e 6e       	SP += -0x33;		/* (-51) */
 1000b60:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1000b62:	74 20       	JUMP.S 0x1000c4a <_debug_link+0x406>;
 1000b64:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1000b66:	72 61       	R2 = 0x2e (X);		/*		R2=0x2e( 46) */
 1000b68:	6d 20       	JUMP.S 0x1000c42 <_debug_link+0x3fe>;
 1000b6a:	70 65       	R0 += 0x2e;		/* ( 46) */
 1000b6c:	65 72       	ILLEGAL;
 1000b6e:	5f 61       	R7 = 0x2b (X);		/*		R7=0x2b( 43) */
 1000b70:	64 64       	R4 += 0xc;		/* ( 12) */
 1000b72:	72 20       	JUMP.S 0x1000c56 <_debug_link+0x412>;
 1000b74:	3a 20       	JUMP.S 0x1000be8 <_debug_link+0x3a4>;
 1000b76:	25 30       	R4 = R5;
 1000b78:	32 78       	ILLEGAL;
 1000b7a:	20 25       	JUMP.S 0x10015ba <_ll_link_for_handle+0x1a>;
 1000b7c:	30 32       	SP = R0;
 1000b7e:	78 20       	JUMP.S 0x1000c6e <_debug_link+0x42a>;
 1000b80:	25 30       	R4 = R5;
 1000b82:	32 78       	ILLEGAL;
 1000b84:	20 25       	JUMP.S 0x10015c4 <_ll_link_for_handle+0x24>;
 1000b86:	30 32       	SP = R0;
 1000b88:	78 20       	JUMP.S 0x1000c78 <_debug_link+0x434>;
 1000b8a:	25 30       	R4 = R5;
 1000b8c:	32 78       	ILLEGAL;
 1000b8e:	20 25       	JUMP.S 0x10015ce <_ll_link_for_handle+0x2e>;
 1000b90:	30 32       	SP = R0;
 1000b92:	78 0a       	CC = P0 <= FP (IU);
 1000b94:	00 00       	NOP;
 1000b96:	00 00       	NOP;
 1000b98:	63 6f       	P3 += -0x14;		/* (-20) */
 1000b9a:	6e 6e       	SP += -0x33;		/* (-51) */
 1000b9c:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1000b9e:	74 20       	JUMP.S 0x1000c86 <_debug_link+0x442>;
 1000ba0:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1000ba2:	72 61       	R2 = 0x2e (X);		/*		R2=0x2e( 46) */
 1000ba4:	6d 20       	JUMP.S 0x1000c7e <_debug_link+0x43a>;
 1000ba6:	77 69       	FP = 0x2e (X);		/*		FP=0x2e( 46) */
 1000ba8:	6e 73       	ILLEGAL;
 1000baa:	69 7a       	ILLEGAL;
 1000bac:	65 20       	JUMP.S 0x1000c76 <_debug_link+0x432>;
 1000bae:	3a 20       	JUMP.S 0x1000c22 <_debug_link+0x3de>;
 1000bb0:	25 30       	R4 = R5;
 1000bb2:	32 78       	ILLEGAL;
 1000bb4:	0a 00       	ILLEGAL;
 1000bb6:	00 00       	NOP;
 1000bb8:	63 6f       	P3 += -0x14;		/* (-20) */
 1000bba:	6e 6e       	SP += -0x33;		/* (-51) */
 1000bbc:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1000bbe:	74 20       	JUMP.S 0x1000ca6 <_debug_link+0x462>;
 1000bc0:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1000bc2:	72 61       	R2 = 0x2e (X);		/*		R2=0x2e( 46) */
 1000bc4:	6d 20       	JUMP.S 0x1000c9e <_debug_link+0x45a>;
 1000bc6:	77 69       	FP = 0x2e (X);		/*		FP=0x2e( 46) */
 1000bc8:	6e 6f       	SP += -0x13;		/* (-19) */
 1000bca:	66 66       	R6 += -0x34;		/* (-52) */
 1000bcc:	73 65       	R3 += 0x2e;		/* ( 46) */
 1000bce:	74 20       	JUMP.S 0x1000cb6 <_debug_link+0x472>;
 1000bd0:	3a 20       	JUMP.S 0x1000c44 <_debug_link+0x400>;
 1000bd2:	25 30       	R4 = R5;
 1000bd4:	34 78       	ILLEGAL;
 1000bd6:	0a 00       	ILLEGAL;
 1000bd8:	63 6f       	P3 += -0x14;		/* (-20) */
 1000bda:	6e 6e       	SP += -0x33;		/* (-51) */
 1000bdc:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1000bde:	74 20       	JUMP.S 0x1000cc6 <_debug_link+0x482>;
 1000be0:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1000be2:	72 61       	R2 = 0x2e (X);		/*		R2=0x2e( 46) */
 1000be4:	6d 20       	JUMP.S 0x1000cbe <_debug_link+0x47a>;
 1000be6:	69 6e       	P1 += -0x33;		/* (-51) */
 1000be8:	74 65       	R4 += 0x2e;		/* ( 46) */
 1000bea:	72 76       	ILLEGAL;
 1000bec:	61 6c       	P1 += 0xc;		/* ( 12) */
 1000bee:	20 3a       	ILLEGAL;
 1000bf0:	20 25       	JUMP.S 0x1001630 <_slave_send_start_enc_req+0x4c>;
 1000bf2:	30 34       	M2 = R0;
 1000bf4:	78 0a       	CC = P0 <= FP (IU);
 1000bf6:	00 00       	NOP;
 1000bf8:	63 6f       	P3 += -0x14;		/* (-20) */
 1000bfa:	6e 6e       	SP += -0x33;		/* (-51) */
 1000bfc:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1000bfe:	74 20       	JUMP.S 0x1000ce6 <_debug_link+0x4a2>;
 1000c00:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1000c02:	72 61       	R2 = 0x2e (X);		/*		R2=0x2e( 46) */
 1000c04:	6d 20       	JUMP.S 0x1000cde <_debug_link+0x49a>;
 1000c06:	6c 61       	R4 = 0x2d (X);		/*		R4=0x2d( 45) */
 1000c08:	74 65       	R4 += 0x2e;		/* ( 46) */
 1000c0a:	6e 63       	R6 = -0x13 (X);		/*		R6=0xffffffed(-19) */
 1000c0c:	79 20       	JUMP.S 0x1000cfe <_debug_link+0x4ba>;
 1000c0e:	3a 20       	JUMP.S 0x1000c82 <_debug_link+0x43e>;
 1000c10:	25 30       	R4 = R5;
 1000c12:	34 78       	ILLEGAL;
 1000c14:	0a 00       	ILLEGAL;
 1000c16:	00 00       	NOP;
 1000c18:	63 6f       	P3 += -0x14;		/* (-20) */
 1000c1a:	6e 6e       	SP += -0x33;		/* (-51) */
 1000c1c:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1000c1e:	74 20       	JUMP.S 0x1000d06 <_debug_link+0x4c2>;
 1000c20:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1000c22:	72 61       	R2 = 0x2e (X);		/*		R2=0x2e( 46) */
 1000c24:	6d 20       	JUMP.S 0x1000cfe <_debug_link+0x4ba>;
 1000c26:	74 69       	P4 = 0x2e (X);		/*		P4=0x2e( 46) */
 1000c28:	6d 65       	R5 += 0x2d;		/* ( 45) */
 1000c2a:	6f 75       	ILLEGAL;
 1000c2c:	74 20       	JUMP.S 0x1000d14 <_debug_link+0x4d0>;
 1000c2e:	3a 20       	JUMP.S 0x1000ca2 <_debug_link+0x45e>;
 1000c30:	25 30       	R4 = R5;
 1000c32:	34 78       	ILLEGAL;
 1000c34:	0a 00       	ILLEGAL;
 1000c36:	00 00       	NOP;
 1000c38:	63 6f       	P3 += -0x14;		/* (-20) */
 1000c3a:	6e 6e       	SP += -0x33;		/* (-51) */
 1000c3c:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1000c3e:	74 20       	JUMP.S 0x1000d26 <_sdp_normalize_uuid+0x2>;
 1000c40:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1000c42:	72 61       	R2 = 0x2e (X);		/*		R2=0x2e( 46) */
 1000c44:	6d 20       	JUMP.S 0x1000d1e <_local_addr+0x2>;
 1000c46:	77 69       	FP = 0x2e (X);		/*		FP=0x2e( 46) */
 1000c48:	6e 64       	R6 += 0xd;		/* ( 13) */
 1000c4a:	65 6e       	P5 += -0x34;		/* (-52) */
 1000c4c:	69 6e       	P1 += -0x33;		/* (-51) */
 1000c4e:	67 20       	JUMP.S 0x1000d1c <_local_addr>;
 1000c50:	3a 20       	JUMP.S 0x1000cc4 <_debug_link+0x480>;
 1000c52:	25 30       	R4 = R5;
 1000c54:	34 78       	ILLEGAL;
 1000c56:	0a 00       	ILLEGAL;
 1000c58:	63 6f       	P3 += -0x14;		/* (-20) */
 1000c5a:	6e 6e       	SP += -0x33;		/* (-51) */
 1000c5c:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1000c5e:	74 20       	JUMP.S 0x1000d46 <_sdp_normalize_uuid+0x22>;
 1000c60:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1000c62:	72 61       	R2 = 0x2e (X);		/*		R2=0x2e( 46) */
 1000c64:	6d 20       	JUMP.S 0x1000d3e <_sdp_normalize_uuid+0x1a>;
 1000c66:	63 68       	P3 = 0xc (X);		/*		P3=0xc( 12) */
 1000c68:	61 6e       	P1 += -0x34;		/* (-52) */
 1000c6a:	6e 65       	R6 += 0x2d;		/* ( 45) */
 1000c6c:	6c 20       	JUMP.S 0x1000d44 <_sdp_normalize_uuid+0x20>;
 1000c6e:	3a 20       	JUMP.S 0x1000ce2 <_debug_link+0x49e>;
 1000c70:	25 30       	R4 = R5;
 1000c72:	32 78       	ILLEGAL;
 1000c74:	20 25       	JUMP.S 0x10016b4 <_ll_open+0x8>;
 1000c76:	30 32       	SP = R0;
 1000c78:	78 20       	JUMP.S 0x1000d68 <_ble_main+0x1c>;
 1000c7a:	25 30       	R4 = R5;
 1000c7c:	32 78       	ILLEGAL;
 1000c7e:	20 25       	JUMP.S 0x10016be <_ll_open+0x12>;
 1000c80:	30 32       	SP = R0;
 1000c82:	78 20       	JUMP.S 0x1000d72 <_ble_main+0x26>;
 1000c84:	25 30       	R4 = R5;
 1000c86:	32 78       	ILLEGAL;
 1000c88:	0a 00       	ILLEGAL;
 1000c8a:	00 00       	NOP;
 1000c8c:	63 6f       	P3 += -0x14;		/* (-20) */
 1000c8e:	6e 6e       	SP += -0x33;		/* (-51) */
 1000c90:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1000c92:	74 20       	JUMP.S 0x1000d7a <_sdp_bluetooth_base_uuid+0x7>;
 1000c94:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1000c96:	72 61       	R2 = 0x2e (X);		/*		R2=0x2e( 46) */
 1000c98:	6d 20       	JUMP.S 0x1000d72 <_ble_main+0x26>;
 1000c9a:	68 6f       	P0 += -0x13;		/* (-19) */
 1000c9c:	70 20       	JUMP.S 0x1000d7c <_sdp_bluetooth_base_uuid+0x9>;
 1000c9e:	3a 20       	JUMP.S 0x1000d12 <_debug_link+0x4ce>;
 1000ca0:	25 30       	R4 = R5;
 1000ca2:	32 78       	ILLEGAL;
 1000ca4:	0a 00       	ILLEGAL;
 1000ca6:	00 00       	NOP;
 1000ca8:	50 03       	CC &= AV0;
 1000caa:	00 01       	ILLEGAL;
 1000cac:	54 04       	ILLEGAL;
 1000cae:	00 01       	ILLEGAL;
 1000cb0:	54 04       	ILLEGAL;
 1000cb2:	00 01       	ILLEGAL;
 1000cb4:	54 04       	ILLEGAL;
 1000cb6:	00 01       	ILLEGAL;
 1000cb8:	44 04       	ILLEGAL;
 1000cba:	00 01       	ILLEGAL;
 1000cbc:	54 04       	ILLEGAL;
 1000cbe:	00 01       	ILLEGAL;
 1000cc0:	44 04       	ILLEGAL;
 1000cc2:	00 01       	ILLEGAL;
 1000cc4:	44 04       	ILLEGAL;
 1000cc6:	00 01       	ILLEGAL;
 1000cc8:	6c 03       	CC ^= AC0;
 1000cca:	00 01       	ILLEGAL;
 1000ccc:	44 04       	ILLEGAL;
 1000cce:	00 01       	ILLEGAL;
 1000cd0:	94 03       	ASTAT[20 /* unused bit */] = CC;
 1000cd2:	00 01       	ILLEGAL;
 1000cd4:	54 04       	ILLEGAL;
 1000cd6:	00 01       	ILLEGAL;
 1000cd8:	44 04       	ILLEGAL;
 1000cda:	00 01       	ILLEGAL;
 1000cdc:	54 04       	ILLEGAL;
 1000cde:	00 01       	ILLEGAL;
 1000ce0:	54 04       	ILLEGAL;
 1000ce2:	00 01       	ILLEGAL;
 1000ce4:	54 04       	ILLEGAL;
 1000ce6:	00 01       	ILLEGAL;
 1000ce8:	54 04       	ILLEGAL;
 1000cea:	00 01       	ILLEGAL;
 1000cec:	54 04       	ILLEGAL;
 1000cee:	00 01       	ILLEGAL;
 1000cf0:	54 04       	ILLEGAL;
 1000cf2:	00 01       	ILLEGAL;
 1000cf4:	54 04       	ILLEGAL;
 1000cf6:	00 01       	ILLEGAL;
 1000cf8:	54 04       	ILLEGAL;
 1000cfa:	00 01       	ILLEGAL;
 1000cfc:	bc 03       	ASTAT[28 /* unused bit */] |= CC;
 1000cfe:	00 01       	ILLEGAL;
 1000d00:	ee 03       	ASTAT[14 /* unused bit */] ^= CC;
 1000d02:	00 01       	ILLEGAL;
 1000d04:	54 04       	ILLEGAL;
 1000d06:	00 01       	ILLEGAL;
 1000d08:	0c 04       	ILLEGAL;
 1000d0a:	00 01       	ILLEGAL;
 1000d0c:	24 04       	ILLEGAL;
 1000d0e:	00 01       	ILLEGAL;
 1000d10:	54 04       	ILLEGAL;
 1000d12:	00 01       	ILLEGAL;
 1000d14:	44 04       	ILLEGAL;
 1000d16:	00 01       	ILLEGAL;
 1000d18:	44 04       	ILLEGAL;
 1000d1a:	00 01       	ILLEGAL;

01000d1c <_local_addr>:
 1000d1c:	3e 3a       	ILLEGAL;
 1000d1e:	ba 98       	R2 = B[FP--] (Z);
 1000d20:	36 54       	R0 = R6 & R6;
	...

01000d24 <_sdp_normalize_uuid>:
 1000d24:	70 05       	[--SP] = (R7:6);
 1000d26:	31 30       	R6 = R1;
 1000d28:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x100002c(16777260) */
 1000d2c:	38 30       	R7 = R0;
 1000d2e:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1000d32:	01 e1 73 0d 	R1.L = 0xd73;		/* (3443)	R1=0x1000d73 <_sdp_bluetooth_base_uuid>(16780659) */
 1000d36:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1000d38:	00 e3 e6 77 	CALL 0x100fd04 <_memcpy>;
 1000d3c:	07 30       	R0 = R7;
 1000d3e:	16 30       	R2 = R6;
 1000d40:	01 e8 00 00 	UNLINK;
 1000d44:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1000d46:	30 05       	(R7:6) = [SP++];
 1000d48:	00 e2 8c 4a 	JUMP.L 0x100a260 <_net_store_32>;

01000d4c <_ble_main>:
 1000d4c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1000d50:	ff e3 44 fd 	CALL 0x10007d8 <_hci_firmware_init>;
 1000d54:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100002e(16777262) */
 1000d58:	00 e1 64 0d 	R0.L = 0xd64;		/* (3428)	R0=0x1000d64(16780644) */
 1000d5c:	01 e8 00 00 	UNLINK;
 1000d60:	00 e2 2c 71 	JUMP.L 0x100efb8 <_puts>;
 1000d64:	62 6c       	P2 += 0xc;		/* ( 12) */
 1000d66:	65 5f       	P5 = P5 + (P4 << 0x2);
 1000d68:	6d 61       	R5 = 0x2d (X);		/*		R5=0x2d( 45) */
 1000d6a:	69 6e       	P1 += -0x33;		/* (-51) */
 1000d6c:	5f 65       	R7 += 0x2b;		/* ( 43) */
 1000d6e:	78 69       	P0 = 0x2f (X);		/*		P0=0x2f( 47) */
 1000d70:	74 0a       	CC = P4 <= SP (IU);
	...

01000d73 <_sdp_bluetooth_base_uuid>:
 1000d73:	00 00       	NOP;
 1000d75:	00 00       	NOP;
 1000d77:	00 00       	NOP;
 1000d79:	10 00       	IF !CC JUMP 0x1000d79 <_sdp_bluetooth_base_uuid+0x6>;
 1000d7b:	80 00       	R0 = [P0 ++ P0];
 1000d7d:	00 80       	NOP;
 1000d7f:	5f 9b       	SP = P0 + (P0 << 0x2);
 1000d81:	34 fb       	I3 = I3;
	...

01000d84 <___set_widening>:
 1000d84:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x10045b8 */
 1000d88:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1000d8c:	0a e1 70 01 	P2.L = 0x170;		/* (368)	P2=0x1000170 <___ble_ops> */
 1000d90:	52 91       	P2 = [P2];
 1000d92:	08 32       	P1 = R0;
 1000d94:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1000d96:	22 e1 90 01 	R2 = 0x190 (X);		/*		R2=0x190(400) */
 1000d9a:	12 ae       	P2 = [P2 + 0x20];
 1000d9c:	01 e8 00 00 	UNLINK;
 1000da0:	08 e4 37 00 	R0 = [P1 + 0xdc];
 1000da4:	52 00       	JUMP (P2);
	...

01000da8 <_ll_thread_process>:
 1000da8:	fd 05       	[--SP] = (R7:7, P5:5);
 1000daa:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x170 */
 1000dae:	0a e1 78 1e 	P2.L = 0x1e78;		/* (7800)	P2=0x1e78 <_ll> */
 1000db2:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1000db6:	55 ac       	P5 = [P2 + 0x4];
 1000db8:	22 6c       	P2 += 0x4;		/* (  4) */
 1000dba:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 1000dbc:	c5 6f       	P5 += -0x8;		/* ( -8) */
 1000dbe:	1a 20       	JUMP.S 0x1000df2 <_ll_thread_process+0x4a>;
 1000dc0:	00 00       	NOP;
 1000dc2:	28 99       	R0 = B[P5] (Z);
 1000dc4:	08 08       	CC = R0 == R1;
 1000dc6:	13 14       	IF !CC JUMP 0x1000dec <_ll_thread_process+0x44> (BP);
 1000dc8:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000d64(16780644) */
 1000dcc:	00 e1 10 18 	R0.L = 0x1810;		/* (6160)	R0=0x1001810(16783376) */
 1000dd0:	00 e3 f4 70 	CALL 0x100efb8 <_puts>;
 1000dd4:	ea ac       	P2 = [P5 + 0xc];
 1000dd6:	a9 ac       	P1 = [P5 + 0x8];
 1000dd8:	45 30       	R0 = P5;
 1000dda:	4a bc       	[P1 + 0x4] = P2;
 1000ddc:	51 93       	[P2] = P1;
 1000dde:	af b0       	[P5 + 0x8] = R7;
 1000de0:	ef b0       	[P5 + 0xc] = R7;
 1000de2:	01 e8 00 00 	UNLINK;
 1000de6:	bd 05       	(R7:7, P5:5) = [SP++];
 1000de8:	00 e2 9a 6c 	JUMP.L 0x100e71c <_lbuf_free>;
 1000dec:	00 00       	NOP;
 1000dee:	ad ac       	P5 = [P5 + 0x8];
 1000df0:	c5 6f       	P5 += -0x8;		/* ( -8) */
 1000df2:	7d 30       	R7 = P5;
 1000df4:	47 64       	R7 += 0x8;		/* (  8) */
 1000df6:	42 30       	R0 = P2;
 1000df8:	07 08       	CC = R7 == R0;
 1000dfa:	e3 17       	IF !CC JUMP 0x1000dc0 <_ll_thread_process+0x18> (BP);
 1000dfc:	01 e8 00 00 	UNLINK;
 1000e00:	bd 05       	(R7:7, P5:5) = [SP++];
 1000e02:	10 00       	RTS;

01000e04 <___rx_oneshot_run>:
 1000e04:	fb 05       	[--SP] = (R7:7, P5:3);
 1000e06:	18 32       	P3 = R0;
 1000e08:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1000e0c:	38 30       	R7 = R0;
 1000e0e:	87 64       	R7 += 0x10;		/* ( 16) */
 1000e10:	1d ad       	P5 = [P3 + 0x10];
 1000e12:	6c 91       	P4 = [P5];
 1000e14:	0f 20       	JUMP.S 0x1000e32 <___rx_oneshot_run+0x2e>;
 1000e16:	43 30       	R0 = P3;
 1000e18:	6a ac       	P2 = [P5 + 0x4];
 1000e1a:	69 91       	P1 = [P5];
 1000e1c:	4a bc       	[P1 + 0x4] = P2;
 1000e1e:	51 93       	[P2] = P1;
 1000e20:	aa ac       	P2 = [P5 + 0x8];
 1000e22:	6d 93       	[P5] = P5;
 1000e24:	6d bc       	[P5 + 0x4] = P5;
 1000e26:	62 00       	CALL (P2);
 1000e28:	45 30       	R0 = P5;
 1000e2a:	00 e3 79 6c 	CALL 0x100e71c <_lbuf_free>;
 1000e2e:	6c 32       	P5 = P4;
 1000e30:	64 91       	P4 = [P4];
 1000e32:	45 30       	R0 = P5;
 1000e34:	38 08       	CC = R0 == R7;
 1000e36:	f0 17       	IF !CC JUMP 0x1000e16 <___rx_oneshot_run+0x12> (BP);
 1000e38:	01 e8 00 00 	UNLINK;
 1000e3c:	bb 05       	(R7:7, P5:3) = [SP++];
 1000e3e:	10 00       	RTS;

01000e40 <_ll_event_handler>:
 1000e40:	f3 05       	[--SP] = (R7:6, P5:3);
 1000e42:	18 32       	P3 = R0;
 1000e44:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1000e48:	38 30       	R7 = R0;
 1000e4a:	31 30       	R6 = R1;
 1000e4c:	c7 64       	R7 += 0x18;		/* ( 24) */
 1000e4e:	9d ad       	P5 = [P3 + 0x18];
 1000e50:	6c 91       	P4 = [P5];
 1000e52:	13 20       	JUMP.S 0x1000e78 <_ll_event_handler+0x38>;
 1000e54:	00 00       	NOP;
 1000e56:	e8 a0       	R0 = [P5 + 0xc];
 1000e58:	06 08       	CC = R6 == R0;
 1000e5a:	0d 14       	IF !CC JUMP 0x1000e74 <_ll_event_handler+0x34> (BP);
 1000e5c:	6a ac       	P2 = [P5 + 0x4];
 1000e5e:	69 91       	P1 = [P5];
 1000e60:	43 30       	R0 = P3;
 1000e62:	4a bc       	[P1 + 0x4] = P2;
 1000e64:	51 93       	[P2] = P1;
 1000e66:	aa ac       	P2 = [P5 + 0x8];
 1000e68:	6d 93       	[P5] = P5;
 1000e6a:	6d bc       	[P5 + 0x4] = P5;
 1000e6c:	62 00       	CALL (P2);
 1000e6e:	45 30       	R0 = P5;
 1000e70:	00 e3 56 6c 	CALL 0x100e71c <_lbuf_free>;
 1000e74:	6c 32       	P5 = P4;
 1000e76:	64 91       	P4 = [P4];
 1000e78:	45 30       	R0 = P5;
 1000e7a:	38 08       	CC = R0 == R7;
 1000e7c:	ec 17       	IF !CC JUMP 0x1000e54 <_ll_event_handler+0x14> (BP);
 1000e7e:	01 e8 00 00 	UNLINK;
 1000e82:	b3 05       	(R7:6, P5:3) = [SP++];
 1000e84:	10 00       	RTS;
	...

01000e88 <___read_connection_param>:
 1000e88:	c4 04       	[--SP] = (P5:4);
 1000e8a:	20 32       	P4 = R0;
 1000e8c:	09 32       	P1 = R1;
 1000e8e:	29 32       	P5 = R1;
 1000e90:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1000e94:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 1000e96:	54 32       	P2 = P4;
 1000e98:	48 98       	R0 = B[P1++] (X);
 1000e9a:	10 9a       	B[P2++] = R0;
 1000e9c:	a8 e5 01 00 	R0 = B[P5 + 0x1] (X);
 1000ea0:	a0 e6 01 00 	B[P4 + 0x1] = R0;
 1000ea4:	09 6c       	P1 += 0x1;		/* (  1) */
 1000ea6:	48 98       	R0 = B[P1++] (X);
 1000ea8:	0a 6c       	P2 += 0x1;		/* (  1) */
 1000eaa:	10 9a       	B[P2++] = R0;
 1000eac:	48 99       	R0 = B[P1] (X);
 1000eae:	10 9b       	B[P2] = R0;
 1000eb0:	a8 e5 04 00 	R0 = B[P5 + 0x4] (X);
 1000eb4:	a0 e6 04 00 	B[P4 + 0x4] = R0;
 1000eb8:	a8 e5 05 00 	R0 = B[P5 + 0x5] (X);
 1000ebc:	a0 e6 05 00 	B[P4 + 0x5] = R0;
 1000ec0:	a8 e5 06 00 	R0 = B[P5 + 0x6] (X);
 1000ec4:	a0 e6 06 00 	B[P4 + 0x6] = R0;
 1000ec8:	a8 e5 07 00 	R0 = B[P5 + 0x7] (X);
 1000ecc:	a0 e6 0e 00 	B[P4 + 0xe] = R0;
 1000ed0:	a8 e4 09 00 	R0 = B[P5 + 0x9] (Z);
 1000ed4:	a9 e4 08 00 	R1 = B[P5 + 0x8] (Z);
 1000ed8:	40 4f       	R0 <<= 0x8;
 1000eda:	08 56       	R0 = R0 | R1;
 1000edc:	20 b6       	W[P4 + 0x10] = R0;
 1000ede:	a8 e4 0b 00 	R0 = B[P5 + 0xb] (Z);
 1000ee2:	a9 e4 0a 00 	R1 = B[P5 + 0xa] (Z);
 1000ee6:	40 4f       	R0 <<= 0x8;
 1000ee8:	08 56       	R0 = R0 | R1;
 1000eea:	60 b6       	W[P4 + 0x12] = R0;
 1000eec:	a8 e4 0d 00 	R0 = B[P5 + 0xd] (Z);
 1000ef0:	a9 e4 0c 00 	R1 = B[P5 + 0xc] (Z);
 1000ef4:	40 4f       	R0 <<= 0x8;
 1000ef6:	08 56       	R0 = R0 | R1;
 1000ef8:	a0 b6       	W[P4 + 0x14] = R0;
 1000efa:	a8 e4 0f 00 	R0 = B[P5 + 0xf] (Z);
 1000efe:	a9 e4 0e 00 	R1 = B[P5 + 0xe] (Z);
 1000f02:	40 4f       	R0 <<= 0x8;
 1000f04:	08 56       	R0 = R0 | R1;
 1000f06:	e0 b6       	W[P4 + 0x16] = R0;
 1000f08:	44 30       	R0 = P4;
 1000f0a:	4d 30       	R1 = P5;
 1000f0c:	81 64       	R1 += 0x10;		/* ( 16) */
 1000f0e:	d0 64       	R0 += 0x1a;		/* ( 26) */
 1000f10:	00 e3 fa 76 	CALL 0x100fd04 <_memcpy>;
 1000f14:	a9 e5 15 00 	R1 = B[P5 + 0x15] (X);
 1000f18:	f8 60       	R0 = 0x1f (X);		/*		R0=0x1f( 31) */
 1000f1a:	01 54       	R0 = R1 & R0;
 1000f1c:	a0 e6 1f 00 	B[P4 + 0x1f] = R0;
 1000f20:	01 e8 00 00 	UNLINK;
 1000f24:	84 04       	(P5:4) = [SP++];
 1000f26:	10 00       	RTS;

01000f28 <___set_link_state>:
 1000f28:	c3 04       	[--SP] = (P5:3);
 1000f2a:	19 32       	P3 = R1;
 1000f2c:	00 e8 04 00 	LINK 0x10;		/* (16) */
 1000f30:	28 32       	P5 = R0;
 1000f32:	63 0e       	CC = P3 <= 0x4 (IU);
 1000f34:	66 14       	IF !CC JUMP 0x1001000 <___set_link_state+0xd8> (BP);
 1000f36:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1001e78 */
 1000f3a:	0a e1 e8 18 	P2.L = 0x18e8;		/* (6376)	P2=0x10018e8 */
 1000f3e:	9a 5e       	P2 = P2 + (P3 << 0x2);
 1000f40:	52 91       	P2 = [P2];
 1000f42:	4c e1 00 01 	P4.H = 0x100;		/* (256)	P4=0x100002e */
 1000f46:	0c e1 70 01 	P4.L = 0x170;		/* (368)	P4=0x1000170 <___ble_ops> */
 1000f4a:	52 00       	JUMP (P2);
 1000f4c:	62 91       	P2 = [P4];
 1000f4e:	28 e4 37 00 	R0 = [P5 + 0xdc];
 1000f52:	92 ac       	P2 = [P2 + 0x8];
 1000f54:	62 00       	CALL (P2);
 1000f56:	55 20       	JUMP.S 0x1001000 <___set_link_state+0xd8>;
 1000f58:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1000f5a:	a8 e6 98 00 	B[P5 + 0x98] = R0;
 1000f5e:	20 e1 f4 01 	R0 = 0x1f4 (X);		/*		R0=0x1f4(500) */
 1000f62:	68 e6 4b 00 	W[P5 + 0x96] = R0;
 1000f66:	80 60       	R0 = 0x10 (X);		/*		R0=0x10( 16) */
 1000f68:	a8 e6 99 00 	B[P5 + 0x99] = R0;
 1000f6c:	f8 60       	R0 = 0x1f (X);		/*		R0=0x1f( 31) */
 1000f6e:	2a e1 9b 00 	P2 = 0x9b (X);		/*		P2=0x9b(155) */
 1000f72:	95 5a       	P2 = P5 + P2;
 1000f74:	a8 e6 9a 00 	B[P5 + 0x9a] = R0;
 1000f78:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000006(16777222) */
 1000f7c:	42 30       	R0 = P2;
 1000f7e:	01 e1 c4 19 	R1.L = 0x19c4;		/* (6596)	R1=0x10019c4 <_adv_ind_data>(16783812) */
 1000f82:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1000f84:	00 e3 c0 76 	CALL 0x100fd04 <_memcpy>;
 1000f88:	2a e1 ba 00 	P2 = 0xba (X);		/*		P2=0xba(186) */
 1000f8c:	95 5a       	P2 = P5 + P2;
 1000f8e:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x10019c4 <_adv_ind_data>(16783812) */
 1000f92:	42 30       	R0 = P2;
 1000f94:	aa e4 9a 00 	R2 = B[P5 + 0x9a] (Z);
 1000f98:	01 e1 d4 19 	R1.L = 0x19d4;		/* (6612)	R1=0x10019d4 <_scan_rsp_data>(16783828) */
 1000f9c:	00 e3 b4 76 	CALL 0x100fd04 <_memcpy>;
 1000fa0:	62 91       	P2 = [P4];
 1000fa2:	29 e1 96 00 	P1 = 0x96 (X);		/*		P1=0x96(150) */
 1000fa6:	4d 5a       	P1 = P5 + P1;
 1000fa8:	28 e4 37 00 	R0 = [P5 + 0xdc];
 1000fac:	d2 ac       	P2 = [P2 + 0xc];
 1000fae:	49 30       	R1 = P1;
 1000fb0:	62 00       	CALL (P2);
 1000fb2:	27 20       	JUMP.S 0x1001000 <___set_link_state+0xd8>;
 1000fb4:	62 91       	P2 = [P4];
 1000fb6:	28 e4 37 00 	R0 = [P5 + 0xdc];
 1000fba:	81 e1 7c 92 	R1 = 0x927c (Z);		/*		R1=0x927c(37500) */
 1000fbe:	82 e1 50 c3 	R2 = 0xc350 (Z);		/*		R2=0xc350(50000) */
 1000fc2:	12 ad       	P2 = [P2 + 0x10];
 1000fc4:	1d 20       	JUMP.S 0x1000ffe <___set_link_state+0xd6>;
 1000fc6:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x100927c(16814716) */
 1000fca:	00 65       	R0 += 0x20;		/* ( 32) */
 1000fcc:	01 e1 f3 19 	R1.L = 0x19f3;		/* (6643)	R1=0x10019f3 <_connection_data>(16783859) */
 1000fd0:	ff e3 5c ff 	CALL 0x1000e88 <___read_connection_param>;
 1000fd4:	62 91       	P2 = [P4];
 1000fd6:	b2 60       	R2 = 0x16 (X);		/*		R2=0x16( 22) */
 1000fd8:	f2 b0       	[SP + 0xc] = R2;
 1000fda:	4d 30       	R1 = P5;
 1000fdc:	52 ad       	P2 = [P2 + 0x14];
 1000fde:	42 e1 00 01 	R2.H = 0x100;		/* (256)	R2=0x1000016(16777238) */
 1000fe2:	28 e4 37 00 	R0 = [P5 + 0xdc];
 1000fe6:	41 65       	R1 += 0x28;		/* ( 40) */
 1000fe8:	02 e1 f3 19 	R2.L = 0x19f3;		/* (6643)	R2=0x10019f3 <_connection_data>(16783859) */
 1000fec:	62 00       	CALL (P2);
 1000fee:	09 20       	JUMP.S 0x1001000 <___set_link_state+0xd8>;
 1000ff0:	62 91       	P2 = [P4];
 1000ff2:	55 30       	R2 = P5;
 1000ff4:	28 e4 37 00 	R0 = [P5 + 0xdc];
 1000ff8:	02 65       	R2 += 0x20;		/* ( 32) */
 1000ffa:	12 ae       	P2 = [P2 + 0x20];
 1000ffc:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 1000ffe:	62 00       	CALL (P2);
 1001000:	43 30       	R0 = P3;
 1001002:	28 9b       	B[P5] = R0;
 1001004:	01 e8 00 00 	UNLINK;
 1001008:	83 04       	(P5:3) = [SP++];
 100100a:	10 00       	RTS;

0100100c <_ll_send_control_data>:
 100100c:	f5 05       	[--SP] = (R7:6, P5:5);
 100100e:	28 32       	P5 = R0;
 1001010:	31 30       	R6 = R1;
 1001012:	00 e8 04 00 	LINK 0x10;		/* (16) */
 1001016:	3a 30       	R7 = R2;
 1001018:	02 30       	R0 = R2;
 100101a:	00 e3 41 6d 	CALL 0x100ea9c <___vsprintf_len>;
 100101e:	79 61       	R1 = 0x2f (X);		/*		R1=0x2f( 47) */
 1001020:	08 0a       	CC = R0 <= R1 (IU);
 1001022:	08 1c       	IF CC JUMP 0x1001032 <_ll_send_control_data+0x26> (BP);
 1001024:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100001f(16777247) */
 1001028:	00 e1 20 18 	R0.L = 0x1820;		/* (6176)	R0=0x1001820(16783392) */
 100102c:	00 e3 c6 6f 	CALL 0x100efb8 <_puts>;
 1001030:	00 20       	JUMP.S 0x1001030 <_ll_send_control_data+0x24>;
 1001032:	ae e6 66 00 	B[P5 + 0x66] = R6;
 1001036:	07 0c       	CC = R7 == 0x0;
 1001038:	0c 18       	IF CC JUMP 0x1001050 <_ll_send_control_data+0x44>;
 100103a:	2a e1 67 00 	P2 = 0x67 (X);		/*		P2=0x67(103) */
 100103e:	95 5a       	P2 = P5 + P2;
 1001040:	57 30       	R2 = FP;
 1001042:	42 30       	R0 = P2;
 1001044:	0f 30       	R1 = R7;
 1001046:	02 65       	R2 += 0x20;		/* ( 32) */
 1001048:	00 e3 6a 6d 	CALL 0x100eb1c <___vsprintf>;
 100104c:	08 64       	R0 += 0x1;		/* (  1) */
 100104e:	02 20       	JUMP.S 0x1001052 <_ll_send_control_data+0x46>;
 1001050:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1001052:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1000067 */
 1001056:	0a e1 70 01 	P2.L = 0x170;		/* (368)	P2=0x1000170 <___ble_ops> */
 100105a:	52 91       	P2 = [P2];
 100105c:	f0 b0       	[SP + 0xc] = R0;
 100105e:	29 e4 37 00 	R1 = [P5 + 0xdc];
 1001062:	29 e1 66 00 	P1 = 0x66 (X);		/*		P1=0x66(102) */
 1001066:	d2 ad       	P2 = [P2 + 0x1c];
 1001068:	4d 5a       	P1 = P5 + P1;
 100106a:	01 30       	R0 = R1;
 100106c:	51 30       	R2 = P1;
 100106e:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 1001070:	62 00       	CALL (P2);
 1001072:	01 e8 00 00 	UNLINK;
 1001076:	b5 05       	(R7:6, P5:5) = [SP++];
 1001078:	10 00       	RTS;
	...

0100107c <_ll_tx_handler>:
 100107c:	11 32       	P2 = R1;
 100107e:	00 e8 04 00 	LINK 0x10;		/* (16) */
 1001082:	91 e4 01 00 	R1 = B[P2 + 0x1] (Z);
 1001086:	01 0c       	CC = R1 == 0x0;
 1001088:	11 14       	IF !CC JUMP 0x10010aa <_ll_tx_handler+0x2e> (BP);
 100108a:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 100108c:	11 99       	R1 = B[P2] (Z);
 100108e:	11 08       	CC = R1 == R2;
 1001090:	0d 14       	IF !CC JUMP 0x10010aa <_ll_tx_handler+0x2e> (BP);
 1001092:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000003(16777219) */
 1001096:	01 e1 80 19 	R1.L = 0x1980;		/* (6528)	R1=0x1001980 <_version>(16783744) */
 100109a:	f1 b0       	[SP + 0xc] = R1;
 100109c:	42 e1 00 01 	R2.H = 0x100;		/* (256)	R2=0x1000005(16777221) */
 10010a0:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 10010a2:	02 e1 60 18 	R2.L = 0x1860;		/* (6240)	R2=0x1001860(16783456) */
 10010a6:	ff e3 b3 ff 	CALL 0x100100c <_ll_send_control_data>;
 10010aa:	01 e8 00 00 	UNLINK;
 10010ae:	10 00       	RTS;

010010b0 <___malloc>:
 10010b0:	08 30       	R1 = R0;
 10010b2:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x1(  1) */
 10010b6:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10010ba:	00 e1 78 18 	R0.L = 0x1878;		/* (6264)	R0=0x1878 <_mem_pool>(6264) */
 10010be:	00 e3 a9 6a 	CALL 0x100e610 <_lbuf_alloc>;
 10010c2:	00 0c       	CC = R0 == 0x0;
 10010c4:	08 14       	IF !CC JUMP 0x10010d4 <___malloc+0x24> (BP);
 10010c6:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1001878(16783480) */
 10010ca:	00 e1 64 18 	R0.L = 0x1864;		/* (6244)	R0=0x1001864(16783460) */
 10010ce:	00 e3 75 6f 	CALL 0x100efb8 <_puts>;
 10010d2:	00 20       	JUMP.S 0x10010d2 <___malloc+0x22>;
 10010d4:	01 e8 00 00 	UNLINK;
 10010d8:	10 00       	RTS;
	...

010010dc <___rx_oneshot_add.clone.1>:
 10010dc:	c5 04       	[--SP] = (P5:5);
 10010de:	28 32       	P5 = R0;
 10010e0:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10010e4:	60 60       	R0 = 0xc (X);		/*		R0=0xc( 12) */
 10010e6:	ff e3 e5 ff 	CALL 0x10010b0 <___malloc>;
 10010ea:	10 32       	P2 = R0;
 10010ec:	42 0c       	CC = P2 == 0x0;
 10010ee:	0c 14       	IF !CC JUMP 0x1001106 <___rx_oneshot_add.clone.1+0x2a> (BP);
 10010f0:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100000c(16777228) */
 10010f4:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x100000c(16777228) */
 10010f8:	00 e1 7c 18 	R0.L = 0x187c;		/* (6268)	R0=0x100187c(16783484) */
 10010fc:	01 e1 88 19 	R1.L = 0x1988;		/* (6536)	R1=0x1001988 <___func__.1556>(16783752) */
 1001100:	00 e3 40 6f 	CALL 0x100ef80 <_printf>;
 1001104:	00 20       	JUMP.S 0x1001104 <___rx_oneshot_add.clone.1+0x28>;
 1001106:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100187c(16783484) */
 100110a:	00 e1 84 0d 	R0.L = 0xd84;		/* (3460)	R0=0x1000d84 <___set_widening>(16780676) */
 100110e:	90 b0       	[P2 + 0x8] = R0;
 1001110:	69 ad       	P1 = [P5 + 0x14];
 1001112:	6a bd       	[P5 + 0x14] = P2;
 1001114:	85 6c       	P5 += 0x10;		/* ( 16) */
 1001116:	55 93       	[P2] = P5;
 1001118:	51 bc       	[P2 + 0x4] = P1;
 100111a:	4a 93       	[P1] = P2;
 100111c:	01 e8 00 00 	UNLINK;
 1001120:	85 04       	(P5:5) = [SP++];
 1001122:	10 00       	RTS;

01001124 <___connection_upadte>:
 1001124:	c5 04       	[--SP] = (P5:5);
 1001126:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1000170 <___ble_ops> */
 100112a:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100112e:	0a e1 70 01 	P2.L = 0x170;		/* (368)	P2=0x1000170 <___ble_ops> */
 1001132:	52 91       	P2 = [P2];
 1001134:	28 32       	P5 = R0;
 1001136:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 1001138:	12 ae       	P2 = [P2 + 0x20];
 100113a:	55 30       	R2 = P5;
 100113c:	28 e4 37 00 	R0 = [P5 + 0xdc];
 1001140:	02 65       	R2 += 0x20;		/* ( 32) */
 1001142:	62 00       	CALL (P2);
 1001144:	45 30       	R0 = P5;
 1001146:	01 e8 00 00 	UNLINK;
 100114a:	85 04       	(P5:5) = [SP++];
 100114c:	ff e2 c8 ff 	JUMP.L 0x10010dc <___rx_oneshot_add.clone.1>;

01001150 <___event_oneshot_add.clone.2>:
 1001150:	fd 05       	[--SP] = (R7:7, P5:5);
 1001152:	28 32       	P5 = R0;
 1001154:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1001158:	39 30       	R7 = R1;
 100115a:	80 60       	R0 = 0x10 (X);		/*		R0=0x10( 16) */
 100115c:	ff e3 aa ff 	CALL 0x10010b0 <___malloc>;
 1001160:	10 32       	P2 = R0;
 1001162:	42 0c       	CC = P2 == 0x0;
 1001164:	0c 14       	IF !CC JUMP 0x100117c <___event_oneshot_add.clone.2+0x2c> (BP);
 1001166:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000010(16777232) */
 100116a:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000006(16777222) */
 100116e:	00 e1 7c 18 	R0.L = 0x187c;		/* (6268)	R0=0x100187c(16783484) */
 1001172:	01 e1 a4 19 	R1.L = 0x19a4;		/* (6564)	R1=0x10019a4 <___func__.1538>(16783780) */
 1001176:	00 e3 05 6f 	CALL 0x100ef80 <_printf>;
 100117a:	00 20       	JUMP.S 0x100117a <___event_oneshot_add.clone.2+0x2a>;
 100117c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100187c(16783484) */
 1001180:	00 e1 24 11 	R0.L = 0x1124;		/* (4388)	R0=0x1001124 <___connection_upadte>(16781604) */
 1001184:	90 b0       	[P2 + 0x8] = R0;
 1001186:	d7 b0       	[P2 + 0xc] = R7;
 1001188:	e9 ad       	P1 = [P5 + 0x1c];
 100118a:	ea bd       	[P5 + 0x1c] = P2;
 100118c:	c5 6c       	P5 += 0x18;		/* ( 24) */
 100118e:	55 93       	[P2] = P5;
 1001190:	51 bc       	[P2 + 0x4] = P1;
 1001192:	4a 93       	[P1] = P2;
 1001194:	01 e8 00 00 	UNLINK;
 1001198:	bd 05       	(R7:7, P5:5) = [SP++];
 100119a:	10 00       	RTS;

0100119c <_ll_rx_handler>:
 100119c:	e4 05       	[--SP] = (R7:4, P5:4);
 100119e:	29 32       	P5 = R1;
 10011a0:	20 32       	P4 = R0;
 10011a2:	00 e8 13 00 	LINK 0x4c;		/* (76) */
 10011a6:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 10011aa:	08 0c       	CC = R0 == 0x1;
 10011ac:	da 19       	IF CC JUMP 0x1001560 <_ll_rx_handler+0x3c4>;
 10011ae:	00 0c       	CC = R0 == 0x0;
 10011b0:	06 1c       	IF CC JUMP 0x10011bc <_ll_rx_handler+0x20> (BP);
 10011b2:	10 0c       	CC = R0 == 0x2;
 10011b4:	da 19       	IF CC JUMP 0x1001568 <_ll_rx_handler+0x3cc>;
 10011b6:	18 0c       	CC = R0 == 0x3;
 10011b8:	db 15       	IF !CC JUMP 0x100156e <_ll_rx_handler+0x3d2> (BP);
 10011ba:	58 20       	JUMP.S 0x100126a <_ll_rx_handler+0xce>;
 10011bc:	00 00       	NOP;
 10011be:	20 99       	R0 = B[P4] (Z);
 10011c0:	10 0c       	CC = R0 == 0x2;
 10011c2:	06 18       	IF CC JUMP 0x10011ce <_ll_rx_handler+0x32>;
 10011c4:	18 0c       	CC = R0 == 0x3;
 10011c6:	31 18       	IF CC JUMP 0x1001228 <_ll_rx_handler+0x8c>;
 10011c8:	08 0c       	CC = R0 == 0x1;
 10011ca:	d2 15       	IF !CC JUMP 0x100156e <_ll_rx_handler+0x3d2> (BP);
 10011cc:	3d 20       	JUMP.S 0x1001246 <_ll_rx_handler+0xaa>;
 10011ce:	a8 e4 01 00 	R0 = B[P5 + 0x1] (Z);
 10011d2:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 10011d4:	08 08       	CC = R0 == R1;
 10011d6:	cc 15       	IF !CC JUMP 0x100156e <_ll_rx_handler+0x3d2> (BP);
 10011d8:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 10011da:	a0 e6 01 00 	B[P4 + 0x1] = R0;
 10011de:	44 30       	R0 = P4;
 10011e0:	4d 30       	R1 = P5;
 10011e2:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 10011e4:	69 64       	R1 += 0xd;		/* ( 13) */
 10011e6:	40 65       	R0 += 0x28;		/* ( 40) */
 10011e8:	00 e3 8e 75 	CALL 0x100fd04 <_memcpy>;
 10011ec:	a8 e5 07 00 	R0 = B[P5 + 0x7] (X);
 10011f0:	a0 e6 27 00 	B[P4 + 0x27] = R0;
 10011f4:	44 30       	R0 = P4;
 10011f6:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 10011f8:	ff e3 98 fe 	CALL 0x1000f28 <___set_link_state>;
 10011fc:	7c 30       	R7 = P4;
 10011fe:	07 65       	R7 += 0x20;		/* ( 32) */
 1001200:	4d 30       	R1 = P5;
 1001202:	07 30       	R0 = R7;
 1001204:	c9 64       	R1 += 0x19;		/* ( 25) */
 1001206:	ff e3 41 fe 	CALL 0x1000e88 <___read_connection_param>;
 100120a:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1000170 <___ble_ops> */
 100120e:	0a e1 70 01 	P2.L = 0x170;		/* (368)	P2=0x1000170 <___ble_ops> */
 1001212:	52 91       	P2 = [P2];
 1001214:	20 e4 37 00 	R0 = [P4 + 0xdc];
 1001218:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 100121a:	17 30       	R2 = R7;
 100121c:	12 ae       	P2 = [P2 + 0x20];
 100121e:	62 00       	CALL (P2);
 1001220:	44 30       	R0 = P4;
 1001222:	ff e3 5d ff 	CALL 0x10010dc <___rx_oneshot_add.clone.1>;
 1001226:	a4 21       	JUMP.S 0x100156e <_ll_rx_handler+0x3d2>;
 1001228:	a8 e4 01 00 	R0 = B[P5 + 0x1] (Z);
 100122c:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 100122e:	08 08       	CC = R0 == R1;
 1001230:	9f 15       	IF !CC JUMP 0x100156e <_ll_rx_handler+0x3d2> (BP);
 1001232:	44 30       	R0 = P4;
 1001234:	4d 30       	R1 = P5;
 1001236:	71 64       	R1 += 0xe;		/* ( 14) */
 1001238:	40 65       	R0 += 0x28;		/* ( 40) */
 100123a:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 100123c:	00 e3 64 75 	CALL 0x100fd04 <_memcpy>;
 1001240:	44 30       	R0 = P4;
 1001242:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 1001244:	10 20       	JUMP.S 0x1001264 <_ll_rx_handler+0xc8>;
 1001246:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1001248:	a0 e6 01 00 	B[P4 + 0x1] = R0;
 100124c:	a8 e5 07 00 	R0 = B[P5 + 0x7] (X);
 1001250:	a0 e6 27 00 	B[P4 + 0x27] = R0;
 1001254:	44 30       	R0 = P4;
 1001256:	69 64       	R1 += 0xd;		/* ( 13) */
 1001258:	40 65       	R0 += 0x28;		/* ( 40) */
 100125a:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 100125c:	00 e3 54 75 	CALL 0x100fd04 <_memcpy>;
 1001260:	44 30       	R0 = P4;
 1001262:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1001264:	ff e3 62 fe 	CALL 0x1000f28 <___set_link_state>;
 1001268:	83 21       	JUMP.S 0x100156e <_ll_rx_handler+0x3d2>;
 100126a:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 100126e:	00 0c       	CC = R0 == 0x0;
 1001270:	af e5 0d 00 	R7 = B[P5 + 0xd] (X);
 1001274:	9e 14       	IF !CC JUMP 0x10013b0 <_ll_rx_handler+0x214> (BP);
 1001276:	78 43       	R0 = R7.B (Z);
 1001278:	79 60       	R1 = 0xf (X);		/*		R1=0xf( 15) */
 100127a:	08 0a       	CC = R0 <= R1 (IU);
 100127c:	8c 14       	IF !CC JUMP 0x1001394 <_ll_rx_handler+0x1f8> (BP);
 100127e:	08 32       	P1 = R0;
 1001280:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1000170 <___ble_ops> */
 1001284:	0a e1 fc 18 	P2.L = 0x18fc;		/* (6396)	P2=0x10018fc */
 1001288:	8a 5e       	P2 = P2 + (P1 << 0x2);
 100128a:	52 91       	P2 = [P2];
 100128c:	52 00       	JUMP (P2);
 100128e:	ae e4 11 00 	R6 = B[P5 + 0x11] (Z);
 1001292:	a8 e4 10 00 	R0 = B[P5 + 0x10] (Z);
 1001296:	46 4f       	R6 <<= 0x8;
 1001298:	aa e4 18 00 	R2 = B[P5 + 0x18] (Z);
 100129c:	86 57       	R6 = R6 | R0;
 100129e:	a8 e4 17 00 	R0 = B[P5 + 0x17] (Z);
 10012a2:	42 4f       	R2 <<= 0x8;
 10012a4:	82 56       	R2 = R2 | R0;
 10012a6:	a8 e4 1a 00 	R0 = B[P5 + 0x1a] (Z);
 10012aa:	a9 e4 19 00 	R1 = B[P5 + 0x19] (Z);
 10012ae:	40 4f       	R0 <<= 0x8;
 10012b0:	ad e4 13 00 	R5 = B[P5 + 0x13] (Z);
 10012b4:	08 56       	R0 = R0 | R1;
 10012b6:	a9 e4 12 00 	R1 = B[P5 + 0x12] (Z);
 10012ba:	45 4f       	R5 <<= 0x8;
 10012bc:	6f a5       	R7 = W[P5 + 0xa] (Z);
 10012be:	4d 57       	R5 = R5 | R1;
 10012c0:	65 e6 1a 00 	W[P4 + 0x34] = R5;
 10012c4:	ac e4 15 00 	R4 = B[P5 + 0x15] (Z);
 10012c8:	a9 e4 14 00 	R1 = B[P5 + 0x14] (Z);
 10012cc:	57 64       	R7 += 0xa;		/* ( 10) */
 10012ce:	44 4f       	R4 <<= 0x8;
 10012d0:	0c 57       	R4 = R4 | R1;
 10012d2:	3a 09       	CC = R2 <= R7;
 10012d4:	64 e6 1b 00 	W[P4 + 0x36] = R4;
 10012d8:	ba 52       	R2 = R2 - R7;
 10012da:	61 e4 19 00 	R1 = W[P4 + 0x32] (Z);
 10012de:	07 1c       	IF CC JUMP 0x10012ec <_ll_rx_handler+0x150> (BP);
 10012e0:	d1 40       	R1 *= R2;
 10012e2:	01 50       	R0 = R1 + R0;
 10012e4:	0e 30       	R1 = R6;
 10012e6:	00 e3 91 76 	CALL 0x1010008 <___umodsi3>;
 10012ea:	07 20       	JUMP.S 0x10012f8 <_ll_rx_handler+0x15c>;
 10012ec:	d1 40       	R1 *= R2;
 10012ee:	01 50       	R0 = R1 + R0;
 10012f0:	0e 30       	R1 = R6;
 10012f2:	00 e3 8b 76 	CALL 0x1010008 <___umodsi3>;
 10012f6:	06 52       	R0 = R6 - R0;
 10012f8:	a1 e4 2e 00 	R1 = B[P4 + 0x2e] (Z);
 10012fc:	82 c6 f9 85 	R2 = R1 >> 0x1;
 1001300:	f1 b0       	[SP + 0xc] = R1;
 1001302:	10 52       	R0 = R0 - R2;
 1001304:	60 e6 18 00 	W[P4 + 0x30] = R0;
 1001308:	66 e6 19 00 	W[P4 + 0x32] = R6;
 100130c:	c0 42       	R0 = R0.L (Z);
 100130e:	30 b1       	[SP + 0x10] = R0;
 1001310:	f6 42       	R6 = R6.L (Z);
 1001312:	ed 42       	R5 = R5.L (Z);
 1001314:	e4 42       	R4 = R4.L (Z);
 1001316:	42 e1 00 01 	R2.H = 0x100;		/* (256)	R2=0x1000006(16777222) */
 100131a:	44 30       	R0 = P4;
 100131c:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100131e:	76 b1       	[SP + 0x14] = R6;
 1001320:	b5 b1       	[SP + 0x18] = R5;
 1001322:	f4 b1       	[SP + 0x1c] = R4;
 1001324:	37 b2       	[SP + 0x20] = R7;
 1001326:	02 e1 98 18 	R2.L = 0x1898;		/* (6296)	R2=0x1001898(16783512) */
 100132a:	ff e3 71 fe 	CALL 0x100100c <_ll_send_control_data>;
 100132e:	0f 30       	R1 = R7;
 1001330:	f9 67       	R1 += -0x1;		/* ( -1) */
 1001332:	44 30       	R0 = P4;
 1001334:	8b 20       	JUMP.S 0x100144a <_ll_rx_handler+0x2ae>;
 1001336:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 100133a:	00 e1 99 19 	R0.L = 0x1999;		/* (6553)	R0=0x1001999 <_le_feature>(16783769) */
 100133e:	f0 b0       	[SP + 0xc] = R0;
 1001340:	44 30       	R0 = P4;
 1001342:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 1001344:	f3 20       	JUMP.S 0x100152a <_ll_rx_handler+0x38e>;
 1001346:	7f 30       	R7 = FP;
 1001348:	c7 66       	R7 += -0x28;		/* (-40) */
 100134a:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000008(16777224) */
 100134e:	07 30       	R0 = R7;
 1001350:	01 e1 b8 19 	R1.L = 0x19b8;		/* (6584)	R1=0x10019b8 <_skds>(16783800) */
 1001354:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 1001356:	00 e3 d7 74 	CALL 0x100fd04 <_memcpy>;
 100135a:	4d 30       	R1 = P5;
 100135c:	47 30       	R0 = FP;
 100135e:	71 64       	R1 += 0xe;		/* ( 14) */
 1001360:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 1001362:	00 67       	R0 += -0x20;		/* (-32) */
 1001364:	00 e3 d0 74 	CALL 0x100fd04 <_memcpy>;
 1001368:	a8 e5 16 00 	R0 = B[P5 + 0x16] (X);
 100136c:	b8 e6 fc ff 	B[FP + -0x4] = R0;
 1001370:	a8 e5 17 00 	R0 = B[P5 + 0x17] (X);
 1001374:	b8 e6 fd ff 	B[FP + -0x3] = R0;
 1001378:	a8 e5 18 00 	R0 = B[P5 + 0x18] (X);
 100137c:	b8 e6 fe ff 	B[FP + -0x2] = R0;
 1001380:	a8 e5 19 00 	R0 = B[P5 + 0x19] (X);
 1001384:	b8 e6 ff ff 	B[FP + -0x1] = R0;
 1001388:	47 30       	R0 = FP;
 100138a:	0f 30       	R1 = R7;
 100138c:	40 67       	R0 += -0x18;		/* (-24) */
 100138e:	00 e3 d1 47 	CALL 0x100a330 <_swap128>;
 1001392:	eb 20       	JUMP.S 0x1001568 <_ll_rx_handler+0x3cc>;
 1001394:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1001999 <_le_feature>(16783769) */
 1001398:	79 43       	R1 = R7.B (Z);
 100139a:	00 e1 a4 18 	R0.L = 0x18a4;		/* (6308)	R0=0x10018a4(16783524) */
 100139e:	00 e3 f1 6d 	CALL 0x100ef80 <_printf>;
 10013a2:	45 30       	R0 = P5;
 10013a4:	a9 e4 06 00 	R1 = B[P5 + 0x6] (Z);
 10013a8:	68 64       	R0 += 0xd;		/* ( 13) */
 10013aa:	00 e3 39 67 	CALL 0x100e21c <_printf_buf>;
 10013ae:	dd 20       	JUMP.S 0x1001568 <_ll_rx_handler+0x3cc>;
 10013b0:	7f 43       	R7 = R7.B (Z);
 10013b2:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10018a4(16783524) */
 10013b6:	26 e4 37 00 	R6 = [P4 + 0xdc];
 10013ba:	00 e1 b8 18 	R0.L = 0x18b8;		/* (6328)	R0=0x10018b8(16783544) */
 10013be:	0f 30       	R1 = R7;
 10013c0:	00 e3 e0 6d 	CALL 0x100ef80 <_printf>;
 10013c4:	68 60       	R0 = 0xd (X);		/*		R0=0xd( 13) */
 10013c6:	07 0a       	CC = R7 <= R0 (IU);
 10013c8:	c4 14       	IF !CC JUMP 0x1001550 <_ll_rx_handler+0x3b4> (BP);
 10013ca:	0f 32       	P1 = R7;
 10013cc:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x10018fc */
 10013d0:	0a e1 3c 19 	P2.L = 0x193c;		/* (6460)	P2=0x100193c */
 10013d4:	8a 5e       	P2 = P2 + (P1 << 0x2);
 10013d6:	52 91       	P2 = [P2];
 10013d8:	52 00       	JUMP (P2);
 10013da:	af e4 18 00 	R7 = B[P5 + 0x18] (Z);
 10013de:	a8 e4 17 00 	R0 = B[P5 + 0x17] (Z);
 10013e2:	47 4f       	R7 <<= 0x8;
 10013e4:	c7 57       	R7 = R7 | R0;
 10013e6:	a8 e5 0e 00 	R0 = B[P5 + 0xe] (X);
 10013ea:	a0 e6 2e 00 	B[P4 + 0x2e] = R0;
 10013ee:	a8 e4 10 00 	R0 = B[P5 + 0x10] (Z);
 10013f2:	a9 e4 0f 00 	R1 = B[P5 + 0xf] (Z);
 10013f6:	40 4f       	R0 <<= 0x8;
 10013f8:	08 56       	R0 = R0 | R1;
 10013fa:	60 e6 18 00 	W[P4 + 0x30] = R0;
 10013fe:	a8 e4 12 00 	R0 = B[P5 + 0x12] (Z);
 1001402:	a9 e4 11 00 	R1 = B[P5 + 0x11] (Z);
 1001406:	40 4f       	R0 <<= 0x8;
 1001408:	08 56       	R0 = R0 | R1;
 100140a:	60 e6 19 00 	W[P4 + 0x32] = R0;
 100140e:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x100193c */
 1001412:	a8 e4 14 00 	R0 = B[P5 + 0x14] (Z);
 1001416:	0a e1 70 01 	P2.L = 0x170;		/* (368)	P2=0x1000170 <___ble_ops> */
 100141a:	a9 e4 13 00 	R1 = B[P5 + 0x13] (Z);
 100141e:	52 91       	P2 = [P2];
 1001420:	40 4f       	R0 <<= 0x8;
 1001422:	08 56       	R0 = R0 | R1;
 1001424:	60 e6 1a 00 	W[P4 + 0x34] = R0;
 1001428:	a8 e4 16 00 	R0 = B[P5 + 0x16] (Z);
 100142c:	a9 e4 15 00 	R1 = B[P5 + 0x15] (Z);
 1001430:	40 4f       	R0 <<= 0x8;
 1001432:	12 ae       	P2 = [P2 + 0x20];
 1001434:	08 56       	R0 = R0 | R1;
 1001436:	ff 67       	R7 += -0x1;		/* ( -1) */
 1001438:	60 e6 1b 00 	W[P4 + 0x36] = R0;
 100143c:	20 e4 37 00 	R0 = [P4 + 0xdc];
 1001440:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 1001442:	17 30       	R2 = R7;
 1001444:	62 00       	CALL (P2);
 1001446:	44 30       	R0 = P4;
 1001448:	0f 30       	R1 = R7;
 100144a:	ff e3 83 fe 	CALL 0x1001150 <___event_oneshot_add.clone.2>;
 100144e:	8d 20       	JUMP.S 0x1001568 <_ll_rx_handler+0x3cc>;
 1001450:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1000170 <___ble_ops> */
 1001454:	a8 e4 14 00 	R0 = B[P5 + 0x14] (Z);
 1001458:	0a e1 70 01 	P2.L = 0x170;		/* (368)	P2=0x1000170 <___ble_ops> */
 100145c:	a9 e4 13 00 	R1 = B[P5 + 0x13] (Z);
 1001460:	52 91       	P2 = [P2];
 1001462:	40 4f       	R0 <<= 0x8;
 1001464:	08 56       	R0 = R0 | R1;
 1001466:	f8 67       	R0 += -0x1;		/* ( -1) */
 1001468:	f0 b0       	[SP + 0xc] = R0;
 100146a:	12 ae       	P2 = [P2 + 0x20];
 100146c:	55 30       	R2 = P5;
 100146e:	72 64       	R2 += 0xe;		/* ( 14) */
 1001470:	06 30       	R0 = R6;
 1001472:	39 60       	R1 = 0x7 (X);		/*		R1=0x7(  7) */
 1001474:	62 00       	CALL (P2);
 1001476:	79 20       	JUMP.S 0x1001568 <_ll_rx_handler+0x3cc>;
 1001478:	30 60       	R0 = 0x6 (X);		/*		R0=0x6(  6) */
 100147a:	20 9b       	B[P4] = R0;
 100147c:	76 20       	JUMP.S 0x1001568 <_ll_rx_handler+0x3cc>;
 100147e:	a8 e5 20 00 	R0 = B[P5 + 0x20] (X);
 1001482:	b8 e6 f8 ff 	B[FP + -0x8] = R0;
 1001486:	a8 e5 21 00 	R0 = B[P5 + 0x21] (X);
 100148a:	b8 e6 f9 ff 	B[FP + -0x7] = R0;
 100148e:	a8 e5 22 00 	R0 = B[P5 + 0x22] (X);
 1001492:	b8 e6 fa ff 	B[FP + -0x6] = R0;
 1001496:	a8 e5 23 00 	R0 = B[P5 + 0x23] (X);
 100149a:	b8 e6 fb ff 	B[FP + -0x5] = R0;
 100149e:	f0 62       	R0 = -0x22 (X);		/*		R0=0xffffffde(-34) */
 10014a0:	b8 e6 fc ff 	B[FP + -0x4] = R0;
 10014a4:	57 32       	P2 = FP;
 10014a6:	e2 6f       	P2 += -0x4;		/* ( -4) */
 10014a8:	20 e1 af ff 	R0 = -0x51 (X);		/*		R0=0xffffffaf(-81) */
 10014ac:	90 e6 01 00 	B[P2 + 0x1] = R0;
 10014b0:	20 e1 ba ff 	R0 = -0x46 (X);		/*		R0=0xffffffba(-70) */
 10014b4:	90 e6 02 00 	B[P2 + 0x2] = R0;
 10014b8:	20 e1 be ff 	R0 = -0x42 (X);		/*		R0=0xffffffbe(-66) */
 10014bc:	90 e6 03 00 	B[P2 + 0x3] = R0;
 10014c0:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1000170 <___ble_ops> */
 10014c4:	0a e1 70 01 	P2.L = 0x170;		/* (368)	P2=0x1000170 <___ble_ops> */
 10014c8:	52 91       	P2 = [P2];
 10014ca:	57 30       	R2 = FP;
 10014cc:	20 e4 37 00 	R0 = [P4 + 0xdc];
 10014d0:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10014d2:	12 ae       	P2 = [P2 + 0x20];
 10014d4:	c2 67       	R2 += -0x8;		/* ( -8) */
 10014d6:	62 00       	CALL (P2);
 10014d8:	2a e1 58 00 	P2 = 0x58 (X);		/*		P2=0x58( 88) */
 10014dc:	94 5a       	P2 = P4 + P2;
 10014de:	4d 30       	R1 = P5;
 10014e0:	42 30       	R0 = P2;
 10014e2:	c1 64       	R1 += 0x18;		/* ( 24) */
 10014e4:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 10014e6:	00 e3 0f 74 	CALL 0x100fd04 <_memcpy>;
 10014ea:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100ffbe(16842686) */
 10014ee:	00 e1 b8 19 	R0.L = 0x19b8;		/* (6584)	R0=0x10019b8 <_skds>(16783800) */
 10014f2:	f0 b0       	[SP + 0xc] = R0;
 10014f4:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10019b8 <_skds>(16783800) */
 10014f8:	00 e1 c0 19 	R0.L = 0x19c0;		/* (6592)	R0=0x10019c0 <_ivs>(16783808) */
 10014fc:	30 b1       	[SP + 0x10] = R0;
 10014fe:	42 e1 00 01 	R2.H = 0x100;		/* (256)	R2=0x1000008(16777224) */
 1001502:	44 30       	R0 = P4;
 1001504:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1001506:	02 e1 c0 18 	R2.L = 0x18c0;		/* (6336)	R2=0x10018c0(16783552) */
 100150a:	ff e3 81 fd 	CALL 0x100100c <_ll_send_control_data>;
 100150e:	2d 20       	JUMP.S 0x1001568 <_ll_rx_handler+0x3cc>;
 1001510:	44 30       	R0 = P4;
 1001512:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 1001514:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1001516:	ff e3 7b fd 	CALL 0x100100c <_ll_send_control_data>;
 100151a:	27 20       	JUMP.S 0x1001568 <_ll_rx_handler+0x3cc>;
 100151c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10019c0 <_ivs>(16783808) */
 1001520:	00 e1 99 19 	R0.L = 0x1999;		/* (6553)	R0=0x1001999 <_le_feature>(16783769) */
 1001524:	f0 b0       	[SP + 0xc] = R0;
 1001526:	44 30       	R0 = P4;
 1001528:	49 60       	R1 = 0x9 (X);		/*		R1=0x9(  9) */
 100152a:	42 e1 00 01 	R2.H = 0x100;		/* (256)	R2=0x1000000 <_START>(16777216) */
 100152e:	02 e1 a0 18 	R2.L = 0x18a0;		/* (6304)	R2=0x10018a0(16783520) */
 1001532:	0c 20       	JUMP.S 0x100154a <_ll_rx_handler+0x3ae>;
 1001534:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1001999 <_le_feature>(16783769) */
 1001538:	00 e1 80 19 	R0.L = 0x1980;		/* (6528)	R0=0x1001980 <_version>(16783744) */
 100153c:	f0 b0       	[SP + 0xc] = R0;
 100153e:	42 e1 00 01 	R2.H = 0x100;		/* (256)	R2=0x10018a0(16783520) */
 1001542:	44 30       	R0 = P4;
 1001544:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 1001546:	02 e1 60 18 	R2.L = 0x1860;		/* (6240)	R2=0x1001860(16783456) */
 100154a:	ff e3 61 fd 	CALL 0x100100c <_ll_send_control_data>;
 100154e:	0d 20       	JUMP.S 0x1001568 <_ll_rx_handler+0x3cc>;
 1001550:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1001980 <_version>(16783744) */
 1001554:	0f 30       	R1 = R7;
 1001556:	00 e1 a4 18 	R0.L = 0x18a4;		/* (6308)	R0=0x10018a4(16783524) */
 100155a:	00 e3 13 6d 	CALL 0x100ef80 <_printf>;
 100155e:	05 20       	JUMP.S 0x1001568 <_ll_rx_handler+0x3cc>;
 1001560:	a8 e4 06 00 	R0 = B[P5 + 0x6] (Z);
 1001564:	00 0c       	CC = R0 == 0x0;
 1001566:	0c 18       	IF CC JUMP 0x100157e <_ll_rx_handler+0x3e2>;
 1001568:	44 30       	R0 = P4;
 100156a:	ff e3 4d fc 	CALL 0x1000e04 <___rx_oneshot_run>;
 100156e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x58 */
 1001572:	0a e1 78 1e 	P2.L = 0x1e78;		/* (7800)	P2=0x1e78 <_ll> */
 1001576:	d2 ac       	P2 = [P2 + 0xc];
 1001578:	44 30       	R0 = P4;
 100157a:	4d 30       	R1 = P5;
 100157c:	62 00       	CALL (P2);
 100157e:	01 e8 00 00 	UNLINK;
 1001582:	a4 05       	(R7:4, P5:4) = [SP++];
 1001584:	10 00       	RTS;
	...

01001588 <_aes128_start>:
 1001588:	78 05       	[--SP] = (R7:7);
 100158a:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100158e:	37 00       	CLI R7;
 1001590:	00 e3 e8 70 	CALL 0x100f760 <_aes128_start_enc>;
 1001594:	47 00       	STI R7;
 1001596:	01 e8 00 00 	UNLINK;
 100159a:	38 05       	(R7:7) = [SP++];
 100159c:	10 00       	RTS;
	...

010015a0 <_ll_link_for_handle>:
 10015a0:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x66 */
 10015a4:	09 e1 78 1e 	P1.L = 0x1e78;		/* (7800)	P1=0x1e78 <_ll> */
 10015a8:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10015ac:	4a ac       	P2 = [P1 + 0x4];
 10015ae:	21 6c       	P1 += 0x4;		/* (  4) */
 10015b0:	c2 6f       	P2 += -0x8;		/* ( -8) */
 10015b2:	07 20       	JUMP.S 0x10015c0 <_ll_link_for_handle+0x20>;
 10015b4:	00 00       	NOP;
 10015b6:	d1 a4       	R1 = W[P2 + 0x6] (Z);
 10015b8:	01 08       	CC = R1 == R0;
 10015ba:	09 1c       	IF CC JUMP 0x10015cc <_ll_link_for_handle+0x2c> (BP);
 10015bc:	92 ac       	P2 = [P2 + 0x8];
 10015be:	c2 6f       	P2 += -0x8;		/* ( -8) */
 10015c0:	4a 30       	R1 = P2;
 10015c2:	41 64       	R1 += 0x8;		/* (  8) */
 10015c4:	51 30       	R2 = P1;
 10015c6:	11 08       	CC = R1 == R2;
 10015c8:	f6 17       	IF !CC JUMP 0x10015b4 <_ll_link_for_handle+0x14> (BP);
 10015ca:	02 68       	P2 = 0x0 (X);		/*		P2=0x0(  0) */
 10015cc:	42 30       	R0 = P2;
 10015ce:	01 e8 00 00 	UNLINK;
 10015d2:	10 00       	RTS;

010015d4 <_slave_send_conn_param_req>:
 10015d4:	00 00       	NOP;
 10015d6:	00 00       	NOP;
 10015d8:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10015dc:	01 e8 00 00 	UNLINK;
 10015e0:	10 00       	RTS;
	...

010015e4 <_slave_send_start_enc_req>:
 10015e4:	f4 05       	[--SP] = (R7:6, P5:4);
 10015e6:	28 32       	P5 = R0;
 10015e8:	2a e1 58 00 	P2 = 0x58 (X);		/*		P2=0x58( 88) */
 10015ec:	00 e8 0b 00 	LINK 0x2c;		/* (44) */
 10015f0:	67 32       	P4 = FP;
 10015f2:	04 6f       	P4 += -0x20;		/* (-32) */
 10015f4:	95 5a       	P2 = P5 + P2;
 10015f6:	10 91       	R0 = [P2];
 10015f8:	80 bb       	[FP -0x20] = R0;
 10015fa:	50 a0       	R0 = [P2 + 0x4];
 10015fc:	31 30       	R6 = R1;
 10015fe:	60 b0       	[P4 + 0x4] = R0;
 1001600:	47 30       	R0 = FP;
 1001602:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x100000c(16777228) */
 1001606:	01 e1 b8 19 	R1.L = 0x19b8;		/* (6584)	R1=0x10019b8 <_skds>(16783800) */
 100160a:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 100160c:	7f 30       	R7 = FP;
 100160e:	40 67       	R0 += -0x18;		/* (-24) */
 1001610:	00 e3 7a 73 	CALL 0x100fd04 <_memcpy>;
 1001614:	87 67       	R7 += -0x10;		/* (-16) */
 1001616:	17 30       	R2 = R7;
 1001618:	06 30       	R0 = R6;
 100161a:	4c 30       	R1 = P4;
 100161c:	ff e3 b6 ff 	CALL 0x1001588 <_aes128_start>;
 1001620:	4c 30       	R1 = P4;
 1001622:	07 30       	R0 = R7;
 1001624:	00 e3 86 46 	CALL 0x100a330 <_swap128>;
 1001628:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1000058 */
 100162c:	0a e1 70 01 	P2.L = 0x170;		/* (368)	P2=0x1000170 <___ble_ops> */
 1001630:	52 91       	P2 = [P2];
 1001632:	28 e4 37 00 	R0 = [P5 + 0xdc];
 1001636:	54 30       	R2 = P4;
 1001638:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100163a:	12 ae       	P2 = [P2 + 0x20];
 100163c:	62 00       	CALL (P2);
 100163e:	45 30       	R0 = P5;
 1001640:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 1001642:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1001644:	ff e3 e4 fc 	CALL 0x100100c <_ll_send_control_data>;
 1001648:	01 e8 00 00 	UNLINK;
 100164c:	b4 05       	(R7:6, P5:4) = [SP++];
 100164e:	10 00       	RTS;

01001650 <_ll_long_term_key_request_replay>:
 1001650:	78 05       	[--SP] = (R7:7);
 1001652:	39 30       	R7 = R1;
 1001654:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1001658:	ff e3 a4 ff 	CALL 0x10015a0 <_ll_link_for_handle>;
 100165c:	10 32       	P2 = R0;
 100165e:	91 e4 01 00 	R1 = B[P2 + 0x1] (Z);
 1001662:	01 0c       	CC = R1 == 0x0;
 1001664:	0b 14       	IF !CC JUMP 0x100167a <_ll_long_term_key_request_replay+0x2a> (BP);
 1001666:	21 e1 48 00 	R1 = 0x48 (X);		/*		R1=0x48( 72) */
 100166a:	08 50       	R0 = R0 + R1;
 100166c:	0f 30       	R1 = R7;
 100166e:	01 e8 00 00 	UNLINK;
 1001672:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1001674:	38 05       	(R7:7) = [SP++];
 1001676:	00 e2 47 73 	JUMP.L 0x100fd04 <_memcpy>;
 100167a:	0f 30       	R1 = R7;
 100167c:	01 e8 00 00 	UNLINK;
 1001680:	38 05       	(R7:7) = [SP++];
 1001682:	ff e2 b1 ff 	JUMP.L 0x10015e4 <_slave_send_start_enc_req>;
	...

01001688 <_ll_long_term_key_request_nagative_replay>:
 1001688:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100168c:	ff e3 8a ff 	CALL 0x10015a0 <_ll_link_for_handle>;
 1001690:	00 0c       	CC = R0 == 0x0;
 1001692:	0a 18       	IF CC JUMP 0x10016a6 <_ll_long_term_key_request_nagative_replay+0x1e>;
 1001694:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 1001696:	f1 b0       	[SP + 0xc] = R1;
 1001698:	42 e1 00 01 	R2.H = 0x100;		/* (256)	R2=0x1000010(16777232) */
 100169c:	69 60       	R1 = 0xd (X);		/*		R1=0xd( 13) */
 100169e:	02 e1 48 70 	R2.L = 0x7048;		/* (28744)	R2=0x1007048(16805960) */
 10016a2:	ff e3 b5 fc 	CALL 0x100100c <_ll_send_control_data>;
 10016a6:	01 e8 00 00 	UNLINK;
 10016aa:	10 00       	RTS;

010016ac <_ll_open>:
 10016ac:	fb 05       	[--SP] = (R7:7, P5:3);
 10016ae:	38 30       	R7 = R0;
 10016b0:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10018a4(16783524) */
 10016b4:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10016b8:	21 32       	P4 = R1;
 10016ba:	00 e1 c8 18 	R0.L = 0x18c8;		/* (6344)	R0=0x10018c8(16783560) */
 10016be:	00 e3 7d 6c 	CALL 0x100efb8 <_puts>;
 10016c2:	20 e1 e0 00 	R0 = 0xe0 (X);		/*		R0=0xe0(224) */
 10016c6:	ff e3 f5 fc 	CALL 0x10010b0 <___malloc>;
 10016ca:	28 32       	P5 = R0;
 10016cc:	45 0c       	CC = P5 == 0x0;
 10016ce:	08 10       	IF !CC JUMP 0x10016de <_ll_open+0x32>;
 10016d0:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10000e0(16777440) */
 10016d4:	00 e1 98 0a 	R0.L = 0xa98;		/* (2712)	R0=0x1000a98(16779928) */
 10016d8:	00 e3 70 6c 	CALL 0x100efb8 <_puts>;
 10016dc:	00 20       	JUMP.S 0x10016dc <_ll_open+0x30>;
 10016de:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10016e0:	22 e1 e0 00 	R2 = 0xe0 (X);		/*		R2=0xe0(224) */
 10016e4:	00 e3 5e 73 	CALL 0x100fda0 <_memset>;
 10016e8:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x170 */
 10016ec:	0a e1 78 1e 	P2.L = 0x1e78;		/* (7800)	P2=0x1e78 <_ll> */
 10016f0:	50 99       	R0 = B[P2] (X);
 10016f2:	41 43       	R1 = R0.B (Z);
 10016f4:	08 64       	R0 += 0x1;		/* (  1) */
 10016f6:	10 9b       	B[P2] = R0;
 10016f8:	45 30       	R0 = P5;
 10016fa:	91 ac       	P1 = [P2 + 0x8];
 10016fc:	e9 b4       	W[P5 + 0x6] = R1;
 10016fe:	40 64       	R0 += 0x8;		/* (  8) */
 1001700:	90 b0       	[P2 + 0x8] = R0;
 1001702:	22 6c       	P2 += 0x4;		/* (  4) */
 1001704:	aa bc       	[P5 + 0x8] = P2;
 1001706:	08 93       	[P1] = R0;
 1001708:	40 64       	R0 += 0x8;		/* (  8) */
 100170a:	28 b1       	[P5 + 0x10] = R0;
 100170c:	68 b1       	[P5 + 0x14] = R0;
 100170e:	40 64       	R0 += 0x8;		/* (  8) */
 1001710:	2b e1 60 00 	P3 = 0x60 (X);		/*		P3=0x60( 96) */
 1001714:	4c 30       	R1 = P4;
 1001716:	a8 b1       	[P5 + 0x18] = R0;
 1001718:	e8 b1       	[P5 + 0x1c] = R0;
 100171a:	dd 5a       	P3 = P5 + P3;
 100171c:	e9 bc       	[P5 + 0xc] = P1;
 100171e:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 1001720:	43 30       	R0 = P3;
 1001722:	4c e1 00 01 	P4.H = 0x100;		/* (256)	P4=0x1000170 <___ble_ops> */
 1001726:	00 e3 ef 72 	CALL 0x100fd04 <_memcpy>;
 100172a:	0c e1 70 01 	P4.L = 0x170;		/* (368)	P4=0x1000170 <___ble_ops> */
 100172e:	62 91       	P2 = [P4];
 1001730:	52 ac       	P2 = [P2 + 0x4];
 1001732:	62 00       	CALL (P2);
 1001734:	62 91       	P2 = [P4];
 1001736:	42 e1 00 01 	R2.H = 0x100;		/* (256)	R2=0x1000006(16777222) */
 100173a:	28 e6 37 00 	[P5 + 0xdc] = R0;
 100173e:	4d 30       	R1 = P5;
 1001740:	92 ad       	P2 = [P2 + 0x18];
 1001742:	02 e1 74 19 	R2.L = 0x1974;		/* (6516)	R2=0x1001974 <_ll_handler>(16783732) */
 1001746:	62 00       	CALL (P2);
 1001748:	62 91       	P2 = [P4];
 100174a:	53 30       	R2 = P3;
 100174c:	28 e4 37 00 	R0 = [P5 + 0xdc];
 1001750:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 1001752:	12 ae       	P2 = [P2 + 0x20];
 1001754:	62 00       	CALL (P2);
 1001756:	45 30       	R0 = P5;
 1001758:	0f 30       	R1 = R7;
 100175a:	ff e3 e7 fb 	CALL 0x1000f28 <___set_link_state>;
 100175e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000a98(16779928) */
 1001762:	00 e1 d4 18 	R0.L = 0x18d4;		/* (6356)	R0=0x10018d4(16783572) */
 1001766:	00 e3 29 6c 	CALL 0x100efb8 <_puts>;
 100176a:	01 e8 00 00 	UNLINK;
 100176e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1001770:	bb 05       	(R7:7, P5:3) = [SP++];
 1001772:	10 00       	RTS;

01001774 <_ll_send_acl_packet>:
 1001774:	08 32       	P1 = R0;
 1001776:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1001e78 */
 100177a:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100177e:	0a e1 70 01 	P2.L = 0x170;		/* (368)	P2=0x1000170 <___ble_ops> */
 1001782:	52 91       	P2 = [P2];
 1001784:	08 e4 37 00 	R0 = [P1 + 0xdc];
 1001788:	f2 b0       	[SP + 0xc] = R2;
 100178a:	19 30       	R3 = R1;
 100178c:	d2 ad       	P2 = [P2 + 0x1c];
 100178e:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 1001790:	13 30       	R2 = R3;
 1001792:	62 00       	CALL (P2);
 1001794:	01 e8 00 00 	UNLINK;
 1001798:	10 00       	RTS;
	...

0100179c <_ll_handler_register>:
 100179c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x170 */
 10017a0:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10017a4:	0a e1 78 1e 	P2.L = 0x1e78;		/* (7800)	P2=0x1e78 <_ll> */
 10017a8:	d0 b0       	[P2 + 0xc] = R0;
 10017aa:	01 e8 00 00 	UNLINK;
 10017ae:	10 00       	RTS;

010017b0 <_ll_init>:
 10017b0:	c5 04       	[--SP] = (P5:5);
 10017b2:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 10017b6:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10017ba:	00 e1 dc 18 	R0.L = 0x18dc;		/* (6364)	R0=0x10018dc(16783580) */
 10017be:	00 e3 fd 6b 	CALL 0x100efb8 <_puts>;
 10017c2:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x18dc(6364) */
 10017c6:	21 e1 00 06 	R1 = 0x600 (X);		/*		R1=0x600(1536) */
 10017ca:	00 e1 78 18 	R0.L = 0x1878;		/* (6264)	R0=0x1878 <_mem_pool>(6264) */
 10017ce:	00 e3 01 67 	CALL 0x100e5d0 <_lbuf_init>;
 10017d2:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1001e78 */
 10017d6:	0a e1 70 01 	P2.L = 0x170;		/* (368)	P2=0x1000170 <___ble_ops> */
 10017da:	52 91       	P2 = [P2];
 10017dc:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x0 <data_addr> */
 10017e0:	0d e1 78 1e 	P5.L = 0x1e78;		/* (7800)	P5=0x1e78 <_ll> */
 10017e4:	80 61       	R0 = 0x30 (X);		/*		R0=0x30( 48) */
 10017e6:	28 9b       	B[P5] = R0;
 10017e8:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10017ea:	e8 b0       	[P5 + 0xc] = R0;
 10017ec:	52 91       	P2 = [P2];
 10017ee:	45 30       	R0 = P5;
 10017f0:	20 64       	R0 += 0x4;		/* (  4) */
 10017f2:	68 b0       	[P5 + 0x4] = R0;
 10017f4:	a8 b0       	[P5 + 0x8] = R0;
 10017f6:	62 00       	CALL (P2);
 10017f8:	45 30       	R0 = P5;
 10017fa:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000600(16778752) */
 10017fe:	01 e8 00 00 	UNLINK;
 1001802:	80 64       	R0 += 0x10;		/* ( 16) */
 1001804:	01 e1 a8 0d 	R1.L = 0xda8;		/* (3496)	R1=0x1000da8 <_ll_thread_process>(16780712) */
 1001808:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100180a:	85 04       	(P5:5) = [SP++];
 100180c:	00 e2 dc 6c 	JUMP.L 0x100f1c4 <_thread_create>;
 1001810:	6c 6c       	P4 += 0xd;		/* ( 13) */
 1001812:	5f 64       	R7 += 0xb;		/* ( 11) */
 1001814:	69 73       	ILLEGAL;
 1001816:	63 6f       	P3 += -0x14;		/* (-20) */
 1001818:	6e 6e       	SP += -0x33;		/* (-51) */
 100181a:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 100181c:	74 0a       	CC = P4 <= SP (IU);
 100181e:	00 00       	NOP;
 1001820:	41 53       	R5 = R1 - R0;
 1001822:	53 45       	P3 += P2 (BREV);
 1001824:	52 54       	R1 = R2 & R2;
 1001826:	2d 46       	ILLEGAL;
 1001828:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 100182a:	4c 44       	P4 = P1 << 0x2;
 100182c:	3a 20       	JUMP.S 0x10018a0 <_ll_init+0xf0>;
 100182e:	5f 5f       	P5 = FP + (P3 << 0x2);
 1001830:	76 73       	ILLEGAL;
 1001832:	70 72       	ILLEGAL;
 1001834:	69 6e       	P1 += -0x33;		/* (-51) */
 1001836:	74 66       	R4 += -0x32;		/* (-50) */
 1001838:	5f 6c       	FP += 0xb;		/* ( 11) */
 100183a:	65 6e       	P5 += -0x34;		/* (-52) */
 100183c:	28 66       	R0 += -0x3b;		/* (-59) */
 100183e:	6f 72       	ILLEGAL;
 1001840:	6d 61       	R5 = 0x2d (X);		/*		R5=0x2d( 45) */
 1001842:	74 29       	JUMP.S 0x1000b2a <_debug_link+0x2e6>;
 1001844:	20 3c       	LT1 = R0;
 1001846:	20 73       	ILLEGAL;
 1001848:	69 7a       	ILLEGAL;
 100184a:	65 6f       	P5 += -0x14;		/* (-20) */
 100184c:	66 28       	JUMP.S 0x1000918 <_debug_link+0xd4>;
 100184e:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 1001850:	6e 6b       	SP = -0x13 (X);		/*		SP=0xffffffed(-19) */
 1001852:	2d 3e       	RETN = R5;
 1001854:	73 65       	R3 += 0x2e;		/* ( 46) */
 1001856:	6e 64       	R6 += 0xd;		/* ( 13) */
 1001858:	5f 62       	R7 = -0x35 (X);		/*		R7=0xffffffcb(-53) */
 100185a:	75 66       	R5 += -0x32;		/* (-50) */
 100185c:	29 00       	ILLEGAL;
 100185e:	00 00       	NOP;
 1001860:	63 30       	R4 = P3;
 1001862:	35 00       	CLI R5;
 1001864:	41 53       	R5 = R1 - R0;
 1001866:	53 45       	P3 += P2 (BREV);
 1001868:	52 54       	R1 = R2 & R2;
 100186a:	2d 46       	ILLEGAL;
 100186c:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 100186e:	4c 44       	P4 = P1 << 0x2;
 1001870:	3a 20       	JUMP.S 0x10018e4 <_ll_init+0x134>;
 1001872:	70 20       	JUMP.S 0x1001952 <_ll_init+0x1a2>;
 1001874:	21 3d       	LT1 = A0.W;
 1001876:	20 4e       	R0 >>= 0x4;
 1001878:	55 4c       	BITCLR (R5, 0xa);		/* bit 10 */
 100187a:	4c 00       	ILLEGAL;
 100187c:	41 53       	R5 = R1 - R0;
 100187e:	53 45       	P3 += P2 (BREV);
 1001880:	52 54       	R1 = R2 & R2;
 1001882:	2d 46       	ILLEGAL;
 1001884:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 1001886:	4c 44       	P4 = P1 << 0x2;
 1001888:	3a 20       	JUMP.S 0x10018fc <_ll_init+0x14c>;
 100188a:	70 20       	JUMP.S 0x100196a <_ll_init+0x1ba>;
 100188c:	21 3d       	LT1 = A0.W;
 100188e:	20 4e       	R0 >>= 0x4;
 1001890:	55 4c       	BITCLR (R5, 0xa);		/* bit 10 */
 1001892:	4c 0a       	CC = P4 <= P1 (IU);
 1001894:	25 73       	ILLEGAL;
 1001896:	0a 00       	ILLEGAL;
 1001898:	31 32       	SP = R1;
 100189a:	32 32       	SP = R2;
 100189c:	32 32       	SP = R2;
 100189e:	00 00       	NOP;
 10018a0:	63 30       	R4 = P3;
 10018a2:	38 00       	ILLEGAL;
 10018a4:	75 6e       	P5 += -0x32;		/* (-50) */
 10018a6:	6b 6f       	P3 += -0x13;		/* (-19) */
 10018a8:	6e 77       	ILLEGAL;
 10018aa:	2d 6f       	P5 += -0x1b;		/* (-27) */
 10018ac:	70 63       	R0 = -0x12 (X);		/*		R0=0xffffffee(-18) */
 10018ae:	6f 64       	R7 += 0xd;		/* ( 13) */
 10018b0:	65 3a       	ILLEGAL;
 10018b2:	20 25       	JUMP.S 0x10022f2 <_att_handle_request+0xe2>;
 10018b4:	78 0a       	CC = P0 <= FP (IU);
 10018b6:	00 00       	NOP;
 10018b8:	6f 3a       	ILLEGAL;
 10018ba:	20 25       	JUMP.S 0x10022fa <_att_handle_request+0xea>;
 10018bc:	78 0a       	CC = P0 <= FP (IU);
 10018be:	00 00       	NOP;
 10018c0:	63 30       	R4 = P3;
 10018c2:	38 63       	R0 = -0x19 (X);		/*		R0=0xffffffe7(-25) */
 10018c4:	30 34       	M2 = R0;
 10018c6:	00 00       	NOP;
 10018c8:	6c 6c       	P4 += 0xd;		/* ( 13) */
 10018ca:	5f 6f       	FP += -0x15;		/* (-21) */
 10018cc:	70 65       	R0 += 0x2e;		/* ( 46) */
 10018ce:	6e 0a       	CC = SP <= P5 (IU);
 10018d0:	00 00       	NOP;
 10018d2:	00 00       	NOP;
 10018d4:	65 78       	ILLEGAL;
 10018d6:	69 74       	ILLEGAL;
 10018d8:	0a 00       	ILLEGAL;
 10018da:	00 00       	NOP;
 10018dc:	6c 6c       	P4 += 0xd;		/* ( 13) */
 10018de:	5f 69       	FP = 0x2b (X);		/*		FP=0x2b( 43) */
 10018e0:	6e 69       	SP = 0x2d (X);		/*		SP=0x2d( 45) */
 10018e2:	74 0a       	CC = P4 <= SP (IU);
 10018e4:	00 00       	NOP;
 10018e6:	00 00       	NOP;
 10018e8:	4c 0f       	ILLEGAL;
 10018ea:	00 01       	ILLEGAL;
 10018ec:	c6 0f       	ILLEGAL;
 10018ee:	00 01       	ILLEGAL;
 10018f0:	58 0f       	ILLEGAL;
 10018f2:	00 01       	ILLEGAL;
 10018f4:	b4 0f       	ILLEGAL;
 10018f6:	00 01       	ILLEGAL;
 10018f8:	f0 0f       	ILLEGAL;
 10018fa:	00 01       	ILLEGAL;
 10018fc:	68 15       	IF !CC JUMP 0x1001bcc <_att_iterator_fetch_next+0x24> (BP);
 10018fe:	00 01       	ILLEGAL;
 1001900:	94 13       	IF !CC JUMP 0x1001828 <_ll_init+0x78>;
 1001902:	00 01       	ILLEGAL;
 1001904:	78 14       	IF !CC JUMP 0x10019f4 <_connection_data+0x1> (BP);
 1001906:	00 01       	ILLEGAL;
 1001908:	94 13       	IF !CC JUMP 0x1001830 <_ll_init+0x80>;
 100190a:	00 01       	ILLEGAL;
 100190c:	46 13       	IF !CC JUMP 0x1001798 <_ll_send_acl_packet+0x24>;
 100190e:	00 01       	ILLEGAL;
 1001910:	10 15       	IF !CC JUMP 0x1001b30 <_att_validate_security.clone.0+0xc> (BP);
 1001912:	00 01       	ILLEGAL;
 1001914:	68 15       	IF !CC JUMP 0x1001be4 <_att_iterator_fetch_next+0x3c> (BP);
 1001916:	00 01       	ILLEGAL;
 1001918:	68 15       	IF !CC JUMP 0x1001be8 <_att_iterator_fetch_next+0x40> (BP);
 100191a:	00 01       	ILLEGAL;
 100191c:	94 13       	IF !CC JUMP 0x1001844 <_ll_init+0x94>;
 100191e:	00 01       	ILLEGAL;
 1001920:	68 15       	IF !CC JUMP 0x1001bf0 <_att_iterator_fetch_next+0x48> (BP);
 1001922:	00 01       	ILLEGAL;
 1001924:	68 15       	IF !CC JUMP 0x1001bf4 <_att_iterator_fetch_next+0x4c> (BP);
 1001926:	00 01       	ILLEGAL;
 1001928:	68 15       	IF !CC JUMP 0x1001bf8 <_att_iterator_fetch_next+0x50> (BP);
 100192a:	00 01       	ILLEGAL;
 100192c:	36 13       	IF !CC JUMP 0x1001798 <_ll_send_acl_packet+0x24>;
 100192e:	00 01       	ILLEGAL;
 1001930:	68 15       	IF !CC JUMP 0x1001c00 <_att_iterator_fetch_next+0x58> (BP);
 1001932:	00 01       	ILLEGAL;
 1001934:	94 13       	IF !CC JUMP 0x100185c <_ll_init+0xac>;
 1001936:	00 01       	ILLEGAL;
 1001938:	8e 12       	IF !CC JUMP 0x1001654 <_ll_long_term_key_request_replay+0x4>;
 100193a:	00 01       	ILLEGAL;
 100193c:	da 13       	IF !CC JUMP 0x10018f0 <_ll_init+0x140>;
 100193e:	00 01       	ILLEGAL;
 1001940:	50 14       	IF !CC JUMP 0x10019e0 <_scan_rsp_data+0xc> (BP);
 1001942:	00 01       	ILLEGAL;
 1001944:	78 14       	IF !CC JUMP 0x1001a34 <_att_update_value_len+0x28> (BP);
 1001946:	00 01       	ILLEGAL;
 1001948:	7e 14       	IF !CC JUMP 0x1001a44 <_setup_error+0x4> (BP);
 100194a:	00 01       	ILLEGAL;
 100194c:	68 15       	IF !CC JUMP 0x1001c1c <_att_iterator_fetch_next+0x74> (BP);
 100194e:	00 01       	ILLEGAL;
 1001950:	10 15       	IF !CC JUMP 0x1001b70 <_att_validate_security.clone.0+0x4c> (BP);
 1001952:	00 01       	ILLEGAL;
 1001954:	10 15       	IF !CC JUMP 0x1001b74 <_att_validate_security.clone.0+0x50> (BP);
 1001956:	00 01       	ILLEGAL;
 1001958:	68 15       	IF !CC JUMP 0x1001c28 <_att_iterator_match_uuid16+0x4> (BP);
 100195a:	00 01       	ILLEGAL;
 100195c:	1c 15       	IF !CC JUMP 0x1001b94 <_att_iterator_has_next> (BP);
 100195e:	00 01       	ILLEGAL;
 1001960:	68 15       	IF !CC JUMP 0x1001c30 <_att_iterator_match_uuid16+0xc> (BP);
 1001962:	00 01       	ILLEGAL;
 1001964:	68 15       	IF !CC JUMP 0x1001c34 <_att_iterator_match_uuid16+0x10> (BP);
 1001966:	00 01       	ILLEGAL;
 1001968:	68 15       	IF !CC JUMP 0x1001c38 <_att_iterator_match_uuid16+0x14> (BP);
 100196a:	00 01       	ILLEGAL;
 100196c:	34 15       	IF !CC JUMP 0x1001bd4 <_att_iterator_fetch_next+0x2c> (BP);
 100196e:	00 01       	ILLEGAL;
 1001970:	68 15       	IF !CC JUMP 0x1001c40 <_att_iterator_match_uuid16+0x1c> (BP);
 1001972:	00 01       	ILLEGAL;

01001974 <_ll_handler>:
 1001974:	40 0e       	CC = P0 <= 0x0 (IU);
 1001976:	00 01       	ILLEGAL;
 1001978:	9c 11       	IF !CC JUMP 0x1001cb0 <_att_iterator_match_uuid+0x40>;
 100197a:	00 01       	ILLEGAL;
 100197c:	7c 10       	IF !CC JUMP 0x1001a74 <_setup_error_invalid_handle+0x8>;
 100197e:	00 01       	ILLEGAL;

01001980 <_version>:
 1001980:	06 0f       	ILLEGAL;
 1001982:	00 09       	CC = R0 <= R0;
 1001984:	61 00       	CALL (P1);
	...

01001988 <___func__.1556>:
 1001988:	5f 5f       	P5 = FP + (P3 << 0x2);
 100198a:	72 78       	ILLEGAL;
 100198c:	5f 6f       	FP += -0x15;		/* (-21) */
 100198e:	6e 65       	R6 += 0x2d;		/* ( 45) */
 1001990:	73 68       	P3 = 0xe (X);		/*		P3=0xe( 14) */
 1001992:	6f 74       	ILLEGAL;
 1001994:	5f 61       	R7 = 0x2b (X);		/*		R7=0x2b( 43) */
 1001996:	64 64       	R4 += 0xc;		/* ( 12) */
	...

01001999 <_le_feature>:
 1001999:	01 00       	ILLEGAL;
	...

010019a4 <___func__.1538>:
 10019a4:	5f 5f       	P5 = FP + (P3 << 0x2);
 10019a6:	65 76       	ILLEGAL;
 10019a8:	65 6e       	P5 += -0x34;		/* (-52) */
 10019aa:	74 5f       	P5 = P4 + (SP << 0x2);
 10019ac:	6f 6e       	FP += -0x33;		/* (-51) */
 10019ae:	65 73       	ILLEGAL;
 10019b0:	68 6f       	P0 += -0x13;		/* (-19) */
 10019b2:	74 5f       	P5 = P4 + (SP << 0x2);
 10019b4:	61 64       	R1 += 0xc;		/* ( 12) */
 10019b6:	64 00       	CALL (P4);

010019b8 <_skds>:
 10019b8:	02 13       	IF !CC JUMP 0x10017bc <_ll_init+0xc>;
 10019ba:	24 35       	ILLEGAL;
 10019bc:	46 57       	R5 = R6 | R0;
 10019be:	68 79       	ILLEGAL;

010019c0 <_ivs>:
 10019c0:	de af       	SP = [P3 + 0x3c];
 10019c2:	ba be       	[FP + 0x28] = P2;

010019c4 <_adv_ind_data>:
 10019c4:	02 01       	ILLEGAL;
 10019c6:	06 03       	CC = AQ;
 10019c8:	09 31       	R1 = A0.W;
 10019ca:	36 04       	ILLEGAL;
 10019cc:	0d 00       	ILLEGAL;
 10019ce:	05 10       	IF !CC JUMP 0x10019d8 <_scan_rsp_data+0x4>;
 10019d0:	03 03       	CC = V_COPY;
 10019d2:	0d 18       	IF CC JUMP 0x10019ec <_scan_rsp_data+0x18>;

010019d4 <_scan_rsp_data>:
 10019d4:	1e ff       	ILLEGAL;
 10019d6:	57 01       	[--SP] = M3;
 10019d8:	00 7c       	ILLEGAL;
 10019da:	5b 5d       	P5 = P3 + (P3 << 0x1);
 10019dc:	17 0e       	CC = R7 <= 0x2 (IU);
 10019de:	02 bd       	[P0 + 0x10] = P2;
 10019e0:	d7 0c       	CC = FP < 0x2;
 10019e2:	bb 8a       	W[P3 ++ FP] = R2.L;
 10019e4:	cc c3       	ILLEGAL;
 10019e6:	3c f2       	ILLEGAL;
 10019e8:	86 0f       	ILLEGAL;
 10019ea:	00 00       	NOP;
 10019ec:	00 88       	[P0 ++ P0] = R0;
 10019ee:	0f 10       	IF !CC JUMP 0x1001a0c <_att_update_value_len>;
 10019f0:	53 49       	CC = BITTST (R3, 0xa);		/* bit 10 */
 10019f2:	56 e8       	ILLEGAL;

010019f3 <_connection_data>:
 10019f3:	e8 98       	ILLEGAL;
 10019f5:	eb 6d       	ILLEGAL;
 10019f7:	ae 83       	P5 = [P5 + 0x24];
 10019f9:	19 02       	IF CC JUMP 0x1001cff <_att_find_handle+0x1b>;
 10019fb:	0a 00       	CC = R2 <= R0 (IU);
 10019fd:	27 00       	JUMP.S 0x10027fd <_att_handle_request+0x5ed>;
 10019ff:	00 00       	NOP;
 1001a01:	32 00       	P0 = R0;
 1001a03:	ff ff       	ILLEGAL;
 1001a05:	ff ff       	ILLEGAL;
 1001a07:	1f 87       	IF CC JUMP 0x1001a05 <_connection_data+0x12> (BP);
 1001a09:	00 00       	JUMP (PC + FP);
	...

01001a0c <_att_update_value_len>:
 1001a0c:	c5 04       	[--SP] = (P5:5);
 1001a0e:	28 32       	P5 = R0;
 1001a10:	01 30       	R0 = R1;
 1001a12:	00 e8 05 00 	LINK 0x14;		/* (20) */
 1001a16:	e9 a4       	R1 = W[P5 + 0x6] (Z);
 1001a18:	41 48       	CC = !BITTST (R1, 0x8);		/* bit  8 */
 1001a1a:	0e 18       	IF CC JUMP 0x1001a36 <_att_update_value_len+0x2a>;
 1001a1c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x170 */
 1001a20:	0a e1 98 1e 	P2.L = 0x1e98;		/* (7832)	P2=0x1e98 <_att_read_callback> */
 1001a24:	52 91       	P2 = [P2];
 1001a26:	42 0c       	CC = P2 == 0x0;
 1001a28:	07 18       	IF CC JUMP 0x1001a36 <_att_update_value_len+0x2a>;
 1001a2a:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1001a2c:	f2 b0       	[SP + 0xc] = R2;
 1001a2e:	32 b6       	W[SP + 0x10] = R2;
 1001a30:	29 a9       	R1 = W[P5 + 0x8] (X);
 1001a32:	62 00       	CALL (P2);
 1001a34:	28 b6       	W[P5 + 0x10] = R0;
 1001a36:	01 e8 00 00 	UNLINK;
 1001a3a:	85 04       	(P5:5) = [SP++];
 1001a3c:	10 00       	RTS;
	...

01001a40 <_setup_error>:
 1001a40:	c5 04       	[--SP] = (P5:5);
 1001a42:	28 32       	P5 = R0;
 1001a44:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1001a46:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1001a4a:	28 9b       	B[P5] = R0;
 1001a4c:	a9 e6 01 00 	B[P5 + 0x1] = R1;
 1001a50:	45 30       	R0 = P5;
 1001a52:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 1001a54:	00 e3 c2 43 	CALL 0x100a1d8 <_bt_store_16>;
 1001a58:	b8 e5 18 00 	R0 = B[FP + 0x18] (X);
 1001a5c:	a8 e6 04 00 	B[P5 + 0x4] = R0;
 1001a60:	01 e8 00 00 	UNLINK;
 1001a64:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 1001a66:	85 04       	(P5:5) = [SP++];
 1001a68:	10 00       	RTS;
	...

01001a6c <_setup_error_invalid_handle>:
 1001a6c:	00 e8 04 00 	LINK 0x10;		/* (16) */
 1001a70:	0b 60       	R3 = 0x1 (X);		/*		R3=0x1(  1) */
 1001a72:	b3 e6 0c 00 	B[SP + 0xc] = R3;
 1001a76:	ff e3 e5 ff 	CALL 0x1001a40 <_setup_error>;
 1001a7a:	01 e8 00 00 	UNLINK;
 1001a7e:	10 00       	RTS;

01001a80 <_setup_error_write_not_permitted>:
 1001a80:	00 e8 04 00 	LINK 0x10;		/* (16) */
 1001a84:	1b 60       	R3 = 0x3 (X);		/*		R3=0x3(  3) */
 1001a86:	b3 e6 0c 00 	B[SP + 0xc] = R3;
 1001a8a:	ff e3 db ff 	CALL 0x1001a40 <_setup_error>;
 1001a8e:	01 e8 00 00 	UNLINK;
 1001a92:	10 00       	RTS;

01001a94 <_att_copy_value>:
 1001a94:	08 32       	P1 = R0;
 1001a96:	70 05       	[--SP] = (R7:6);
 1001a98:	19 30       	R3 = R1;
 1001a9a:	00 e8 05 00 	LINK 0x14;		/* (20) */
 1001a9e:	02 30       	R0 = R2;
 1001aa0:	c9 a4       	R1 = W[P1 + 0x6] (Z);
 1001aa2:	be ab       	R6 = W[FP + 0x1c] (X);
 1001aa4:	41 48       	CC = !BITTST (R1, 0x8);		/* bit  8 */
 1001aa6:	11 1c       	IF CC JUMP 0x1001ac8 <_att_copy_value+0x34> (BP);
 1001aa8:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1e98 <_att_read_callback> */
 1001aac:	0a e1 98 1e 	P2.L = 0x1e98;		/* (7832)	P2=0x1e98 <_att_read_callback> */
 1001ab0:	52 91       	P2 = [P2];
 1001ab2:	42 0c       	CC = P2 == 0x0;
 1001ab4:	0a 18       	IF CC JUMP 0x1001ac8 <_att_copy_value+0x34>;
 1001ab6:	f2 b0       	[SP + 0xc] = R2;
 1001ab8:	36 b6       	W[SP + 0x10] = R6;
 1001aba:	13 30       	R2 = R3;
 1001abc:	09 a9       	R1 = W[P1 + 0x8] (X);
 1001abe:	78 e5 10 00 	R0 = W[FP + 0x20] (X);
 1001ac2:	62 00       	CALL (P2);
 1001ac4:	c0 42       	R0 = R0.L (Z);
 1001ac6:	0d 20       	JUMP.S 0x1001ae0 <_att_copy_value+0x4c>;
 1001ac8:	f2 42       	R2 = R6.L (Z);
 1001aca:	0f aa       	R7 = W[P1 + 0x10] (X);
 1001acc:	df 52       	R3 = R7 - R3;
 1001ace:	d9 42       	R1 = R3.L (Z);
 1001ad0:	0a 0a       	CC = R2 <= R1 (IU);
 1001ad2:	1e 07       	IF CC R3 = R6;
 1001ad4:	df 42       	R7 = R3.L (Z);
 1001ad6:	49 a1       	R1 = [P1 + 0x14];
 1001ad8:	17 30       	R2 = R7;
 1001ada:	00 e3 15 71 	CALL 0x100fd04 <_memcpy>;
 1001ade:	07 30       	R0 = R7;
 1001ae0:	01 e8 00 00 	UNLINK;
 1001ae4:	30 05       	(R7:6) = [SP++];
 1001ae6:	10 00       	RTS;

01001ae8 <_is_Bluetooth_Base_UUID>:
 1001ae8:	78 05       	[--SP] = (R7:7);
 1001aea:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000002(16777218) */
 1001aee:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1001af2:	38 30       	R7 = R0;
 1001af4:	01 e1 cc 29 	R1.L = 0x29cc;		/* (10700)	R1=0x10029cc <_bluetooth_base_uuid>(16787916) */
 1001af8:	62 60       	R2 = 0xc (X);		/*		R2=0xc( 12) */
 1001afa:	00 e3 c7 70 	CALL 0x100fc88 <_memcmp>;
 1001afe:	00 0c       	CC = R0 == 0x0;
 1001b00:	0d 10       	IF !CC JUMP 0x1001b1a <_is_Bluetooth_Base_UUID+0x32>;
 1001b02:	07 30       	R0 = R7;
 1001b04:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x10029cc <_bluetooth_base_uuid>(16787916) */
 1001b08:	70 64       	R0 += 0xe;		/* ( 14) */
 1001b0a:	01 e1 da 29 	R1.L = 0x29da;		/* (10714)	R1=0x10029da(16787930) */
 1001b0e:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 1001b10:	00 e3 bc 70 	CALL 0x100fc88 <_memcmp>;
 1001b14:	00 0c       	CC = R0 == 0x0;
 1001b16:	00 02       	R0 = CC;
 1001b18:	02 20       	JUMP.S 0x1001b1c <_is_Bluetooth_Base_UUID+0x34>;
 1001b1a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1001b1c:	01 e8 00 00 	UNLINK;
 1001b20:	38 05       	(R7:7) = [SP++];
 1001b22:	10 00       	RTS;

01001b24 <_att_validate_security.clone.0>:
 1001b24:	c9 42       	R1 = R1.L (Z);
 1001b26:	10 32       	P2 = R0;
 1001b28:	82 c6 a1 81 	R0 = R1 >> 0xc;
 1001b2c:	10 30       	R2 = R0;
 1001b2e:	00 0c       	CC = R0 == 0x0;
 1001b30:	0a 64       	R2 += 0x1;		/* (  1) */
 1001b32:	02 06       	IF !CC R0 = R2;
 1001b34:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1001b38:	51 48       	CC = !BITTST (R1, 0xa);		/* bit 10 */
 1001b3a:	05 1c       	IF CC JUMP 0x1001b44 <_att_validate_security.clone.0+0x20> (BP);
 1001b3c:	92 e4 07 00 	R2 = B[P2 + 0x7] (Z);
 1001b40:	02 0c       	CC = R2 == 0x0;
 1001b42:	15 18       	IF CC JUMP 0x1001b6c <_att_validate_security.clone.0+0x48>;
 1001b44:	59 48       	CC = !BITTST (R1, 0xb);		/* bit 11 */
 1001b46:	05 1c       	IF CC JUMP 0x1001b50 <_att_validate_security.clone.0+0x2c> (BP);
 1001b48:	91 e4 08 00 	R1 = B[P2 + 0x8] (Z);
 1001b4c:	01 0c       	CC = R1 == 0x0;
 1001b4e:	11 18       	IF CC JUMP 0x1001b70 <_att_validate_security.clone.0+0x4c>;
 1001b50:	00 0c       	CC = R0 == 0x0;
 1001b52:	05 1c       	IF CC JUMP 0x1001b5c <_att_validate_security.clone.0+0x38> (BP);
 1001b54:	91 e4 06 00 	R1 = B[P2 + 0x6] (Z);
 1001b58:	01 0c       	CC = R1 == 0x0;
 1001b5a:	0d 1c       	IF CC JUMP 0x1001b74 <_att_validate_security.clone.0+0x50> (BP);
 1001b5c:	00 00       	NOP;
 1001b5e:	91 e4 06 00 	R1 = B[P2 + 0x6] (Z);
 1001b62:	08 09       	CC = R0 <= R1;
 1001b64:	60 60       	R0 = 0xc (X);		/*		R0=0xc( 12) */
 1001b66:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1001b68:	01 07       	IF CC R0 = R1;
 1001b6a:	06 20       	JUMP.S 0x1001b76 <_att_validate_security.clone.0+0x52>;
 1001b6c:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 1001b6e:	04 20       	JUMP.S 0x1001b76 <_att_validate_security.clone.0+0x52>;
 1001b70:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 1001b72:	02 20       	JUMP.S 0x1001b76 <_att_validate_security.clone.0+0x52>;
 1001b74:	78 60       	R0 = 0xf (X);		/*		R0=0xf( 15) */
 1001b76:	01 e8 00 00 	UNLINK;
 1001b7a:	10 00       	RTS;

01001b7c <_att_iterator_init>:
 1001b7c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1e98 <_att_read_callback> */
 1001b80:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1001b84:	0a e1 a4 1e 	P2.L = 0x1ea4;		/* (7844)	P2=0x1ea4 <_att_db> */
 1001b88:	11 91       	R1 = [P2];
 1001b8a:	10 32       	P2 = R0;
 1001b8c:	11 93       	[P2] = R1;
 1001b8e:	01 e8 00 00 	UNLINK;
 1001b92:	10 00       	RTS;

01001b94 <_att_iterator_has_next>:
 1001b94:	10 32       	P2 = R0;
 1001b96:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1001b9a:	01 e8 00 00 	UNLINK;
 1001b9e:	10 91       	R0 = [P2];
 1001ba0:	00 0c       	CC = R0 == 0x0;
 1001ba2:	00 02       	R0 = CC;
 1001ba4:	00 4b       	BITTGL (R0, 0x0);		/* bit  0 */
 1001ba6:	10 00       	RTS;

01001ba8 <_att_iterator_fetch_next>:
 1001ba8:	10 32       	P2 = R0;
 1001baa:	78 05       	[--SP] = (R7:7);
 1001bac:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1001bb0:	51 91       	P1 = [P2];
 1001bb2:	89 e4 01 00 	R1 = B[P1 + 0x1] (Z);
 1001bb6:	08 99       	R0 = B[P1] (Z);
 1001bb8:	41 4f       	R1 <<= 0x8;
 1001bba:	41 56       	R1 = R1 | R0;
 1001bbc:	ca 42       	R2 = R1.L (Z);
 1001bbe:	01 30       	R0 = R1;
 1001bc0:	91 b4       	W[P2 + 0x4] = R1;
 1001bc2:	02 0c       	CC = R2 == 0x0;
 1001bc4:	0a 14       	IF !CC JUMP 0x1001bd8 <_att_iterator_fetch_next+0x30> (BP);
 1001bc6:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1001bc8:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1001bca:	d1 b4       	W[P2 + 0x6] = R1;
 1001bcc:	11 b5       	W[P2 + 0x8] = R1;
 1001bce:	d0 b0       	[P2 + 0xc] = R0;
 1001bd0:	11 b6       	W[P2 + 0x10] = R1;
 1001bd2:	50 b1       	[P2 + 0x14] = R0;
 1001bd4:	10 93       	[P2] = R0;
 1001bd6:	23 20       	JUMP.S 0x1001c1c <_att_iterator_fetch_next+0x74>;
 1001bd8:	00 00       	NOP;
 1001bda:	8a e4 03 00 	R2 = B[P1 + 0x3] (Z);
 1001bde:	8b e4 02 00 	R3 = B[P1 + 0x2] (Z);
 1001be2:	42 4f       	R2 <<= 0x8;
 1001be4:	9a 56       	R2 = R2 | R3;
 1001be6:	d2 b4       	W[P2 + 0x6] = R2;
 1001be8:	8f e4 05 00 	R7 = B[P1 + 0x5] (Z);
 1001bec:	8b e4 04 00 	R3 = B[P1 + 0x4] (Z);
 1001bf0:	47 4f       	R7 <<= 0x8;
 1001bf2:	df 56       	R3 = R7 | R3;
 1001bf4:	13 b5       	W[P2 + 0x8] = R3;
 1001bf6:	59 30       	R3 = P1;
 1001bf8:	33 64       	R3 += 0x6;		/* (  6) */
 1001bfa:	d3 b0       	[P2 + 0xc] = R3;
 1001bfc:	4a 48       	CC = !BITTST (R2, 0x9);		/* bit  9 */
 1001bfe:	06 1c       	IF CC JUMP 0x1001c0a <_att_iterator_fetch_next+0x62> (BP);
 1001c00:	51 67       	R1 += -0x16;		/* (-22) */
 1001c02:	11 b6       	W[P2 + 0x10] = R1;
 1001c04:	49 30       	R1 = P1;
 1001c06:	b1 64       	R1 += 0x16;		/* ( 22) */
 1001c08:	05 20       	JUMP.S 0x1001c12 <_att_iterator_fetch_next+0x6a>;
 1001c0a:	c1 67       	R1 += -0x8;		/* ( -8) */
 1001c0c:	11 b6       	W[P2 + 0x10] = R1;
 1001c0e:	49 30       	R1 = P1;
 1001c10:	41 64       	R1 += 0x8;		/* (  8) */
 1001c12:	c0 42       	R0 = R0.L (Z);
 1001c14:	00 32       	P0 = R0;
 1001c16:	51 b1       	[P2 + 0x14] = R1;
 1001c18:	41 5a       	P1 = P1 + P0;
 1001c1a:	51 93       	[P2] = P1;
 1001c1c:	01 e8 00 00 	UNLINK;
 1001c20:	38 05       	(R7:7) = [SP++];
 1001c22:	10 00       	RTS;

01001c24 <_att_iterator_match_uuid16>:
 1001c24:	10 32       	P2 = R0;
 1001c26:	fd 05       	[--SP] = (R7:7, P5:5);
 1001c28:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1001c2c:	39 30       	R7 = R1;
 1001c2e:	10 a5       	R0 = W[P2 + 0x8] (Z);
 1001c30:	00 0c       	CC = R0 == 0x0;
 1001c32:	1a 1c       	IF CC JUMP 0x1001c66 <_att_iterator_match_uuid16+0x42> (BP);
 1001c34:	d0 a4       	R0 = W[P2 + 0x6] (Z);
 1001c36:	48 48       	CC = !BITTST (R0, 0x9);		/* bit  9 */
 1001c38:	d5 ac       	P5 = [P2 + 0xc];
 1001c3a:	0c 1c       	IF CC JUMP 0x1001c52 <_att_iterator_match_uuid16+0x2e> (BP);
 1001c3c:	45 30       	R0 = P5;
 1001c3e:	ff e3 55 ff 	CALL 0x1001ae8 <_is_Bluetooth_Base_UUID>;
 1001c42:	00 0c       	CC = R0 == 0x0;
 1001c44:	11 1c       	IF CC JUMP 0x1001c66 <_att_iterator_match_uuid16+0x42> (BP);
 1001c46:	a8 e4 0d 00 	R0 = B[P5 + 0xd] (Z);
 1001c4a:	40 4f       	R0 <<= 0x8;
 1001c4c:	a9 e4 0c 00 	R1 = B[P5 + 0xc] (Z);
 1001c50:	06 20       	JUMP.S 0x1001c5c <_att_iterator_match_uuid16+0x38>;
 1001c52:	00 00       	NOP;
 1001c54:	a8 e4 01 00 	R0 = B[P5 + 0x1] (Z);
 1001c58:	40 4f       	R0 <<= 0x8;
 1001c5a:	29 99       	R1 = B[P5] (Z);
 1001c5c:	08 56       	R0 = R0 | R1;
 1001c5e:	ff 42       	R7 = R7.L (Z);
 1001c60:	38 08       	CC = R0 == R7;
 1001c62:	00 02       	R0 = CC;
 1001c64:	02 20       	JUMP.S 0x1001c68 <_att_iterator_match_uuid16+0x44>;
 1001c66:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1001c68:	01 e8 00 00 	UNLINK;
 1001c6c:	bd 05       	(R7:7, P5:5) = [SP++];
 1001c6e:	10 00       	RTS;

01001c70 <_att_iterator_match_uuid>:
 1001c70:	c4 04       	[--SP] = (P5:4);
 1001c72:	20 32       	P4 = R0;
 1001c74:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1001c78:	29 32       	P5 = R1;
 1001c7a:	20 a5       	R0 = W[P4 + 0x8] (Z);
 1001c7c:	00 0c       	CC = R0 == 0x0;
 1001c7e:	2d 18       	IF CC JUMP 0x1001cd8 <_att_iterator_match_uuid+0x68>;
 1001c80:	d2 42       	R2 = R2.L (Z);
 1001c82:	12 0c       	CC = R2 == 0x2;
 1001c84:	0c 14       	IF !CC JUMP 0x1001c9c <_att_iterator_match_uuid+0x2c> (BP);
 1001c86:	a9 e4 01 00 	R1 = B[P5 + 0x1] (Z);
 1001c8a:	28 99       	R0 = B[P5] (Z);
 1001c8c:	41 4f       	R1 <<= 0x8;
 1001c8e:	41 56       	R1 = R1 | R0;
 1001c90:	44 30       	R0 = P4;
 1001c92:	01 e8 00 00 	UNLINK;
 1001c96:	84 04       	(P5:4) = [SP++];
 1001c98:	ff e2 c6 ff 	JUMP.L 0x1001c24 <_att_iterator_match_uuid16>;
 1001c9c:	00 00       	NOP;
 1001c9e:	e0 a4       	R0 = W[P4 + 0x6] (Z);
 1001ca0:	48 48       	CC = !BITTST (R0, 0x9);		/* bit  9 */
 1001ca2:	07 1c       	IF CC JUMP 0x1001cb0 <_att_iterator_match_uuid+0x40> (BP);
 1001ca4:	e0 a0       	R0 = [P4 + 0xc];
 1001ca6:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1001ca8:	00 e3 f0 6f 	CALL 0x100fc88 <_memcmp>;
 1001cac:	00 0c       	CC = R0 == 0x0;
 1001cae:	13 20       	JUMP.S 0x1001cd4 <_att_iterator_match_uuid+0x64>;
 1001cb0:	01 30       	R0 = R1;
 1001cb2:	ff e3 1b ff 	CALL 0x1001ae8 <_is_Bluetooth_Base_UUID>;
 1001cb6:	00 0c       	CC = R0 == 0x0;
 1001cb8:	10 1c       	IF CC JUMP 0x1001cd8 <_att_iterator_match_uuid+0x68> (BP);
 1001cba:	e2 ac       	P2 = [P4 + 0xc];
 1001cbc:	a9 e4 0d 00 	R1 = B[P5 + 0xd] (Z);
 1001cc0:	a8 e4 0c 00 	R0 = B[P5 + 0xc] (Z);
 1001cc4:	41 4f       	R1 <<= 0x8;
 1001cc6:	41 56       	R1 = R1 | R0;
 1001cc8:	90 e4 01 00 	R0 = B[P2 + 0x1] (Z);
 1001ccc:	40 4f       	R0 <<= 0x8;
 1001cce:	12 99       	R2 = B[P2] (Z);
 1001cd0:	10 56       	R0 = R0 | R2;
 1001cd2:	01 08       	CC = R1 == R0;
 1001cd4:	00 02       	R0 = CC;
 1001cd6:	02 20       	JUMP.S 0x1001cda <_att_iterator_match_uuid+0x6a>;
 1001cd8:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1001cda:	01 e8 00 00 	UNLINK;
 1001cde:	84 04       	(P5:4) = [SP++];
 1001ce0:	10 00       	RTS;
	...

01001ce4 <_att_find_handle>:
 1001ce4:	fd 05       	[--SP] = (R7:7, P5:5);
 1001ce6:	cf 42       	R7 = R1.L (Z);
 1001ce8:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1001cec:	28 32       	P5 = R0;
 1001cee:	07 0c       	CC = R7 == 0x0;
 1001cf0:	12 18       	IF CC JUMP 0x1001d14 <_att_find_handle+0x30>;
 1001cf2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ea4 <_att_db> */
 1001cf6:	0a e1 a4 1e 	P2.L = 0x1ea4;		/* (7844)	P2=0x1ea4 <_att_db> */
 1001cfa:	10 91       	R0 = [P2];
 1001cfc:	28 93       	[P5] = R0;
 1001cfe:	07 20       	JUMP.S 0x1001d0c <_att_find_handle+0x28>;
 1001d00:	45 30       	R0 = P5;
 1001d02:	ff e3 53 ff 	CALL 0x1001ba8 <_att_iterator_fetch_next>;
 1001d06:	28 a5       	R0 = W[P5 + 0x8] (Z);
 1001d08:	38 08       	CC = R0 == R7;
 1001d0a:	07 1c       	IF CC JUMP 0x1001d18 <_att_find_handle+0x34> (BP);
 1001d0c:	28 91       	R0 = [P5];
 1001d0e:	00 0c       	CC = R0 == 0x0;
 1001d10:	f8 17       	IF !CC JUMP 0x1001d00 <_att_find_handle+0x1c> (BP);
 1001d12:	04 20       	JUMP.S 0x1001d1a <_att_find_handle+0x36>;
 1001d14:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1001d16:	02 20       	JUMP.S 0x1001d1a <_att_find_handle+0x36>;
 1001d18:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1001d1a:	01 e8 00 00 	UNLINK;
 1001d1e:	bd 05       	(R7:7, P5:5) = [SP++];
 1001d20:	10 00       	RTS;
	...

01001d24 <_att_uuid_for_handle>:
 1001d24:	00 e8 09 00 	LINK 0x24;		/* (36) */
 1001d28:	08 30       	R1 = R0;
 1001d2a:	47 30       	R0 = FP;
 1001d2c:	40 67       	R0 += -0x18;		/* (-24) */
 1001d2e:	ff e3 db ff 	CALL 0x1001ce4 <_att_find_handle>;
 1001d32:	00 0c       	CC = R0 == 0x0;
 1001d34:	0c 18       	IF CC JUMP 0x1001d4c <_att_uuid_for_handle+0x28>;
 1001d36:	78 e4 f7 ff 	R0 = W[FP + -0x12] (Z);
 1001d3a:	48 48       	CC = !BITTST (R0, 0x9);		/* bit  9 */
 1001d3c:	08 14       	IF !CC JUMP 0x1001d4c <_att_uuid_for_handle+0x28> (BP);
 1001d3e:	da b9       	P2 = [FP -0xc];
 1001d40:	90 e4 01 00 	R0 = B[P2 + 0x1] (Z);
 1001d44:	40 4f       	R0 <<= 0x8;
 1001d46:	11 99       	R1 = B[P2] (Z);
 1001d48:	08 56       	R0 = R0 | R1;
 1001d4a:	02 20       	JUMP.S 0x1001d4e <_att_uuid_for_handle+0x2a>;
 1001d4c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1001d4e:	01 e8 00 00 	UNLINK;
 1001d52:	10 00       	RTS;

01001d54 <_att_set_db>:
 1001d54:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ea4 <_att_db> */
 1001d58:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1001d5c:	0a e1 a4 1e 	P2.L = 0x1ea4;		/* (7844)	P2=0x1ea4 <_att_db> */
 1001d60:	10 93       	[P2] = R0;
 1001d62:	01 e8 00 00 	UNLINK;
 1001d66:	10 00       	RTS;

01001d68 <_att_set_read_callback>:
 1001d68:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ea4 <_att_db> */
 1001d6c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1001d70:	0a e1 98 1e 	P2.L = 0x1e98;		/* (7832)	P2=0x1e98 <_att_read_callback> */
 1001d74:	10 93       	[P2] = R0;
 1001d76:	01 e8 00 00 	UNLINK;
 1001d7a:	10 00       	RTS;

01001d7c <_att_set_write_callback>:
 1001d7c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1e98 <_att_read_callback> */
 1001d80:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1001d84:	0a e1 9c 1e 	P2.L = 0x1e9c;		/* (7836)	P2=0x1e9c <_att_write_callback> */
 1001d88:	10 93       	[P2] = R0;
 1001d8a:	01 e8 00 00 	UNLINK;
 1001d8e:	10 00       	RTS;

01001d90 <_att_dump_attributes>:
 1001d90:	70 05       	[--SP] = (R7:6);
 1001d92:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1e9c <_att_write_callback> */
 1001d96:	00 e8 0d 00 	LINK 0x34;		/* (52) */
 1001d9a:	0a e1 a4 1e 	P2.L = 0x1ea4;		/* (7844)	P2=0x1ea4 <_att_db> */
 1001d9e:	10 91       	R0 = [P2];
 1001da0:	7f 30       	R7 = FP;
 1001da2:	77 30       	R6 = FP;
 1001da4:	60 bb       	[FP -0x28] = R0;
 1001da6:	c7 66       	R7 += -0x28;		/* (-40) */
 1001da8:	86 67       	R6 += -0x10;		/* (-16) */
 1001daa:	15 20       	JUMP.S 0x1001dd4 <_att_dump_attributes+0x44>;
 1001dac:	07 30       	R0 = R7;
 1001dae:	ff e3 fd fe 	CALL 0x1001ba8 <_att_iterator_fetch_next>;
 1001db2:	78 e4 f0 ff 	R0 = W[FP + -0x20] (Z);
 1001db6:	00 0c       	CC = R0 == 0x0;
 1001db8:	11 18       	IF CC JUMP 0x1001dda <_att_dump_attributes+0x4a>;
 1001dba:	78 e4 ef ff 	R0 = W[FP + -0x22] (Z);
 1001dbe:	48 48       	CC = !BITTST (R0, 0x9);		/* bit  9 */
 1001dc0:	05 1c       	IF CC JUMP 0x1001dca <_att_dump_attributes+0x3a> (BP);
 1001dc2:	90 b9       	R0 = [FP -0x1c];
 1001dc4:	0e 30       	R1 = R6;
 1001dc6:	00 e3 b5 42 	CALL 0x100a330 <_swap128>;
 1001dca:	b0 b9       	R0 = [FP -0x14];
 1001dcc:	79 e4 f4 ff 	R1 = W[FP + -0x18] (Z);
 1001dd0:	00 e3 d2 42 	CALL 0x100a374 <_hexdump>;
 1001dd4:	60 b9       	R0 = [FP -0x28];
 1001dd6:	00 0c       	CC = R0 == 0x0;
 1001dd8:	ea 17       	IF !CC JUMP 0x1001dac <_att_dump_attributes+0x1c> (BP);
 1001dda:	01 e8 00 00 	UNLINK;
 1001dde:	30 05       	(R7:6) = [SP++];
 1001de0:	10 00       	RTS;
	...

01001de4 <_handle_read_blob_request>:
 1001de4:	11 32       	P2 = R1;
 1001de6:	e3 05       	[--SP] = (R7:4, P5:3);
 1001de8:	00 e8 0b 00 	LINK 0x2c;		/* (44) */
 1001dec:	28 32       	P5 = R0;
 1001dee:	78 e5 1a 00 	R0 = W[FP + 0x34] (X);
 1001df2:	97 e4 02 00 	R7 = B[P2 + 0x2] (Z);
 1001df6:	18 32       	P3 = R0;
 1001df8:	90 e4 01 00 	R0 = B[P2 + 0x1] (Z);
 1001dfc:	47 4f       	R7 <<= 0x8;
 1001dfe:	6f 30       	R5 = FP;
 1001e00:	c7 57       	R7 = R7 | R0;
 1001e02:	45 67       	R5 += -0x18;		/* (-24) */
 1001e04:	3c af       	P4 = [FP + 0x30];
 1001e06:	94 e5 03 00 	R4 = B[P2 + 0x3] (X);
 1001e0a:	96 e5 04 00 	R6 = B[P2 + 0x4] (X);
 1001e0e:	05 30       	R0 = R5;
 1001e10:	0f 30       	R1 = R7;
 1001e12:	ff e3 69 ff 	CALL 0x1001ce4 <_att_find_handle>;
 1001e16:	00 0c       	CC = R0 == 0x0;
 1001e18:	07 14       	IF !CC JUMP 0x1001e26 <_handle_read_blob_request+0x42> (BP);
 1001e1a:	44 30       	R0 = P4;
 1001e1c:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 1001e1e:	17 30       	R2 = R7;
 1001e20:	ff e3 26 fe 	CALL 0x1001a6c <_setup_error_invalid_handle>;
 1001e24:	3f 20       	JUMP.S 0x1001ea2 <_handle_read_blob_request+0xbe>;
 1001e26:	79 e5 f7 ff 	R1 = W[FP + -0x12] (X);
 1001e2a:	09 48       	CC = !BITTST (R1, 0x1);		/* bit  1 */
 1001e2c:	03 14       	IF !CC JUMP 0x1001e32 <_handle_read_blob_request+0x4e> (BP);
 1001e2e:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 1001e30:	16 20       	JUMP.S 0x1001e5c <_handle_read_blob_request+0x78>;
 1001e32:	45 30       	R0 = P5;
 1001e34:	ff e3 78 fe 	CALL 0x1001b24 <_att_validate_security.clone.0>;
 1001e38:	41 43       	R1 = R0.B (Z);
 1001e3a:	01 0c       	CC = R1 == 0x0;
 1001e3c:	10 10       	IF !CC JUMP 0x1001e5c <_handle_read_blob_request+0x78>;
 1001e3e:	76 43       	R6 = R6.B (Z);
 1001e40:	64 43       	R4 = R4.B (Z);
 1001e42:	05 30       	R0 = R5;
 1001e44:	29 95       	R1 = W[P5] (Z);
 1001e46:	46 4f       	R6 <<= 0x8;
 1001e48:	ff e3 e2 fd 	CALL 0x1001a0c <_att_update_value_len>;
 1001e4c:	a6 57       	R6 = R6 | R4;
 1001e4e:	f0 42       	R0 = R6.L (Z);
 1001e50:	79 e4 fc ff 	R1 = W[FP + -0x8] (Z);
 1001e54:	26 30       	R4 = R6;
 1001e56:	08 0a       	CC = R0 <= R1 (IU);
 1001e58:	0a 1c       	IF CC JUMP 0x1001e6c <_handle_read_blob_request+0x88> (BP);
 1001e5a:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 1001e5c:	b0 e6 0c 00 	B[SP + 0xc] = R0;
 1001e60:	44 30       	R0 = P4;
 1001e62:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 1001e64:	17 30       	R2 = R7;
 1001e66:	ff e3 ed fd 	CALL 0x1001a40 <_setup_error>;
 1001e6a:	1c 20       	JUMP.S 0x1001ea2 <_handle_read_blob_request+0xbe>;
 1001e6c:	09 64       	R1 += 0x1;		/* (  1) */
 1001e6e:	01 52       	R0 = R1 - R0;
 1001e70:	4b 30       	R1 = P3;
 1001e72:	ca 42       	R2 = R1.L (Z);
 1001e74:	10 09       	CC = R0 <= R2;
 1001e76:	06 1c       	IF CC JUMP 0x1001e82 <_handle_read_blob_request+0x9e> (BP);
 1001e78:	43 30       	R0 = P3;
 1001e7a:	f8 67       	R0 += -0x1;		/* ( -1) */
 1001e7c:	30 50       	R0 = R0 + R6;
 1001e7e:	78 e6 fc ff 	W[FP + -0x8] = R0;
 1001e82:	54 30       	R2 = P4;
 1001e84:	78 e5 fc ff 	R0 = W[FP + -0x8] (X);
 1001e88:	b0 53       	R6 = R0 - R6;
 1001e8a:	28 95       	R0 = W[P5] (Z);
 1001e8c:	30 b6       	W[SP + 0x10] = R0;
 1001e8e:	47 30       	R0 = FP;
 1001e90:	0c 30       	R1 = R4;
 1001e92:	0a 64       	R2 += 0x1;		/* (  1) */
 1001e94:	b6 b5       	W[SP + 0xc] = R6;
 1001e96:	40 67       	R0 += -0x18;		/* (-24) */
 1001e98:	ff e3 fe fd 	CALL 0x1001a94 <_att_copy_value>;
 1001e9c:	69 60       	R1 = 0xd (X);		/*		R1=0xd( 13) */
 1001e9e:	08 64       	R0 += 0x1;		/* (  1) */
 1001ea0:	21 9b       	B[P4] = R1;
 1001ea2:	01 e8 00 00 	UNLINK;
 1001ea6:	a3 05       	(R7:4, P5:3) = [SP++];
 1001ea8:	10 00       	RTS;
	...

01001eac <_handle_read_multiple_request>:
 1001eac:	e3 05       	[--SP] = (R7:4, P5:3);
 1001eae:	00 e8 0e 00 	LINK 0x38;		/* (56) */
 1001eb2:	28 32       	P5 = R0;
 1001eb4:	78 e5 1a 00 	R0 = W[FP + 0x34] (X);
 1001eb8:	10 32       	P2 = R0;
 1001eba:	d2 42       	R2 = R2.L (Z);
 1001ebc:	21 32       	P4 = R1;
 1001ebe:	fa 67       	R2 += -0x1;		/* ( -1) */
 1001ec0:	0a 4e       	R2 >>= 0x1;
 1001ec2:	d2 42       	R2 = R2.L (Z);
 1001ec4:	92 bb       	[FP -0x1c] = R2;
 1001ec6:	fa 6f       	P2 += -0x1;		/* ( -1) */
 1001ec8:	5f 32       	P3 = FP;
 1001eca:	c1 42       	R1 = R0.L (Z);
 1001ecc:	52 30       	R2 = P2;
 1001ece:	3d a3       	R5 = [FP + 0x30];
 1001ed0:	0c 6c       	P4 += 0x1;		/* (  1) */
 1001ed2:	04 60       	R4 = 0x0 (X);		/*		R4=0x0(  0) */
 1001ed4:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 1001ed6:	43 6f       	P3 += -0x18;		/* (-24) */
 1001ed8:	81 bb       	[FP -0x20] = R1;
 1001eda:	7a e6 ee ff 	W[FP + -0x24] = R2;
 1001ede:	3f 20       	JUMP.S 0x1001f5c <_handle_read_multiple_request+0xb0>;
 1001ee0:	00 00       	NOP;
 1001ee2:	26 94       	R6 = W[P4++] (Z);
 1001ee4:	f0 42       	R0 = R6.L (Z);
 1001ee6:	00 0c       	CC = R0 == 0x0;
 1001ee8:	05 14       	IF !CC JUMP 0x1001ef2 <_handle_read_multiple_request+0x46> (BP);
 1001eea:	05 30       	R0 = R5;
 1001eec:	71 60       	R1 = 0xe (X);		/*		R1=0xe( 14) */
 1001eee:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1001ef0:	0a 20       	JUMP.S 0x1001f04 <_handle_read_multiple_request+0x58>;
 1001ef2:	43 30       	R0 = P3;
 1001ef4:	0e 30       	R1 = R6;
 1001ef6:	ff e3 f7 fe 	CALL 0x1001ce4 <_att_find_handle>;
 1001efa:	00 0c       	CC = R0 == 0x0;
 1001efc:	08 14       	IF !CC JUMP 0x1001f0c <_handle_read_multiple_request+0x60> (BP);
 1001efe:	05 30       	R0 = R5;
 1001f00:	71 60       	R1 = 0xe (X);		/*		R1=0xe( 14) */
 1001f02:	16 30       	R2 = R6;
 1001f04:	ff e3 b4 fd 	CALL 0x1001a6c <_setup_error_invalid_handle>;
 1001f08:	38 30       	R7 = R0;
 1001f0a:	2f 20       	JUMP.S 0x1001f68 <_handle_read_multiple_request+0xbc>;
 1001f0c:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 1001f0e:	79 e5 f7 ff 	R1 = W[FP + -0x12] (X);
 1001f12:	0a 54       	R0 = R2 & R1;
 1001f14:	00 0c       	CC = R0 == 0x0;
 1001f16:	2e 18       	IF CC JUMP 0x1001f72 <_handle_read_multiple_request+0xc6>;
 1001f18:	45 30       	R0 = P5;
 1001f1a:	ff e3 05 fe 	CALL 0x1001b24 <_att_validate_security.clone.0>;
 1001f1e:	41 43       	R1 = R0.B (Z);
 1001f20:	01 0c       	CC = R1 == 0x0;
 1001f22:	29 14       	IF !CC JUMP 0x1001f74 <_handle_read_multiple_request+0xc8> (BP);
 1001f24:	43 30       	R0 = P3;
 1001f26:	29 95       	R1 = W[P5] (Z);
 1001f28:	ff e3 72 fd 	CALL 0x1001a0c <_att_update_value_len>;
 1001f2c:	f9 42       	R1 = R7.L (Z);
 1001f2e:	78 e4 fc ff 	R0 = W[FP + -0x8] (Z);
 1001f32:	01 50       	R0 = R1 + R0;
 1001f34:	81 b9       	R1 = [FP -0x20];
 1001f36:	08 09       	CC = R0 <= R1;
 1001f38:	05 1c       	IF CC JUMP 0x1001f42 <_handle_read_multiple_request+0x96> (BP);
 1001f3a:	7a e5 ee ff 	R2 = W[FP + -0x24] (X);
 1001f3e:	7a e6 fc ff 	W[FP + -0x8] = R2;
 1001f42:	fa 42       	R2 = R7.L (Z);
 1001f44:	78 e5 fc ff 	R0 = W[FP + -0x8] (X);
 1001f48:	b0 b5       	W[SP + 0xc] = R0;
 1001f4a:	28 95       	R0 = W[P5] (Z);
 1001f4c:	30 b6       	W[SP + 0x10] = R0;
 1001f4e:	95 50       	R2 = R5 + R2;
 1001f50:	43 30       	R0 = P3;
 1001f52:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1001f54:	ff e3 a0 fd 	CALL 0x1001a94 <_att_copy_value>;
 1001f58:	f8 51       	R7 = R0 + R7;
 1001f5a:	0c 64       	R4 += 0x1;		/* (  1) */
 1001f5c:	90 b9       	R0 = [FP -0x1c];
 1001f5e:	84 08       	CC = R4 < R0;
 1001f60:	c0 1f       	IF CC JUMP 0x1001ee0 <_handle_read_multiple_request+0x34> (BP);
 1001f62:	15 32       	P2 = R5;
 1001f64:	78 60       	R0 = 0xf (X);		/*		R0=0xf( 15) */
 1001f66:	10 9b       	B[P2] = R0;
 1001f68:	07 30       	R0 = R7;
 1001f6a:	01 e8 00 00 	UNLINK;
 1001f6e:	a3 05       	(R7:4, P5:3) = [SP++];
 1001f70:	10 00       	RTS;
 1001f72:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 1001f74:	b0 e6 0c 00 	B[SP + 0xc] = R0;
 1001f78:	05 30       	R0 = R5;
 1001f7a:	71 60       	R1 = 0xe (X);		/*		R1=0xe( 14) */
 1001f7c:	16 30       	R2 = R6;
 1001f7e:	ff e3 61 fd 	CALL 0x1001a40 <_setup_error>;
 1001f82:	c3 2f       	JUMP.S 0x1001f08 <_handle_read_multiple_request+0x5c>;

01001f84 <_handle_read_by_group_type_request>:
 1001f84:	e3 05       	[--SP] = (R7:4, P5:3);
 1001f86:	29 32       	P5 = R1;
 1001f88:	d2 42       	R2 = R2.L (Z);
 1001f8a:	00 e8 10 00 	LINK 0x40;		/* (64) */
 1001f8e:	3a 0e       	CC = R2 <= 0x7 (IU);
 1001f90:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 1001f92:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 1001f94:	01 06       	IF !CC R0 = R1;
 1001f96:	ad e4 02 00 	R5 = B[P5 + 0x2] (Z);
 1001f9a:	a9 e4 01 00 	R1 = B[P5 + 0x1] (Z);
 1001f9e:	45 4f       	R5 <<= 0x8;
 1001fa0:	aa e4 04 00 	R2 = B[P5 + 0x4] (Z);
 1001fa4:	4d 57       	R5 = R5 | R1;
 1001fa6:	a9 e4 03 00 	R1 = B[P5 + 0x3] (Z);
 1001faa:	42 4f       	R2 <<= 0x8;
 1001fac:	4a 56       	R1 = R2 | R1;
 1001fae:	5d 32       	P3 = P5;
 1001fb0:	79 e6 f2 ff 	W[FP + -0x1c] = R1;
 1001fb4:	78 e6 f0 ff 	W[FP + -0x20] = R0;
 1001fb8:	c7 42       	R7 = R0.L (Z);
 1001fba:	2b 6c       	P3 += 0x5;		/* (  5) */
 1001fbc:	43 30       	R0 = P3;
 1001fbe:	0f 30       	R1 = R7;
 1001fc0:	3c af       	P4 = [FP + 0x30];
 1001fc2:	00 e3 d9 41 	CALL 0x100a374 <_hexdump>;
 1001fc6:	e8 42       	R0 = R5.L (Z);
 1001fc8:	79 e4 f2 ff 	R1 = W[FP + -0x1c] (Z);
 1001fcc:	08 0a       	CC = R0 <= R1 (IU);
 1001fce:	03 10       	IF !CC JUMP 0x1001fd4 <_handle_read_by_group_type_request+0x50>;
 1001fd0:	00 0c       	CC = R0 == 0x0;
 1001fd2:	07 14       	IF !CC JUMP 0x1001fe0 <_handle_read_by_group_type_request+0x5c> (BP);
 1001fd4:	44 30       	R0 = P4;
 1001fd6:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 1001fd8:	15 30       	R2 = R5;
 1001fda:	ff e3 49 fd 	CALL 0x1001a6c <_setup_error_invalid_handle>;
 1001fde:	24 20       	JUMP.S 0x1002026 <_handle_read_by_group_type_request+0xa2>;
 1001fe0:	17 0c       	CC = R7 == 0x2;
 1001fe2:	07 14       	IF !CC JUMP 0x1001ff0 <_handle_read_by_group_type_request+0x6c> (BP);
 1001fe4:	98 e4 01 00 	R0 = B[P3 + 0x1] (Z);
 1001fe8:	40 4f       	R0 <<= 0x8;
 1001fea:	a9 e4 05 00 	R1 = B[P5 + 0x5] (Z);
 1001fee:	0b 20       	JUMP.S 0x1002004 <_handle_read_by_group_type_request+0x80>;
 1001ff0:	43 30       	R0 = P3;
 1001ff2:	ff e3 7b fd 	CALL 0x1001ae8 <_is_Bluetooth_Base_UUID>;
 1001ff6:	00 0c       	CC = R0 == 0x0;
 1001ff8:	08 1c       	IF CC JUMP 0x1002008 <_handle_read_by_group_type_request+0x84> (BP);
 1001ffa:	98 e4 0d 00 	R0 = B[P3 + 0xd] (Z);
 1001ffe:	40 4f       	R0 <<= 0x8;
 1002000:	99 e4 0c 00 	R1 = B[P3 + 0xc] (Z);
 1002004:	08 56       	R0 = R0 | R1;
 1002006:	02 20       	JUMP.S 0x100200a <_handle_read_by_group_type_request+0x86>;
 1002008:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100200a:	21 e1 00 d8 	R1 = -0x2800 (X);		/*		R1=0xffffd800(-10240) */
 100200e:	08 50       	R0 = R0 + R1;
 1002010:	c0 42       	R0 = R0.L (Z);
 1002012:	08 0e       	CC = R0 <= 0x1 (IU);
 1002014:	0b 1c       	IF CC JUMP 0x100202a <_handle_read_by_group_type_request+0xa6> (BP);
 1002016:	80 60       	R0 = 0x10 (X);		/*		R0=0x10( 16) */
 1002018:	b0 e6 0c 00 	B[SP + 0xc] = R0;
 100201c:	44 30       	R0 = P4;
 100201e:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 1002020:	15 30       	R2 = R5;
 1002022:	ff e3 0f fd 	CALL 0x1001a40 <_setup_error>;
 1002026:	38 30       	R7 = R0;
 1002028:	91 20       	JUMP.S 0x100214a <_handle_read_by_group_type_request+0x1c6>;
 100202a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ea4 <_att_db> */
 100202e:	0a e1 a4 1e 	P2.L = 0x1ea4;		/* (7844)	P2=0x1ea4 <_att_db> */
 1002032:	10 91       	R0 = [P2];
 1002034:	a0 bb       	[FP -0x18] = R0;
 1002036:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1002038:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100203a:	60 bb       	[FP -0x28] = R0;
 100203c:	7a e6 ee ff 	W[FP + -0x24] = R2;
 1002040:	78 e4 1a 00 	R0 = W[FP + 0x34] (Z);
 1002044:	e9 42       	R1 = R5.L (Z);
 1002046:	7a e4 f2 ff 	R2 = W[FP + -0x1c] (Z);
 100204a:	05 68       	P5 = 0x0 (X);		/*		P5=0x0(  0) */
 100204c:	04 60       	R4 = 0x0 (X);		/*		R4=0x0(  0) */
 100204e:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 1002050:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 1002052:	50 bb       	[FP -0x2c] = R0;
 1002054:	41 bb       	[FP -0x30] = R1;
 1002056:	92 bb       	[FP -0x1c] = R2;
 1002058:	6f 20       	JUMP.S 0x1002136 <_handle_read_by_group_type_request+0x1b2>;
 100205a:	47 30       	R0 = FP;
 100205c:	40 67       	R0 += -0x18;		/* (-24) */
 100205e:	ff e3 a5 fd 	CALL 0x1001ba8 <_att_iterator_fetch_next>;
 1002062:	79 e5 f8 ff 	R1 = W[FP + -0x10] (X);
 1002066:	c8 42       	R0 = R1.L (Z);
 1002068:	00 0c       	CC = R0 == 0x0;
 100206a:	07 1c       	IF CC JUMP 0x1002078 <_handle_read_by_group_type_request+0xf4> (BP);
 100206c:	42 b9       	R2 = [FP -0x30];
 100206e:	90 09       	CC = R0 < R2 (IU);
 1002070:	63 1c       	IF CC JUMP 0x1002136 <_handle_read_by_group_type_request+0x1b2> (BP);
 1002072:	92 b9       	R2 = [FP -0x1c];
 1002074:	10 0a       	CC = R0 <= R2 (IU);
 1002076:	63 10       	IF !CC JUMP 0x100213c <_handle_read_by_group_type_request+0x1b8>;
 1002078:	04 48       	CC = !BITTST (R4, 0x0);		/* bit  0 */
 100207a:	35 1c       	IF CC JUMP 0x10020e4 <_handle_read_by_group_type_request+0x160> (BP);
 100207c:	c9 42       	R1 = R1.L (Z);
 100207e:	01 0c       	CC = R1 == 0x0;
 1002080:	11 18       	IF CC JUMP 0x10020a2 <_handle_read_by_group_type_request+0x11e>;
 1002082:	47 30       	R0 = FP;
 1002084:	40 67       	R0 += -0x18;		/* (-24) */
 1002086:	21 e1 00 28 	R1 = 0x2800 (X);		/*		R1=0x2800(10240) */
 100208a:	ff e3 cd fd 	CALL 0x1001c24 <_att_iterator_match_uuid16>;
 100208e:	00 0c       	CC = R0 == 0x0;
 1002090:	09 14       	IF !CC JUMP 0x10020a2 <_handle_read_by_group_type_request+0x11e> (BP);
 1002092:	47 30       	R0 = FP;
 1002094:	40 67       	R0 += -0x18;		/* (-24) */
 1002096:	21 e1 01 28 	R1 = 0x2801 (X);		/*		R1=0x2801(10241) */
 100209a:	ff e3 c5 fd 	CALL 0x1001c24 <_att_iterator_match_uuid16>;
 100209e:	00 0c       	CC = R0 == 0x0;
 10020a0:	21 1c       	IF CC JUMP 0x10020e2 <_handle_read_by_group_type_request+0x15e> (BP);
 10020a2:	0f 30       	R1 = R7;
 10020a4:	44 30       	R0 = P4;
 10020a6:	7a e5 ee ff 	R2 = W[FP + -0x24] (X);
 10020aa:	00 e3 97 40 	CALL 0x100a1d8 <_bt_store_16>;
 10020ae:	17 64       	R7 += 0x2;		/* (  2) */
 10020b0:	0f 30       	R1 = R7;
 10020b2:	44 30       	R0 = P4;
 10020b4:	55 30       	R2 = P5;
 10020b6:	00 e3 91 40 	CALL 0x100a1d8 <_bt_store_16>;
 10020ba:	17 64       	R7 += 0x2;		/* (  2) */
 10020bc:	f4 42       	R4 = R6.L (Z);
 10020be:	f8 42       	R0 = R7.L (Z);
 10020c0:	4c 30       	R1 = P4;
 10020c2:	01 50       	R0 = R1 + R0;
 10020c4:	14 30       	R2 = R4;
 10020c6:	e2 67       	R2 += -0x4;		/* ( -4) */
 10020c8:	61 b9       	R1 = [FP -0x28];
 10020ca:	00 e3 1d 6e 	CALL 0x100fd04 <_memcpy>;
 10020ce:	06 30       	R0 = R6;
 10020d0:	e0 67       	R0 += -0x4;		/* ( -4) */
 10020d2:	f8 51       	R7 = R0 + R7;
 10020d4:	f8 42       	R0 = R7.L (Z);
 10020d6:	20 51       	R4 = R0 + R4;
 10020d8:	52 b9       	R2 = [FP -0x2c];
 10020da:	14 09       	CC = R4 <= R2;
 10020dc:	30 10       	IF !CC JUMP 0x100213c <_handle_read_by_group_type_request+0x1b8>;
 10020de:	04 60       	R4 = 0x0 (X);		/*		R4=0x0(  0) */
 10020e0:	02 20       	JUMP.S 0x10020e4 <_handle_read_by_group_type_request+0x160>;
 10020e2:	0c 60       	R4 = 0x1 (X);		/*		R4=0x1(  1) */
 10020e4:	78 e5 f8 ff 	R0 = W[FP + -0x10] (X);
 10020e8:	28 32       	P5 = R0;
 10020ea:	c0 42       	R0 = R0.L (Z);
 10020ec:	00 0c       	CC = R0 == 0x0;
 10020ee:	24 1c       	IF CC JUMP 0x1002136 <_handle_read_by_group_type_request+0x1b2> (BP);
 10020f0:	47 30       	R0 = FP;
 10020f2:	40 67       	R0 += -0x18;		/* (-24) */
 10020f4:	4b 30       	R1 = P3;
 10020f6:	7a e5 f0 ff 	R2 = W[FP + -0x20] (X);
 10020fa:	ff e3 bb fd 	CALL 0x1001c70 <_att_iterator_match_uuid>;
 10020fe:	00 0c       	CC = R0 == 0x0;
 1002100:	1b 1c       	IF CC JUMP 0x1002136 <_handle_read_by_group_type_request+0x1b2> (BP);
 1002102:	78 e5 fc ff 	R0 = W[FP + -0x8] (X);
 1002106:	f9 42       	R1 = R7.L (Z);
 1002108:	20 64       	R0 += 0x4;		/* (  4) */
 100210a:	09 0e       	CC = R1 <= 0x1 (IU);
 100210c:	06 18       	IF CC JUMP 0x1002118 <_handle_read_by_group_type_request+0x194>;
 100210e:	c1 42       	R1 = R0.L (Z);
 1002110:	f6 42       	R6 = R6.L (Z);
 1002112:	31 08       	CC = R1 == R6;
 1002114:	0a 1c       	IF CC JUMP 0x1002128 <_handle_read_by_group_type_request+0x1a4> (BP);
 1002116:	18 20       	JUMP.S 0x1002146 <_handle_read_by_group_type_request+0x1c2>;
 1002118:	09 0c       	CC = R1 == 0x1;
 100211a:	05 10       	IF !CC JUMP 0x1002124 <_handle_read_by_group_type_request+0x1a0>;
 100211c:	a0 e6 01 00 	B[P4 + 0x1] = R0;
 1002120:	17 60       	R7 = 0x2 (X);		/*		R7=0x2(  2) */
 1002122:	03 20       	JUMP.S 0x1002128 <_handle_read_by_group_type_request+0x1a4>;
 1002124:	06 30       	R0 = R6;
 1002126:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 1002128:	f2 b9       	R2 = [FP -0x4];
 100212a:	62 bb       	[FP -0x28] = R2;
 100212c:	55 30       	R2 = P5;
 100212e:	7a e6 ee ff 	W[FP + -0x24] = R2;
 1002132:	30 30       	R6 = R0;
 1002134:	0c 60       	R4 = 0x1 (X);		/*		R4=0x1(  1) */
 1002136:	a0 b9       	R0 = [FP -0x18];
 1002138:	00 0c       	CC = R0 == 0x0;
 100213a:	90 17       	IF !CC JUMP 0x100205a <_handle_read_by_group_type_request+0xd6> (BP);
 100213c:	f8 42       	R0 = R7.L (Z);
 100213e:	08 0c       	CC = R0 == 0x1;
 1002140:	03 14       	IF !CC JUMP 0x1002146 <_handle_read_by_group_type_request+0x1c2> (BP);
 1002142:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 1002144:	6a 2f       	JUMP.S 0x1002018 <_handle_read_by_group_type_request+0x94>;
 1002146:	88 60       	R0 = 0x11 (X);		/*		R0=0x11( 17) */
 1002148:	20 9b       	B[P4] = R0;
 100214a:	07 30       	R0 = R7;
 100214c:	01 e8 00 00 	UNLINK;
 1002150:	a3 05       	(R7:4, P5:3) = [SP++];
 1002152:	10 00       	RTS;

01002154 <_att_clear_transaction_queue>:
 1002154:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ea4 <_att_db> */
 1002158:	00 e8 06 00 	LINK 0x18;		/* (24) */
 100215c:	0a e1 9c 1e 	P2.L = 0x1e9c;		/* (7836)	P2=0x1e9c <_att_write_callback> */
 1002160:	52 91       	P2 = [P2];
 1002162:	42 0c       	CC = P2 == 0x0;
 1002164:	0a 18       	IF CC JUMP 0x1002178 <_att_clear_transaction_queue+0x24>;
 1002166:	08 32       	P1 = R0;
 1002168:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100216a:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100216c:	32 b1       	[SP + 0x10] = R2;
 100216e:	b1 b5       	W[SP + 0xc] = R1;
 1002170:	b1 b6       	W[SP + 0x14] = R1;
 1002172:	08 95       	R0 = W[P1] (Z);
 1002174:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 1002176:	62 00       	CALL (P2);
 1002178:	01 e8 00 00 	UNLINK;
 100217c:	10 00       	RTS;
	...

01002180 <_att_prepare_handle_value_notification>:
 1002180:	f4 05       	[--SP] = (R7:6, P5:4);
 1002182:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1002186:	bd ae       	P5 = [FP + 0x28];
 1002188:	20 32       	P4 = R0;
 100218a:	7f e5 12 00 	R7 = W[FP + 0x24] (X);
 100218e:	d8 60       	R0 = 0x1b (X);		/*		R0=0x1b( 27) */
 1002190:	19 30       	R3 = R1;
 1002192:	32 30       	R6 = R2;
 1002194:	28 9b       	B[P5] = R0;
 1002196:	45 30       	R0 = P5;
 1002198:	13 30       	R2 = R3;
 100219a:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100219c:	00 e3 1e 40 	CALL 0x100a1d8 <_bt_store_16>;
 10021a0:	61 a8       	R1 = W[P4 + 0x2] (X);
 10021a2:	c8 42       	R0 = R1.L (Z);
 10021a4:	fa 42       	R2 = R7.L (Z);
 10021a6:	f0 67       	R0 += -0x2;		/* ( -2) */
 10021a8:	10 09       	CC = R0 <= R2;
 10021aa:	e9 67       	R1 += -0x3;		/* ( -3) */
 10021ac:	39 07       	IF CC R7 = R1;
 10021ae:	45 30       	R0 = P5;
 10021b0:	fa 42       	R2 = R7.L (Z);
 10021b2:	0e 30       	R1 = R6;
 10021b4:	18 64       	R0 += 0x3;		/* (  3) */
 10021b6:	00 e3 a7 6d 	CALL 0x100fd04 <_memcpy>;
 10021ba:	07 30       	R0 = R7;
 10021bc:	01 e8 00 00 	UNLINK;
 10021c0:	18 64       	R0 += 0x3;		/* (  3) */
 10021c2:	b4 05       	(R7:6, P5:4) = [SP++];
 10021c4:	10 00       	RTS;
	...

010021c8 <_att_prepare_handle_value_indication>:
 10021c8:	f4 05       	[--SP] = (R7:6, P5:4);
 10021ca:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10021ce:	bd ae       	P5 = [FP + 0x28];
 10021d0:	20 32       	P4 = R0;
 10021d2:	7f e5 12 00 	R7 = W[FP + 0x24] (X);
 10021d6:	e8 60       	R0 = 0x1d (X);		/*		R0=0x1d( 29) */
 10021d8:	19 30       	R3 = R1;
 10021da:	32 30       	R6 = R2;
 10021dc:	28 9b       	B[P5] = R0;
 10021de:	45 30       	R0 = P5;
 10021e0:	13 30       	R2 = R3;
 10021e2:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 10021e4:	00 e3 fa 3f 	CALL 0x100a1d8 <_bt_store_16>;
 10021e8:	61 a8       	R1 = W[P4 + 0x2] (X);
 10021ea:	c8 42       	R0 = R1.L (Z);
 10021ec:	fa 42       	R2 = R7.L (Z);
 10021ee:	f0 67       	R0 += -0x2;		/* ( -2) */
 10021f0:	10 09       	CC = R0 <= R2;
 10021f2:	e9 67       	R1 += -0x3;		/* ( -3) */
 10021f4:	39 07       	IF CC R7 = R1;
 10021f6:	45 30       	R0 = P5;
 10021f8:	fa 42       	R2 = R7.L (Z);
 10021fa:	0e 30       	R1 = R6;
 10021fc:	18 64       	R0 += 0x3;		/* (  3) */
 10021fe:	00 e3 83 6d 	CALL 0x100fd04 <_memcpy>;
 1002202:	07 30       	R0 = R7;
 1002204:	01 e8 00 00 	UNLINK;
 1002208:	18 64       	R0 += 0x3;		/* (  3) */
 100220a:	b4 05       	(R7:6, P5:4) = [SP++];
 100220c:	10 00       	RTS;
	...

01002210 <_att_handle_request>:
 1002210:	e3 05       	[--SP] = (R7:4, P5:3);
 1002212:	21 32       	P4 = R1;
 1002214:	18 32       	P3 = R0;
 1002216:	00 e8 15 00 	LINK 0x54;		/* (84) */
 100221a:	71 60       	R1 = 0xe (X);		/*		R1=0xe( 14) */
 100221c:	3a 30       	R7 = R2;
 100221e:	20 99       	R0 = B[P4] (Z);
 1002220:	3d af       	P5 = [FP + 0x30];
 1002222:	5e a8       	R6 = W[P3 + 0x2] (X);
 1002224:	08 08       	CC = R0 == R1;
 1002226:	02 14       	IF !CC JUMP 0x100222a <_att_handle_request+0x1a> (BP);
 1002228:	6a 22       	JUMP.S 0x10026fc <_att_handle_request+0x4ec>;
 100222a:	08 0a       	CC = R0 <= R1 (IU);
 100222c:	1a 14       	IF !CC JUMP 0x1002260 <_att_handle_request+0x50> (BP);
 100222e:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 1002230:	10 08       	CC = R0 == R2;
 1002232:	c9 18       	IF CC JUMP 0x10023c4 <_att_handle_request+0x1b4>;
 1002234:	30 0e       	CC = R0 <= 0x6 (IU);
 1002236:	08 14       	IF !CC JUMP 0x1002246 <_att_handle_request+0x36> (BP);
 1002238:	10 0c       	CC = R0 == 0x2;
 100223a:	31 18       	IF CC JUMP 0x100229c <_att_handle_request+0x8c>;
 100223c:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 100223e:	08 08       	CC = R0 == R1;
 1002240:	02 18       	IF CC JUMP 0x1002244 <_att_handle_request+0x34>;
 1002242:	9d 23       	JUMP.S 0x100297c <_att_handle_request+0x76c>;
 1002244:	41 20       	JUMP.S 0x10022c6 <_att_handle_request+0xb6>;
 1002246:	52 60       	R2 = 0xa (X);		/*		R2=0xa( 10) */
 1002248:	10 08       	CC = R0 == R2;
 100224a:	02 14       	IF !CC JUMP 0x100224e <_att_handle_request+0x3e> (BP);
 100224c:	0f 22       	JUMP.S 0x100266a <_att_handle_request+0x45a>;
 100224e:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 1002250:	08 08       	CC = R0 == R1;
 1002252:	02 14       	IF !CC JUMP 0x1002256 <_att_handle_request+0x46> (BP);
 1002254:	4c 22       	JUMP.S 0x10026ec <_att_handle_request+0x4dc>;
 1002256:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 1002258:	10 08       	CC = R0 == R2;
 100225a:	02 18       	IF CC JUMP 0x100225e <_att_handle_request+0x4e>;
 100225c:	90 23       	JUMP.S 0x100297c <_att_handle_request+0x76c>;
 100225e:	4b 21       	JUMP.S 0x10024f4 <_att_handle_request+0x2e4>;
 1002260:	b1 60       	R1 = 0x16 (X);		/*		R1=0x16( 22) */
 1002262:	08 08       	CC = R0 == R1;
 1002264:	02 14       	IF !CC JUMP 0x1002268 <_att_handle_request+0x58> (BP);
 1002266:	a2 22       	JUMP.S 0x10027aa <_att_handle_request+0x59a>;
 1002268:	08 0a       	CC = R0 <= R1 (IU);
 100226a:	0a 14       	IF !CC JUMP 0x100227e <_att_handle_request+0x6e> (BP);
 100226c:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 100226e:	10 08       	CC = R0 == R2;
 1002270:	02 14       	IF !CC JUMP 0x1002274 <_att_handle_request+0x64> (BP);
 1002272:	4c 22       	JUMP.S 0x100270a <_att_handle_request+0x4fa>;
 1002274:	91 60       	R1 = 0x12 (X);		/*		R1=0x12( 18) */
 1002276:	08 08       	CC = R0 == R1;
 1002278:	02 18       	IF CC JUMP 0x100227c <_att_handle_request+0x6c>;
 100227a:	81 23       	JUMP.S 0x100297c <_att_handle_request+0x76c>;
 100227c:	55 22       	JUMP.S 0x1002726 <_att_handle_request+0x516>;
 100227e:	22 e1 52 00 	R2 = 0x52 (X);		/*		R2=0x52( 82) */
 1002282:	10 08       	CC = R0 == R2;
 1002284:	02 14       	IF !CC JUMP 0x1002288 <_att_handle_request+0x78> (BP);
 1002286:	50 23       	JUMP.S 0x1002926 <_att_handle_request+0x716>;
 1002288:	21 e1 d2 00 	R1 = 0xd2 (X);		/*		R1=0xd2(210) */
 100228c:	08 08       	CC = R0 == R1;
 100228e:	02 14       	IF !CC JUMP 0x1002292 <_att_handle_request+0x82> (BP);
 1002290:	7c 23       	JUMP.S 0x1002988 <_att_handle_request+0x778>;
 1002292:	c2 60       	R2 = 0x18 (X);		/*		R2=0x18( 24) */
 1002294:	10 08       	CC = R0 == R2;
 1002296:	02 18       	IF CC JUMP 0x100229a <_att_handle_request+0x8a>;
 1002298:	72 23       	JUMP.S 0x100297c <_att_handle_request+0x76c>;
 100229a:	07 23       	JUMP.S 0x10028a8 <_att_handle_request+0x698>;
 100229c:	a0 e4 02 00 	R0 = B[P4 + 0x2] (Z);
 10022a0:	a1 e4 01 00 	R1 = B[P4 + 0x1] (Z);
 10022a4:	40 4f       	R0 <<= 0x8;
 10022a6:	08 56       	R0 = R0 | R1;
 10022a8:	99 a8       	R1 = W[P3 + 0x4] (X);
 10022aa:	c3 42       	R3 = R0.L (Z);
 10022ac:	ca 42       	R2 = R1.L (Z);
 10022ae:	93 09       	CC = R3 < R2 (IU);
 10022b0:	01 06       	IF !CC R0 = R1;
 10022b2:	58 b4       	W[P3 + 0x2] = R0;
 10022b4:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 10022b6:	28 9b       	B[P5] = R0;
 10022b8:	5a a8       	R2 = W[P3 + 0x2] (X);
 10022ba:	45 30       	R0 = P5;
 10022bc:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 10022be:	00 e3 8d 3f 	CALL 0x100a1d8 <_bt_store_16>;
 10022c2:	1f 60       	R7 = 0x3 (X);		/*		R7=0x3(  3) */
 10022c4:	63 23       	JUMP.S 0x100298a <_att_handle_request+0x77a>;
 10022c6:	a4 e4 02 00 	R4 = B[P4 + 0x2] (Z);
 10022ca:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 10022ce:	44 4f       	R4 <<= 0x8;
 10022d0:	04 57       	R4 = R4 | R0;
 10022d2:	a7 e4 04 00 	R7 = B[P4 + 0x4] (Z);
 10022d6:	a0 e4 03 00 	R0 = B[P4 + 0x3] (Z);
 10022da:	47 4f       	R7 <<= 0x8;
 10022dc:	c7 57       	R7 = R7 | R0;
 10022de:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000003(16777219) */
 10022e2:	00 e1 94 29 	R0.L = 0x2994;		/* (10644)	R0=0x1002994(16787860) */
 10022e6:	00 e3 69 66 	CALL 0x100efb8 <_puts>;
 10022ea:	e0 42       	R0 = R4.L (Z);
 10022ec:	f9 42       	R1 = R7.L (Z);
 10022ee:	08 0a       	CC = R0 <= R1 (IU);
 10022f0:	03 10       	IF !CC JUMP 0x10022f6 <_att_handle_request+0xe6>;
 10022f2:	00 0c       	CC = R0 == 0x0;
 10022f4:	05 14       	IF !CC JUMP 0x10022fe <_att_handle_request+0xee> (BP);
 10022f6:	45 30       	R0 = P5;
 10022f8:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 10022fa:	14 30       	R2 = R4;
 10022fc:	8d 20       	JUMP.S 0x1002416 <_att_handle_request+0x206>;
 10022fe:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1e9c <_att_write_callback> */
 1002302:	0a e1 a4 1e 	P2.L = 0x1ea4;		/* (7844)	P2=0x1ea4 <_att_db> */
 1002306:	12 91       	R2 = [P2];
 1002308:	55 32       	P2 = P5;
 100230a:	f6 42       	R6 = R6.L (Z);
 100230c:	0a 6c       	P2 += 0x1;		/* (  1) */
 100230e:	a2 bb       	[FP -0x18] = R2;
 1002310:	05 60       	R5 = 0x0 (X);		/*		R5=0x0(  0) */
 1002312:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 1002314:	91 bb       	[FP -0x1c] = R1;
 1002316:	80 bb       	[FP -0x20] = R0;
 1002318:	2c e1 00 02 	P4 = 0x200 (X);		/*		P4=0x200(512) */
 100231c:	1e 32       	P3 = R6;
 100231e:	7a bb       	[FP -0x24] = P2;
 1002320:	40 20       	JUMP.S 0x10023a0 <_att_handle_request+0x190>;
 1002322:	47 30       	R0 = FP;
 1002324:	40 67       	R0 += -0x18;		/* (-24) */
 1002326:	ff e3 41 fc 	CALL 0x1001ba8 <_att_iterator_fetch_next>;
 100232a:	7a e5 f8 ff 	R2 = W[FP + -0x10] (X);
 100232e:	d0 42       	R0 = R2.L (Z);
 1002330:	00 0c       	CC = R0 == 0x0;
 1002332:	3a 18       	IF CC JUMP 0x10023a6 <_att_handle_request+0x196>;
 1002334:	91 b9       	R1 = [FP -0x1c];
 1002336:	08 0a       	CC = R0 <= R1 (IU);
 1002338:	37 10       	IF !CC JUMP 0x10023a6 <_att_handle_request+0x196>;
 100233a:	81 b9       	R1 = [FP -0x20];
 100233c:	88 09       	CC = R0 < R1 (IU);
 100233e:	31 1c       	IF CC JUMP 0x10023a0 <_att_handle_request+0x190> (BP);
 1002340:	4c 30       	R1 = P4;
 1002342:	78 e4 f7 ff 	R0 = W[FP + -0x12] (Z);
 1002346:	08 54       	R0 = R0 & R1;
 1002348:	00 0c       	CC = R0 == 0x0;
 100234a:	16 60       	R6 = 0x2 (X);		/*		R6=0x2(  2) */
 100234c:	82 68       	P2 = 0x10 (X);		/*		P2=0x10( 16) */
 100234e:	72 06       	IF !CC R6 = P2;
 1002350:	f9 42       	R1 = R7.L (Z);
 1002352:	09 0e       	CC = R1 <= 0x1 (IU);
 1002354:	06 18       	IF CC JUMP 0x1002360 <_att_handle_request+0x150>;
 1002356:	f0 42       	R0 = R6.L (Z);
 1002358:	ed 42       	R5 = R5.L (Z);
 100235a:	28 08       	CC = R0 == R5;
 100235c:	0d 1c       	IF CC JUMP 0x1002376 <_att_handle_request+0x166> (BP);
 100235e:	31 20       	JUMP.S 0x10023c0 <_att_handle_request+0x1b0>;
 1002360:	09 0c       	CC = R1 == 0x1;
 1002362:	08 10       	IF !CC JUMP 0x1002372 <_att_handle_request+0x162>;
 1002364:	7a b9       	P2 = [FP -0x24];
 1002366:	00 0c       	CC = R0 == 0x0;
 1002368:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100236a:	01 07       	IF CC R0 = R1;
 100236c:	10 9b       	B[P2] = R0;
 100236e:	17 60       	R7 = 0x2 (X);		/*		R7=0x2(  2) */
 1002370:	03 20       	JUMP.S 0x1002376 <_att_handle_request+0x166>;
 1002372:	35 30       	R6 = R5;
 1002374:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 1002376:	f8 42       	R0 = R7.L (Z);
 1002378:	f5 42       	R5 = R6.L (Z);
 100237a:	28 50       	R0 = R0 + R5;
 100237c:	10 64       	R0 += 0x2;		/* (  2) */
 100237e:	4b 30       	R1 = P3;
 1002380:	08 09       	CC = R0 <= R1;
 1002382:	1f 10       	IF !CC JUMP 0x10023c0 <_att_handle_request+0x1b0>;
 1002384:	0f 30       	R1 = R7;
 1002386:	45 30       	R0 = P5;
 1002388:	00 e3 28 3f 	CALL 0x100a1d8 <_bt_store_16>;
 100238c:	17 64       	R7 += 0x2;		/* (  2) */
 100238e:	f8 42       	R0 = R7.L (Z);
 1002390:	55 30       	R2 = P5;
 1002392:	02 50       	R0 = R2 + R0;
 1002394:	15 30       	R2 = R5;
 1002396:	d1 b9       	R1 = [FP -0xc];
 1002398:	00 e3 b6 6c 	CALL 0x100fd04 <_memcpy>;
 100239c:	f7 51       	R7 = R7 + R6;
 100239e:	2e 30       	R5 = R6;
 10023a0:	a0 b9       	R0 = [FP -0x18];
 10023a2:	00 0c       	CC = R0 == 0x0;
 10023a4:	bf 17       	IF !CC JUMP 0x1002322 <_att_handle_request+0x112> (BP);
 10023a6:	f8 42       	R0 = R7.L (Z);
 10023a8:	08 0c       	CC = R0 == 0x1;
 10023aa:	0b 14       	IF !CC JUMP 0x10023c0 <_att_handle_request+0x1b0> (BP);
 10023ac:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 10023ae:	b0 e6 0c 00 	B[SP + 0xc] = R0;
 10023b2:	45 30       	R0 = P5;
 10023b4:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 10023b6:	14 30       	R2 = R4;
 10023b8:	ff e3 44 fb 	CALL 0x1001a40 <_setup_error>;
 10023bc:	38 30       	R7 = R0;
 10023be:	e6 22       	JUMP.S 0x100298a <_att_handle_request+0x77a>;
 10023c0:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 10023c2:	93 21       	JUMP.S 0x10026e8 <_att_handle_request+0x4d8>;
 10023c4:	a1 e4 02 00 	R1 = B[P4 + 0x2] (Z);
 10023c8:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 10023cc:	41 4f       	R1 <<= 0x8;
 10023ce:	01 56       	R0 = R1 | R0;
 10023d0:	a5 e4 04 00 	R5 = B[P4 + 0x4] (Z);
 10023d4:	18 32       	P3 = R0;
 10023d6:	a0 e4 03 00 	R0 = B[P4 + 0x3] (Z);
 10023da:	45 4f       	R5 <<= 0x8;
 10023dc:	a1 e4 06 00 	R1 = B[P4 + 0x6] (Z);
 10023e0:	45 57       	R5 = R5 | R0;
 10023e2:	a0 e4 05 00 	R0 = B[P4 + 0x5] (Z);
 10023e6:	41 4f       	R1 <<= 0x8;
 10023e8:	01 56       	R0 = R1 | R0;
 10023ea:	cf 67       	R7 += -0x7;		/* ( -7) */
 10023ec:	fa 42       	R2 = R7.L (Z);
 10023ee:	78 e6 ee ff 	W[FP + -0x24] = R0;
 10023f2:	3c 6c       	P4 += 0x7;		/* (  7) */
 10023f4:	0a 30       	R1 = R2;
 10023f6:	44 30       	R0 = P4;
 10023f8:	12 bb       	[FP -0x3c] = R2;
 10023fa:	9c bb       	[FP -0x1c] = P4;
 10023fc:	00 e3 bc 3f 	CALL 0x100a374 <_hexdump>;
 1002400:	4b 30       	R1 = P3;
 1002402:	c8 42       	R0 = R1.L (Z);
 1002404:	e9 42       	R1 = R5.L (Z);
 1002406:	08 0a       	CC = R0 <= R1 (IU);
 1002408:	12 b9       	R2 = [FP -0x3c];
 100240a:	03 10       	IF !CC JUMP 0x1002410 <_att_handle_request+0x200>;
 100240c:	00 0c       	CC = R0 == 0x0;
 100240e:	07 14       	IF !CC JUMP 0x100241c <_att_handle_request+0x20c> (BP);
 1002410:	45 30       	R0 = P5;
 1002412:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 1002414:	53 30       	R2 = P3;
 1002416:	ff e3 2b fb 	CALL 0x1001a6c <_setup_error_invalid_handle>;
 100241a:	d1 2f       	JUMP.S 0x10023bc <_att_handle_request+0x1ac>;
 100241c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x10 */
 1002420:	0a e1 a4 1e 	P2.L = 0x1ea4;		/* (7844)	P2=0x1ea4 <_att_db> */
 1002424:	13 91       	R3 = [P2];
 1002426:	67 32       	P4 = FP;
 1002428:	a3 bb       	[FP -0x18] = R3;
 100242a:	04 60       	R4 = 0x0 (X);		/*		R4=0x0(  0) */
 100242c:	05 60       	R5 = 0x0 (X);		/*		R5=0x0(  0) */
 100242e:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 1002430:	44 6f       	P4 += -0x18;		/* (-24) */
 1002432:	82 bb       	[FP -0x20] = R2;
 1002434:	f6 42       	R6 = R6.L (Z);
 1002436:	60 bb       	[FP -0x28] = R0;
 1002438:	51 bb       	[FP -0x2c] = R1;
 100243a:	4e 20       	JUMP.S 0x10024d6 <_att_handle_request+0x2c6>;
 100243c:	44 30       	R0 = P4;
 100243e:	ff e3 b5 fb 	CALL 0x1001ba8 <_att_iterator_fetch_next>;
 1002442:	79 e5 f8 ff 	R1 = W[FP + -0x10] (X);
 1002446:	c8 42       	R0 = R1.L (Z);
 1002448:	00 0c       	CC = R0 == 0x0;
 100244a:	07 1c       	IF CC JUMP 0x1002458 <_att_handle_request+0x248> (BP);
 100244c:	62 b9       	R2 = [FP -0x28];
 100244e:	90 09       	CC = R0 < R2 (IU);
 1002450:	43 1c       	IF CC JUMP 0x10024d6 <_att_handle_request+0x2c6> (BP);
 1002452:	52 b9       	R2 = [FP -0x2c];
 1002454:	10 0a       	CC = R0 <= R2 (IU);
 1002456:	43 10       	IF !CC JUMP 0x10024dc <_att_handle_request+0x2cc>;
 1002458:	05 48       	CC = !BITTST (R5, 0x0);		/* bit  0 */
 100245a:	1f 1c       	IF CC JUMP 0x1002498 <_att_handle_request+0x288> (BP);
 100245c:	c9 42       	R1 = R1.L (Z);
 100245e:	01 0c       	CC = R1 == 0x0;
 1002460:	0f 18       	IF CC JUMP 0x100247e <_att_handle_request+0x26e>;
 1002462:	44 30       	R0 = P4;
 1002464:	21 e1 00 28 	R1 = 0x2800 (X);		/*		R1=0x2800(10240) */
 1002468:	ff e3 de fb 	CALL 0x1001c24 <_att_iterator_match_uuid16>;
 100246c:	00 0c       	CC = R0 == 0x0;
 100246e:	08 14       	IF !CC JUMP 0x100247e <_att_handle_request+0x26e> (BP);
 1002470:	44 30       	R0 = P4;
 1002472:	21 e1 01 28 	R1 = 0x2801 (X);		/*		R1=0x2801(10241) */
 1002476:	ff e3 d7 fb 	CALL 0x1001c24 <_att_iterator_match_uuid16>;
 100247a:	00 0c       	CC = R0 == 0x0;
 100247c:	0d 1c       	IF CC JUMP 0x1002496 <_att_handle_request+0x286> (BP);
 100247e:	45 30       	R0 = P5;
 1002480:	0f 30       	R1 = R7;
 1002482:	14 30       	R2 = R4;
 1002484:	00 e3 aa 3e 	CALL 0x100a1d8 <_bt_store_16>;
 1002488:	17 64       	R7 += 0x2;		/* (  2) */
 100248a:	f8 42       	R0 = R7.L (Z);
 100248c:	18 64       	R0 += 0x3;		/* (  3) */
 100248e:	b0 08       	CC = R0 < R6;
 1002490:	26 10       	IF !CC JUMP 0x10024dc <_att_handle_request+0x2cc>;
 1002492:	05 60       	R5 = 0x0 (X);		/*		R5=0x0(  0) */
 1002494:	02 20       	JUMP.S 0x1002498 <_att_handle_request+0x288>;
 1002496:	0d 60       	R5 = 0x1 (X);		/*		R5=0x1(  1) */
 1002498:	7c e5 f8 ff 	R4 = W[FP + -0x10] (X);
 100249c:	e0 42       	R0 = R4.L (Z);
 100249e:	00 0c       	CC = R0 == 0x0;
 10024a0:	1b 1c       	IF CC JUMP 0x10024d6 <_att_handle_request+0x2c6> (BP);
 10024a2:	44 30       	R0 = P4;
 10024a4:	79 e5 ee ff 	R1 = W[FP + -0x24] (X);
 10024a8:	ff e3 be fb 	CALL 0x1001c24 <_att_iterator_match_uuid16>;
 10024ac:	00 0c       	CC = R0 == 0x0;
 10024ae:	14 1c       	IF CC JUMP 0x10024d6 <_att_handle_request+0x2c6> (BP);
 10024b0:	78 e4 fc ff 	R0 = W[FP + -0x8] (Z);
 10024b4:	81 b9       	R1 = [FP -0x20];
 10024b6:	01 08       	CC = R1 == R0;
 10024b8:	0f 14       	IF !CC JUMP 0x10024d6 <_att_handle_request+0x2c6> (BP);
 10024ba:	90 b9       	R0 = [FP -0x1c];
 10024bc:	f1 b9       	R1 = [FP -0x4];
 10024be:	82 b9       	R2 = [FP -0x20];
 10024c0:	00 e3 e4 6b 	CALL 0x100fc88 <_memcmp>;
 10024c4:	00 0c       	CC = R0 == 0x0;
 10024c6:	08 14       	IF !CC JUMP 0x10024d6 <_att_handle_request+0x2c6> (BP);
 10024c8:	0f 30       	R1 = R7;
 10024ca:	45 30       	R0 = P5;
 10024cc:	14 30       	R2 = R4;
 10024ce:	00 e3 85 3e 	CALL 0x100a1d8 <_bt_store_16>;
 10024d2:	17 64       	R7 += 0x2;		/* (  2) */
 10024d4:	0d 60       	R5 = 0x1 (X);		/*		R5=0x1(  1) */
 10024d6:	a0 b9       	R0 = [FP -0x18];
 10024d8:	00 0c       	CC = R0 == 0x0;
 10024da:	b1 17       	IF !CC JUMP 0x100243c <_att_handle_request+0x22c> (BP);
 10024dc:	f8 42       	R0 = R7.L (Z);
 10024de:	08 0c       	CC = R0 == 0x1;
 10024e0:	08 14       	IF !CC JUMP 0x10024f0 <_att_handle_request+0x2e0> (BP);
 10024e2:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 10024e4:	b0 e6 0c 00 	B[SP + 0xc] = R0;
 10024e8:	45 30       	R0 = P5;
 10024ea:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 10024ec:	53 30       	R2 = P3;
 10024ee:	65 2f       	JUMP.S 0x10023b8 <_att_handle_request+0x1a8>;
 10024f0:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 10024f2:	fb 20       	JUMP.S 0x10026e8 <_att_handle_request+0x4d8>;
 10024f4:	ff 42       	R7 = R7.L (Z);
 10024f6:	3f 0e       	CC = R7 <= 0x7 (IU);
 10024f8:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 10024fa:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 10024fc:	a2 e4 02 00 	R2 = B[P4 + 0x2] (Z);
 1002500:	01 06       	IF !CC R0 = R1;
 1002502:	a1 e4 01 00 	R1 = B[P4 + 0x1] (Z);
 1002506:	42 4f       	R2 <<= 0x8;
 1002508:	4a 56       	R1 = R2 | R1;
 100250a:	79 e6 f2 ff 	W[FP + -0x1c] = R1;
 100250e:	a1 e4 04 00 	R1 = B[P4 + 0x4] (Z);
 1002512:	a2 e4 03 00 	R2 = B[P4 + 0x3] (Z);
 1002516:	41 4f       	R1 <<= 0x8;
 1002518:	78 e6 ee ff 	W[FP + -0x24] = R0;
 100251c:	2c 6c       	P4 += 0x5;		/* (  5) */
 100251e:	78 e4 f2 ff 	R0 = W[FP + -0x1c] (Z);
 1002522:	4a 56       	R1 = R2 | R1;
 1002524:	6c bb       	[FP -0x28] = P4;
 1002526:	08 0a       	CC = R0 <= R1 (IU);
 1002528:	03 10       	IF !CC JUMP 0x100252e <_att_handle_request+0x31e>;
 100252a:	00 0c       	CC = R0 == 0x0;
 100252c:	06 14       	IF !CC JUMP 0x1002538 <_att_handle_request+0x328> (BP);
 100252e:	45 30       	R0 = P5;
 1002530:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 1002532:	7a e5 f2 ff 	R2 = W[FP + -0x1c] (X);
 1002536:	70 2f       	JUMP.S 0x1002416 <_att_handle_request+0x206>;
 1002538:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ea4 <_att_db> */
 100253c:	41 bb       	[FP -0x30] = R1;
 100253e:	0a e1 a4 1e 	P2.L = 0x1ea4;		/* (7844)	P2=0x1ea4 <_att_db> */
 1002542:	0e 30       	R1 = R6;
 1002544:	12 91       	R2 = [P2];
 1002546:	e1 67       	R1 += -0x4;		/* ( -4) */
 1002548:	a2 bb       	[FP -0x18] = R2;
 100254a:	79 e6 f0 ff 	W[FP + -0x20] = R1;
 100254e:	67 30       	R4 = FP;
 1002550:	f2 42       	R2 = R6.L (Z);
 1002552:	11 64       	R1 += 0x2;		/* (  2) */
 1002554:	05 60       	R5 = 0x0 (X);		/*		R5=0x0(  0) */
 1002556:	04 68       	P4 = 0x0 (X);		/*		P4=0x0(  0) */
 1002558:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 100255a:	44 67       	R4 += -0x18;		/* (-24) */
 100255c:	50 bb       	[FP -0x2c] = R0;
 100255e:	32 bb       	[FP -0x34] = R2;
 1002560:	b9 e6 c8 ff 	B[FP + -0x38] = R1;
 1002564:	65 20       	JUMP.S 0x100262e <_att_handle_request+0x41e>;
 1002566:	04 30       	R0 = R4;
 1002568:	ff e3 20 fb 	CALL 0x1001ba8 <_att_iterator_fetch_next>;
 100256c:	7e e5 f8 ff 	R6 = W[FP + -0x10] (X);
 1002570:	f0 42       	R0 = R6.L (Z);
 1002572:	00 0c       	CC = R0 == 0x0;
 1002574:	61 18       	IF CC JUMP 0x1002636 <_att_handle_request+0x426>;
 1002576:	51 b9       	R1 = [FP -0x2c];
 1002578:	88 09       	CC = R0 < R1 (IU);
 100257a:	5a 1c       	IF CC JUMP 0x100262e <_att_handle_request+0x41e> (BP);
 100257c:	42 b9       	R2 = [FP -0x30];
 100257e:	10 0a       	CC = R0 <= R2 (IU);
 1002580:	5b 10       	IF !CC JUMP 0x1002636 <_att_handle_request+0x426>;
 1002582:	04 30       	R0 = R4;
 1002584:	61 b9       	R1 = [FP -0x28];
 1002586:	7a e5 ee ff 	R2 = W[FP + -0x24] (X);
 100258a:	ff e3 73 fb 	CALL 0x1001c70 <_att_iterator_match_uuid>;
 100258e:	00 0c       	CC = R0 == 0x0;
 1002590:	4f 1c       	IF CC JUMP 0x100262e <_att_handle_request+0x41e> (BP);
 1002592:	79 e5 f7 ff 	R1 = W[FP + -0x12] (X);
 1002596:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 1002598:	0a 54       	R0 = R2 & R1;
 100259a:	00 0c       	CC = R0 == 0x0;
 100259c:	05 14       	IF !CC JUMP 0x10025a6 <_att_handle_request+0x396> (BP);
 100259e:	e8 42       	R0 = R5.L (Z);
 10025a0:	00 0c       	CC = R0 == 0x0;
 10025a2:	2e 07       	IF CC R5 = R6;
 10025a4:	45 20       	JUMP.S 0x100262e <_att_handle_request+0x41e>;
 10025a6:	43 30       	R0 = P3;
 10025a8:	ff e3 be fa 	CALL 0x1001b24 <_att_validate_security.clone.0>;
 10025ac:	41 43       	R1 = R0.B (Z);
 10025ae:	01 0c       	CC = R1 == 0x0;
 10025b0:	44 14       	IF !CC JUMP 0x1002638 <_att_handle_request+0x428> (BP);
 10025b2:	04 30       	R0 = R4;
 10025b4:	19 95       	R1 = W[P3] (Z);
 10025b6:	ff e3 2b fa 	CALL 0x1001a0c <_att_update_value_len>;
 10025ba:	78 e5 fc ff 	R0 = W[FP + -0x8] (X);
 10025be:	10 64       	R0 += 0x2;		/* (  2) */
 10025c0:	fa 42       	R2 = R7.L (Z);
 10025c2:	08 30       	R1 = R0;
 10025c4:	0a 0e       	CC = R2 <= 0x1 (IU);
 10025c6:	07 18       	IF CC JUMP 0x10025d4 <_att_handle_request+0x3c4>;
 10025c8:	54 30       	R2 = P4;
 10025ca:	d0 42       	R0 = R2.L (Z);
 10025cc:	c9 42       	R1 = R1.L (Z);
 10025ce:	08 08       	CC = R0 == R1;
 10025d0:	0a 1c       	IF CC JUMP 0x10025e4 <_att_handle_request+0x3d4> (BP);
 10025d2:	36 20       	JUMP.S 0x100263e <_att_handle_request+0x42e>;
 10025d4:	0a 0c       	CC = R2 == 0x1;
 10025d6:	06 10       	IF !CC JUMP 0x10025e2 <_att_handle_request+0x3d2>;
 10025d8:	a8 e6 01 00 	B[P5 + 0x1] = R0;
 10025dc:	20 32       	P4 = R0;
 10025de:	17 60       	R7 = 0x2 (X);		/*		R7=0x2(  2) */
 10025e0:	02 20       	JUMP.S 0x10025e4 <_att_handle_request+0x3d4>;
 10025e2:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 10025e4:	44 30       	R0 = P4;
 10025e6:	c1 42       	R1 = R0.L (Z);
 10025e8:	f8 42       	R0 = R7.L (Z);
 10025ea:	41 50       	R1 = R1 + R0;
 10025ec:	32 b9       	R2 = [FP -0x34];
 10025ee:	11 09       	CC = R1 <= R2;
 10025f0:	0b 18       	IF CC JUMP 0x1002606 <_att_handle_request+0x3f6>;
 10025f2:	10 0e       	CC = R0 <= 0x2 (IU);
 10025f4:	25 10       	IF !CC JUMP 0x100263e <_att_handle_request+0x42e>;
 10025f6:	78 e5 f0 ff 	R0 = W[FP + -0x20] (X);
 10025fa:	78 e6 fc ff 	W[FP + -0x8] = R0;
 10025fe:	b9 e5 c8 ff 	R1 = B[FP + -0x38] (X);
 1002602:	a9 e6 01 00 	B[P5 + 0x1] = R1;
 1002606:	0f 30       	R1 = R7;
 1002608:	45 30       	R0 = P5;
 100260a:	7a e5 f8 ff 	R2 = W[FP + -0x10] (X);
 100260e:	00 e3 e5 3d 	CALL 0x100a1d8 <_bt_store_16>;
 1002612:	17 64       	R7 += 0x2;		/* (  2) */
 1002614:	fa 42       	R2 = R7.L (Z);
 1002616:	45 30       	R0 = P5;
 1002618:	90 50       	R2 = R0 + R2;
 100261a:	78 e5 fc ff 	R0 = W[FP + -0x8] (X);
 100261e:	b0 b5       	W[SP + 0xc] = R0;
 1002620:	18 95       	R0 = W[P3] (Z);
 1002622:	30 b6       	W[SP + 0x10] = R0;
 1002624:	04 30       	R0 = R4;
 1002626:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1002628:	ff e3 36 fa 	CALL 0x1001a94 <_att_copy_value>;
 100262c:	f8 51       	R7 = R0 + R7;
 100262e:	a0 b9       	R0 = [FP -0x18];
 1002630:	00 0c       	CC = R0 == 0x0;
 1002632:	9a 17       	IF !CC JUMP 0x1002566 <_att_handle_request+0x356> (BP);
 1002634:	02 20       	JUMP.S 0x1002638 <_att_handle_request+0x428>;
 1002636:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1002638:	f9 42       	R1 = R7.L (Z);
 100263a:	09 0e       	CC = R1 <= 0x1 (IU);
 100263c:	03 18       	IF CC JUMP 0x1002642 <_att_handle_request+0x432>;
 100263e:	48 60       	R0 = 0x9 (X);		/*		R0=0x9(  9) */
 1002640:	54 20       	JUMP.S 0x10026e8 <_att_handle_request+0x4d8>;
 1002642:	41 43       	R1 = R0.B (Z);
 1002644:	01 0c       	CC = R1 == 0x0;
 1002646:	0b 10       	IF !CC JUMP 0x100265c <_att_handle_request+0x44c>;
 1002648:	e8 42       	R0 = R5.L (Z);
 100264a:	00 0c       	CC = R0 == 0x0;
 100264c:	07 1c       	IF CC JUMP 0x100265a <_att_handle_request+0x44a> (BP);
 100264e:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 1002650:	b0 e6 0c 00 	B[SP + 0xc] = R0;
 1002654:	45 30       	R0 = P5;
 1002656:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 1002658:	a5 20       	JUMP.S 0x10027a2 <_att_handle_request+0x592>;
 100265a:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100265c:	b0 e6 0c 00 	B[SP + 0xc] = R0;
 1002660:	45 30       	R0 = P5;
 1002662:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 1002664:	7a e5 f2 ff 	R2 = W[FP + -0x1c] (X);
 1002668:	a8 2e       	JUMP.S 0x10023b8 <_att_handle_request+0x1a8>;
 100266a:	a7 e4 02 00 	R7 = B[P4 + 0x2] (Z);
 100266e:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 1002672:	47 4f       	R7 <<= 0x8;
 1002674:	6f 30       	R5 = FP;
 1002676:	c7 57       	R7 = R7 | R0;
 1002678:	45 67       	R5 += -0x18;		/* (-24) */
 100267a:	05 30       	R0 = R5;
 100267c:	0f 30       	R1 = R7;
 100267e:	ff e3 33 fb 	CALL 0x1001ce4 <_att_find_handle>;
 1002682:	00 0c       	CC = R0 == 0x0;
 1002684:	05 14       	IF !CC JUMP 0x100268e <_att_handle_request+0x47e> (BP);
 1002686:	45 30       	R0 = P5;
 1002688:	51 60       	R1 = 0xa (X);		/*		R1=0xa( 10) */
 100268a:	17 30       	R2 = R7;
 100268c:	c5 2e       	JUMP.S 0x1002416 <_att_handle_request+0x206>;
 100268e:	79 e5 f7 ff 	R1 = W[FP + -0x12] (X);
 1002692:	09 48       	CC = !BITTST (R1, 0x1);		/* bit  1 */
 1002694:	03 14       	IF !CC JUMP 0x100269a <_att_handle_request+0x48a> (BP);
 1002696:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 1002698:	07 20       	JUMP.S 0x10026a6 <_att_handle_request+0x496>;
 100269a:	43 30       	R0 = P3;
 100269c:	ff e3 44 fa 	CALL 0x1001b24 <_att_validate_security.clone.0>;
 10026a0:	41 43       	R1 = R0.B (Z);
 10026a2:	01 0c       	CC = R1 == 0x0;
 10026a4:	07 1c       	IF CC JUMP 0x10026b2 <_att_handle_request+0x4a2> (BP);
 10026a6:	b0 e6 0c 00 	B[SP + 0xc] = R0;
 10026aa:	45 30       	R0 = P5;
 10026ac:	51 60       	R1 = 0xa (X);		/*		R1=0xa( 10) */
 10026ae:	17 30       	R2 = R7;
 10026b0:	84 2e       	JUMP.S 0x10023b8 <_att_handle_request+0x1a8>;
 10026b2:	05 30       	R0 = R5;
 10026b4:	19 95       	R1 = W[P3] (Z);
 10026b6:	ff e3 ab f9 	CALL 0x1001a0c <_att_update_value_len>;
 10026ba:	79 e4 fc ff 	R1 = W[FP + -0x8] (Z);
 10026be:	f0 42       	R0 = R6.L (Z);
 10026c0:	81 08       	CC = R1 < R0;
 10026c2:	04 1c       	IF CC JUMP 0x10026ca <_att_handle_request+0x4ba> (BP);
 10026c4:	fe 67       	R6 += -0x1;		/* ( -1) */
 10026c6:	7e e6 fc ff 	W[FP + -0x8] = R6;
 10026ca:	55 30       	R2 = P5;
 10026cc:	78 e5 fc ff 	R0 = W[FP + -0x8] (X);
 10026d0:	b0 b5       	W[SP + 0xc] = R0;
 10026d2:	18 95       	R0 = W[P3] (Z);
 10026d4:	30 b6       	W[SP + 0x10] = R0;
 10026d6:	47 30       	R0 = FP;
 10026d8:	0a 64       	R2 += 0x1;		/* (  1) */
 10026da:	40 67       	R0 += -0x18;		/* (-24) */
 10026dc:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10026de:	ff e3 db f9 	CALL 0x1001a94 <_att_copy_value>;
 10026e2:	38 30       	R7 = R0;
 10026e4:	0f 64       	R7 += 0x1;		/* (  1) */
 10026e6:	58 60       	R0 = 0xb (X);		/*		R0=0xb( 11) */
 10026e8:	28 9b       	B[P5] = R0;
 10026ea:	50 21       	JUMP.S 0x100298a <_att_handle_request+0x77a>;
 10026ec:	f5 bc       	[SP + 0xc] = P5;
 10026ee:	36 b6       	W[SP + 0x10] = R6;
 10026f0:	43 30       	R0 = P3;
 10026f2:	4c 30       	R1 = P4;
 10026f4:	17 30       	R2 = R7;
 10026f6:	ff e3 77 fb 	CALL 0x1001de4 <_handle_read_blob_request>;
 10026fa:	61 2e       	JUMP.S 0x10023bc <_att_handle_request+0x1ac>;
 10026fc:	f5 bc       	[SP + 0xc] = P5;
 10026fe:	36 b6       	W[SP + 0x10] = R6;
 1002700:	43 30       	R0 = P3;
 1002702:	4c 30       	R1 = P4;
 1002704:	ff e3 d4 fb 	CALL 0x1001eac <_handle_read_multiple_request>;
 1002708:	5a 2e       	JUMP.S 0x10023bc <_att_handle_request+0x1ac>;
 100270a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100000b(16777227) */
 100270e:	00 e1 b0 29 	R0.L = 0x29b0;		/* (10672)	R0=0x10029b0(16787888) */
 1002712:	00 e3 53 64 	CALL 0x100efb8 <_puts>;
 1002716:	f5 bc       	[SP + 0xc] = P5;
 1002718:	36 b6       	W[SP + 0x10] = R6;
 100271a:	43 30       	R0 = P3;
 100271c:	4c 30       	R1 = P4;
 100271e:	17 30       	R2 = R7;
 1002720:	ff e3 32 fc 	CALL 0x1001f84 <_handle_read_by_group_type_request>;
 1002724:	4c 2e       	JUMP.S 0x10023bc <_att_handle_request+0x1ac>;
 1002726:	a6 e4 02 00 	R6 = B[P4 + 0x2] (Z);
 100272a:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 100272e:	46 4f       	R6 <<= 0x8;
 1002730:	86 57       	R6 = R6 | R0;
 1002732:	47 30       	R0 = FP;
 1002734:	40 67       	R0 += -0x18;		/* (-24) */
 1002736:	0e 30       	R1 = R6;
 1002738:	ff e3 d6 fa 	CALL 0x1001ce4 <_att_find_handle>;
 100273c:	2e 30       	R5 = R6;
 100273e:	00 0c       	CC = R0 == 0x0;
 1002740:	04 14       	IF !CC JUMP 0x1002748 <_att_handle_request+0x538> (BP);
 1002742:	45 30       	R0 = P5;
 1002744:	91 60       	R1 = 0x12 (X);		/*		R1=0x12( 18) */
 1002746:	51 20       	JUMP.S 0x10027e8 <_att_handle_request+0x5d8>;
 1002748:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ea4 <_att_db> */
 100274c:	0a e1 9c 1e 	P2.L = 0x1e9c;		/* (7836)	P2=0x1e9c <_att_write_callback> */
 1002750:	14 91       	R4 = [P2];
 1002752:	04 0c       	CC = R4 == 0x0;
 1002754:	06 18       	IF CC JUMP 0x1002760 <_att_handle_request+0x550>;
 1002756:	79 e5 f7 ff 	R1 = W[FP + -0x12] (X);
 100275a:	c8 42       	R0 = R1.L (Z);
 100275c:	18 48       	CC = !BITTST (R0, 0x3);		/* bit  3 */
 100275e:	04 14       	IF !CC JUMP 0x1002766 <_att_handle_request+0x556> (BP);
 1002760:	45 30       	R0 = P5;
 1002762:	91 60       	R1 = 0x12 (X);		/*		R1=0x12( 18) */
 1002764:	4d 20       	JUMP.S 0x10027fe <_att_handle_request+0x5ee>;
 1002766:	40 48       	CC = !BITTST (R0, 0x8);		/* bit  8 */
 1002768:	05 14       	IF !CC JUMP 0x1002772 <_att_handle_request+0x562> (BP);
 100276a:	45 30       	R0 = P5;
 100276c:	91 60       	R1 = 0x12 (X);		/*		R1=0x12( 18) */
 100276e:	16 30       	R2 = R6;
 1002770:	a6 20       	JUMP.S 0x10028bc <_att_handle_request+0x6ac>;
 1002772:	43 30       	R0 = P3;
 1002774:	ff e3 d8 f9 	CALL 0x1001b24 <_att_validate_security.clone.0>;
 1002778:	41 43       	R1 = R0.B (Z);
 100277a:	01 0c       	CC = R1 == 0x0;
 100277c:	0f 10       	IF !CC JUMP 0x100279a <_att_handle_request+0x58a>;
 100277e:	14 32       	P2 = R4;
 1002780:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1002782:	1c 6c       	P4 += 0x3;		/* (  3) */
 1002784:	ef 67       	R7 += -0x3;		/* ( -3) */
 1002786:	b0 b5       	W[SP + 0xc] = R0;
 1002788:	34 bd       	[SP + 0x10] = P4;
 100278a:	b7 b6       	W[SP + 0x14] = R7;
 100278c:	0e 30       	R1 = R6;
 100278e:	18 95       	R0 = W[P3] (Z);
 1002790:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1002792:	62 00       	CALL (P2);
 1002794:	41 43       	R1 = R0.B (Z);
 1002796:	01 0c       	CC = R1 == 0x0;
 1002798:	07 1c       	IF CC JUMP 0x10027a6 <_att_handle_request+0x596> (BP);
 100279a:	b0 e6 0c 00 	B[SP + 0xc] = R0;
 100279e:	45 30       	R0 = P5;
 10027a0:	91 60       	R1 = 0x12 (X);		/*		R1=0x12( 18) */
 10027a2:	15 30       	R2 = R5;
 10027a4:	0a 2e       	JUMP.S 0x10023b8 <_att_handle_request+0x1a8>;
 10027a6:	98 60       	R0 = 0x13 (X);		/*		R0=0x13( 19) */
 10027a8:	bc 20       	JUMP.S 0x1002920 <_att_handle_request+0x710>;
 10027aa:	a6 e4 02 00 	R6 = B[P4 + 0x2] (Z);
 10027ae:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 10027b2:	46 4f       	R6 <<= 0x8;
 10027b4:	86 57       	R6 = R6 | R0;
 10027b6:	a0 e5 03 00 	R0 = B[P4 + 0x3] (X);
 10027ba:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1e9c <_att_write_callback> */
 10027be:	b8 e6 e4 ff 	B[FP + -0x1c] = R0;
 10027c2:	0a e1 9c 1e 	P2.L = 0x1e9c;		/* (7836)	P2=0x1e9c <_att_write_callback> */
 10027c6:	a1 e5 04 00 	R1 = B[P4 + 0x4] (X);
 10027ca:	14 91       	R4 = [P2];
 10027cc:	2e 30       	R5 = R6;
 10027ce:	b9 e6 e0 ff 	B[FP + -0x20] = R1;
 10027d2:	04 0c       	CC = R4 == 0x0;
 10027d4:	13 18       	IF CC JUMP 0x10027fa <_att_handle_request+0x5ea>;
 10027d6:	47 30       	R0 = FP;
 10027d8:	40 67       	R0 += -0x18;		/* (-24) */
 10027da:	0e 30       	R1 = R6;
 10027dc:	ff e3 84 fa 	CALL 0x1001ce4 <_att_find_handle>;
 10027e0:	00 0c       	CC = R0 == 0x0;
 10027e2:	05 14       	IF !CC JUMP 0x10027ec <_att_handle_request+0x5dc> (BP);
 10027e4:	45 30       	R0 = P5;
 10027e6:	b1 60       	R1 = 0x16 (X);		/*		R1=0x16( 22) */
 10027e8:	16 30       	R2 = R6;
 10027ea:	16 2e       	JUMP.S 0x1002416 <_att_handle_request+0x206>;
 10027ec:	79 e5 f7 ff 	R1 = W[FP + -0x12] (X);
 10027f0:	c8 42       	R0 = R1.L (Z);
 10027f2:	18 48       	CC = !BITTST (R0, 0x3);		/* bit  3 */
 10027f4:	03 18       	IF CC JUMP 0x10027fa <_att_handle_request+0x5ea>;
 10027f6:	40 48       	CC = !BITTST (R0, 0x8);		/* bit  8 */
 10027f8:	05 14       	IF !CC JUMP 0x1002802 <_att_handle_request+0x5f2> (BP);
 10027fa:	45 30       	R0 = P5;
 10027fc:	b1 60       	R1 = 0x16 (X);		/*		R1=0x16( 22) */
 10027fe:	16 30       	R2 = R6;
 1002800:	5e 20       	JUMP.S 0x10028bc <_att_handle_request+0x6ac>;
 1002802:	43 30       	R0 = P3;
 1002804:	ff e3 90 f9 	CALL 0x1001b24 <_att_validate_security.clone.0>;
 1002808:	41 43       	R1 = R0.B (Z);
 100280a:	01 0c       	CC = R1 == 0x0;
 100280c:	07 1c       	IF CC JUMP 0x100281a <_att_handle_request+0x60a> (BP);
 100280e:	b0 e6 0c 00 	B[SP + 0xc] = R0;
 1002812:	45 30       	R0 = P5;
 1002814:	b1 60       	R1 = 0x16 (X);		/*		R1=0x16( 22) */
 1002816:	16 30       	R2 = R6;
 1002818:	d0 2d       	JUMP.S 0x10023b8 <_att_handle_request+0x1a8>;
 100281a:	14 32       	P2 = R4;
 100281c:	b8 e4 e0 ff 	R0 = B[FP + -0x20] (Z);
 1002820:	b9 e4 e4 ff 	R1 = B[FP + -0x1c] (Z);
 1002824:	40 4f       	R0 <<= 0x8;
 1002826:	08 56       	R0 = R0 | R1;
 1002828:	b0 b5       	W[SP + 0xc] = R0;
 100282a:	44 30       	R0 = P4;
 100282c:	28 64       	R0 += 0x5;		/* (  5) */
 100282e:	30 b1       	[SP + 0x10] = R0;
 1002830:	07 30       	R0 = R7;
 1002832:	d8 67       	R0 += -0x5;		/* ( -5) */
 1002834:	b0 b6       	W[SP + 0x14] = R0;
 1002836:	0e 30       	R1 = R6;
 1002838:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100283a:	18 95       	R0 = W[P3] (Z);
 100283c:	62 00       	CALL (P2);
 100283e:	41 43       	R1 = R0.B (Z);
 1002840:	3a 60       	R2 = 0x7 (X);		/*		R2=0x7(  7) */
 1002842:	11 08       	CC = R1 == R2;
 1002844:	07 18       	IF CC JUMP 0x1002852 <_att_handle_request+0x642>;
 1002846:	6a 60       	R2 = 0xd (X);		/*		R2=0xd( 13) */
 1002848:	11 08       	CC = R1 == R2;
 100284a:	04 18       	IF CC JUMP 0x1002852 <_att_handle_request+0x642>;
 100284c:	01 0c       	CC = R1 == 0x0;
 100284e:	26 1c       	IF CC JUMP 0x100289a <_att_handle_request+0x68a> (BP);
 1002850:	20 20       	JUMP.S 0x1002890 <_att_handle_request+0x680>;
 1002852:	40 43       	R0 = R0.B (Z);
 1002854:	69 60       	R1 = 0xd (X);		/*		R1=0xd( 13) */
 1002856:	08 08       	CC = R0 == R1;
 1002858:	0a 14       	IF !CC JUMP 0x100286c <_att_handle_request+0x65c> (BP);
 100285a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1e9c <_att_write_callback> */
 100285e:	0a e1 a0 1e 	P2.L = 0x1ea0;		/* (7840)	P2=0x1ea0 <_att_prepare_write_error_code> */
 1002862:	10 99       	R0 = B[P2] (Z);
 1002864:	08 08       	CC = R0 == R1;
 1002866:	1a 18       	IF CC JUMP 0x100289a <_att_handle_request+0x68a>;
 1002868:	68 60       	R0 = 0xd (X);		/*		R0=0xd( 13) */
 100286a:	0c 20       	JUMP.S 0x1002882 <_att_handle_request+0x672>;
 100286c:	3a 60       	R2 = 0x7 (X);		/*		R2=0x7(  7) */
 100286e:	10 08       	CC = R0 == R2;
 1002870:	15 14       	IF !CC JUMP 0x100289a <_att_handle_request+0x68a> (BP);
 1002872:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ea0 <_att_prepare_write_error_code> */
 1002876:	0a e1 a0 1e 	P2.L = 0x1ea0;		/* (7840)	P2=0x1ea0 <_att_prepare_write_error_code> */
 100287a:	10 99       	R0 = B[P2] (Z);
 100287c:	00 0c       	CC = R0 == 0x0;
 100287e:	0e 14       	IF !CC JUMP 0x100289a <_att_handle_request+0x68a> (BP);
 1002880:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 1002882:	10 9b       	B[P2] = R0;
 1002884:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ea0 <_att_prepare_write_error_code> */
 1002888:	0a e1 a2 1e 	P2.L = 0x1ea2;		/* (7842)	P2=0x1ea2 <_att_prepare_write_error_handle> */
 100288c:	15 97       	W[P2] = R5;
 100288e:	06 20       	JUMP.S 0x100289a <_att_handle_request+0x68a>;
 1002890:	b0 e6 0c 00 	B[SP + 0xc] = R0;
 1002894:	45 30       	R0 = P5;
 1002896:	b1 60       	R1 = 0x16 (X);		/*		R1=0x16( 22) */
 1002898:	85 2f       	JUMP.S 0x10027a2 <_att_handle_request+0x592>;
 100289a:	fa 42       	R2 = R7.L (Z);
 100289c:	45 30       	R0 = P5;
 100289e:	4c 30       	R1 = P4;
 10028a0:	00 e3 32 6a 	CALL 0x100fd04 <_memcpy>;
 10028a4:	b8 60       	R0 = 0x17 (X);		/*		R0=0x17( 23) */
 10028a6:	21 2f       	JUMP.S 0x10026e8 <_att_handle_request+0x4d8>;
 10028a8:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ea2 <_att_prepare_write_error_handle> */
 10028ac:	0a e1 9c 1e 	P2.L = 0x1e9c;		/* (7836)	P2=0x1e9c <_att_write_callback> */
 10028b0:	52 91       	P2 = [P2];
 10028b2:	42 0c       	CC = P2 == 0x0;
 10028b4:	07 14       	IF !CC JUMP 0x10028c2 <_att_handle_request+0x6b2> (BP);
 10028b6:	45 30       	R0 = P5;
 10028b8:	c1 60       	R1 = 0x18 (X);		/*		R1=0x18( 24) */
 10028ba:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 10028bc:	ff e3 e2 f8 	CALL 0x1001a80 <_setup_error_write_not_permitted>;
 10028c0:	7e 2d       	JUMP.S 0x10023bc <_att_handle_request+0x1ac>;
 10028c2:	00 00       	NOP;
 10028c4:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 10028c8:	00 0c       	CC = R0 == 0x0;
 10028ca:	27 18       	IF CC JUMP 0x1002918 <_att_handle_request+0x708>;
 10028cc:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x1e78 <_ll> */
 10028d0:	09 e1 a0 1e 	P1.L = 0x1ea0;		/* (7840)	P1=0x1ea0 <_att_prepare_write_error_code> */
 10028d4:	08 99       	R0 = B[P1] (Z);
 10028d6:	00 0c       	CC = R0 == 0x0;
 10028d8:	17 1c       	IF CC JUMP 0x1002906 <_att_handle_request+0x6f6> (BP);
 10028da:	43 30       	R0 = P3;
 10028dc:	ff e3 3c fc 	CALL 0x1002154 <_att_clear_transaction_queue>;
 10028e0:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x1ea0 <_att_prepare_write_error_code> */
 10028e4:	09 e1 a0 1e 	P1.L = 0x1ea0;		/* (7840)	P1=0x1ea0 <_att_prepare_write_error_code> */
 10028e8:	48 99       	R0 = B[P1] (X);
 10028ea:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10028ec:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1e9c <_att_write_callback> */
 10028f0:	0a e1 a2 1e 	P2.L = 0x1ea2;		/* (7842)	P2=0x1ea2 <_att_prepare_write_error_handle> */
 10028f4:	09 9b       	B[P1] = R1;
 10028f6:	12 95       	R2 = W[P2] (Z);
 10028f8:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10028fa:	11 97       	W[P2] = R1;
 10028fc:	b0 e6 0c 00 	B[SP + 0xc] = R0;
 1002900:	45 30       	R0 = P5;
 1002902:	c1 60       	R1 = 0x18 (X);		/*		R1=0x18( 24) */
 1002904:	5a 2d       	JUMP.S 0x10023b8 <_att_handle_request+0x1a8>;
 1002906:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1002908:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100290a:	b0 b5       	W[SP + 0xc] = R0;
 100290c:	31 b1       	[SP + 0x10] = R1;
 100290e:	b0 b6       	W[SP + 0x14] = R0;
 1002910:	18 95       	R0 = W[P3] (Z);
 1002912:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 1002914:	62 00       	CALL (P2);
 1002916:	04 20       	JUMP.S 0x100291e <_att_handle_request+0x70e>;
 1002918:	43 30       	R0 = P3;
 100291a:	ff e3 1d fc 	CALL 0x1002154 <_att_clear_transaction_queue>;
 100291e:	c8 60       	R0 = 0x19 (X);		/*		R0=0x19( 25) */
 1002920:	28 9b       	B[P5] = R0;
 1002922:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 1002924:	33 20       	JUMP.S 0x100298a <_att_handle_request+0x77a>;
 1002926:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ea2 <_att_prepare_write_error_handle> */
 100292a:	0a e1 9c 1e 	P2.L = 0x1e9c;		/* (7836)	P2=0x1e9c <_att_write_callback> */
 100292e:	55 91       	P5 = [P2];
 1002930:	45 0c       	CC = P5 == 0x0;
 1002932:	2b 1c       	IF CC JUMP 0x1002988 <_att_handle_request+0x778> (BP);
 1002934:	a1 e4 02 00 	R1 = B[P4 + 0x2] (Z);
 1002938:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 100293c:	41 4f       	R1 <<= 0x8;
 100293e:	41 56       	R1 = R1 | R0;
 1002940:	47 30       	R0 = FP;
 1002942:	31 30       	R6 = R1;
 1002944:	40 67       	R0 += -0x18;		/* (-24) */
 1002946:	ff e3 cf f9 	CALL 0x1001ce4 <_att_find_handle>;
 100294a:	00 0c       	CC = R0 == 0x0;
 100294c:	1e 18       	IF CC JUMP 0x1002988 <_att_handle_request+0x778>;
 100294e:	79 e5 f7 ff 	R1 = W[FP + -0x12] (X);
 1002952:	c8 42       	R0 = R1.L (Z);
 1002954:	40 48       	CC = !BITTST (R0, 0x8);		/* bit  8 */
 1002956:	19 18       	IF CC JUMP 0x1002988 <_att_handle_request+0x778>;
 1002958:	10 48       	CC = !BITTST (R0, 0x2);		/* bit  2 */
 100295a:	17 18       	IF CC JUMP 0x1002988 <_att_handle_request+0x778>;
 100295c:	43 30       	R0 = P3;
 100295e:	ff e3 e3 f8 	CALL 0x1001b24 <_att_validate_security.clone.0>;
 1002962:	40 43       	R0 = R0.B (Z);
 1002964:	00 0c       	CC = R0 == 0x0;
 1002966:	11 14       	IF !CC JUMP 0x1002988 <_att_handle_request+0x778> (BP);
 1002968:	1c 6c       	P4 += 0x3;		/* (  3) */
 100296a:	ef 67       	R7 += -0x3;		/* ( -3) */
 100296c:	b0 b5       	W[SP + 0xc] = R0;
 100296e:	34 bd       	[SP + 0x10] = P4;
 1002970:	b7 b6       	W[SP + 0x14] = R7;
 1002972:	18 95       	R0 = W[P3] (Z);
 1002974:	0e 30       	R1 = R6;
 1002976:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1002978:	65 00       	CALL (P5);
 100297a:	07 20       	JUMP.S 0x1002988 <_att_handle_request+0x778>;
 100297c:	44 30       	R0 = P4;
 100297e:	f9 42       	R1 = R7.L (Z);
 1002980:	48 64       	R0 += 0x9;		/* (  9) */
 1002982:	b9 67       	R1 += -0x9;		/* ( -9) */
 1002984:	00 e3 f8 3c 	CALL 0x100a374 <_hexdump>;
 1002988:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100298a:	07 30       	R0 = R7;
 100298c:	01 e8 00 00 	UNLINK;
 1002990:	a3 05       	(R7:4, P5:3) = [SP++];
 1002992:	10 00       	RTS;
 1002994:	66 69       	SP = 0x2c (X);		/*		SP=0x2c( 44) */
 1002996:	6e 64       	R6 += 0xd;		/* ( 13) */
 1002998:	5f 69       	FP = 0x2b (X);		/*		FP=0x2b( 43) */
 100299a:	6e 66       	R6 += -0x33;		/* (-51) */
 100299c:	6f 72       	ILLEGAL;
 100299e:	6d 61       	R5 = 0x2d (X);		/*		R5=0x2d( 45) */
 10029a0:	74 69       	P4 = 0x2e (X);		/*		P4=0x2e( 46) */
 10029a2:	6f 6e       	FP += -0x33;		/* (-51) */
 10029a4:	5f 72       	ILLEGAL;
 10029a6:	65 65       	R5 += 0x2c;		/* ( 44) */
 10029a8:	71 75       	ILLEGAL;
 10029aa:	65 73       	ILLEGAL;
 10029ac:	74 32       	SP = P4;
 10029ae:	0a 00       	ILLEGAL;
 10029b0:	72 65       	R2 += 0x2e;		/* ( 46) */
 10029b2:	61 64       	R1 += 0xc;		/* ( 12) */
 10029b4:	5f 62       	R7 = -0x35 (X);		/*		R7=0xffffffcb(-53) */
 10029b6:	79 5f       	P5 = P1 + (FP << 0x2);
 10029b8:	67 72       	ILLEGAL;
 10029ba:	6f 75       	ILLEGAL;
 10029bc:	70 5f       	P5 = P0 + (SP << 0x2);
 10029be:	74 79       	ILLEGAL;
 10029c0:	70 65       	R0 += 0x2e;		/* ( 46) */
 10029c2:	5f 72       	ILLEGAL;
 10029c4:	65 71       	ILLEGAL;
 10029c6:	75 65       	R5 += 0x2e;		/* ( 46) */
 10029c8:	73 74       	ILLEGAL;
 10029ca:	0a 00       	ILLEGAL;

010029cc <_bluetooth_base_uuid>:
 10029cc:	fb 34       	M3 = B3;
 10029ce:	9b 5f       	SP = P3 + (P3 << 0x2);
 10029d0:	80 00       	JUMP (PC + P0);
 10029d2:	00 80       	R0 = [P0 ++ P0];
 10029d4:	00 10       	IF !CC JUMP 0x10029d4 <_bluetooth_base_uuid+0x8>;
 10029d6:	00 00       	NOP;
 10029d8:	00 00       	NOP;
	...

010029dc <_dummy_packet_handler>:
 10029dc:	00 00       	NOP;
 10029de:	00 00       	NOP;
 10029e0:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10029e4:	01 e8 00 00 	UNLINK;
 10029e8:	10 00       	RTS;
	...

010029ec <_att_packet_handler>:
 10029ec:	ed 05       	[--SP] = (R7:5, P5:5);
 10029ee:	28 30       	R5 = R0;
 10029f0:	00 e8 04 00 	LINK 0x10;		/* (16) */
 10029f4:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000019(16777241) */
 10029f8:	31 30       	R6 = R1;
 10029fa:	2a 32       	P5 = R2;
 10029fc:	7f e5 12 00 	R7 = W[FP + 0x24] (X);
 1002a00:	00 e1 c0 2a 	R0.L = 0x2ac0;		/* (10944)	R0=0x1002ac0(16788160) */
 1002a04:	00 e3 da 62 	CALL 0x100efb8 <_puts>;
 1002a08:	68 43       	R0 = R5.B (Z);
 1002a0a:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 1002a0c:	08 08       	CC = R0 == R1;
 1002a0e:	14 14       	IF !CC JUMP 0x1002a36 <_att_packet_handler+0x4a> (BP);
 1002a10:	68 99       	R0 = B[P5] (X);
 1002a12:	00 48       	CC = !BITTST (R0, 0x0);		/* bit  0 */
 1002a14:	08 1c       	IF CC JUMP 0x1002a24 <_att_packet_handler+0x38> (BP);
 1002a16:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1e9c <_att_write_callback> */
 1002a1a:	7f e6 12 00 	W[FP + 0x24] = R7;
 1002a1e:	0a e1 04 00 	P2.L = 0x4;		/* (  4)	P2=0x4 <_att_client_handler> */
 1002a22:	07 20       	JUMP.S 0x1002a30 <_att_packet_handler+0x44>;
 1002a24:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4 <_att_client_handler> */
 1002a28:	7f e6 12 00 	W[FP + 0x24] = R7;
 1002a2c:	0a e1 00 00 	P2.L = 0x0;		/* (  0)	P2=0x0 <data_addr> */
 1002a30:	52 91       	P2 = [P2];
 1002a32:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 1002a34:	13 20       	JUMP.S 0x1002a5a <_att_packet_handler+0x6e>;
 1002a36:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x0 <data_addr> */
 1002a3a:	b7 b5       	W[SP + 0xc] = R7;
 1002a3c:	0a e1 04 00 	P2.L = 0x4;		/* (  4)	P2=0x4 <_att_client_handler> */
 1002a40:	52 91       	P2 = [P2];
 1002a42:	05 30       	R0 = R5;
 1002a44:	0e 30       	R1 = R6;
 1002a46:	55 30       	R2 = P5;
 1002a48:	62 00       	CALL (P2);
 1002a4a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4 <_att_client_handler> */
 1002a4e:	7f e6 12 00 	W[FP + 0x24] = R7;
 1002a52:	0a e1 00 00 	P2.L = 0x0;		/* (  0)	P2=0x0 <data_addr> */
 1002a56:	52 91       	P2 = [P2];
 1002a58:	05 30       	R0 = R5;
 1002a5a:	0e 30       	R1 = R6;
 1002a5c:	55 30       	R2 = P5;
 1002a5e:	01 e8 00 00 	UNLINK;
 1002a62:	ad 05       	(R7:5, P5:5) = [SP++];
 1002a64:	52 00       	JUMP (P2);
	...

01002a68 <_att_dispatch_register_client>:
 1002a68:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000008(16777224) */
 1002a6c:	01 e1 dc 29 	R1.L = 0x29dc;		/* (10716)	R1=0x10029dc <_dummy_packet_handler>(16787932) */
 1002a70:	00 0c       	CC = R0 == 0x0;
 1002a72:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x0 <data_addr> */
 1002a76:	01 07       	IF CC R0 = R1;
 1002a78:	0a e1 04 00 	P2.L = 0x4;		/* (  4)	P2=0x4 <_att_client_handler> */
 1002a7c:	10 93       	[P2] = R0;
 1002a7e:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1002a82:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000008(16777224) */
 1002a86:	00 e1 ec 29 	R0.L = 0x29ec;		/* (10732)	R0=0x10029ec <_att_packet_handler>(16787948) */
 1002a8a:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1002a8c:	01 e8 00 00 	UNLINK;
 1002a90:	00 e2 16 24 	JUMP.L 0x10072bc <_le_l2cap_register_fixed_channel>;

01002a94 <_att_dispatch_register_server>:
 1002a94:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000004(16777220) */
 1002a98:	01 e1 dc 29 	R1.L = 0x29dc;		/* (10716)	R1=0x10029dc <_dummy_packet_handler>(16787932) */
 1002a9c:	00 0c       	CC = R0 == 0x0;
 1002a9e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4 <_att_client_handler> */
 1002aa2:	01 07       	IF CC R0 = R1;
 1002aa4:	0a e1 00 00 	P2.L = 0x0;		/* (  0)	P2=0x0 <data_addr> */
 1002aa8:	10 93       	[P2] = R0;
 1002aaa:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1002aae:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10029ec <_att_packet_handler>(16787948) */
 1002ab2:	00 e1 ec 29 	R0.L = 0x29ec;		/* (10732)	R0=0x10029ec <_att_packet_handler>(16787948) */
 1002ab6:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1002ab8:	01 e8 00 00 	UNLINK;
 1002abc:	00 e2 00 24 	JUMP.L 0x10072bc <_le_l2cap_register_fixed_channel>;
 1002ac0:	2d 2d       	JUMP.S 0x100251a <_att_handle_request+0x30a>;
 1002ac2:	41 54       	R1 = R1 & R0;
 1002ac4:	54 20       	JUMP.S 0x1002b6c <_att_run+0x24>;
 1002ac6:	50 48       	CC = !BITTST (R0, 0xa);		/* bit 10 */
 1002ac8:	20 00       	IDLE;
	...

01002acc <_att_handle_value_indication_notify_client>:
 1002acc:	f5 05       	[--SP] = (R7:6, P5:5);
 1002ace:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x0 <data_addr> */
 1002ad2:	19 30       	R3 = R1;
 1002ad4:	0d e1 c8 1e 	P5.L = 0x1ec8;		/* (7880)	P5=0x1ec8 <_att_client_packet_handler> */
 1002ad8:	29 91       	R1 = [P5];
 1002ada:	00 e8 06 00 	LINK 0x18;		/* (24) */
 1002ade:	32 30       	R6 = R2;
 1002ae0:	01 0c       	CC = R1 == 0x0;
 1002ae2:	1d 18       	IF CC JUMP 0x1002b1c <_att_handle_value_indication_notify_client+0x50>;
 1002ae4:	21 e1 b6 ff 	R1 = -0x4a (X);		/*		R1=0xffffffb6(-74) */
 1002ae8:	b9 e6 f8 ff 	B[FP + -0x8] = R1;
 1002aec:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 1002aee:	7f 30       	R7 = FP;
 1002af0:	c7 67       	R7 += -0x8;		/* ( -8) */
 1002af2:	b9 e6 f9 ff 	B[FP + -0x7] = R1;
 1002af6:	b8 e6 fa ff 	B[FP + -0x6] = R0;
 1002afa:	13 30       	R2 = R3;
 1002afc:	07 30       	R0 = R7;
 1002afe:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 1002b00:	00 e3 6c 3b 	CALL 0x100a1d8 <_bt_store_16>;
 1002b04:	07 30       	R0 = R7;
 1002b06:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 1002b08:	16 30       	R2 = R6;
 1002b0a:	00 e3 67 3b 	CALL 0x100a1d8 <_bt_store_16>;
 1002b0e:	6a 91       	P2 = [P5];
 1002b10:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 1002b12:	b0 b5       	W[SP + 0xc] = R0;
 1002b14:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1002b16:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1002b18:	17 30       	R2 = R7;
 1002b1a:	62 00       	CALL (P2);
 1002b1c:	01 e8 00 00 	UNLINK;
 1002b20:	b5 05       	(R7:6, P5:5) = [SP++];
 1002b22:	10 00       	RTS;

01002b24 <_att_handle_value_indication_timeout>:
 1002b24:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x0 <data_addr> */
 1002b28:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1002b2c:	0a e1 a8 1e 	P2.L = 0x1ea8;		/* (7848)	P2=0x1ea8 <_att_handle_value_indication_handle> */
 1002b30:	12 91       	R2 = [P2];
 1002b32:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ea8 <_att_handle_value_indication_handle> */
 1002b36:	0a e1 ac 1e 	P2.L = 0x1eac;		/* (7852)	P2=0x1eac <_att_connection> */
 1002b3a:	20 e1 91 ff 	R0 = -0x6f (X);		/*		R0=0xffffff91(-111) */
 1002b3e:	11 95       	R1 = W[P2] (Z);
 1002b40:	01 e8 00 00 	UNLINK;
 1002b44:	ff e2 c4 ff 	JUMP.L 0x1002acc <_att_handle_value_indication_notify_client>;

01002b48 <_att_run>:
 1002b48:	eb 05       	[--SP] = (R7:5, P5:3);
 1002b4a:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x1ec8 <_att_client_packet_handler> */
 1002b4e:	00 e8 09 00 	LINK 0x24;		/* (36) */
 1002b52:	0d e1 cc 1e 	P5.L = 0x1ecc;		/* (7884)	P5=0x1ecc <_att_server_state> */
 1002b56:	28 91       	R0 = [P5];
 1002b58:	08 0c       	CC = R0 == 0x1;
 1002b5a:	04 18       	IF CC JUMP 0x1002b62 <_att_run+0x1a>;
 1002b5c:	18 0c       	CC = R0 == 0x3;
 1002b5e:	dd 14       	IF !CC JUMP 0x1002d18 <_att_run+0x1d0> (BP);
 1002b60:	58 20       	JUMP.S 0x1002c10 <_att_run+0xc8>;
 1002b62:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100ff91(16842641) */
 1002b66:	00 e1 a4 31 	R0.L = 0x31a4;		/* (12708)	R0=0x10031a4(16789924) */
 1002b6a:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x2e */
 1002b6e:	00 e3 25 62 	CALL 0x100efb8 <_puts>;
 1002b72:	0c e1 d2 1e 	P4.L = 0x1ed2;		/* (7890)	P4=0x1ed2 <_att_request_buffer> */
 1002b76:	20 99       	R0 = B[P4] (Z);
 1002b78:	21 e1 d2 00 	R1 = 0xd2 (X);		/*		R1=0xd2(210) */
 1002b7c:	08 08       	CC = R0 == R1;
 1002b7e:	49 14       	IF !CC JUMP 0x1002c10 <_att_run+0xc8> (BP);
 1002b80:	00 e3 c6 36 	CALL 0x100990c <_sm_cmac_ready>;
 1002b84:	00 0c       	CC = R0 == 0x0;
 1002b86:	0a 18       	IF CC JUMP 0x1002b9a <_att_run+0x52>;
 1002b88:	4b e1 00 00 	P3.H = 0x0;		/* (  0)	P3=0xe */
 1002b8c:	0b e1 d0 1e 	P3.L = 0x1ed0;		/* (7888)	P3=0x1ed0 <_att_request_size> */
 1002b90:	70 60       	R0 = 0xe (X);		/*		R0=0xe( 14) */
 1002b92:	19 95       	R1 = W[P3] (Z);
 1002b94:	01 0a       	CC = R1 <= R0 (IU);
 1002b96:	04 14       	IF !CC JUMP 0x1002b9e <_att_run+0x56> (BP);
 1002b98:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1002b9a:	28 93       	[P5] = R0;
 1002b9c:	be 20       	JUMP.S 0x1002d18 <_att_run+0x1d0>;
 1002b9e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1eac <_att_connection> */
 1002ba2:	0a e1 08 1f 	P2.L = 0x1f08;		/* (7944)	P2=0x1f08 <_att_ir_lookup_active> */
 1002ba6:	10 91       	R0 = [P2];
 1002ba8:	00 0c       	CC = R0 == 0x0;
 1002baa:	b7 10       	IF !CC JUMP 0x1002d18 <_att_run+0x1d0>;
 1002bac:	47 e1 00 00 	R7.H = 0x0;		/* (  0)	R7=0xffcb(65483) */
 1002bb0:	07 e1 08 00 	R7.L = 0x8;		/* (  8)	R7=0x8 <_att_ir_le_device_db_index>(  8) */
 1002bb4:	0f 32       	P1 = R7;
 1002bb6:	08 91       	R0 = [P1];
 1002bb8:	80 0c       	CC = R0 < 0x0;
 1002bba:	ef 1f       	IF CC JUMP 0x1002b98 <_att_run+0x50> (BP);
 1002bbc:	09 32       	P1 = R1;
 1002bbe:	8c 5a       	P2 = P4 + P1;
 1002bc0:	96 e4 f5 ff 	R6 = B[P2 + -0xb] (Z);
 1002bc4:	91 e4 f6 ff 	R1 = B[P2 + -0xa] (Z);
 1002bc8:	81 4f       	R1 <<= 0x10;
 1002bca:	46 4f       	R6 <<= 0x8;
 1002bcc:	8e 57       	R6 = R6 | R1;
 1002bce:	91 e4 f4 ff 	R1 = B[P2 + -0xc] (Z);
 1002bd2:	8e 57       	R6 = R6 | R1;
 1002bd4:	91 e4 f7 ff 	R1 = B[P2 + -0x9] (Z);
 1002bd8:	c1 4f       	R1 <<= 0x18;
 1002bda:	8e 57       	R6 = R6 | R1;
 1002bdc:	00 e3 d6 24 	CALL 0x1007588 <_le_device_db_remote_counter_get>;
 1002be0:	86 09       	CC = R6 < R0 (IU);
 1002be2:	db 1f       	IF CC JUMP 0x1002b98 <_att_run+0x50> (BP);
 1002be4:	17 32       	P2 = R7;
 1002be6:	6f 30       	R5 = FP;
 1002be8:	85 67       	R5 += -0x10;		/* (-16) */
 1002bea:	0d 30       	R1 = R5;
 1002bec:	10 91       	R0 = [P2];
 1002bee:	00 e3 a7 24 	CALL 0x100753c <_le_device_db_csrk_get>;
 1002bf2:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 1002bf4:	28 93       	[P5] = R0;
 1002bf6:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000002(16777218) */
 1002bfa:	00 e1 d4 2d 	R0.L = 0x2dd4;		/* (11732)	R0=0x1002dd4 <_att_signed_write_handle_cmac_result>(16788948) */
 1002bfe:	19 95       	R1 = W[P3] (Z);
 1002c00:	30 b1       	[SP + 0x10] = R0;
 1002c02:	a1 67       	R1 += -0xc;		/* (-12) */
 1002c04:	f6 b0       	[SP + 0xc] = R6;
 1002c06:	05 30       	R0 = R5;
 1002c08:	54 30       	R2 = P4;
 1002c0a:	00 e3 33 36 	CALL 0x1009870 <_sm_cmac_start>;
 1002c0e:	85 20       	JUMP.S 0x1002d18 <_att_run+0x1d0>;
 1002c10:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1002dd4 <_att_signed_write_handle_cmac_result>(16788948) */
 1002c14:	00 e1 c4 31 	R0.L = 0x31c4;		/* (12740)	R0=0x10031c4(16789956) */
 1002c18:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x1ed2 <_att_request_buffer> */
 1002c1c:	00 e3 ce 61 	CALL 0x100efb8 <_puts>;
 1002c20:	0c e1 ac 1e 	P4.L = 0x1eac;		/* (7852)	P4=0x1eac <_att_connection> */
 1002c24:	20 95       	R0 = W[P4] (Z);
 1002c26:	00 e3 c9 22 	CALL 0x10071b8 <_le_l2cap_can_send_fixed_channel_packet_now>;
 1002c2a:	00 0c       	CC = R0 == 0x0;
 1002c2c:	76 1c       	IF CC JUMP 0x1002d18 <_att_run+0x1d0> (BP);
 1002c2e:	00 e3 dd 22 	CALL 0x10071e8 <_le_l2cap_reserve_packet_buffer>;
 1002c32:	00 e3 d3 22 	CALL 0x10071d8 <_le_l2cap_get_outgoing_buffer>;
 1002c36:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1f08 <_att_ir_lookup_active> */
 1002c3a:	f0 b0       	[SP + 0xc] = R0;
 1002c3c:	0a e1 d0 1e 	P2.L = 0x1ed0;		/* (7888)	P2=0x1ed0 <_att_request_size> */
 1002c40:	28 32       	P5 = R0;
 1002c42:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0xd2(210) */
 1002c46:	44 30       	R0 = P4;
 1002c48:	01 e1 d2 1e 	R1.L = 0x1ed2;		/* (7890)	R1=0x1ed2 <_att_request_buffer>(7890) */
 1002c4c:	12 95       	R2 = W[P2] (Z);
 1002c4e:	ff e3 e1 fa 	CALL 0x1002210 <_att_handle_request>;
 1002c52:	38 30       	R7 = R0;
 1002c54:	c0 42       	R0 = R0.L (Z);
 1002c56:	18 0e       	CC = R0 <= 0x3 (IU);
 1002c58:	27 1c       	IF CC JUMP 0x1002ca6 <_att_run+0x15e> (BP);
 1002c5a:	28 99       	R0 = B[P5] (Z);
 1002c5c:	08 0c       	CC = R0 == 0x1;
 1002c5e:	24 14       	IF !CC JUMP 0x1002ca6 <_att_run+0x15e> (BP);
 1002c60:	a8 e4 04 00 	R0 = B[P5 + 0x4] (Z);
 1002c64:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 1002c66:	08 08       	CC = R0 == R1;
 1002c68:	1f 14       	IF !CC JUMP 0x1002ca6 <_att_run+0x15e> (BP);
 1002c6a:	a0 e4 07 00 	R0 = B[P4 + 0x7] (Z);
 1002c6e:	00 0c       	CC = R0 == 0x0;
 1002c70:	1b 1c       	IF CC JUMP 0x1002ca6 <_att_run+0x15e> (BP);
 1002c72:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x1eac <_att_connection> */
 1002c76:	0c e1 0c 1f 	P4.L = 0x1f0c;		/* (7948)	P4=0x1f0c <_att_client_addr_type> */
 1002c7a:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x8 <_att_ir_le_device_db_index>(  8) */
 1002c7e:	60 99       	R0 = B[P4] (X);
 1002c80:	01 e1 0d 1f 	R1.L = 0x1f0d;		/* (7949)	R1=0x1f0d <_att_client_address>(7949) */
 1002c84:	00 e3 6c 37 	CALL 0x1009b5c <_sm_authorization_state>;
 1002c88:	00 0c       	CC = R0 == 0x0;
 1002c8a:	04 1c       	IF CC JUMP 0x1002c92 <_att_run+0x14a> (BP);
 1002c8c:	08 0c       	CC = R0 == 0x1;
 1002c8e:	0c 14       	IF !CC JUMP 0x1002ca6 <_att_run+0x15e> (BP);
 1002c90:	14 20       	JUMP.S 0x1002cb8 <_att_run+0x170>;
 1002c92:	00 e3 b1 22 	CALL 0x10071f4 <_le_l2cap_release_packet_buffer>;
 1002c96:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x1f0d <_att_client_address>(7949) */
 1002c9a:	60 99       	R0 = B[P4] (X);
 1002c9c:	01 e1 0d 1f 	R1.L = 0x1f0d;		/* (7949)	R1=0x1f0d <_att_client_address>(7949) */
 1002ca0:	00 e3 74 37 	CALL 0x1009b88 <_sm_request_authorization>;
 1002ca4:	3a 20       	JUMP.S 0x1002d18 <_att_run+0x1d0>;
 1002ca6:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ed0 <_att_request_size> */
 1002caa:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1002cac:	0a e1 cc 1e 	P2.L = 0x1ecc;		/* (7884)	P2=0x1ecc <_att_server_state> */
 1002cb0:	fa 42       	R2 = R7.L (Z);
 1002cb2:	10 93       	[P2] = R0;
 1002cb4:	02 0c       	CC = R2 == 0x0;
 1002cb6:	04 14       	IF !CC JUMP 0x1002cbe <_att_run+0x176> (BP);
 1002cb8:	00 e3 9e 22 	CALL 0x10071f4 <_le_l2cap_release_packet_buffer>;
 1002cbc:	2e 20       	JUMP.S 0x1002d18 <_att_run+0x1d0>;
 1002cbe:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x1f0c <_att_client_addr_type> */
 1002cc2:	0c e1 ac 1e 	P4.L = 0x1eac;		/* (7852)	P4=0x1eac <_att_connection> */
 1002cc6:	20 95       	R0 = W[P4] (Z);
 1002cc8:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1002cca:	00 e3 9b 22 	CALL 0x1007200 <_le_l2cap_send_prepared_connectionless>;
 1002cce:	28 99       	R0 = B[P5] (Z);
 1002cd0:	18 0c       	CC = R0 == 0x3;
 1002cd2:	23 14       	IF !CC JUMP 0x1002d18 <_att_run+0x1d0> (BP);
 1002cd4:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x1ecc <_att_server_state> */
 1002cd8:	0d e1 c8 1e 	P5.L = 0x1ec8;		/* (7880)	P5=0x1ec8 <_att_client_packet_handler> */
 1002cdc:	28 91       	R0 = [P5];
 1002cde:	22 95       	R2 = W[P4] (Z);
 1002ce0:	67 a8       	R7 = W[P4 + 0x2] (X);
 1002ce2:	00 0c       	CC = R0 == 0x0;
 1002ce4:	1a 18       	IF CC JUMP 0x1002d18 <_att_run+0x1d0>;
 1002ce6:	20 e1 b5 ff 	R0 = -0x4b (X);		/*		R0=0xffffffb5(-75) */
 1002cea:	b8 e6 f0 ff 	B[FP + -0x10] = R0;
 1002cee:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1002cf0:	67 32       	P4 = FP;
 1002cf2:	84 6f       	P4 += -0x10;		/* (-16) */
 1002cf4:	b8 e6 f1 ff 	B[FP + -0xf] = R0;
 1002cf8:	44 30       	R0 = P4;
 1002cfa:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 1002cfc:	00 e3 6e 3a 	CALL 0x100a1d8 <_bt_store_16>;
 1002d00:	44 30       	R0 = P4;
 1002d02:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1002d04:	17 30       	R2 = R7;
 1002d06:	00 e3 69 3a 	CALL 0x100a1d8 <_bt_store_16>;
 1002d0a:	30 60       	R0 = 0x6 (X);		/*		R0=0x6(  6) */
 1002d0c:	b0 b5       	W[SP + 0xc] = R0;
 1002d0e:	6a 91       	P2 = [P5];
 1002d10:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1002d12:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1002d14:	54 30       	R2 = P4;
 1002d16:	62 00       	CALL (P2);
 1002d18:	01 e8 00 00 	UNLINK;
 1002d1c:	ab 05       	(R7:5, P5:3) = [SP++];
 1002d1e:	10 00       	RTS;

01002d20 <_att_packet_handler>:
 1002d20:	f4 05       	[--SP] = (R7:6, P5:4);
 1002d22:	30 30       	R6 = R0;
 1002d24:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1002d28:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000004(16777220) */
 1002d2c:	22 32       	P4 = R2;
 1002d2e:	7f e5 12 00 	R7 = W[FP + 0x24] (X);
 1002d32:	00 e1 f0 31 	R0.L = 0x31f0;		/* (12784)	R0=0x10031f0(16790000) */
 1002d36:	00 e3 41 61 	CALL 0x100efb8 <_puts>;
 1002d3a:	76 43       	R6 = R6.B (Z);
 1002d3c:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 1002d3e:	06 08       	CC = R6 == R0;
 1002d40:	0a 1c       	IF CC JUMP 0x1002d54 <_att_packet_handler+0x34> (BP);
 1002d42:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000008(16777224) */
 1002d46:	01 e8 00 00 	UNLINK;
 1002d4a:	00 e1 d4 18 	R0.L = 0x18d4;		/* (6356)	R0=0x10018d4(16783572) */
 1002d4e:	b4 05       	(R7:6, P5:4) = [SP++];
 1002d50:	00 e2 34 61 	JUMP.L 0x100efb8 <_puts>;
 1002d54:	f1 60       	R1 = 0x1e (X);		/*		R1=0x1e( 30) */
 1002d56:	20 99       	R0 = B[P4] (Z);
 1002d58:	08 08       	CC = R0 == R1;
 1002d5a:	1b 14       	IF !CC JUMP 0x1002d90 <_att_packet_handler+0x70> (BP);
 1002d5c:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x1ec8 <_att_client_packet_handler> */
 1002d60:	0d e1 a8 1e 	P5.L = 0x1ea8;		/* (7848)	P5=0x1ea8 <_att_handle_value_indication_handle> */
 1002d64:	28 91       	R0 = [P5];
 1002d66:	00 0c       	CC = R0 == 0x0;
 1002d68:	14 1c       	IF CC JUMP 0x1002d90 <_att_packet_handler+0x70> (BP);
 1002d6a:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x18d4(6356) */
 1002d6e:	00 e1 b8 1e 	R0.L = 0x1eb8;		/* (7864)	R0=0x1eb8 <_att_handle_value_indication_timer>(7864) */
 1002d72:	00 e3 a9 61 	CALL 0x100f0c4 <_sys_timer_remove>;
 1002d76:	2a 91       	R2 = [P5];
 1002d78:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1002d7a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ecc <_att_server_state> */
 1002d7e:	28 93       	[P5] = R0;
 1002d80:	0a e1 ac 1e 	P2.L = 0x1eac;		/* (7852)	P2=0x1eac <_att_connection> */
 1002d84:	01 e8 00 00 	UNLINK;
 1002d88:	11 95       	R1 = W[P2] (Z);
 1002d8a:	b4 05       	(R7:6, P5:4) = [SP++];
 1002d8c:	ff e2 a0 fe 	JUMP.L 0x1002acc <_att_handle_value_indication_notify_client>;
 1002d90:	fa 42       	R2 = R7.L (Z);
 1002d92:	a0 61       	R0 = 0x34 (X);		/*		R0=0x34( 52) */
 1002d94:	02 0a       	CC = R2 <= R0 (IU);
 1002d96:	1b 10       	IF !CC JUMP 0x1002dcc <_att_packet_handler+0xac>;
 1002d98:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1eac <_att_connection> */
 1002d9c:	0a e1 cc 1e 	P2.L = 0x1ecc;		/* (7884)	P2=0x1ecc <_att_server_state> */
 1002da0:	10 91       	R0 = [P2];
 1002da2:	00 0c       	CC = R0 == 0x0;
 1002da4:	14 14       	IF !CC JUMP 0x1002dcc <_att_packet_handler+0xac> (BP);
 1002da6:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1002da8:	10 93       	[P2] = R0;
 1002daa:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ecc <_att_server_state> */
 1002dae:	0a e1 d0 1e 	P2.L = 0x1ed0;		/* (7888)	P2=0x1ed0 <_att_request_size> */
 1002db2:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x1(  1) */
 1002db6:	17 97       	W[P2] = R7;
 1002db8:	4c 30       	R1 = P4;
 1002dba:	00 e1 d2 1e 	R0.L = 0x1ed2;		/* (7890)	R0=0x1ed2 <_att_request_buffer>(7890) */
 1002dbe:	00 e3 a3 67 	CALL 0x100fd04 <_memcpy>;
 1002dc2:	01 e8 00 00 	UNLINK;
 1002dc6:	b4 05       	(R7:6, P5:4) = [SP++];
 1002dc8:	ff e2 c0 fe 	JUMP.L 0x1002b48 <_att_run>;
 1002dcc:	01 e8 00 00 	UNLINK;
 1002dd0:	b4 05       	(R7:6, P5:4) = [SP++];
 1002dd2:	10 00       	RTS;

01002dd4 <_att_signed_write_handle_cmac_result>:
 1002dd4:	f5 05       	[--SP] = (R7:6, P5:5);
 1002dd6:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x1ea8 <_att_handle_value_indication_handle> */
 1002dda:	0d e1 cc 1e 	P5.L = 0x1ecc;		/* (7884)	P5=0x1ecc <_att_server_state> */
 1002dde:	29 91       	R1 = [P5];
 1002de0:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1002de4:	11 0c       	CC = R1 == 0x2;
 1002de6:	34 14       	IF !CC JUMP 0x1002e4e <_att_signed_write_handle_cmac_result+0x7a> (BP);
 1002de8:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ed0 <_att_request_size> */
 1002dec:	0a e1 d0 1e 	P2.L = 0x1ed0;		/* (7888)	P2=0x1ed0 <_att_request_size> */
 1002df0:	16 95       	R6 = W[P2] (Z);
 1002df2:	0e 30       	R1 = R6;
 1002df4:	47 e1 00 00 	R7.H = 0x0;		/* (  0)	R7=0x8 <_att_ir_le_device_db_index>(  8) */
 1002df8:	c1 67       	R1 += -0x8;		/* ( -8) */
 1002dfa:	07 e1 d2 1e 	R7.L = 0x1ed2;		/* (7890)	R7=0x1ed2 <_att_request_buffer>(7890) */
 1002dfe:	79 50       	R1 = R1 + R7;
 1002e00:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 1002e02:	00 e3 43 67 	CALL 0x100fc88 <_memcmp>;
 1002e06:	00 0c       	CC = R0 == 0x0;
 1002e08:	04 18       	IF CC JUMP 0x1002e10 <_att_signed_write_handle_cmac_result+0x3c>;
 1002e0a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1002e0c:	28 93       	[P5] = R0;
 1002e0e:	20 20       	JUMP.S 0x1002e4e <_att_signed_write_handle_cmac_result+0x7a>;
 1002e10:	f7 51       	R7 = R7 + R6;
 1002e12:	17 32       	P2 = R7;
 1002e14:	91 e4 f5 ff 	R1 = B[P2 + -0xb] (Z);
 1002e18:	90 e4 f6 ff 	R0 = B[P2 + -0xa] (Z);
 1002e1c:	80 4f       	R0 <<= 0x10;
 1002e1e:	41 4f       	R1 <<= 0x8;
 1002e20:	41 56       	R1 = R1 | R0;
 1002e22:	90 e4 f4 ff 	R0 = B[P2 + -0xc] (Z);
 1002e26:	41 56       	R1 = R1 | R0;
 1002e28:	90 e4 f7 ff 	R0 = B[P2 + -0x9] (Z);
 1002e2c:	c0 4f       	R0 <<= 0x18;
 1002e2e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ed0 <_att_request_size> */
 1002e32:	41 56       	R1 = R1 | R0;
 1002e34:	0a e1 08 00 	P2.L = 0x8;		/* (  8)	P2=0x8 <_att_ir_le_device_db_index> */
 1002e38:	10 91       	R0 = [P2];
 1002e3a:	09 64       	R1 += 0x1;		/* (  1) */
 1002e3c:	00 e3 b6 23 	CALL 0x10075a8 <_le_device_db_remote_counter_set>;
 1002e40:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 1002e42:	28 93       	[P5] = R0;
 1002e44:	01 e8 00 00 	UNLINK;
 1002e48:	b5 05       	(R7:6, P5:5) = [SP++];
 1002e4a:	ff e2 7f fe 	JUMP.L 0x1002b48 <_att_run>;
 1002e4e:	01 e8 00 00 	UNLINK;
 1002e52:	b5 05       	(R7:6, P5:5) = [SP++];
 1002e54:	10 00       	RTS;
	...

01002e58 <_att_event_packet_handler>:
 1002e58:	eb 05       	[--SP] = (R7:5, P5:3);
 1002e5a:	38 30       	R7 = R0;
 1002e5c:	29 30       	R5 = R1;
 1002e5e:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1002e62:	40 43       	R0 = R0.B (Z);
 1002e64:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1002e66:	2a 32       	P5 = R2;
 1002e68:	7e e5 16 00 	R6 = W[FP + 0x2c] (X);
 1002e6c:	08 08       	CC = R0 == R1;
 1002e6e:	d6 14       	IF !CC JUMP 0x100301a <_att_event_packet_handler+0x1c2> (BP);
 1002e70:	28 99       	R0 = B[P5] (Z);
 1002e72:	21 e1 6c 00 	R1 = 0x6c (X);		/*		R1=0x6c(108) */
 1002e76:	08 08       	CC = R0 == R1;
 1002e78:	1f 18       	IF CC JUMP 0x1002eb6 <_att_event_packet_handler+0x5e>;
 1002e7a:	08 0a       	CC = R0 <= R1 (IU);
 1002e7c:	0b 14       	IF !CC JUMP 0x1002e92 <_att_event_packet_handler+0x3a> (BP);
 1002e7e:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 1002e80:	08 08       	CC = R0 == R1;
 1002e82:	54 18       	IF CC JUMP 0x1002f2a <_att_event_packet_handler+0xd2>;
 1002e84:	f1 61       	R1 = 0x3e (X);		/*		R1=0x3e( 62) */
 1002e86:	08 08       	CC = R0 == R1;
 1002e88:	26 18       	IF CC JUMP 0x1002ed4 <_att_event_packet_handler+0x7c>;
 1002e8a:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 1002e8c:	08 08       	CC = R0 == R1;
 1002e8e:	c6 14       	IF !CC JUMP 0x100301a <_att_event_packet_handler+0x1c2> (BP);
 1002e90:	77 20       	JUMP.S 0x1002f7e <_att_event_packet_handler+0x126>;
 1002e92:	21 e1 d7 00 	R1 = 0xd7 (X);		/*		R1=0xd7(215) */
 1002e96:	08 08       	CC = R0 == R1;
 1002e98:	96 18       	IF CC JUMP 0x1002fc4 <_att_event_packet_handler+0x16c>;
 1002e9a:	08 0a       	CC = R0 <= R1 (IU);
 1002e9c:	05 14       	IF !CC JUMP 0x1002ea6 <_att_event_packet_handler+0x4e> (BP);
 1002e9e:	f9 67       	R1 += -0x1;		/* ( -1) */
 1002ea0:	08 08       	CC = R0 == R1;
 1002ea2:	bc 14       	IF !CC JUMP 0x100301a <_att_event_packet_handler+0x1c2> (BP);
 1002ea4:	81 20       	JUMP.S 0x1002fa6 <_att_event_packet_handler+0x14e>;
 1002ea6:	21 e1 d8 00 	R1 = 0xd8 (X);		/*		R1=0xd8(216) */
 1002eaa:	08 08       	CC = R0 == R1;
 1002eac:	84 18       	IF CC JUMP 0x1002fb4 <_att_event_packet_handler+0x15c>;
 1002eae:	11 64       	R1 += 0x2;		/* (  2) */
 1002eb0:	08 08       	CC = R0 == R1;
 1002eb2:	b4 14       	IF !CC JUMP 0x100301a <_att_event_packet_handler+0x1c2> (BP);
 1002eb4:	95 20       	JUMP.S 0x1002fde <_att_event_packet_handler+0x186>;
 1002eb6:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000003(16777219) */
 1002eba:	00 e1 fc 31 	R0.L = 0x31fc;		/* (12796)	R0=0x10031fc(16790012) */
 1002ebe:	00 e3 7d 60 	CALL 0x100efb8 <_puts>;
 1002ec2:	ff e3 43 fe 	CALL 0x1002b48 <_att_run>;
 1002ec6:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10031fc(16790012) */
 1002eca:	00 e1 d4 18 	R0.L = 0x18d4;		/* (6356)	R0=0x10018d4(16783572) */
 1002ece:	00 e3 75 60 	CALL 0x100efb8 <_puts>;
 1002ed2:	a4 20       	JUMP.S 0x100301a <_att_event_packet_handler+0x1c2>;
 1002ed4:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 1002ed8:	08 0c       	CC = R0 == 0x1;
 1002eda:	a0 14       	IF !CC JUMP 0x100301a <_att_event_packet_handler+0x1c2> (BP);
 1002edc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x8 <_att_ir_le_device_db_index> */
 1002ee0:	a8 e5 07 00 	R0 = B[P5 + 0x7] (X);
 1002ee4:	0a e1 0c 1f 	P2.L = 0x1f0c;		/* (7948)	P2=0x1f0c <_att_client_addr_type> */
 1002ee8:	10 9b       	B[P2] = R0;
 1002eea:	0a 30       	R1 = R2;
 1002eec:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x18d4(6356) */
 1002ef0:	41 64       	R1 += 0x8;		/* (  8) */
 1002ef2:	00 e1 0d 1f 	R0.L = 0x1f0d;		/* (7949)	R0=0x1f0d <_att_client_address>(7949) */
 1002ef6:	00 e3 d5 39 	CALL 0x100a2a0 <_bt_flip_addr>;
 1002efa:	a8 e4 05 00 	R0 = B[P5 + 0x5] (Z);
 1002efe:	a9 e4 04 00 	R1 = B[P5 + 0x4] (Z);
 1002f02:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x1eac <_att_connection> */
 1002f06:	40 4f       	R0 <<= 0x8;
 1002f08:	0c e1 ac 1e 	P4.L = 0x1eac;		/* (7852)	P4=0x1eac <_att_connection> */
 1002f0c:	08 56       	R0 = R0 | R1;
 1002f0e:	20 97       	W[P4] = R0;
 1002f10:	b8 60       	R0 = 0x17 (X);		/*		R0=0x17( 23) */
 1002f12:	60 b4       	W[P4 + 0x2] = R0;
 1002f14:	00 e3 40 21 	CALL 0x1007194 <_l2cap_max_le_mtu>;
 1002f18:	a0 b4       	W[P4 + 0x4] = R0;
 1002f1a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1002f1c:	a0 e6 06 00 	B[P4 + 0x6] = R0;
 1002f20:	a0 e6 07 00 	B[P4 + 0x7] = R0;
 1002f24:	a0 e6 08 00 	B[P4 + 0x8] = R0;
 1002f28:	79 20       	JUMP.S 0x100301a <_att_event_packet_handler+0x1c2>;
 1002f2a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1002f2e:	00 e1 14 32 	R0.L = 0x3214;		/* (12820)	R0=0x1003214(16790036) */
 1002f32:	00 e3 43 60 	CALL 0x100efb8 <_puts>;
 1002f36:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x1eac <_att_connection> */
 1002f3a:	a8 e4 04 00 	R0 = B[P5 + 0x4] (Z);
 1002f3e:	0c e1 ac 1e 	P4.L = 0x1eac;		/* (7852)	P4=0x1eac <_att_connection> */
 1002f42:	40 4f       	R0 <<= 0x8;
 1002f44:	aa e4 03 00 	R2 = B[P5 + 0x3] (Z);
 1002f48:	21 95       	R1 = W[P4] (Z);
 1002f4a:	10 56       	R0 = R0 | R2;
 1002f4c:	01 08       	CC = R1 == R0;
 1002f4e:	66 14       	IF !CC JUMP 0x100301a <_att_event_packet_handler+0x1c2> (BP);
 1002f50:	4b e1 00 00 	P3.H = 0x0;		/* (  0)	P3=0x1ed0 <_att_request_size> */
 1002f54:	0b e1 0c 1f 	P3.L = 0x1f0c;		/* (7948)	P3=0x1f0c <_att_client_addr_type> */
 1002f58:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0xd8(216) */
 1002f5c:	01 e1 0d 1f 	R1.L = 0x1f0d;		/* (7949)	R1=0x1f0d <_att_client_address>(7949) */
 1002f60:	58 99       	R0 = B[P3] (X);
 1002f62:	00 e3 d9 35 	CALL 0x1009b14 <_sm_encryption_key_size>;
 1002f66:	a0 e6 06 00 	B[P4 + 0x6] = R0;
 1002f6a:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x1f0d <_att_client_address>(7949) */
 1002f6e:	58 99       	R0 = B[P3] (X);
 1002f70:	01 e1 0d 1f 	R1.L = 0x1f0d;		/* (7949)	R1=0x1f0d <_att_client_address>(7949) */
 1002f74:	00 e3 e2 35 	CALL 0x1009b38 <_sm_authenticated>;
 1002f78:	a0 e6 07 00 	B[P4 + 0x7] = R0;
 1002f7c:	4f 20       	JUMP.S 0x100301a <_att_event_packet_handler+0x1c2>;
 1002f7e:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x1eac <_att_connection> */
 1002f82:	0c e1 ac 1e 	P4.L = 0x1eac;		/* (7852)	P4=0x1eac <_att_connection> */
 1002f86:	44 30       	R0 = P4;
 1002f88:	ff e3 e6 f8 	CALL 0x1002154 <_att_clear_transaction_queue>;
 1002f8c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1002f8e:	20 97       	W[P4] = R0;
 1002f90:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1f0c <_att_client_addr_type> */
 1002f94:	0a e1 a8 1e 	P2.L = 0x1ea8;		/* (7848)	P2=0x1ea8 <_att_handle_value_indication_handle> */
 1002f98:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1002f9a:	10 93       	[P2] = R0;
 1002f9c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ea8 <_att_handle_value_indication_handle> */
 1002fa0:	0a e1 cc 1e 	P2.L = 0x1ecc;		/* (7884)	P2=0x1ecc <_att_server_state> */
 1002fa4:	06 20       	JUMP.S 0x1002fb0 <_att_event_packet_handler+0x158>;
 1002fa6:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ecc <_att_server_state> */
 1002faa:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1002fac:	0a e1 08 1f 	P2.L = 0x1f08;		/* (7944)	P2=0x1f08 <_att_ir_lookup_active> */
 1002fb0:	10 93       	[P2] = R0;
 1002fb2:	34 20       	JUMP.S 0x100301a <_att_event_packet_handler+0x1c2>;
 1002fb4:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1f08 <_att_ir_lookup_active> */
 1002fb8:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1002fba:	0a e1 08 1f 	P2.L = 0x1f08;		/* (7944)	P2=0x1f08 <_att_ir_lookup_active> */
 1002fbe:	10 93       	[P2] = R0;
 1002fc0:	a8 a5       	R0 = W[P5 + 0xc] (Z);
 1002fc2:	08 20       	JUMP.S 0x1002fd2 <_att_event_packet_handler+0x17a>;
 1002fc4:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1f08 <_att_ir_lookup_active> */
 1002fc8:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1002fca:	0a e1 08 1f 	P2.L = 0x1f08;		/* (7944)	P2=0x1f08 <_att_ir_lookup_active> */
 1002fce:	10 93       	[P2] = R0;
 1002fd0:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 1002fd2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1f08 <_att_ir_lookup_active> */
 1002fd6:	0a e1 08 00 	P2.L = 0x8;		/* (  8)	P2=0x8 <_att_ir_le_device_db_index> */
 1002fda:	10 93       	[P2] = R0;
 1002fdc:	1d 20       	JUMP.S 0x1003016 <_att_event_packet_handler+0x1be>;
 1002fde:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x8 <_att_ir_le_device_db_index> */
 1002fe2:	0a e1 0c 1f 	P2.L = 0x1f0c;		/* (7948)	P2=0x1f0c <_att_client_addr_type> */
 1002fe6:	a9 e4 01 00 	R1 = B[P5 + 0x1] (Z);
 1002fea:	10 99       	R0 = B[P2] (Z);
 1002fec:	01 08       	CC = R1 == R0;
 1002fee:	16 14       	IF !CC JUMP 0x100301a <_att_event_packet_handler+0x1c2> (BP);
 1002ff0:	02 30       	R0 = R2;
 1002ff2:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x1f0d <_att_client_address>(7949) */
 1002ff6:	10 64       	R0 += 0x2;		/* (  2) */
 1002ff8:	01 e1 0d 1f 	R1.L = 0x1f0d;		/* (7949)	R1=0x1f0d <_att_client_address>(7949) */
 1002ffc:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 1002ffe:	00 e3 45 66 	CALL 0x100fc88 <_memcmp>;
 1003002:	00 0c       	CC = R0 == 0x0;
 1003004:	0b 14       	IF !CC JUMP 0x100301a <_att_event_packet_handler+0x1c2> (BP);
 1003006:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1f0c <_att_client_addr_type> */
 100300a:	a8 e5 0e 00 	R0 = B[P5 + 0xe] (X);
 100300e:	0a e1 ac 1e 	P2.L = 0x1eac;		/* (7852)	P2=0x1eac <_att_connection> */
 1003012:	90 e6 08 00 	B[P2 + 0x8] = R0;
 1003016:	ff e3 99 fd 	CALL 0x1002b48 <_att_run>;
 100301a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1eac <_att_connection> */
 100301e:	0a e1 c8 1e 	P2.L = 0x1ec8;		/* (7880)	P2=0x1ec8 <_att_client_packet_handler> */
 1003022:	52 91       	P2 = [P2];
 1003024:	42 0c       	CC = P2 == 0x0;
 1003026:	0a 18       	IF CC JUMP 0x100303a <_att_event_packet_handler+0x1e2>;
 1003028:	7e e6 16 00 	W[FP + 0x2c] = R6;
 100302c:	07 30       	R0 = R7;
 100302e:	0d 30       	R1 = R5;
 1003030:	55 30       	R2 = P5;
 1003032:	01 e8 00 00 	UNLINK;
 1003036:	ab 05       	(R7:5, P5:3) = [SP++];
 1003038:	52 00       	JUMP (P2);
 100303a:	01 e8 00 00 	UNLINK;
 100303e:	ab 05       	(R7:5, P5:3) = [SP++];
 1003040:	10 00       	RTS;
	...

01003044 <_att_server_init>:
 1003044:	68 05       	[--SP] = (R7:5);
 1003046:	28 30       	R5 = R0;
 1003048:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100ffff(16842751) */
 100304c:	31 30       	R6 = R1;
 100304e:	3a 30       	R7 = R2;
 1003050:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1003054:	00 e1 2c 32 	R0.L = 0x322c;		/* (12844)	R0=0x100322c(16790060) */
 1003058:	00 e3 b0 5f 	CALL 0x100efb8 <_puts>;
 100305c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100322c(16790060) */
 1003060:	00 e1 58 2e 	R0.L = 0x2e58;		/* (11864)	R0=0x1002e58 <_att_event_packet_handler>(16789080) */
 1003064:	00 e3 6a 34 	CALL 0x1009938 <_sm_register_packet_handler>;
 1003068:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1002e58 <_att_event_packet_handler>(16789080) */
 100306c:	00 e1 20 2d 	R0.L = 0x2d20;		/* (11552)	R0=0x1002d20 <_att_packet_handler>(16788768) */
 1003070:	ff e3 12 fd 	CALL 0x1002a94 <_att_dispatch_register_server>;
 1003074:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ec8 <_att_client_packet_handler> */
 1003078:	0a e1 cc 1e 	P2.L = 0x1ecc;		/* (7884)	P2=0x1ecc <_att_server_state> */
 100307c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100307e:	10 93       	[P2] = R0;
 1003080:	05 30       	R0 = R5;
 1003082:	ff e3 69 f6 	CALL 0x1001d54 <_att_set_db>;
 1003086:	06 30       	R0 = R6;
 1003088:	ff e3 70 f6 	CALL 0x1001d68 <_att_set_read_callback>;
 100308c:	07 30       	R0 = R7;
 100308e:	01 e8 00 00 	UNLINK;
 1003092:	28 05       	(R7:5) = [SP++];
 1003094:	ff e2 74 f6 	JUMP.L 0x1001d7c <_att_set_write_callback>;

01003098 <_att_server_register_packet_handler>:
 1003098:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ecc <_att_server_state> */
 100309c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10030a0:	0a e1 c8 1e 	P2.L = 0x1ec8;		/* (7880)	P2=0x1ec8 <_att_client_packet_handler> */
 10030a4:	10 93       	[P2] = R0;
 10030a6:	01 e8 00 00 	UNLINK;
 10030aa:	10 00       	RTS;

010030ac <_att_server_can_send>:
 10030ac:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1ec8 <_att_client_packet_handler> */
 10030b0:	0a e1 ac 1e 	P2.L = 0x1eac;		/* (7852)	P2=0x1eac <_att_connection> */
 10030b4:	10 95       	R0 = W[P2] (Z);
 10030b6:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10030ba:	00 0c       	CC = R0 == 0x0;
 10030bc:	05 1c       	IF CC JUMP 0x10030c6 <_att_server_can_send+0x1a> (BP);
 10030be:	01 e8 00 00 	UNLINK;
 10030c2:	00 e2 7b 20 	JUMP.L 0x10071b8 <_le_l2cap_can_send_fixed_channel_packet_now>;
 10030c6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10030c8:	01 e8 00 00 	UNLINK;
 10030cc:	10 00       	RTS;
	...

010030d0 <_att_server_notify>:
 10030d0:	ed 05       	[--SP] = (R7:5, P5:5);
 10030d2:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x1ecc <_att_server_state> */
 10030d6:	30 30       	R6 = R0;
 10030d8:	0d e1 ac 1e 	P5.L = 0x1eac;		/* (7852)	P5=0x1eac <_att_connection> */
 10030dc:	00 e8 05 00 	LINK 0x14;		/* (20) */
 10030e0:	29 30       	R5 = R1;
 10030e2:	3a 30       	R7 = R2;
 10030e4:	28 95       	R0 = W[P5] (Z);
 10030e6:	00 e3 69 20 	CALL 0x10071b8 <_le_l2cap_can_send_fixed_channel_packet_now>;
 10030ea:	00 0c       	CC = R0 == 0x0;
 10030ec:	15 1c       	IF CC JUMP 0x1003116 <_att_server_notify+0x46> (BP);
 10030ee:	00 e3 7d 20 	CALL 0x10071e8 <_le_l2cap_reserve_packet_buffer>;
 10030f2:	00 e3 73 20 	CALL 0x10071d8 <_le_l2cap_get_outgoing_buffer>;
 10030f6:	30 b1       	[SP + 0x10] = R0;
 10030f8:	b7 b5       	W[SP + 0xc] = R7;
 10030fa:	0e 30       	R1 = R6;
 10030fc:	15 30       	R2 = R5;
 10030fe:	45 30       	R0 = P5;
 1003100:	ff e3 40 f8 	CALL 0x1002180 <_att_prepare_handle_value_notification>;
 1003104:	10 30       	R2 = R0;
 1003106:	28 95       	R0 = W[P5] (Z);
 1003108:	01 e8 00 00 	UNLINK;
 100310c:	d2 42       	R2 = R2.L (Z);
 100310e:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1003110:	ad 05       	(R7:5, P5:5) = [SP++];
 1003112:	00 e2 77 20 	JUMP.L 0x1007200 <_le_l2cap_send_prepared_connectionless>;
 1003116:	01 e8 00 00 	UNLINK;
 100311a:	20 e1 57 00 	R0 = 0x57 (X);		/*		R0=0x57( 87) */
 100311e:	ad 05       	(R7:5, P5:5) = [SP++];
 1003120:	10 00       	RTS;
	...

01003124 <_att_server_indicate>:
 1003124:	ec 05       	[--SP] = (R7:5, P5:4);
 1003126:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x1eac <_att_connection> */
 100312a:	38 30       	R7 = R0;
 100312c:	0d e1 a8 1e 	P5.L = 0x1ea8;		/* (7848)	P5=0x1ea8 <_att_handle_value_indication_handle> */
 1003130:	28 91       	R0 = [P5];
 1003132:	00 e8 05 00 	LINK 0x14;		/* (20) */
 1003136:	29 30       	R5 = R1;
 1003138:	32 30       	R6 = R2;
 100313a:	00 0c       	CC = R0 == 0x0;
 100313c:	2b 14       	IF !CC JUMP 0x1003192 <_att_server_indicate+0x6e> (BP);
 100313e:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x1eac <_att_connection> */
 1003142:	0c e1 ac 1e 	P4.L = 0x1eac;		/* (7852)	P4=0x1eac <_att_connection> */
 1003146:	20 95       	R0 = W[P4] (Z);
 1003148:	00 e3 38 20 	CALL 0x10071b8 <_le_l2cap_can_send_fixed_channel_packet_now>;
 100314c:	00 0c       	CC = R0 == 0x0;
 100314e:	25 1c       	IF CC JUMP 0x1003198 <_att_server_indicate+0x74> (BP);
 1003150:	f8 42       	R0 = R7.L (Z);
 1003152:	28 93       	[P5] = R0;
 1003154:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x57( 87) */
 1003158:	42 e1 00 01 	R2.H = 0x100;		/* (256)	R2=0x1000006(16777222) */
 100315c:	21 e1 30 75 	R1 = 0x7530 (X);		/*		R1=0x7530(30000) */
 1003160:	02 e1 24 2b 	R2.L = 0x2b24;		/* (11044)	R2=0x1002b24 <_att_handle_value_indication_timeout>(16788260) */
 1003164:	00 e1 b8 1e 	R0.L = 0x1eb8;		/* (7864)	R0=0x1eb8 <_att_handle_value_indication_timer>(7864) */
 1003168:	00 e3 74 5f 	CALL 0x100f050 <_sys_timer_register>;
 100316c:	00 e3 3e 20 	CALL 0x10071e8 <_le_l2cap_reserve_packet_buffer>;
 1003170:	00 e3 34 20 	CALL 0x10071d8 <_le_l2cap_get_outgoing_buffer>;
 1003174:	30 b1       	[SP + 0x10] = R0;
 1003176:	0f 30       	R1 = R7;
 1003178:	15 30       	R2 = R5;
 100317a:	b6 b5       	W[SP + 0xc] = R6;
 100317c:	44 30       	R0 = P4;
 100317e:	ff e3 25 f8 	CALL 0x10021c8 <_att_prepare_handle_value_indication>;
 1003182:	10 30       	R2 = R0;
 1003184:	20 95       	R0 = W[P4] (Z);
 1003186:	d2 42       	R2 = R2.L (Z);
 1003188:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 100318a:	00 e3 3b 20 	CALL 0x1007200 <_le_l2cap_send_prepared_connectionless>;
 100318e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1003190:	06 20       	JUMP.S 0x100319c <_att_server_indicate+0x78>;
 1003192:	20 e1 90 00 	R0 = 0x90 (X);		/*		R0=0x90(144) */
 1003196:	03 20       	JUMP.S 0x100319c <_att_server_indicate+0x78>;
 1003198:	20 e1 57 00 	R0 = 0x57 (X);		/*		R0=0x57( 87) */
 100319c:	01 e8 00 00 	UNLINK;
 10031a0:	ac 05       	(R7:5, P5:4) = [SP++];
 10031a2:	10 00       	RTS;
 10031a4:	61 74       	ILLEGAL;
 10031a6:	74 5f       	P5 = P4 + (SP << 0x2);
 10031a8:	73 65       	R3 += 0x2e;		/* ( 46) */
 10031aa:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 10031ac:	76 65       	R6 += 0x2e;		/* ( 46) */
 10031ae:	72 5f       	P5 = P2 + (SP << 0x2);
 10031b0:	72 65       	R2 += 0x2e;		/* ( 46) */
 10031b2:	71 75       	ILLEGAL;
 10031b4:	65 73       	ILLEGAL;
 10031b6:	74 5f       	P5 = P4 + (SP << 0x2);
 10031b8:	72 65       	R2 += 0x2e;		/* ( 46) */
 10031ba:	63 65       	R3 += 0x2c;		/* ( 44) */
 10031bc:	69 76       	ILLEGAL;
 10031be:	65 64       	R5 += 0xc;		/* ( 12) */
 10031c0:	0a 00       	ILLEGAL;
 10031c2:	00 00       	NOP;
 10031c4:	61 74       	ILLEGAL;
 10031c6:	74 5f       	P5 = P4 + (SP << 0x2);
 10031c8:	73 65       	R3 += 0x2e;		/* ( 46) */
 10031ca:	72 76       	ILLEGAL;
 10031cc:	65 72       	ILLEGAL;
 10031ce:	5f 72       	ILLEGAL;
 10031d0:	65 71       	ILLEGAL;
 10031d2:	75 65       	R5 += 0x2e;		/* ( 46) */
 10031d4:	73 74       	ILLEGAL;
 10031d6:	5f 72       	ILLEGAL;
 10031d8:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 10031da:	65 69       	P5 = 0x2c (X);		/*		P5=0x2c( 44) */
 10031dc:	76 65       	R6 += 0x2e;		/* ( 46) */
 10031de:	64 5f       	P5 = P4 + (P4 << 0x2);
 10031e0:	61 6e       	P1 += -0x34;		/* (-52) */
 10031e2:	64 5f       	P5 = P4 + (P4 << 0x2);
 10031e4:	76 61       	R6 = 0x2e (X);		/*		R6=0x2e( 46) */
 10031e6:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 10031e8:	64 61       	R4 = 0x2c (X);		/*		R4=0x2c( 44) */
 10031ea:	74 65       	R4 += 0x2e;		/* ( 46) */
 10031ec:	64 0a       	CC = P4 <= P4 (IU);
 10031ee:	00 00       	NOP;
 10031f0:	2d 2d       	JUMP.S 0x1002c4a <_att_run+0x102>;
 10031f2:	53 65       	R3 += 0x2a;		/* ( 42) */
 10031f4:	72 76       	ILLEGAL;
 10031f6:	65 72       	ILLEGAL;
 10031f8:	20 00       	IDLE;
 10031fa:	00 00       	NOP;
 10031fc:	61 74       	ILLEGAL;
 10031fe:	74 5f       	P5 = P4 + (SP << 0x2);
 1003200:	73 65       	R3 += 0x2e;		/* ( 46) */
 1003202:	72 76       	ILLEGAL;
 1003204:	65 72       	ILLEGAL;
 1003206:	5f 64       	R7 += 0xb;		/* ( 11) */
 1003208:	61 65       	R1 += 0x2c;		/* ( 44) */
 100320a:	6d 6f       	P5 += -0x13;		/* (-19) */
 100320c:	5f 65       	R7 += 0x2b;		/* ( 43) */
 100320e:	76 65       	R6 += 0x2e;		/* ( 46) */
 1003210:	6e 74       	ILLEGAL;
 1003212:	0a 00       	ILLEGAL;
 1003214:	61 74       	ILLEGAL;
 1003216:	74 3a       	ILLEGAL;
 1003218:	20 65       	R0 += 0x24;		/* ( 36) */
 100321a:	6e 63       	R6 = -0x13 (X);		/*		R6=0xffffffed(-19) */
 100321c:	72 79       	ILLEGAL;
 100321e:	70 74       	ILLEGAL;
 1003220:	69 6f       	P1 += -0x13;		/* (-19) */
 1003222:	6e 5f       	P5 = SP + (P5 << 0x2);
 1003224:	63 68       	P3 = 0xc (X);		/*		P3=0xc( 12) */
 1003226:	61 6e       	P1 += -0x34;		/* (-52) */
 1003228:	67 65       	R7 += 0x2c;		/* ( 44) */
 100322a:	0a 00       	ILLEGAL;
 100322c:	41 54       	R1 = R1 & R0;
 100322e:	54 20       	JUMP.S 0x10032d6 <_att_write_callback+0x9e>;
 1003230:	69 6e       	P1 += -0x33;		/* (-51) */
 1003232:	69 74       	ILLEGAL;
 1003234:	0a 00       	ILLEGAL;
	...

01003238 <_att_write_callback>:
 1003238:	e4 05       	[--SP] = (R7:4, P5:4);
 100323a:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100323e:	3a 30       	R7 = R2;
 1003240:	31 30       	R6 = R1;
 1003242:	3c af       	P4 = [FP + 0x30];
 1003244:	7c e5 1a 00 	R4 = W[FP + 0x34] (X);
 1003248:	01 30       	R0 = R1;
 100324a:	ff e3 6d f5 	CALL 0x1001d24 <_att_uuid_for_handle>;
 100324e:	28 30       	R5 = R0;
 1003250:	78 e4 16 00 	R0 = W[FP + 0x2c] (Z);
 1003254:	f0 b0       	[SP + 0xc] = R0;
 1003256:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000057(16777303) */
 100325a:	fa 42       	R2 = R7.L (Z);
 100325c:	f1 42       	R1 = R6.L (Z);
 100325e:	00 e1 e0 34 	R0.L = 0x34e0;		/* (13536)	R0=0x10034e0(16790752) */
 1003262:	00 e3 8f 5e 	CALL 0x100ef80 <_printf>;
 1003266:	e7 42       	R7 = R4.L (Z);
 1003268:	44 30       	R0 = P4;
 100326a:	0f 30       	R1 = R7;
 100326c:	00 e3 d8 57 	CALL 0x100e21c <_printf_buf>;
 1003270:	ed 42       	R5 = R5.L (Z);
 1003272:	20 e1 01 2a 	R0 = 0x2a01 (X);		/*		R0=0x2a01(10753) */
 1003276:	05 08       	CC = R5 == R0;
 1003278:	31 18       	IF CC JUMP 0x10032da <_att_write_callback+0xa2>;
 100327a:	05 0a       	CC = R5 <= R0 (IU);
 100327c:	0a 14       	IF !CC JUMP 0x1003290 <_att_write_callback+0x58> (BP);
 100327e:	20 e1 02 29 	R0 = 0x2902 (X);		/*		R0=0x2902(10498) */
 1003282:	05 08       	CC = R5 == R0;
 1003284:	11 18       	IF CC JUMP 0x10032a6 <_att_write_callback+0x6e>;
 1003286:	20 e1 00 2a 	R0 = 0x2a00 (X);		/*		R0=0x2a00(10752) */
 100328a:	05 08       	CC = R5 == R0;
 100328c:	4c 14       	IF !CC JUMP 0x1003324 <_att_write_callback+0xec> (BP);
 100328e:	18 20       	JUMP.S 0x10032be <_att_write_callback+0x86>;
 1003290:	20 e1 03 2a 	R0 = 0x2a03 (X);		/*		R0=0x2a03(10755) */
 1003294:	05 08       	CC = R5 == R0;
 1003296:	34 18       	IF CC JUMP 0x10032fe <_att_write_callback+0xc6>;
 1003298:	85 09       	CC = R5 < R0 (IU);
 100329a:	2b 1c       	IF CC JUMP 0x10032f0 <_att_write_callback+0xb8> (BP);
 100329c:	80 e1 01 ff 	R0 = 0xff01 (Z);		/*		R0=0xff01(65281) */
 10032a0:	05 08       	CC = R5 == R0;
 10032a2:	41 14       	IF !CC JUMP 0x1003324 <_att_write_callback+0xec> (BP);
 10032a4:	35 20       	JUMP.S 0x100330e <_att_write_callback+0xd6>;
 10032a6:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2e */
 10032aa:	20 99       	R0 = B[P4] (Z);
 10032ac:	0a e1 28 1f 	P2.L = 0x1f28;		/* (7976)	P2=0x1f28 <_client_configuration> */
 10032b0:	10 93       	[P2] = R0;
 10032b2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1f28 <_client_configuration> */
 10032b6:	0a e1 2c 1f 	P2.L = 0x1f2c;		/* (7980)	P2=0x1f2c <_client_configuration_handle> */
 10032ba:	16 97       	W[P2] = R6;
 10032bc:	34 20       	JUMP.S 0x1003324 <_att_write_callback+0xec>;
 10032be:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x2c <_att_client_start_handle> */
 10032c2:	0d e1 14 1f 	P5.L = 0x1f14;		/* (7956)	P5=0x1f14 <_gap_device_name> */
 10032c6:	45 30       	R0 = P5;
 10032c8:	4c 30       	R1 = P4;
 10032ca:	17 30       	R2 = R7;
 10032cc:	00 e3 1c 65 	CALL 0x100fd04 <_memcpy>;
 10032d0:	17 32       	P2 = R7;
 10032d2:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10032d4:	55 5b       	P5 = P5 + P2;
 10032d6:	28 9b       	B[P5] = R0;
 10032d8:	26 20       	JUMP.S 0x1003324 <_att_write_callback+0xec>;
 10032da:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 10032de:	21 99       	R1 = B[P4] (Z);
 10032e0:	40 4f       	R0 <<= 0x8;
 10032e2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1f2c <_client_configuration_handle> */
 10032e6:	08 56       	R0 = R0 | R1;
 10032e8:	0a e1 2e 1f 	P2.L = 0x1f2e;		/* (7982)	P2=0x1f2e <_gap_appearance> */
 10032ec:	10 97       	W[P2] = R0;
 10032ee:	1b 20       	JUMP.S 0x1003324 <_att_write_callback+0xec>;
 10032f0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1f2e <_gap_appearance> */
 10032f4:	20 99       	R0 = B[P4] (Z);
 10032f6:	0a e1 30 1f 	P2.L = 0x1f30;		/* (7984)	P2=0x1f30 <_gap_privacy> */
 10032fa:	10 93       	[P2] = R0;
 10032fc:	14 20       	JUMP.S 0x1003324 <_att_write_callback+0xec>;
 10032fe:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x0 <data_addr>(  0) */
 1003302:	00 e1 34 1f 	R0.L = 0x1f34;		/* (7988)	R0=0x1f34 <_gap_reconnection_address>(7988) */
 1003306:	4c 30       	R1 = P4;
 1003308:	00 e3 cc 37 	CALL 0x100a2a0 <_bt_flip_addr>;
 100330c:	0c 20       	JUMP.S 0x1003324 <_att_write_callback+0xec>;
 100330e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1f30 <_gap_privacy> */
 1003312:	0a e1 0c 00 	P2.L = 0xc;		/* ( 12)	P2=0xc <_test_buf> */
 1003316:	42 30       	R0 = P2;
 1003318:	14 9b       	B[P2] = R4;
 100331a:	08 64       	R0 += 0x1;		/* (  1) */
 100331c:	4c 30       	R1 = P4;
 100331e:	17 30       	R2 = R7;
 1003320:	00 e3 f2 64 	CALL 0x100fd04 <_memcpy>;
 1003324:	01 e8 00 00 	UNLINK;
 1003328:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100332a:	a4 05       	(R7:4, P5:4) = [SP++];
 100332c:	10 00       	RTS;
	...

01003330 <_att_read_callback>:
 1003330:	fc 05       	[--SP] = (R7:7, P5:4);
 1003332:	00 e8 04 00 	LINK 0x10;		/* (16) */
 1003336:	78 e4 12 00 	R0 = W[FP + 0x24] (Z);
 100333a:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x2d */
 100333e:	0c e1 3a 1f 	P4.L = 0x1f3a;		/* (7994)	P4=0x1f3a <_handle> */
 1003342:	f0 b0       	[SP + 0xc] = R0;
 1003344:	21 97       	W[P4] = R1;
 1003346:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 100334a:	c9 42       	R1 = R1.L (Z);
 100334c:	d2 42       	R2 = R2.L (Z);
 100334e:	3d ae       	P5 = [FP + 0x20];
 1003350:	00 e1 18 35 	R0.L = 0x3518;		/* (13592)	R0=0x1003518(16790808) */
 1003354:	00 e3 16 5e 	CALL 0x100ef80 <_printf>;
 1003358:	20 95       	R0 = W[P4] (Z);
 100335a:	ff e3 e5 f4 	CALL 0x1001d24 <_att_uuid_for_handle>;
 100335e:	c0 42       	R0 = R0.L (Z);
 1003360:	21 e1 01 2a 	R1 = 0x2a01 (X);		/*		R1=0x2a01(10753) */
 1003364:	08 08       	CC = R0 == R1;
 1003366:	30 18       	IF CC JUMP 0x10033c6 <_att_read_callback+0x96>;
 1003368:	08 0a       	CC = R0 <= R1 (IU);
 100336a:	0a 14       	IF !CC JUMP 0x100337e <_att_read_callback+0x4e> (BP);
 100336c:	21 e1 02 29 	R1 = 0x2902 (X);		/*		R1=0x2902(10498) */
 1003370:	08 08       	CC = R0 == R1;
 1003372:	11 18       	IF CC JUMP 0x1003394 <_att_read_callback+0x64>;
 1003374:	21 e1 00 2a 	R1 = 0x2a00 (X);		/*		R1=0x2a00(10752) */
 1003378:	08 08       	CC = R0 == R1;
 100337a:	5f 14       	IF !CC JUMP 0x1003438 <_att_read_callback+0x108> (BP);
 100337c:	13 20       	JUMP.S 0x10033a2 <_att_read_callback+0x72>;
 100337e:	21 e1 03 2a 	R1 = 0x2a03 (X);		/*		R1=0x2a03(10755) */
 1003382:	08 08       	CC = R0 == R1;
 1003384:	37 18       	IF CC JUMP 0x10033f2 <_att_read_callback+0xc2>;
 1003386:	88 09       	CC = R0 < R1 (IU);
 1003388:	2b 1c       	IF CC JUMP 0x10033de <_att_read_callback+0xae> (BP);
 100338a:	81 e1 01 ff 	R1 = 0xff01 (Z);		/*		R1=0xff01(65281) */
 100338e:	08 08       	CC = R0 == R1;
 1003390:	54 14       	IF !CC JUMP 0x1003438 <_att_read_callback+0x108> (BP);
 1003392:	3a 20       	JUMP.S 0x1003406 <_att_read_callback+0xd6>;
 1003394:	45 0c       	CC = P5 == 0x0;
 1003396:	2c 18       	IF CC JUMP 0x10033ee <_att_read_callback+0xbe>;
 1003398:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0xc <_test_buf> */
 100339c:	0a e1 28 1f 	P2.L = 0x1f28;		/* (7976)	P2=0x1f28 <_client_configuration> */
 10033a0:	25 20       	JUMP.S 0x10033ea <_att_read_callback+0xba>;
 10033a2:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x3518(13592) */
 10033a6:	00 e1 14 1f 	R0.L = 0x1f14;		/* (7956)	R0=0x1f14 <_gap_device_name>(7956) */
 10033aa:	00 e3 e1 65 	CALL 0x100ff6c <_strlen>;
 10033ae:	38 30       	R7 = R0;
 10033b0:	45 0c       	CC = P5 == 0x0;
 10033b2:	47 18       	IF CC JUMP 0x1003440 <_att_read_callback+0x110>;
 10033b4:	c2 42       	R2 = R0.L (Z);
 10033b6:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0xff01(65281) */
 10033ba:	45 30       	R0 = P5;
 10033bc:	01 e1 14 1f 	R1.L = 0x1f14;		/* (7956)	R1=0x1f14 <_gap_device_name>(7956) */
 10033c0:	00 e3 a2 64 	CALL 0x100fd04 <_memcpy>;
 10033c4:	3e 20       	JUMP.S 0x1003440 <_att_read_callback+0x110>;
 10033c6:	45 0c       	CC = P5 == 0x0;
 10033c8:	39 18       	IF CC JUMP 0x100343a <_att_read_callback+0x10a>;
 10033ca:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1f28 <_client_configuration> */
 10033ce:	0a e1 2e 1f 	P2.L = 0x1f2e;		/* (7982)	P2=0x1f2e <_gap_appearance> */
 10033d2:	45 30       	R0 = P5;
 10033d4:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10033d6:	12 95       	R2 = W[P2] (Z);
 10033d8:	00 e3 00 37 	CALL 0x100a1d8 <_bt_store_16>;
 10033dc:	2f 20       	JUMP.S 0x100343a <_att_read_callback+0x10a>;
 10033de:	45 0c       	CC = P5 == 0x0;
 10033e0:	07 18       	IF CC JUMP 0x10033ee <_att_read_callback+0xbe>;
 10033e2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1f2e <_gap_appearance> */
 10033e6:	0a e1 30 1f 	P2.L = 0x1f30;		/* (7984)	P2=0x1f30 <_gap_privacy> */
 10033ea:	50 99       	R0 = B[P2] (X);
 10033ec:	28 9b       	B[P5] = R0;
 10033ee:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 10033f0:	28 20       	JUMP.S 0x1003440 <_att_read_callback+0x110>;
 10033f2:	45 0c       	CC = P5 == 0x0;
 10033f4:	25 18       	IF CC JUMP 0x100343e <_att_read_callback+0x10e>;
 10033f6:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x0 <data_addr>(  0) */
 10033fa:	45 30       	R0 = P5;
 10033fc:	01 e1 34 1f 	R1.L = 0x1f34;		/* (7988)	R1=0x1f34 <_gap_reconnection_address>(7988) */
 1003400:	00 e3 50 37 	CALL 0x100a2a0 <_bt_flip_addr>;
 1003404:	1d 20       	JUMP.S 0x100343e <_att_read_callback+0x10e>;
 1003406:	45 0c       	CC = P5 == 0x0;
 1003408:	12 18       	IF CC JUMP 0x100342c <_att_read_callback+0xfc>;
 100340a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x1f30 <_gap_privacy> */
 100340e:	0a e1 0c 00 	P2.L = 0xc;		/* ( 12)	P2=0xc <_test_buf> */
 1003412:	4a 30       	R1 = P2;
 1003414:	09 64       	R1 += 0x1;		/* (  1) */
 1003416:	12 99       	R2 = B[P2] (Z);
 1003418:	45 30       	R0 = P5;
 100341a:	00 e3 75 64 	CALL 0x100fd04 <_memcpy>;
 100341e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1001f14(16785172) */
 1003422:	00 e1 50 35 	R0.L = 0x3550;		/* (13648)	R0=0x1003550(16790864) */
 1003426:	4d 30       	R1 = P5;
 1003428:	00 e3 ac 5d 	CALL 0x100ef80 <_printf>;
 100342c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0xc <_test_buf> */
 1003430:	0a e1 0c 00 	P2.L = 0xc;		/* ( 12)	P2=0xc <_test_buf> */
 1003434:	17 99       	R7 = B[P2] (Z);
 1003436:	05 20       	JUMP.S 0x1003440 <_att_read_callback+0x110>;
 1003438:	05 20       	JUMP.S 0x1003442 <_att_read_callback+0x112>;
 100343a:	17 60       	R7 = 0x2 (X);		/*		R7=0x2(  2) */
 100343c:	02 20       	JUMP.S 0x1003440 <_att_read_callback+0x110>;
 100343e:	37 60       	R7 = 0x6 (X);		/*		R7=0x6(  6) */
 1003440:	07 30       	R0 = R7;
 1003442:	01 e8 00 00 	UNLINK;
 1003446:	bc 05       	(R7:7, P5:4) = [SP++];
 1003448:	10 00       	RTS;
	...

0100344c <_btstack_main>:
 100344c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1003550(16790864) */
 1003450:	00 e8 04 00 	LINK 0x10;		/* (16) */
 1003454:	00 e1 5c 35 	R0.L = 0x355c;		/* (13660)	R0=0x100355c(16790876) */
 1003458:	00 e3 b0 5d 	CALL 0x100efb8 <_puts>;
 100345c:	00 e3 92 0f 	CALL 0x1005380 <_ble_hci_transport_h4_instance>;
 1003460:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1003462:	f1 b0       	[SP + 0xc] = R1;
 1003464:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1003466:	00 e3 e7 12 	CALL 0x1005a34 <_le_hci_init>;
 100346a:	00 e3 5f 01 	CALL 0x1003728 <_le_btstack_memory_init>;
 100346e:	00 e3 79 1e 	CALL 0x1007160 <_le_l2cap_init>;
 1003472:	00 e3 57 1f 	CALL 0x1007320 <_le_device_db_init>;
 1003476:	00 e3 e5 32 	CALL 0x1009a40 <_sm_init>;
 100347a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100355c(16790876) */
 100347e:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000000 <_START>(16777216) */
 1003482:	42 e1 00 01 	R2.H = 0x100;		/* (256)	R2=0x1000000 <_START>(16777216) */
 1003486:	02 e1 38 32 	R2.L = 0x3238;		/* (12856)	R2=0x1003238 <_att_write_callback>(16790072) */
 100348a:	01 e1 30 33 	R1.L = 0x3330;		/* (13104)	R1=0x1003330 <_att_read_callback>(16790320) */
 100348e:	00 e1 7c 35 	R0.L = 0x357c;		/* (13692)	R0=0x100357c <_profile_data>(16790908) */
 1003492:	ff e3 d9 fd 	CALL 0x1003044 <_att_server_init>;
 1003496:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1003498:	ff e3 00 fe 	CALL 0x1003098 <_att_server_register_packet_handler>;
 100349c:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x0 <data_addr>(  0) */
 10034a0:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1003330 <_att_read_callback>(16790320) */
 10034a4:	01 e1 74 35 	R1.L = 0x3574;		/* (13684)	R1=0x1003574(16790900) */
 10034a8:	00 e1 14 1f 	R0.L = 0x1f14;		/* (7956)	R0=0x1f14 <_gap_device_name>(7956) */
 10034ac:	00 e3 2a 65 	CALL 0x100ff00 <_strcpy>;
 10034b0:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 10034b2:	00 e3 71 32 	CALL 0x1009994 <_sm_set_io_capabilities>;
 10034b6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10034b8:	00 e3 64 32 	CALL 0x1009980 <_sm_set_authentication_requirements>;
 10034bc:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 10034be:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 10034c0:	00 e3 50 32 	CALL 0x1009960 <_sm_set_encryption_key_size_range>;
 10034c4:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 10034c6:	00 e3 c7 15 	CALL 0x1006054 <_le_hci_power_control>;
 10034ca:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000001(16777217) */
 10034ce:	00 e1 54 6f 	R0.L = 0x6f54;		/* (28500)	R0=0x1006f54 <_hci_le_set_advertise_enable>(16805716) */
 10034d2:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 10034d4:	00 e3 86 13 	CALL 0x1005be0 <_le_hci_send_cmd>;
 10034d8:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10034da:	01 e8 00 00 	UNLINK;
 10034de:	10 00       	RTS;
 10034e0:	57 52       	R1 = R7 - R2;
 10034e2:	49 54       	R1 = R1 & R1;
 10034e4:	45 20       	JUMP.S 0x100356e <_btstack_main+0x122>;
 10034e6:	43 61       	R3 = 0x28 (X);		/*		R3=0x28( 40) */
 10034e8:	6c 6c       	P4 += 0xd;		/* ( 13) */
 10034ea:	62 61       	R2 = 0x2c (X);		/*		R2=0x2c( 44) */
 10034ec:	63 6b       	P3 = -0x14 (X);		/*		P3=0xffffffec(-20) */
 10034ee:	2c 20       	JUMP.S 0x1003546 <_btstack_main+0xfa>;
 10034f0:	68 61       	R0 = 0x2d (X);		/*		R0=0x2d( 45) */
 10034f2:	6e 64       	R6 += 0xd;		/* ( 13) */
 10034f4:	6c 65       	R4 += 0x2d;		/* ( 45) */
 10034f6:	20 25       	JUMP.S 0x1003f36 <_gatt_client_run+0xb6>;
 10034f8:	30 34       	M2 = R0;
 10034fa:	78 2c       	JUMP.S 0x1002dea <_att_signed_write_handle_cmac_result+0x16>;
 10034fc:	20 6d       	P0 += 0x24;		/* ( 36) */
 10034fe:	6f 64       	R7 += 0xd;		/* ( 13) */
 1003500:	65 20       	JUMP.S 0x10035ca <_profile_data+0x4e>;
 1003502:	25 75       	ILLEGAL;
 1003504:	2c 20       	JUMP.S 0x100355c <_btstack_main+0x110>;
 1003506:	6f 66       	R7 += -0x33;		/* (-51) */
 1003508:	66 73       	ILLEGAL;
 100350a:	65 74       	ILLEGAL;
 100350c:	20 25       	JUMP.S 0x1003f4c <_gatt_client_run+0xcc>;
 100350e:	75 2c       	JUMP.S 0x1002df8 <_att_signed_write_handle_cmac_result+0x24>;
 1003510:	20 64       	R0 += 0x4;		/* (  4) */
 1003512:	61 74       	ILLEGAL;
 1003514:	61 3a       	ILLEGAL;
 1003516:	20 00       	IDLE;
 1003518:	52 45       	P2 += P2 (BREV);
 100351a:	41 44       	P1 = P0 << 0x2;
 100351c:	20 43       	R0 = R4.B (X);
 100351e:	61 6c       	P1 += 0xc;		/* ( 12) */
 1003520:	6c 62       	R4 = -0x33 (X);		/*		R4=0xffffffcd(-51) */
 1003522:	61 63       	R1 = -0x14 (X);		/*		R1=0xffffffec(-20) */
 1003524:	6b 2c       	JUMP.S 0x1002dfa <_att_signed_write_handle_cmac_result+0x26>;
 1003526:	20 68       	P0 = 0x4 (X);		/*		P0=0x4(  4) */
 1003528:	61 6e       	P1 += -0x34;		/* (-52) */
 100352a:	64 6c       	P4 += 0xc;		/* ( 12) */
 100352c:	65 20       	JUMP.S 0x10035f6 <_profile_data+0x7a>;
 100352e:	25 30       	R4 = R5;
 1003530:	34 78       	ILLEGAL;
 1003532:	2c 20       	JUMP.S 0x100358a <_profile_data+0xe>;
 1003534:	6f 66       	R7 += -0x33;		/* (-51) */
 1003536:	66 73       	ILLEGAL;
 1003538:	65 74       	ILLEGAL;
 100353a:	20 25       	JUMP.S 0x1003f7a <_gatt_client_run+0xfa>;
 100353c:	75 2c       	JUMP.S 0x1002e26 <_att_signed_write_handle_cmac_result+0x52>;
 100353e:	20 62       	R0 = -0x3c (X);		/*		R0=0xffffffc4(-60) */
 1003540:	75 66       	R5 += -0x32;		/* (-50) */
 1003542:	66 65       	R6 += 0x2c;		/* ( 44) */
 1003544:	72 20       	JUMP.S 0x1003628 <_profile_data+0xac>;
 1003546:	73 69       	P3 = 0x2e (X);		/*		P3=0x2e( 46) */
 1003548:	7a 65       	R2 += 0x2f;		/* ( 47) */
 100354a:	20 25       	JUMP.S 0x1003f8a <_gatt_client_run+0x10a>;
 100354c:	75 0a       	CC = P5 <= SP (IU);
 100354e:	00 00       	NOP;
 1003550:	62 75       	ILLEGAL;
 1003552:	66 66       	R6 += -0x34;		/* (-52) */
 1003554:	65 72       	ILLEGAL;
 1003556:	3a 20       	JUMP.S 0x10035ca <_profile_data+0x4e>;
 1003558:	25 78       	ILLEGAL;
 100355a:	0a 00       	ILLEGAL;
 100355c:	62 6c       	P2 += 0xc;		/* ( 12) */
 100355e:	65 20       	JUMP.S 0x1003628 <_profile_data+0xac>;
 1003560:	70 65       	R0 += 0x2e;		/* ( 46) */
 1003562:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 1003564:	70 68       	P0 = 0xe (X);		/*		P0=0xe( 14) */
 1003566:	65 72       	ILLEGAL;
 1003568:	61 6c       	P1 += 0xc;		/* ( 12) */
 100356a:	20 74       	ILLEGAL;
 100356c:	65 73       	ILLEGAL;
 100356e:	74 0a       	CC = P4 <= SP (IU);
 1003570:	00 00       	NOP;
 1003572:	00 00       	NOP;
 1003574:	42 54       	R1 = R2 & R0;
 1003576:	73 74       	ILLEGAL;
 1003578:	61 63       	R1 = -0x14 (X);		/*		R1=0xffffffec(-20) */
 100357a:	6b 00       	ILLEGAL;

0100357c <_profile_data>:
 100357c:	0a 00       	ILLEGAL;
 100357e:	02 00       	ILLEGAL;
 1003580:	01 00       	ILLEGAL;
 1003582:	00 28       	JUMP.S 0x1002582 <_att_handle_request+0x372>;
 1003584:	00 18       	IF CC JUMP 0x1003584 <_profile_data+0x8>;
 1003586:	0d 00       	ILLEGAL;
 1003588:	02 00       	ILLEGAL;
 100358a:	02 00       	ILLEGAL;
 100358c:	03 28       	JUMP.S 0x1002592 <_att_handle_request+0x382>;
 100358e:	02 03       	CC = AC0_COPY;
 1003590:	00 00       	NOP;
 1003592:	2a 16       	IF !CC JUMP 0x10031e6 <_att_server_indicate+0xc2> (BP);
 1003594:	00 02       	R0 = CC;
 1003596:	00 03       	CC = AZ;
 1003598:	00 00       	NOP;
 100359a:	2a 53       	R4 = R2 - R5;
 100359c:	50 50       	R1 = R0 + R2;
 100359e:	2b 4c       	BITCLR (R3, 0x5);		/* bit  5 */
 10035a0:	45 20       	JUMP.S 0x100362a <_profile_data+0xae>;
 10035a2:	43 6f       	P3 += -0x18;		/* (-24) */
 10035a4:	75 6e       	P5 += -0x32;		/* (-50) */
 10035a6:	74 65       	R4 += 0x2e;		/* ( 46) */
 10035a8:	72 0a       	CC = P2 <= SP (IU);
 10035aa:	00 02       	R0 = CC;
 10035ac:	00 04       	ILLEGAL;
 10035ae:	00 00       	NOP;
 10035b0:	28 01       	ILLEGAL;
 10035b2:	18 0d       	CC = R0 <= 0x3;
 10035b4:	00 02       	R0 = CC;
 10035b6:	00 05       	(R7:0) = [SP++];
 10035b8:	00 03       	CC = AZ;
 10035ba:	28 02       	ILLEGAL;
 10035bc:	06 00       	ILLEGAL;
 10035be:	05 2a       	JUMP.S 0x10029c8 <_att_handle_request+0x7b8>;
 10035c0:	08 00       	ILLEGAL;
 10035c2:	02 00       	ILLEGAL;
 10035c4:	06 00       	ILLEGAL;
 10035c6:	05 2a       	JUMP.S 0x10029d0 <_bluetooth_base_uuid+0x4>;
 10035c8:	0a 00       	ILLEGAL;
 10035ca:	02 00       	ILLEGAL;
 10035cc:	07 00       	ILLEGAL;
 10035ce:	00 28       	JUMP.S 0x10025ce <_att_handle_request+0x3be>;
 10035d0:	03 18       	IF CC JUMP 0x10035d6 <_profile_data+0x5a>;
 10035d2:	0d 00       	ILLEGAL;
 10035d4:	02 00       	ILLEGAL;
 10035d6:	08 00       	ILLEGAL;
 10035d8:	03 28       	JUMP.S 0x10025de <_att_handle_request+0x3ce>;
 10035da:	0a 09       	CC = R2 <= R1;
 10035dc:	00 06       	IF !CC R0 = R0;
 10035de:	2a 09       	CC = R2 <= R5;
 10035e0:	00 0a       	CC = R0 <= R0 (IU);
 10035e2:	01 09       	CC = R1 <= R0;
 10035e4:	00 06       	IF !CC R0 = R0;
 10035e6:	2a 00       	ILLEGAL;
 10035e8:	0a 00       	ILLEGAL;
 10035ea:	02 00       	ILLEGAL;
 10035ec:	0a 00       	ILLEGAL;
 10035ee:	00 28       	JUMP.S 0x10025ee <_att_handle_request+0x3de>;
 10035f0:	0d 18       	IF CC JUMP 0x100360a <_profile_data+0x8e>;
 10035f2:	0d 00       	ILLEGAL;
 10035f4:	02 00       	ILLEGAL;
 10035f6:	0b 00       	ILLEGAL;
 10035f8:	03 28       	JUMP.S 0x10025fe <_att_handle_request+0x3ee>;
 10035fa:	10 0c       	CC = R0 == 0x2;
 10035fc:	00 37       	B0 = A0.X;
 10035fe:	2a 0d       	CC = R2 <= -0x3;
 1003600:	00 02       	R0 = CC;
 1003602:	00 0c       	CC = R0 == 0x0;
 1003604:	00 37       	B0 = A0.X;
 1003606:	2a 08       	CC = R2 == R5;
 1003608:	0d 00       	ILLEGAL;
 100360a:	02 29       	JUMP.S 0x100280e <_att_handle_request+0x5fe>;
 100360c:	0a 00       	ILLEGAL;
 100360e:	08 01       	ILLEGAL;
 1003610:	0d 00       	ILLEGAL;
 1003612:	02 29       	JUMP.S 0x1002816 <_att_handle_request+0x606>;
 1003614:	00 00       	NOP;
 1003616:	0d 00       	ILLEGAL;
 1003618:	02 00       	ILLEGAL;
 100361a:	0e 00       	ILLEGAL;
 100361c:	03 28       	JUMP.S 0x1002622 <_att_handle_request+0x412>;
 100361e:	02 0f       	ILLEGAL;
 1003620:	00 38       	A0.X = R0;
 1003622:	2a 09       	CC = R2 <= R5;
 1003624:	00 02       	R0 = CC;
 1003626:	00 0f       	ILLEGAL;
 1003628:	00 38       	A0.X = R0;
 100362a:	2a 04       	ILLEGAL;
 100362c:	0d 00       	ILLEGAL;
 100362e:	02 00       	ILLEGAL;
 1003630:	10 00       	RTS;
 1003632:	03 28       	JUMP.S 0x1002638 <_att_handle_request+0x428>;
 1003634:	08 11       	IF !CC JUMP 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1003636:	00 39       	A0.X = A0.X;
 1003638:	2a 08       	CC = R2 == R5;
 100363a:	00 08       	CC = R0 == R0;
 100363c:	00 11       	IF !CC JUMP 0x100383c <_provide_context_for_conn_handle+0x38>;
 100363e:	00 39       	A0.X = A0.X;
 1003640:	2a 0a       	CC = R2 <= R5 (IU);
 1003642:	00 02       	R0 = CC;
 1003644:	00 12       	IF !CC JUMP 0x1003244 <_att_write_callback+0xc>;
 1003646:	00 00       	NOP;
 1003648:	28 f1       	ILLEGAL;
 100364a:	ff 0d       	CC = FP < 0x7 (IU);
 100364c:	00 0a       	CC = R0 <= R0 (IU);
 100364e:	00 13       	IF !CC JUMP 0x100344e <_btstack_main+0x2>;
 1003650:	00 03       	CC = AZ;
 1003652:	28 0a       	CC = R0 <= R5 (IU);
 1003654:	14 00       	RTE;
 1003656:	01 ff       	ILLEGAL;
 1003658:	08 00       	ILLEGAL;
 100365a:	0a 01       	ILLEGAL;
 100365c:	14 00       	RTE;
 100365e:	01 ff       	ILLEGAL;
 1003660:	00 00       	NOP;
	...

01003664 <_le_btstack_memory_hci_connection_get>:
 1003664:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1003668:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0xffc4(65476) */
 100366c:	00 e1 3c 1f 	R0.L = 0x1f3c;		/* (7996)	R0=0x1f3c <_hci_connection_pool>(7996) */
 1003670:	01 e8 00 00 	UNLINK;
 1003674:	00 e2 b2 20 	JUMP.L 0x10077d8 <_memory_pool_get>;

01003678 <_le_btstack_memory_hci_connection_free>:
 1003678:	08 30       	R1 = R0;
 100367a:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100367e:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x1f3c <_hci_connection_pool>(7996) */
 1003682:	00 e1 3c 1f 	R0.L = 0x1f3c;		/* (7996)	R0=0x1f3c <_hci_connection_pool>(7996) */
 1003686:	01 e8 00 00 	UNLINK;
 100368a:	00 e2 b5 20 	JUMP.L 0x10077f4 <_memory_pool_free>;
	...

01003690 <_le_btstack_memory_l2cap_service_get>:
 1003690:	00 00       	NOP;
 1003692:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1003696:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1003698:	01 e8 00 00 	UNLINK;
 100369c:	10 00       	RTS;
	...

010036a0 <_le_btstack_memory_l2cap_service_free>:
 10036a0:	00 00       	NOP;
 10036a2:	00 00       	NOP;
 10036a4:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10036a8:	01 e8 00 00 	UNLINK;
 10036ac:	10 00       	RTS;
	...

010036b0 <_le_btstack_memory_l2cap_channel_get>:
 10036b0:	00 00       	NOP;
 10036b2:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10036b6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10036b8:	01 e8 00 00 	UNLINK;
 10036bc:	10 00       	RTS;
	...

010036c0 <_le_btstack_memory_l2cap_channel_free>:
 10036c0:	00 00       	NOP;
 10036c2:	00 00       	NOP;
 10036c4:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10036c8:	01 e8 00 00 	UNLINK;
 10036cc:	10 00       	RTS;
	...

010036d0 <_btstack_memory_gatt_client_get>:
 10036d0:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10036d4:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x0 <data_addr>(  0) */
 10036d8:	00 e1 c8 20 	R0.L = 0x20c8;		/* (8392)	R0=0x20c8 <_gatt_client_pool>(8392) */
 10036dc:	01 e8 00 00 	UNLINK;
 10036e0:	00 e2 7c 20 	JUMP.L 0x10077d8 <_memory_pool_get>;

010036e4 <_btstack_memory_gatt_client_free>:
 10036e4:	08 30       	R1 = R0;
 10036e6:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10036ea:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x20c8 <_gatt_client_pool>(8392) */
 10036ee:	00 e1 c8 20 	R0.L = 0x20c8;		/* (8392)	R0=0x20c8 <_gatt_client_pool>(8392) */
 10036f2:	01 e8 00 00 	UNLINK;
 10036f6:	00 e2 7f 20 	JUMP.L 0x10077f4 <_memory_pool_free>;
	...

010036fc <_btstack_memory_gatt_subclient_get>:
 10036fc:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1003700:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x20c8 <_gatt_client_pool>(8392) */
 1003704:	00 e1 a4 21 	R0.L = 0x21a4;		/* (8612)	R0=0x21a4 <_gatt_subclient_pool>(8612) */
 1003708:	01 e8 00 00 	UNLINK;
 100370c:	00 e2 66 20 	JUMP.L 0x10077d8 <_memory_pool_get>;

01003710 <_btstack_memory_gatt_subclient_free>:
 1003710:	08 30       	R1 = R0;
 1003712:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1003716:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x21a4 <_gatt_subclient_pool>(8612) */
 100371a:	00 e1 a4 21 	R0.L = 0x21a4;		/* (8612)	R0=0x21a4 <_gatt_subclient_pool>(8612) */
 100371e:	01 e8 00 00 	UNLINK;
 1003722:	00 e2 69 20 	JUMP.L 0x10077f4 <_memory_pool_free>;
	...

01003728 <_le_btstack_memory_init>:
 1003728:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100372c:	20 e1 c4 00 	R0 = 0xc4 (X);		/*		R0=0xc4(196) */
 1003730:	f0 b0       	[SP + 0xc] = R0;
 1003732:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0xc4(196) */
 1003736:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0xffec(65516) */
 100373a:	00 e1 3c 1f 	R0.L = 0x1f3c;		/* (7996)	R0=0x1f3c <_hci_connection_pool>(7996) */
 100373e:	01 e1 40 1f 	R1.L = 0x1f40;		/* (8000)	R1=0x1f40 <_hci_connection_storage>(8000) */
 1003742:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 1003744:	00 e3 6a 20 	CALL 0x1007818 <_memory_pool_create>;
 1003748:	20 e1 6c 00 	R0 = 0x6c (X);		/*		R0=0x6c(108) */
 100374c:	f0 b0       	[SP + 0xc] = R0;
 100374e:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x6c(108) */
 1003752:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x1f40 <_hci_connection_storage>(8000) */
 1003756:	00 e1 c8 20 	R0.L = 0x20c8;		/* (8392)	R0=0x20c8 <_gatt_client_pool>(8392) */
 100375a:	01 e1 cc 20 	R1.L = 0x20cc;		/* (8396)	R1=0x20cc <_gatt_client_storage>(8396) */
 100375e:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 1003760:	00 e3 5c 20 	CALL 0x1007818 <_memory_pool_create>;
 1003764:	80 60       	R0 = 0x10 (X);		/*		R0=0x10( 16) */
 1003766:	f0 b0       	[SP + 0xc] = R0;
 1003768:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x10( 16) */
 100376c:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x20cc <_gatt_client_storage>(8396) */
 1003770:	00 e1 a4 21 	R0.L = 0x21a4;		/* (8612)	R0=0x21a4 <_gatt_subclient_pool>(8612) */
 1003774:	01 e1 a8 21 	R1.L = 0x21a8;		/* (8616)	R1=0x21a8 <_gatt_subclient_storage>(8616) */
 1003778:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100377a:	00 e3 4f 20 	CALL 0x1007818 <_memory_pool_create>;
 100377e:	01 e8 00 00 	UNLINK;
 1003782:	10 00       	RTS;

01003784 <_dummy_notify>:
 1003784:	00 00       	NOP;
 1003786:	00 00       	NOP;
 1003788:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100378c:	01 e8 00 00 	UNLINK;
 1003790:	10 00       	RTS;
	...

01003794 <_get_gatt_client_context_for_handle>:
 1003794:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2e */
 1003798:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100379c:	0a e1 c8 21 	P2.L = 0x21c8;		/* (8648)	P2=0x21c8 <_gatt_client_connections> */
 10037a0:	52 91       	P2 = [P2];
 10037a2:	c1 42       	R1 = R0.L (Z);
 10037a4:	06 20       	JUMP.S 0x10037b0 <_get_gatt_client_context_for_handle+0x1c>;
 10037a6:	42 30       	R0 = P2;
 10037a8:	d2 a5       	R2 = W[P2 + 0xe] (Z);
 10037aa:	0a 08       	CC = R2 == R1;
 10037ac:	05 1c       	IF CC JUMP 0x10037b6 <_get_gatt_client_context_for_handle+0x22> (BP);
 10037ae:	52 91       	P2 = [P2];
 10037b0:	42 0c       	CC = P2 == 0x0;
 10037b2:	fa 17       	IF !CC JUMP 0x10037a6 <_get_gatt_client_context_for_handle+0x12> (BP);
 10037b4:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10037b6:	01 e8 00 00 	UNLINK;
 10037ba:	10 00       	RTS;

010037bc <_get_last_result_handle>:
 10037bc:	10 32       	P2 = R0;
 10037be:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10037c2:	43 60       	R3 = 0x8 (X);		/*		R3=0x8(  8) */
 10037c4:	50 99       	R0 = B[P2] (X);
 10037c6:	b8 67       	R0 += -0x9;		/* ( -9) */
 10037c8:	40 43       	R0 = R0.B (Z);
 10037ca:	92 e5 01 00 	R2 = B[P2 + 0x1] (X);
 10037ce:	18 0a       	CC = R0 <= R3 (IU);
 10037d0:	09 10       	IF !CC JUMP 0x10037e2 <_get_last_result_handle+0x26>;
 10037d2:	00 32       	P0 = R0;
 10037d4:	49 e1 00 01 	P1.H = 0x100;		/* (256)	P1=0x1001ea0 */
 10037d8:	09 e1 e8 52 	P1.L = 0x52e8;		/* (21224)	P1=0x10052e8 <_CSWTCH.22> */
 10037dc:	41 5a       	P1 = P1 + P0;
 10037de:	48 99       	R0 = B[P1] (X);
 10037e0:	02 20       	JUMP.S 0x10037e4 <_get_last_result_handle+0x28>;
 10037e2:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10037e4:	c9 42       	R1 = R1.L (Z);
 10037e6:	52 43       	R2 = R2.B (Z);
 10037e8:	51 52       	R1 = R1 - R2;
 10037ea:	40 43       	R0 = R0.B (Z);
 10037ec:	01 50       	R0 = R1 + R0;
 10037ee:	08 32       	P1 = R0;
 10037f0:	01 e8 00 00 	UNLINK;
 10037f4:	8a 5a       	P2 = P2 + P1;
 10037f6:	90 e4 01 00 	R0 = B[P2 + 0x1] (Z);
 10037fa:	40 4f       	R0 <<= 0x8;
 10037fc:	11 99       	R1 = B[P2] (Z);
 10037fe:	08 56       	R0 = R0 | R1;
 1003800:	10 00       	RTS;
	...

01003804 <_provide_context_for_conn_handle>:
 1003804:	fd 05       	[--SP] = (R7:7, P5:5);
 1003806:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100380a:	38 30       	R7 = R0;
 100380c:	ff e3 c4 ff 	CALL 0x1003794 <_get_gatt_client_context_for_handle>;
 1003810:	28 32       	P5 = R0;
 1003812:	45 0c       	CC = P5 == 0x0;
 1003814:	13 14       	IF !CC JUMP 0x100383a <_provide_context_for_conn_handle+0x36> (BP);
 1003816:	ff e3 5d ff 	CALL 0x10036d0 <_btstack_memory_gatt_client_get>;
 100381a:	28 32       	P5 = R0;
 100381c:	45 0c       	CC = P5 == 0x0;
 100381e:	0e 18       	IF CC JUMP 0x100383a <_provide_context_for_conn_handle+0x36>;
 1003820:	b8 60       	R0 = 0x17 (X);		/*		R0=0x17( 23) */
 1003822:	28 b7       	W[P5 + 0x18] = R0;
 1003824:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1003826:	e8 b1       	[P5 + 0x1c] = R0;
 1003828:	a8 b0       	[P5 + 0x8] = R0;
 100382a:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x0 <data_addr>(  0) */
 100382e:	ef b5       	W[P5 + 0xe] = R7;
 1003830:	00 e1 c8 21 	R0.L = 0x21c8;		/* (8648)	R0=0x21c8 <_gatt_client_connections>(8648) */
 1003834:	4d 30       	R1 = P5;
 1003836:	00 e3 33 1f 	CALL 0x100769c <_linked_list_add>;
 100383a:	45 30       	R0 = P5;
 100383c:	01 e8 00 00 	UNLINK;
 1003840:	bd 05       	(R7:7, P5:5) = [SP++];
 1003842:	10 00       	RTS;

01003844 <_provide_context_for_conn_handle_and_start_timer>:
 1003844:	78 05       	[--SP] = (R7:7);
 1003846:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100384a:	ff e3 dd ff 	CALL 0x1003804 <_provide_context_for_conn_handle>;
 100384e:	38 30       	R7 = R0;
 1003850:	00 0c       	CC = R0 == 0x0;
 1003852:	0c 18       	IF CC JUMP 0x100386a <_provide_context_for_conn_handle_and_start_timer+0x26>;
 1003854:	20 e1 5c 00 	R0 = 0x5c (X);		/*		R0=0x5c( 92) */
 1003858:	42 e1 00 01 	R2.H = 0x100;		/* (256)	R2=0x1000002(16777218) */
 100385c:	07 50       	R0 = R7 + R0;
 100385e:	21 e1 30 75 	R1 = 0x7530 (X);		/*		R1=0x7530(30000) */
 1003862:	02 e1 0c 3a 	R2.L = 0x3a0c;		/* (14860)	R2=0x1003a0c <_gatt_client_timeout_handler>(16792076) */
 1003866:	00 e3 f5 5b 	CALL 0x100f050 <_sys_timer_register>;
 100386a:	07 30       	R0 = R7;
 100386c:	01 e8 00 00 	UNLINK;
 1003870:	38 05       	(R7:7) = [SP++];
 1003872:	10 00       	RTS;

01003874 <_emit_event>:
 1003874:	68 05       	[--SP] = (R7:5);
 1003876:	00 e8 06 00 	LINK 0x18;		/* (24) */
 100387a:	29 30       	R5 = R1;
 100387c:	7f 30       	R7 = FP;
 100387e:	30 30       	R6 = R0;
 1003880:	a7 67       	R7 += -0xc;		/* (-12) */
 1003882:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x7530(30000) */
 1003886:	07 30       	R0 = R7;
 1003888:	01 e1 cc 21 	R1.L = 0x21cc;		/* (8652)	R1=0x21cc <_gatt_subclients>(8652) */
 100388c:	00 e3 5c 1f 	CALL 0x1007744 <_linked_list_iterator_init>;
 1003890:	f6 42       	R6 = R6.L (Z);
 1003892:	0c 20       	JUMP.S 0x10038aa <_emit_event+0x36>;
 1003894:	07 30       	R0 = R7;
 1003896:	00 e3 7b 1f 	CALL 0x100778c <_linked_list_iterator_next>;
 100389a:	10 32       	P2 = R0;
 100389c:	10 a5       	R0 = W[P2 + 0x8] (Z);
 100389e:	30 08       	CC = R0 == R6;
 10038a0:	05 14       	IF !CC JUMP 0x10038aa <_emit_event+0x36> (BP);
 10038a2:	d2 ac       	P2 = [P2 + 0xc];
 10038a4:	42 0c       	CC = P2 == 0x0;
 10038a6:	08 14       	IF !CC JUMP 0x10038b6 <_emit_event+0x42> (BP);
 10038a8:	09 20       	JUMP.S 0x10038ba <_emit_event+0x46>;
 10038aa:	07 30       	R0 = R7;
 10038ac:	00 e3 58 1f 	CALL 0x100775c <_linked_list_iterator_has_next>;
 10038b0:	00 0c       	CC = R0 == 0x0;
 10038b2:	f1 17       	IF !CC JUMP 0x1003894 <_emit_event+0x20> (BP);
 10038b4:	03 20       	JUMP.S 0x10038ba <_emit_event+0x46>;
 10038b6:	05 30       	R0 = R5;
 10038b8:	62 00       	CALL (P2);
 10038ba:	01 e8 00 00 	UNLINK;
 10038be:	28 05       	(R7:5) = [SP++];
 10038c0:	10 00       	RTS;
	...

010038c4 <_emit_gatt_complete_event>:
 10038c4:	10 32       	P2 = R0;
 10038c6:	00 e8 05 00 	LINK 0x14;		/* (20) */
 10038ca:	20 e1 a0 ff 	R0 = -0x60 (X);		/*		R0=0xffffffa0(-96) */
 10038ce:	b8 e6 f8 ff 	B[FP + -0x8] = R0;
 10038d2:	b9 e6 fe ff 	B[FP + -0x2] = R1;
 10038d6:	d0 a9       	R0 = W[P2 + 0xe] (X);
 10038d8:	78 e6 fd ff 	W[FP + -0x6] = R0;
 10038dc:	50 e5 1f 00 	R0 = W[P2 + 0x3e] (X);
 10038e0:	78 e6 fe ff 	W[FP + -0x4] = R0;
 10038e4:	4f 30       	R1 = FP;
 10038e6:	90 a9       	R0 = W[P2 + 0xc] (X);
 10038e8:	c1 67       	R1 += -0x8;		/* ( -8) */
 10038ea:	ff e3 c5 ff 	CALL 0x1003874 <_emit_event>;
 10038ee:	01 e8 00 00 	UNLINK;
 10038f2:	10 00       	RTS;

010038f4 <_report_gatt_characteristic_descriptor>:
 10038f4:	ed 05       	[--SP] = (R7:5, P5:5);
 10038f6:	28 32       	P5 = R0;
 10038f8:	00 e8 10 00 	LINK 0x40;		/* (64) */
 10038fc:	b8 e5 2c 00 	R0 = B[FP + 0x2c] (X);
 1003900:	b8 e6 cc ff 	B[FP + -0x34] = R0;
 1003904:	29 30       	R5 = R1;
 1003906:	e8 a9       	R0 = W[P5 + 0xe] (X);
 1003908:	78 e6 e7 ff 	W[FP + -0x32] = R0;
 100390c:	78 e5 14 00 	R0 = W[FP + 0x28] (X);
 1003910:	78 e6 f3 ff 	W[FP + -0x1a] = R0;
 1003914:	32 30       	R6 = R2;
 1003916:	4d 30       	R1 = P5;
 1003918:	47 30       	R0 = FP;
 100391a:	6f e5 10 00 	R7 = W[P5 + 0x20] (X);
 100391e:	11 65       	R1 += 0x22;		/* ( 34) */
 1003920:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1003922:	80 67       	R0 += -0x10;		/* (-16) */
 1003924:	00 e3 f0 61 	CALL 0x100fd04 <_memcpy>;
 1003928:	78 e5 12 00 	R0 = W[FP + 0x24] (X);
 100392c:	78 e6 f2 ff 	W[FP + -0x1c] = R0;
 1003930:	47 30       	R0 = FP;
 1003932:	4f 30       	R1 = FP;
 1003934:	a6 bb       	[FP -0x18] = R6;
 1003936:	61 67       	R1 += -0x14;		/* (-20) */
 1003938:	a2 60       	R2 = 0x14 (X);		/*		R2=0x14( 20) */
 100393a:	80 66       	R0 += -0x30;		/* (-48) */
 100393c:	00 e3 e4 61 	CALL 0x100fd04 <_memcpy>;
 1003940:	4f 30       	R1 = FP;
 1003942:	7d e6 e8 ff 	W[FP + -0x30] = R5;
 1003946:	7f e6 e9 ff 	W[FP + -0x2e] = R7;
 100394a:	a8 a9       	R0 = W[P5 + 0xc] (X);
 100394c:	61 66       	R1 += -0x34;		/* (-52) */
 100394e:	ff e3 93 ff 	CALL 0x1003874 <_emit_event>;
 1003952:	01 e8 00 00 	UNLINK;
 1003956:	ad 05       	(R7:5, P5:5) = [SP++];
 1003958:	10 00       	RTS;
	...

0100395c <_characteristic_end_found>:
 100395c:	c5 04       	[--SP] = (P5:5);
 100395e:	28 32       	P5 = R0;
 1003960:	00 e8 0b 00 	LINK 0x2c;		/* (44) */
 1003964:	68 e5 1e 00 	R0 = W[P5 + 0x3c] (X);
 1003968:	c2 42       	R2 = R0.L (Z);
 100396a:	02 0c       	CC = R2 == 0x0;
 100396c:	27 1c       	IF CC JUMP 0x10039ba <_characteristic_end_found+0x5e> (BP);
 100396e:	78 e6 f2 ff 	W[FP + -0x1c] = R0;
 1003972:	68 e5 1f 00 	R0 = W[P5 + 0x3e] (X);
 1003976:	78 e6 f3 ff 	W[FP + -0x1a] = R0;
 100397a:	a8 e4 3a 00 	R0 = B[P5 + 0x3a] (Z);
 100397e:	22 e1 a2 ff 	R2 = -0x5e (X);		/*		R2=0xffffffa2(-94) */
 1003982:	78 e6 f5 ff 	W[FP + -0x16] = R0;
 1003986:	68 e5 10 00 	R0 = W[P5 + 0x20] (X);
 100398a:	ba e6 e0 ff 	B[FP + -0x20] = R2;
 100398e:	ea a9       	R2 = W[P5 + 0xe] (X);
 1003990:	79 e6 f4 ff 	W[FP + -0x18] = R1;
 1003994:	78 e6 f6 ff 	W[FP + -0x14] = R0;
 1003998:	7a e6 f1 ff 	W[FP + -0x1e] = R2;
 100399c:	4d 30       	R1 = P5;
 100399e:	47 30       	R0 = FP;
 10039a0:	11 65       	R1 += 0x22;		/* ( 34) */
 10039a2:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 10039a4:	70 67       	R0 += -0x12;		/* (-18) */
 10039a6:	00 e3 af 61 	CALL 0x100fd04 <_memcpy>;
 10039aa:	4f 30       	R1 = FP;
 10039ac:	a8 a9       	R0 = W[P5 + 0xc] (X);
 10039ae:	01 67       	R1 += -0x20;		/* (-32) */
 10039b0:	ff e3 62 ff 	CALL 0x1003874 <_emit_event>;
 10039b4:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10039b6:	68 e6 1e 00 	W[P5 + 0x3c] = R0;
 10039ba:	01 e8 00 00 	UNLINK;
 10039be:	85 04       	(P5:5) = [SP++];
 10039c0:	10 00       	RTS;
	...

010039c4 <_gatt_client_handle_transaction_complete>:
 10039c4:	10 32       	P2 = R0;
 10039c6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10039c8:	29 e1 5c 00 	P1 = 0x5c (X);		/*		P1=0x5c( 92) */
 10039cc:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10039d0:	01 e8 00 00 	UNLINK;
 10039d4:	90 b0       	[P2 + 0x8] = R0;
 10039d6:	4a 5a       	P1 = P2 + P1;
 10039d8:	41 30       	R0 = P1;
 10039da:	00 e2 75 5b 	JUMP.L 0x100f0c4 <_sys_timer_remove>;
	...

010039e0 <_gatt_client_report_error_if_pending>:
 10039e0:	fd 05       	[--SP] = (R7:7, P5:5);
 10039e2:	28 32       	P5 = R0;
 10039e4:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10039e8:	39 30       	R7 = R1;
 10039ea:	a8 a0       	R0 = [P5 + 0x8];
 10039ec:	00 0c       	CC = R0 == 0x0;
 10039ee:	0b 1c       	IF CC JUMP 0x1003a04 <_gatt_client_report_error_if_pending+0x24> (BP);
 10039f0:	45 30       	R0 = P5;
 10039f2:	ff e3 e9 ff 	CALL 0x10039c4 <_gatt_client_handle_transaction_complete>;
 10039f6:	45 30       	R0 = P5;
 10039f8:	0f 30       	R1 = R7;
 10039fa:	01 e8 00 00 	UNLINK;
 10039fe:	bd 05       	(R7:7, P5:5) = [SP++];
 1003a00:	ff e2 62 ff 	JUMP.L 0x10038c4 <_emit_gatt_complete_event>;
 1003a04:	01 e8 00 00 	UNLINK;
 1003a08:	bd 05       	(R7:7, P5:5) = [SP++];
 1003a0a:	10 00       	RTS;

01003a0c <_gatt_client_timeout_handler>:
 1003a0c:	68 05       	[--SP] = (R7:5);
 1003a0e:	00 e8 06 00 	LINK 0x18;		/* (24) */
 1003a12:	7f 30       	R7 = FP;
 1003a14:	28 30       	R5 = R0;
 1003a16:	a7 67       	R7 += -0xc;		/* (-12) */
 1003a18:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x21cc <_gatt_subclients>(8652) */
 1003a1c:	07 30       	R0 = R7;
 1003a1e:	01 e1 c8 21 	R1.L = 0x21c8;		/* (8648)	R1=0x21c8 <_gatt_client_connections>(8648) */
 1003a22:	00 e3 91 1e 	CALL 0x1007744 <_linked_list_iterator_init>;
 1003a26:	26 e1 5c 00 	R6 = 0x5c (X);		/*		R6=0x5c( 92) */
 1003a2a:	07 20       	JUMP.S 0x1003a38 <_gatt_client_timeout_handler+0x2c>;
 1003a2c:	07 30       	R0 = R7;
 1003a2e:	00 e3 af 1e 	CALL 0x100778c <_linked_list_iterator_next>;
 1003a32:	70 50       	R1 = R0 + R6;
 1003a34:	0d 08       	CC = R5 == R1;
 1003a36:	07 18       	IF CC JUMP 0x1003a44 <_gatt_client_timeout_handler+0x38>;
 1003a38:	07 30       	R0 = R7;
 1003a3a:	00 e3 91 1e 	CALL 0x100775c <_linked_list_iterator_has_next>;
 1003a3e:	00 0c       	CC = R0 == 0x0;
 1003a40:	f6 17       	IF !CC JUMP 0x1003a2c <_gatt_client_timeout_handler+0x20> (BP);
 1003a42:	06 20       	JUMP.S 0x1003a4e <_gatt_client_timeout_handler+0x42>;
 1003a44:	00 0c       	CC = R0 == 0x0;
 1003a46:	04 18       	IF CC JUMP 0x1003a4e <_gatt_client_timeout_handler+0x42>;
 1003a48:	91 60       	R1 = 0x12 (X);		/*		R1=0x12( 18) */
 1003a4a:	ff e3 cb ff 	CALL 0x10039e0 <_gatt_client_report_error_if_pending>;
 1003a4e:	01 e8 00 00 	UNLINK;
 1003a52:	28 05       	(R7:5) = [SP++];
 1003a54:	10 00       	RTS;
	...

01003a58 <_trigger_next_query>:
 1003a58:	c5 04       	[--SP] = (P5:5);
 1003a5a:	28 32       	P5 = R0;
 1003a5c:	cb 42       	R3 = R1.L (Z);
 1003a5e:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1003a62:	68 e4 1a 00 	R0 = W[P5 + 0x34] (Z);
 1003a66:	83 09       	CC = R3 < R0 (IU);
 1003a68:	09 10       	IF !CC JUMP 0x1003a7a <_trigger_next_query+0x22>;
 1003a6a:	09 64       	R1 += 0x1;		/* (  1) */
 1003a6c:	69 e6 19 00 	W[P5 + 0x32] = R1;
 1003a70:	aa b0       	[P5 + 0x8] = R2;
 1003a72:	01 e8 00 00 	UNLINK;
 1003a76:	85 04       	(P5:5) = [SP++];
 1003a78:	10 00       	RTS;
 1003a7a:	45 30       	R0 = P5;
 1003a7c:	ff e3 a4 ff 	CALL 0x10039c4 <_gatt_client_handle_transaction_complete>;
 1003a80:	45 30       	R0 = P5;
 1003a82:	01 e8 00 00 	UNLINK;
 1003a86:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1003a88:	85 04       	(P5:5) = [SP++];
 1003a8a:	ff e2 1d ff 	JUMP.L 0x10038c4 <_emit_gatt_complete_event>;
	...

01003a90 <_att_read_by_type_or_group_request>:
 1003a90:	e4 05       	[--SP] = (R7:4, P5:4);
 1003a92:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1003a96:	21 32       	P4 = R1;
 1003a98:	2a 30       	R5 = R2;
 1003a9a:	7f e5 16 00 	R7 = W[FP + 0x2c] (X);
 1003a9e:	7e e5 18 00 	R6 = W[FP + 0x30] (X);
 1003aa2:	20 30       	R4 = R0;
 1003aa4:	00 e3 a2 1b 	CALL 0x10071e8 <_le_l2cap_reserve_packet_buffer>;
 1003aa8:	00 e3 98 1b 	CALL 0x10071d8 <_le_l2cap_get_outgoing_buffer>;
 1003aac:	28 32       	P5 = R0;
 1003aae:	17 30       	R2 = R7;
 1003ab0:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 1003ab2:	2c 9b       	B[P5] = R4;
 1003ab4:	00 e3 92 33 	CALL 0x100a1d8 <_bt_store_16>;
 1003ab8:	45 30       	R0 = P5;
 1003aba:	16 30       	R2 = R6;
 1003abc:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 1003abe:	00 e3 8d 33 	CALL 0x100a1d8 <_bt_store_16>;
 1003ac2:	45 30       	R0 = P5;
 1003ac4:	54 30       	R2 = P4;
 1003ac6:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 1003ac8:	00 e3 88 33 	CALL 0x100a1d8 <_bt_store_16>;
 1003acc:	e8 42       	R0 = R5.L (Z);
 1003ace:	01 e8 00 00 	UNLINK;
 1003ad2:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1003ad4:	3a 60       	R2 = 0x7 (X);		/*		R2=0x7(  7) */
 1003ad6:	a4 05       	(R7:4, P5:4) = [SP++];
 1003ad8:	00 e2 94 1b 	JUMP.L 0x1007200 <_le_l2cap_send_prepared_connectionless>;

01003adc <_send_gatt_read_blob_request>:
 1003adc:	10 32       	P2 = R0;
 1003ade:	ed 05       	[--SP] = (R7:5, P5:5);
 1003ae0:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1003ae4:	d5 a5       	R5 = W[P2 + 0xe] (Z);
 1003ae6:	57 e5 1f 00 	R7 = W[P2 + 0x3e] (X);
 1003aea:	56 e5 20 00 	R6 = W[P2 + 0x40] (X);
 1003aee:	00 e3 7d 1b 	CALL 0x10071e8 <_le_l2cap_reserve_packet_buffer>;
 1003af2:	00 e3 73 1b 	CALL 0x10071d8 <_le_l2cap_get_outgoing_buffer>;
 1003af6:	28 32       	P5 = R0;
 1003af8:	60 60       	R0 = 0xc (X);		/*		R0=0xc( 12) */
 1003afa:	17 30       	R2 = R7;
 1003afc:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 1003afe:	28 9b       	B[P5] = R0;
 1003b00:	45 30       	R0 = P5;
 1003b02:	00 e3 6b 33 	CALL 0x100a1d8 <_bt_store_16>;
 1003b06:	45 30       	R0 = P5;
 1003b08:	16 30       	R2 = R6;
 1003b0a:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 1003b0c:	00 e3 66 33 	CALL 0x100a1d8 <_bt_store_16>;
 1003b10:	05 30       	R0 = R5;
 1003b12:	01 e8 00 00 	UNLINK;
 1003b16:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1003b18:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 1003b1a:	ad 05       	(R7:5, P5:5) = [SP++];
 1003b1c:	00 e2 72 1b 	JUMP.L 0x1007200 <_le_l2cap_send_prepared_connectionless>;

01003b20 <_att_write_request>:
 1003b20:	e4 05       	[--SP] = (R7:4, P5:4);
 1003b22:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1003b26:	21 30       	R4 = R1;
 1003b28:	7f e4 16 00 	R7 = W[FP + 0x2c] (Z);
 1003b2c:	32 30       	R6 = R2;
 1003b2e:	3d a3       	R5 = [FP + 0x30];
 1003b30:	20 32       	P4 = R0;
 1003b32:	00 e3 5b 1b 	CALL 0x10071e8 <_le_l2cap_reserve_packet_buffer>;
 1003b36:	00 e3 51 1b 	CALL 0x10071d8 <_le_l2cap_get_outgoing_buffer>;
 1003b3a:	28 32       	P5 = R0;
 1003b3c:	16 30       	R2 = R6;
 1003b3e:	44 30       	R0 = P4;
 1003b40:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 1003b42:	28 9b       	B[P5] = R0;
 1003b44:	45 30       	R0 = P5;
 1003b46:	00 e3 49 33 	CALL 0x100a1d8 <_bt_store_16>;
 1003b4a:	45 30       	R0 = P5;
 1003b4c:	0d 30       	R1 = R5;
 1003b4e:	17 30       	R2 = R7;
 1003b50:	18 64       	R0 += 0x3;		/* (  3) */
 1003b52:	00 e3 d9 60 	CALL 0x100fd04 <_memcpy>;
 1003b56:	17 30       	R2 = R7;
 1003b58:	e0 42       	R0 = R4.L (Z);
 1003b5a:	01 e8 00 00 	UNLINK;
 1003b5e:	1a 64       	R2 += 0x3;		/* (  3) */
 1003b60:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1003b62:	a4 05       	(R7:4, P5:4) = [SP++];
 1003b64:	00 e2 4e 1b 	JUMP.L 0x1007200 <_le_l2cap_send_prepared_connectionless>;

01003b68 <_report_gatt_included_service>:
 1003b68:	fd 05       	[--SP] = (R7:7, P5:5);
 1003b6a:	39 30       	R7 = R1;
 1003b6c:	00 e8 10 00 	LINK 0x40;		/* (64) */
 1003b70:	d1 42       	R1 = R2.L (Z);
 1003b72:	28 32       	P5 = R0;
 1003b74:	7a e6 f6 ff 	W[FP + -0x14] = R2;
 1003b78:	01 0c       	CC = R1 == 0x0;
 1003b7a:	05 1c       	IF CC JUMP 0x1003b84 <_report_gatt_included_service+0x1c> (BP);
 1003b7c:	47 30       	R0 = FP;
 1003b7e:	70 67       	R0 += -0x12;		/* (-18) */
 1003b80:	ff e3 d2 e8 	CALL 0x1000d24 <_sdp_normalize_uuid>;
 1003b84:	07 0c       	CC = R7 == 0x0;
 1003b86:	07 18       	IF CC JUMP 0x1003b94 <_report_gatt_included_service+0x2c>;
 1003b88:	47 30       	R0 = FP;
 1003b8a:	70 67       	R0 += -0x12;		/* (-18) */
 1003b8c:	0f 30       	R1 = R7;
 1003b8e:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1003b90:	00 e3 ba 60 	CALL 0x100fd04 <_memcpy>;
 1003b94:	68 e5 1b 00 	R0 = W[P5 + 0x36] (X);
 1003b98:	78 e6 f4 ff 	W[FP + -0x18] = R0;
 1003b9c:	68 e5 1c 00 	R0 = W[P5 + 0x38] (X);
 1003ba0:	78 e6 f5 ff 	W[FP + -0x16] = R0;
 1003ba4:	20 e1 a3 ff 	R0 = -0x5d (X);		/*		R0=0xffffffa3(-93) */
 1003ba8:	b8 e6 cc ff 	B[FP + -0x34] = R0;
 1003bac:	47 30       	R0 = FP;
 1003bae:	4f 30       	R1 = FP;
 1003bb0:	41 67       	R1 += -0x18;		/* (-24) */
 1003bb2:	b2 60       	R2 = 0x16 (X);		/*		R2=0x16( 22) */
 1003bb4:	80 66       	R0 += -0x30;		/* (-48) */
 1003bb6:	00 e3 a7 60 	CALL 0x100fd04 <_memcpy>;
 1003bba:	e8 a9       	R0 = W[P5 + 0xe] (X);
 1003bbc:	78 e6 e7 ff 	W[FP + -0x32] = R0;
 1003bc0:	4f 30       	R1 = FP;
 1003bc2:	a8 a9       	R0 = W[P5 + 0xc] (X);
 1003bc4:	61 66       	R1 += -0x34;		/* (-52) */
 1003bc6:	ff e3 57 fe 	CALL 0x1003874 <_emit_event>;
 1003bca:	01 e8 00 00 	UNLINK;
 1003bce:	bd 05       	(R7:7, P5:5) = [SP++];
 1003bd0:	10 00       	RTS;
	...

01003bd4 <_report_gatt_characteristics>:
 1003bd4:	e3 05       	[--SP] = (R7:4, P5:3);
 1003bd6:	19 32       	P3 = R1;
 1003bd8:	28 32       	P5 = R0;
 1003bda:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 1003bdc:	00 e8 0c 00 	LINK 0x30;		/* (48) */
 1003be0:	d2 42       	R2 = R2.L (Z);
 1003be2:	9c e4 01 00 	R4 = B[P3 + 0x1] (Z);
 1003be6:	04 08       	CC = R4 == R0;
 1003be8:	55 32       	P2 = P5;
 1003bea:	00 02       	R0 = CC;
 1003bec:	7f 30       	R7 = FP;
 1003bee:	12 6d       	P2 += 0x22;		/* ( 34) */
 1003bf0:	14 68       	P4 = 0x2 (X);		/*		P4=0x2(  2) */
 1003bf2:	82 bb       	[FP -0x20] = R2;
 1003bf4:	b8 e6 df ff 	B[FP + -0x21] = R0;
 1003bf8:	87 67       	R7 += -0x10;		/* (-16) */
 1003bfa:	ba bb       	[FP -0x14] = P2;
 1003bfc:	57 20       	JUMP.S 0x1003caa <_report_gatt_characteristics+0xd6>;
 1003bfe:	a3 5a       	P2 = P3 + P4;
 1003c00:	91 e4 01 00 	R1 = B[P2 + 0x1] (Z);
 1003c04:	10 99       	R0 = B[P2] (Z);
 1003c06:	41 4f       	R1 <<= 0x8;
 1003c08:	41 56       	R1 = R1 | R0;
 1003c0a:	79 e6 f4 ff 	W[FP + -0x18] = R1;
 1003c0e:	90 e5 02 00 	R0 = B[P2 + 0x2] (X);
 1003c12:	b8 e6 e7 ff 	B[FP + -0x19] = R0;
 1003c16:	90 e5 03 00 	R0 = B[P2 + 0x3] (X);
 1003c1a:	b8 e6 e6 ff 	B[FP + -0x1a] = R0;
 1003c1e:	90 e5 04 00 	R0 = B[P2 + 0x4] (X);
 1003c22:	b8 e6 e5 ff 	B[FP + -0x1b] = R0;
 1003c26:	45 30       	R0 = P5;
 1003c28:	f9 67       	R1 += -0x1;		/* ( -1) */
 1003c2a:	ff e3 99 fe 	CALL 0x100395c <_characteristic_end_found>;
 1003c2e:	54 32       	P2 = P4;
 1003c30:	2a 6c       	P2 += 0x5;		/* (  5) */
 1003c32:	b8 e4 df ff 	R0 = B[FP + -0x21] (Z);
 1003c36:	93 5a       	P2 = P3 + P2;
 1003c38:	08 02       	CC = R0;
 1003c3a:	0b 14       	IF !CC JUMP 0x1003c50 <_report_gatt_characteristics+0x7c> (BP);
 1003c3c:	96 e4 01 00 	R6 = B[P2 + 0x1] (Z);
 1003c40:	10 99       	R0 = B[P2] (Z);
 1003c42:	46 4f       	R6 <<= 0x8;
 1003c44:	86 57       	R6 = R6 | R0;
 1003c46:	f1 42       	R1 = R6.L (Z);
 1003c48:	07 30       	R0 = R7;
 1003c4a:	ff e3 6d e8 	CALL 0x1000d24 <_sdp_normalize_uuid>;
 1003c4e:	06 20       	JUMP.S 0x1003c5a <_report_gatt_characteristics+0x86>;
 1003c50:	42 30       	R0 = P2;
 1003c52:	0f 30       	R1 = R7;
 1003c54:	00 e3 6e 33 	CALL 0x100a330 <_swap128>;
 1003c58:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 1003c5a:	ad e5 4c 00 	R5 = B[P5 + 0x4c] (X);
 1003c5e:	68 43       	R0 = R5.B (Z);
 1003c60:	00 0c       	CC = R0 == 0x0;
 1003c62:	08 1c       	IF CC JUMP 0x1003c72 <_report_gatt_characteristics+0x9e> (BP);
 1003c64:	b0 b9       	R0 = [FP -0x14];
 1003c66:	0f 30       	R1 = R7;
 1003c68:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1003c6a:	00 e3 0f 60 	CALL 0x100fc88 <_memcmp>;
 1003c6e:	00 0c       	CC = R0 == 0x0;
 1003c70:	1b 14       	IF !CC JUMP 0x1003ca6 <_report_gatt_characteristics+0xd2> (BP);
 1003c72:	6d 43       	R5 = R5.B (Z);
 1003c74:	b8 e5 e7 ff 	R0 = B[FP + -0x19] (X);
 1003c78:	a8 e6 3a 00 	B[P5 + 0x3a] = R0;
 1003c7c:	78 e5 f4 ff 	R0 = W[FP + -0x18] (X);
 1003c80:	68 e6 1e 00 	W[P5 + 0x3c] = R0;
 1003c84:	b8 e4 e5 ff 	R0 = B[FP + -0x1b] (Z);
 1003c88:	40 4f       	R0 <<= 0x8;
 1003c8a:	b9 e4 e6 ff 	R1 = B[FP + -0x1a] (Z);
 1003c8e:	08 56       	R0 = R0 | R1;
 1003c90:	68 e6 1f 00 	W[P5 + 0x3e] = R0;
 1003c94:	05 0c       	CC = R5 == 0x0;
 1003c96:	08 14       	IF !CC JUMP 0x1003ca6 <_report_gatt_characteristics+0xd2> (BP);
 1003c98:	6e e6 10 00 	W[P5 + 0x20] = R6;
 1003c9c:	b0 b9       	R0 = [FP -0x14];
 1003c9e:	0f 30       	R1 = R7;
 1003ca0:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1003ca2:	00 e3 31 60 	CALL 0x100fd04 <_memcpy>;
 1003ca6:	14 32       	P2 = R4;
 1003ca8:	14 5b       	P4 = P4 + P2;
 1003caa:	8a b9       	P2 = [FP -0x20];
 1003cac:	d4 08       	CC = P4 < P2;
 1003cae:	a8 1f       	IF CC JUMP 0x1003bfe <_report_gatt_characteristics+0x2a> (BP);
 1003cb0:	01 e8 00 00 	UNLINK;
 1003cb4:	a3 05       	(R7:4, P5:3) = [SP++];
 1003cb6:	10 00       	RTS;

01003cb8 <_peripheral_mtu.clone.5>:
 1003cb8:	fd 05       	[--SP] = (R7:7, P5:5);
 1003cba:	28 32       	P5 = R0;
 1003cbc:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1003cc0:	2f 95       	R7 = W[P5] (Z);
 1003cc2:	00 e3 69 1a 	CALL 0x1007194 <_l2cap_max_le_mtu>;
 1003cc6:	c0 42       	R0 = R0.L (Z);
 1003cc8:	07 0a       	CC = R7 <= R0 (IU);
 1003cca:	06 1c       	IF CC JUMP 0x1003cd6 <_peripheral_mtu.clone.5+0x1e> (BP);
 1003ccc:	01 e8 00 00 	UNLINK;
 1003cd0:	bd 05       	(R7:7, P5:5) = [SP++];
 1003cd2:	00 e2 61 1a 	JUMP.L 0x1007194 <_l2cap_max_le_mtu>;
 1003cd6:	01 e8 00 00 	UNLINK;
 1003cda:	28 95       	R0 = W[P5] (Z);
 1003cdc:	bd 05       	(R7:7, P5:5) = [SP++];
 1003cde:	10 00       	RTS;

01003ce0 <_write_blob_length>:
 1003ce0:	fd 05       	[--SP] = (R7:7, P5:5);
 1003ce2:	28 32       	P5 = R0;
 1003ce4:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1003ce8:	c0 64       	R0 += 0x18;		/* ( 24) */
 1003cea:	ff e3 e7 ff 	CALL 0x1003cb8 <_peripheral_mtu.clone.5>;
 1003cee:	69 e5 20 00 	R1 = W[P5 + 0x40] (X);
 1003cf2:	6a e5 21 00 	R2 = W[P5 + 0x42] (X);
 1003cf6:	cf 42       	R7 = R1.L (Z);
 1003cf8:	d3 42       	R3 = R2.L (Z);
 1003cfa:	9f 09       	CC = R7 < R3 (IU);
 1003cfc:	08 10       	IF !CC JUMP 0x1003d0c <_write_blob_length+0x2c>;
 1003cfe:	4a 52       	R1 = R2 - R1;
 1003d00:	d8 67       	R0 += -0x5;		/* ( -5) */
 1003d02:	c2 42       	R2 = R0.L (Z);
 1003d04:	cb 42       	R3 = R1.L (Z);
 1003d06:	93 09       	CC = R3 < R2 (IU);
 1003d08:	01 07       	IF CC R0 = R1;
 1003d0a:	02 20       	JUMP.S 0x1003d0e <_write_blob_length+0x2e>;
 1003d0c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1003d0e:	01 e8 00 00 	UNLINK;
 1003d12:	bd 05       	(R7:7, P5:5) = [SP++];
 1003d14:	10 00       	RTS;
	...

01003d18 <_trigger_next_prepare_write_query>:
 1003d18:	ed 05       	[--SP] = (R7:5, P5:5);
 1003d1a:	28 32       	P5 = R0;
 1003d1c:	29 30       	R5 = R1;
 1003d1e:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1003d22:	32 30       	R6 = R2;
 1003d24:	6f e5 20 00 	R7 = W[P5 + 0x40] (X);
 1003d28:	ff e3 dc ff 	CALL 0x1003ce0 <_write_blob_length>;
 1003d2c:	f8 51       	R7 = R0 + R7;
 1003d2e:	6f e6 20 00 	W[P5 + 0x40] = R7;
 1003d32:	45 30       	R0 = P5;
 1003d34:	ff e3 d6 ff 	CALL 0x1003ce0 <_write_blob_length>;
 1003d38:	c0 42       	R0 = R0.L (Z);
 1003d3a:	00 0c       	CC = R0 == 0x0;
 1003d3c:	35 06       	IF !CC R6 = R5;
 1003d3e:	ae b0       	[P5 + 0x8] = R6;
 1003d40:	01 e8 00 00 	UNLINK;
 1003d44:	ad 05       	(R7:5, P5:5) = [SP++];
 1003d46:	10 00       	RTS;

01003d48 <_send_gatt_prepare_write_request>:
 1003d48:	e4 05       	[--SP] = (R7:4, P5:4);
 1003d4a:	28 32       	P5 = R0;
 1003d4c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1003d50:	e8 a5       	R0 = W[P5 + 0xe] (Z);
 1003d52:	20 32       	P4 = R0;
 1003d54:	6e e4 20 00 	R6 = W[P5 + 0x40] (Z);
 1003d58:	6f e5 1f 00 	R7 = W[P5 + 0x3e] (X);
 1003d5c:	45 30       	R0 = P5;
 1003d5e:	ff e3 c1 ff 	CALL 0x1003ce0 <_write_blob_length>;
 1003d62:	2d e4 11 00 	R5 = [P5 + 0x44];
 1003d66:	20 30       	R4 = R0;
 1003d68:	00 e3 40 1a 	CALL 0x10071e8 <_le_l2cap_reserve_packet_buffer>;
 1003d6c:	00 e3 36 1a 	CALL 0x10071d8 <_le_l2cap_get_outgoing_buffer>;
 1003d70:	28 32       	P5 = R0;
 1003d72:	b0 60       	R0 = 0x16 (X);		/*		R0=0x16( 22) */
 1003d74:	17 30       	R2 = R7;
 1003d76:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 1003d78:	e7 42       	R7 = R4.L (Z);
 1003d7a:	28 9b       	B[P5] = R0;
 1003d7c:	45 30       	R0 = P5;
 1003d7e:	00 e3 2d 32 	CALL 0x100a1d8 <_bt_store_16>;
 1003d82:	45 30       	R0 = P5;
 1003d84:	16 30       	R2 = R6;
 1003d86:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 1003d88:	00 e3 28 32 	CALL 0x100a1d8 <_bt_store_16>;
 1003d8c:	45 30       	R0 = P5;
 1003d8e:	75 50       	R1 = R5 + R6;
 1003d90:	17 30       	R2 = R7;
 1003d92:	28 64       	R0 += 0x5;		/* (  5) */
 1003d94:	00 e3 b8 5f 	CALL 0x100fd04 <_memcpy>;
 1003d98:	17 30       	R2 = R7;
 1003d9a:	44 30       	R0 = P4;
 1003d9c:	01 e8 00 00 	UNLINK;
 1003da0:	2a 64       	R2 += 0x5;		/* (  5) */
 1003da2:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1003da4:	a4 05       	(R7:4, P5:4) = [SP++];
 1003da6:	00 e2 2d 1a 	JUMP.L 0x1007200 <_le_l2cap_send_prepared_connectionless>;
	...

01003dac <_att_execute_write_request.clone.12>:
 1003dac:	70 05       	[--SP] = (R7:6);
 1003dae:	39 30       	R7 = R1;
 1003db0:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1003db4:	30 30       	R6 = R0;
 1003db6:	00 e3 19 1a 	CALL 0x10071e8 <_le_l2cap_reserve_packet_buffer>;
 1003dba:	00 e3 0f 1a 	CALL 0x10071d8 <_le_l2cap_get_outgoing_buffer>;
 1003dbe:	10 32       	P2 = R0;
 1003dc0:	c0 60       	R0 = 0x18 (X);		/*		R0=0x18( 24) */
 1003dc2:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1003dc4:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 1003dc6:	10 9b       	B[P2] = R0;
 1003dc8:	97 e6 01 00 	B[P2 + 0x1] = R7;
 1003dcc:	f0 42       	R0 = R6.L (Z);
 1003dce:	01 e8 00 00 	UNLINK;
 1003dd2:	30 05       	(R7:6) = [SP++];
 1003dd4:	00 e2 16 1a 	JUMP.L 0x1007200 <_le_l2cap_send_prepared_connectionless>;

01003dd8 <_att_find_by_type_value_request.clone.13>:
 1003dd8:	e4 05       	[--SP] = (R7:4, P5:4);
 1003dda:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1003dde:	21 30       	R4 = R1;
 1003de0:	22 32       	P4 = R2;
 1003de2:	7f e4 18 00 	R7 = W[FP + 0x30] (Z);
 1003de6:	fe a2       	R6 = [FP + 0x2c];
 1003de8:	28 30       	R5 = R0;
 1003dea:	00 e3 ff 19 	CALL 0x10071e8 <_le_l2cap_reserve_packet_buffer>;
 1003dee:	00 e3 f5 19 	CALL 0x10071d8 <_le_l2cap_get_outgoing_buffer>;
 1003df2:	28 32       	P5 = R0;
 1003df4:	30 60       	R0 = 0x6 (X);		/*		R0=0x6(  6) */
 1003df6:	14 30       	R2 = R4;
 1003df8:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 1003dfa:	28 9b       	B[P5] = R0;
 1003dfc:	45 30       	R0 = P5;
 1003dfe:	00 e3 ed 31 	CALL 0x100a1d8 <_bt_store_16>;
 1003e02:	45 30       	R0 = P5;
 1003e04:	54 30       	R2 = P4;
 1003e06:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 1003e08:	00 e3 e8 31 	CALL 0x100a1d8 <_bt_store_16>;
 1003e0c:	45 30       	R0 = P5;
 1003e0e:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 1003e10:	22 e1 00 28 	R2 = 0x2800 (X);		/*		R2=0x2800(10240) */
 1003e14:	00 e3 e2 31 	CALL 0x100a1d8 <_bt_store_16>;
 1003e18:	45 30       	R0 = P5;
 1003e1a:	0e 30       	R1 = R6;
 1003e1c:	17 30       	R2 = R7;
 1003e1e:	38 64       	R0 += 0x7;		/* (  7) */
 1003e20:	00 e3 72 5f 	CALL 0x100fd04 <_memcpy>;
 1003e24:	17 30       	R2 = R7;
 1003e26:	e8 42       	R0 = R5.L (Z);
 1003e28:	01 e8 00 00 	UNLINK;
 1003e2c:	3a 64       	R2 += 0x7;		/* (  7) */
 1003e2e:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1003e30:	a4 05       	(R7:4, P5:4) = [SP++];
 1003e32:	00 e2 e7 19 	JUMP.L 0x1007200 <_le_l2cap_send_prepared_connectionless>;
	...

01003e38 <_att_read_request.clone.14>:
 1003e38:	70 05       	[--SP] = (R7:6);
 1003e3a:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1003e3e:	31 30       	R6 = R1;
 1003e40:	38 30       	R7 = R0;
 1003e42:	00 e3 d3 19 	CALL 0x10071e8 <_le_l2cap_reserve_packet_buffer>;
 1003e46:	00 e3 c9 19 	CALL 0x10071d8 <_le_l2cap_get_outgoing_buffer>;
 1003e4a:	10 32       	P2 = R0;
 1003e4c:	51 60       	R1 = 0xa (X);		/*		R1=0xa( 10) */
 1003e4e:	16 30       	R2 = R6;
 1003e50:	11 9b       	B[P2] = R1;
 1003e52:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 1003e54:	00 e3 c2 31 	CALL 0x100a1d8 <_bt_store_16>;
 1003e58:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000006(16777222) */
 1003e5c:	00 e1 74 51 	R0.L = 0x5174;		/* (20852)	R0=0x1005174(16798068) */
 1003e60:	00 e3 ac 58 	CALL 0x100efb8 <_puts>;
 1003e64:	f8 42       	R0 = R7.L (Z);
 1003e66:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1003e68:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 1003e6a:	00 e3 cb 19 	CALL 0x1007200 <_le_l2cap_send_prepared_connectionless>;
 1003e6e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1005174(16798068) */
 1003e72:	01 e8 00 00 	UNLINK;
 1003e76:	00 e1 d4 18 	R0.L = 0x18d4;		/* (6356)	R0=0x10018d4(16783572) */
 1003e7a:	30 05       	(R7:6) = [SP++];
 1003e7c:	00 e2 9e 58 	JUMP.L 0x100efb8 <_puts>;

01003e80 <_gatt_client_run>:
 1003e80:	e3 05       	[--SP] = (R7:4, P5:3);
 1003e82:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21c8 <_gatt_client_connections> */
 1003e86:	00 e8 0d 00 	LINK 0x34;		/* (52) */
 1003e8a:	0a e1 c8 21 	P2.L = 0x21c8;		/* (8648)	P2=0x21c8 <_gatt_client_connections> */
 1003e8e:	4c e1 00 01 	P4.H = 0x100;		/* (256)	P4=0x1000002 */
 1003e92:	55 91       	P5 = [P2];
 1003e94:	0c e1 c0 51 	P4.L = 0x51c0;		/* (20928)	P4=0x10051c0 */
 1003e98:	95 21       	JUMP.S 0x10041c2 <_gatt_client_run+0x342>;
 1003e9a:	00 00       	NOP;
 1003e9c:	e8 a5       	R0 = W[P5 + 0xe] (Z);
 1003e9e:	00 e3 8d 19 	CALL 0x10071b8 <_le_l2cap_can_send_fixed_channel_packet_now>;
 1003ea2:	00 0c       	CC = R0 == 0x0;
 1003ea4:	91 1d       	IF CC JUMP 0x10041c6 <_gatt_client_run+0x346> (BP);
 1003ea6:	e8 a1       	R0 = [P5 + 0x1c];
 1003ea8:	00 0c       	CC = R0 == 0x0;
 1003eaa:	04 1c       	IF CC JUMP 0x1003eb2 <_gatt_client_run+0x32> (BP);
 1003eac:	08 0c       	CC = R0 == 0x1;
 1003eae:	17 14       	IF !CC JUMP 0x1003edc <_gatt_client_run+0x5c> (BP);
 1003eb0:	8b 21       	JUMP.S 0x10041c6 <_gatt_client_run+0x346>;
 1003eb2:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1003eb4:	ef a5       	R7 = W[P5 + 0xe] (Z);
 1003eb6:	e8 b1       	[P5 + 0x1c] = R0;
 1003eb8:	00 e3 6e 19 	CALL 0x1007194 <_l2cap_max_le_mtu>;
 1003ebc:	30 30       	R6 = R0;
 1003ebe:	00 e3 95 19 	CALL 0x10071e8 <_le_l2cap_reserve_packet_buffer>;
 1003ec2:	00 e3 8b 19 	CALL 0x10071d8 <_le_l2cap_get_outgoing_buffer>;
 1003ec6:	08 32       	P1 = R0;
 1003ec8:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 1003eca:	16 30       	R2 = R6;
 1003ecc:	09 9b       	B[P1] = R1;
 1003ece:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 1003ed0:	00 e3 84 31 	CALL 0x100a1d8 <_bt_store_16>;
 1003ed4:	07 30       	R0 = R7;
 1003ed6:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1003ed8:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 1003eda:	14 20       	JUMP.S 0x1003f02 <_gatt_client_run+0x82>;
 1003edc:	00 00       	NOP;
 1003ede:	a8 e4 4d 00 	R0 = B[P5 + 0x4d] (Z);
 1003ee2:	00 0c       	CC = R0 == 0x0;
 1003ee4:	12 1c       	IF CC JUMP 0x1003f08 <_gatt_client_run+0x88> (BP);
 1003ee6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1003ee8:	ef a5       	R7 = W[P5 + 0xe] (Z);
 1003eea:	a8 e6 4d 00 	B[P5 + 0x4d] = R0;
 1003eee:	00 e3 7d 19 	CALL 0x10071e8 <_le_l2cap_reserve_packet_buffer>;
 1003ef2:	00 e3 73 19 	CALL 0x10071d8 <_le_l2cap_get_outgoing_buffer>;
 1003ef6:	10 32       	P2 = R0;
 1003ef8:	f1 60       	R1 = 0x1e (X);		/*		R1=0x1e( 30) */
 1003efa:	07 30       	R0 = R7;
 1003efc:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 1003efe:	11 9b       	B[P2] = R1;
 1003f00:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1003f02:	00 e3 7f 19 	CALL 0x1007200 <_le_l2cap_send_prepared_connectionless>;
 1003f06:	60 21       	JUMP.S 0x10041c6 <_gatt_client_run+0x346>;
 1003f08:	99 60       	R1 = 0x13 (X);		/*		R1=0x13( 19) */
 1003f0a:	a8 a0       	R0 = [P5 + 0x8];
 1003f0c:	08 08       	CC = R0 == R1;
 1003f0e:	04 18       	IF CC JUMP 0x1003f16 <_gatt_client_run+0x96>;
 1003f10:	29 61       	R1 = 0x25 (X);		/*		R1=0x25( 37) */
 1003f12:	08 08       	CC = R0 == R1;
 1003f14:	21 14       	IF !CC JUMP 0x1003f56 <_gatt_client_run+0xd6> (BP);
 1003f16:	7d 30       	R7 = P5;
 1003f18:	c7 64       	R7 += 0x18;		/* ( 24) */
 1003f1a:	6e e4 21 00 	R6 = W[P5 + 0x42] (Z);
 1003f1e:	07 30       	R0 = R7;
 1003f20:	ff e3 cc fe 	CALL 0x1003cb8 <_peripheral_mtu.clone.5>;
 1003f24:	c0 42       	R0 = R0.L (Z);
 1003f26:	e8 67       	R0 += -0x3;		/* ( -3) */
 1003f28:	86 08       	CC = R6 < R0;
 1003f2a:	16 1c       	IF CC JUMP 0x1003f56 <_gatt_client_run+0xd6> (BP);
 1003f2c:	6e e4 21 00 	R6 = W[P5 + 0x42] (Z);
 1003f30:	07 30       	R0 = R7;
 1003f32:	ff e3 c3 fe 	CALL 0x1003cb8 <_peripheral_mtu.clone.5>;
 1003f36:	c2 42       	R2 = R0.L (Z);
 1003f38:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1003f3c:	0e 30       	R1 = R6;
 1003f3e:	00 e1 88 51 	R0.L = 0x5188;		/* (20872)	R0=0x1005188(16798088) */
 1003f42:	00 e3 1f 58 	CALL 0x100ef80 <_printf>;
 1003f46:	45 30       	R0 = P5;
 1003f48:	ff e3 3e fd 	CALL 0x10039c4 <_gatt_client_handle_transaction_complete>;
 1003f4c:	45 30       	R0 = P5;
 1003f4e:	69 60       	R1 = 0xd (X);		/*		R1=0xd( 13) */
 1003f50:	ff e3 ba fc 	CALL 0x10038c4 <_emit_gatt_complete_event>;
 1003f54:	39 21       	JUMP.S 0x10041c6 <_gatt_client_run+0x346>;
 1003f56:	61 69       	P1 = 0x2c (X);		/*		P1=0x2c( 44) */
 1003f58:	aa ac       	P2 = [P5 + 0x8];
 1003f5a:	fa 6f       	P2 += -0x1;		/* ( -1) */
 1003f5c:	4a 0a       	CC = P2 <= P1 (IU);
 1003f5e:	30 15       	IF !CC JUMP 0x10041be <_gatt_client_run+0x33e> (BP);
 1003f60:	94 5e       	P2 = P4 + (P2 << 0x2);
 1003f62:	52 91       	P2 = [P2];
 1003f64:	52 00       	JUMP (P2);
 1003f66:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 1003f68:	a8 b0       	[P5 + 0x8] = R0;
 1003f6a:	68 e5 19 00 	R0 = W[P5 + 0x32] (X);
 1003f6e:	ea a9       	R2 = W[P5 + 0xe] (X);
 1003f70:	b0 b5       	W[SP + 0xc] = R0;
 1003f72:	68 e5 1a 00 	R0 = W[P5 + 0x34] (X);
 1003f76:	30 b6       	W[SP + 0x10] = R0;
 1003f78:	80 60       	R0 = 0x10 (X);		/*		R0=0x10( 16) */
 1003f7a:	21 e1 00 28 	R1 = 0x2800 (X);		/*		R1=0x2800(10240) */
 1003f7e:	34 20       	JUMP.S 0x1003fe6 <_gatt_client_run+0x166>;
 1003f80:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1003f82:	a8 b0       	[P5 + 0x8] = R0;
 1003f84:	6a e5 10 00 	R2 = W[P5 + 0x20] (X);
 1003f88:	d0 42       	R0 = R2.L (Z);
 1003f8a:	00 0c       	CC = R0 == 0x0;
 1003f8c:	0f 1c       	IF CC JUMP 0x1003faa <_gatt_client_run+0x12a> (BP);
 1003f8e:	7f 30       	R7 = FP;
 1003f90:	87 67       	R7 += -0x10;		/* (-16) */
 1003f92:	07 30       	R0 = R7;
 1003f94:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1003f96:	00 e3 21 31 	CALL 0x100a1d8 <_bt_store_16>;
 1003f9a:	e8 a9       	R0 = W[P5 + 0xe] (X);
 1003f9c:	69 e5 19 00 	R1 = W[P5 + 0x32] (X);
 1003fa0:	6a e5 1a 00 	R2 = W[P5 + 0x34] (X);
 1003fa4:	f7 b0       	[SP + 0xc] = R7;
 1003fa6:	13 60       	R3 = 0x2 (X);		/*		R3=0x2(  2) */
 1003fa8:	0f 20       	JUMP.S 0x1003fc6 <_gatt_client_run+0x146>;
 1003faa:	7f 30       	R7 = FP;
 1003fac:	07 67       	R7 += -0x20;		/* (-32) */
 1003fae:	45 30       	R0 = P5;
 1003fb0:	10 65       	R0 += 0x22;		/* ( 34) */
 1003fb2:	0f 30       	R1 = R7;
 1003fb4:	00 e3 be 31 	CALL 0x100a330 <_swap128>;
 1003fb8:	e8 a9       	R0 = W[P5 + 0xe] (X);
 1003fba:	69 e5 19 00 	R1 = W[P5 + 0x32] (X);
 1003fbe:	6a e5 1a 00 	R2 = W[P5 + 0x34] (X);
 1003fc2:	f7 b0       	[SP + 0xc] = R7;
 1003fc4:	83 60       	R3 = 0x10 (X);		/*		R3=0x10( 16) */
 1003fc6:	33 b6       	W[SP + 0x10] = R3;
 1003fc8:	ff e3 08 ff 	CALL 0x1003dd8 <_att_find_by_type_value_request.clone.13>;
 1003fcc:	fd 20       	JUMP.S 0x10041c6 <_gatt_client_run+0x346>;
 1003fce:	30 60       	R0 = 0x6 (X);		/*		R0=0x6(  6) */
 1003fd0:	a8 b0       	[P5 + 0x8] = R0;
 1003fd2:	68 e5 19 00 	R0 = W[P5 + 0x32] (X);
 1003fd6:	ea a9       	R2 = W[P5 + 0xe] (X);
 1003fd8:	b0 b5       	W[SP + 0xc] = R0;
 1003fda:	68 e5 1a 00 	R0 = W[P5 + 0x34] (X);
 1003fde:	30 b6       	W[SP + 0x10] = R0;
 1003fe0:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 1003fe2:	21 e1 03 28 	R1 = 0x2803 (X);		/*		R1=0x2803(10243) */
 1003fe6:	ff e3 55 fd 	CALL 0x1003a90 <_att_read_by_type_or_group_request>;
 1003fea:	ee 20       	JUMP.S 0x10041c6 <_gatt_client_run+0x346>;
 1003fec:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 1003fee:	f1 2f       	JUMP.S 0x1003fd0 <_gatt_client_run+0x150>;
 1003ff0:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 1003ff2:	ed a5       	R5 = W[P5 + 0xe] (Z);
 1003ff4:	6f e5 19 00 	R7 = W[P5 + 0x32] (X);
 1003ff8:	6e e5 1a 00 	R6 = W[P5 + 0x34] (X);
 1003ffc:	a8 b0       	[P5 + 0x8] = R0;
 1003ffe:	00 e3 f5 18 	CALL 0x10071e8 <_le_l2cap_reserve_packet_buffer>;
 1004002:	00 e3 eb 18 	CALL 0x10071d8 <_le_l2cap_get_outgoing_buffer>;
 1004006:	28 32       	P5 = R0;
 1004008:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100400a:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100400c:	17 30       	R2 = R7;
 100400e:	28 9b       	B[P5] = R0;
 1004010:	45 30       	R0 = P5;
 1004012:	00 e3 e3 30 	CALL 0x100a1d8 <_bt_store_16>;
 1004016:	45 30       	R0 = P5;
 1004018:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 100401a:	16 30       	R2 = R6;
 100401c:	00 e3 de 30 	CALL 0x100a1d8 <_bt_store_16>;
 1004020:	05 30       	R0 = R5;
 1004022:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1004024:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 1004026:	6e 2f       	JUMP.S 0x1003f02 <_gatt_client_run+0x82>;
 1004028:	60 60       	R0 = 0xc (X);		/*		R0=0xc( 12) */
 100402a:	a8 b0       	[P5 + 0x8] = R0;
 100402c:	68 e5 19 00 	R0 = W[P5 + 0x32] (X);
 1004030:	ea a9       	R2 = W[P5 + 0xe] (X);
 1004032:	b0 b5       	W[SP + 0xc] = R0;
 1004034:	68 e5 1a 00 	R0 = W[P5 + 0x34] (X);
 1004038:	30 b6       	W[SP + 0x10] = R0;
 100403a:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 100403c:	21 e1 02 28 	R1 = 0x2802 (X);		/*		R1=0x2802(10242) */
 1004040:	d3 2f       	JUMP.S 0x1003fe6 <_gatt_client_run+0x166>;
 1004042:	70 60       	R0 = 0xe (X);		/*		R0=0xe( 14) */
 1004044:	a8 b0       	[P5 + 0x8] = R0;
 1004046:	e8 a9       	R0 = W[P5 + 0xe] (X);
 1004048:	69 e5 1b 00 	R1 = W[P5 + 0x36] (X);
 100404c:	06 20       	JUMP.S 0x1004058 <_gatt_client_run+0x1d8>;
 100404e:	80 60       	R0 = 0x10 (X);		/*		R0=0x10( 16) */
 1004050:	a8 b0       	[P5 + 0x8] = R0;
 1004052:	e8 a9       	R0 = W[P5 + 0xe] (X);
 1004054:	69 e5 1f 00 	R1 = W[P5 + 0x3e] (X);
 1004058:	ff e3 f0 fe 	CALL 0x1003e38 <_att_read_request.clone.14>;
 100405c:	b5 20       	JUMP.S 0x10041c6 <_gatt_client_run+0x346>;
 100405e:	90 60       	R0 = 0x12 (X);		/*		R0=0x12( 18) */
 1004060:	1e 20       	JUMP.S 0x100409c <_gatt_client_run+0x21c>;
 1004062:	a0 60       	R0 = 0x14 (X);		/*		R0=0x14( 20) */
 1004064:	22 20       	JUMP.S 0x10040a8 <_gatt_client_run+0x228>;
 1004066:	b0 60       	R0 = 0x16 (X);		/*		R0=0x16( 22) */
 1004068:	3b 20       	JUMP.S 0x10040de <_gatt_client_run+0x25e>;
 100406a:	c0 60       	R0 = 0x18 (X);		/*		R0=0x18( 24) */
 100406c:	39 20       	JUMP.S 0x10040de <_gatt_client_run+0x25e>;
 100406e:	d0 60       	R0 = 0x1a (X);		/*		R0=0x1a( 26) */
 1004070:	3d 20       	JUMP.S 0x10040ea <_gatt_client_run+0x26a>;
 1004072:	e0 60       	R0 = 0x1c (X);		/*		R0=0x1c( 28) */
 1004074:	a8 b0       	[P5 + 0x8] = R0;
 1004076:	e8 a9       	R0 = W[P5 + 0xe] (X);
 1004078:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100407a:	3b 20       	JUMP.S 0x10040f0 <_gatt_client_run+0x270>;
 100407c:	f0 60       	R0 = 0x1e (X);		/*		R0=0x1e( 30) */
 100407e:	a8 b0       	[P5 + 0x8] = R0;
 1004080:	68 e5 19 00 	R0 = W[P5 + 0x32] (X);
 1004084:	ea a9       	R2 = W[P5 + 0xe] (X);
 1004086:	b0 b5       	W[SP + 0xc] = R0;
 1004088:	68 e5 1a 00 	R0 = W[P5 + 0x34] (X);
 100408c:	30 b6       	W[SP + 0x10] = R0;
 100408e:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 1004090:	21 e1 02 29 	R1 = 0x2902 (X);		/*		R1=0x2902(10498) */
 1004094:	a9 2f       	JUMP.S 0x1003fe6 <_gatt_client_run+0x166>;
 1004096:	10 61       	R0 = 0x22 (X);		/*		R0=0x22( 34) */
 1004098:	dc 2f       	JUMP.S 0x1004050 <_gatt_client_run+0x1d0>;
 100409a:	20 61       	R0 = 0x24 (X);		/*		R0=0x24( 36) */
 100409c:	a8 b0       	[P5 + 0x8] = R0;
 100409e:	45 30       	R0 = P5;
 10040a0:	ff e3 1e fd 	CALL 0x1003adc <_send_gatt_read_blob_request>;
 10040a4:	91 20       	JUMP.S 0x10041c6 <_gatt_client_run+0x346>;
 10040a6:	30 61       	R0 = 0x26 (X);		/*		R0=0x26( 38) */
 10040a8:	a8 b0       	[P5 + 0x8] = R0;
 10040aa:	68 e5 21 00 	R0 = W[P5 + 0x42] (X);
 10040ae:	e9 a9       	R1 = W[P5 + 0xe] (X);
 10040b0:	6a e5 1f 00 	R2 = W[P5 + 0x3e] (X);
 10040b4:	b0 b5       	W[SP + 0xc] = R0;
 10040b6:	28 e4 11 00 	R0 = [P5 + 0x44];
 10040ba:	30 b1       	[SP + 0x10] = R0;
 10040bc:	0c 20       	JUMP.S 0x10040d4 <_gatt_client_run+0x254>;
 10040be:	00 61       	R0 = 0x20 (X);		/*		R0=0x20( 32) */
 10040c0:	a8 b0       	[P5 + 0x8] = R0;
 10040c2:	e9 a9       	R1 = W[P5 + 0xe] (X);
 10040c4:	6a e5 24 00 	R2 = W[P5 + 0x48] (X);
 10040c8:	2a e1 4a 00 	P2 = 0x4a (X);		/*		P2=0x4a( 74) */
 10040cc:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 10040ce:	55 5b       	P5 = P5 + P2;
 10040d0:	b0 b5       	W[SP + 0xc] = R0;
 10040d2:	35 bd       	[SP + 0x10] = P5;
 10040d4:	90 60       	R0 = 0x12 (X);		/*		R0=0x12( 18) */
 10040d6:	ff e3 25 fd 	CALL 0x1003b20 <_att_write_request>;
 10040da:	76 20       	JUMP.S 0x10041c6 <_gatt_client_run+0x346>;
 10040dc:	40 61       	R0 = 0x28 (X);		/*		R0=0x28( 40) */
 10040de:	a8 b0       	[P5 + 0x8] = R0;
 10040e0:	45 30       	R0 = P5;
 10040e2:	ff e3 33 fe 	CALL 0x1003d48 <_send_gatt_prepare_write_request>;
 10040e6:	70 20       	JUMP.S 0x10041c6 <_gatt_client_run+0x346>;
 10040e8:	50 61       	R0 = 0x2a (X);		/*		R0=0x2a( 42) */
 10040ea:	a8 b0       	[P5 + 0x8] = R0;
 10040ec:	e8 a9       	R0 = W[P5 + 0xe] (X);
 10040ee:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 10040f0:	ff e3 5e fe 	CALL 0x1003dac <_att_execute_write_request.clone.12>;
 10040f4:	69 20       	JUMP.S 0x10041c6 <_gatt_client_run+0x346>;
 10040f6:	00 e3 0b 2c 	CALL 0x100990c <_sm_cmac_ready>;
 10040fa:	00 0c       	CC = R0 == 0x0;
 10040fc:	65 1c       	IF CC JUMP 0x10041c6 <_gatt_client_run+0x346> (BP);
 10040fe:	7f 30       	R7 = FP;
 1004100:	87 67       	R7 += -0x10;		/* (-16) */
 1004102:	0f 30       	R1 = R7;
 1004104:	28 e4 14 00 	R0 = [P5 + 0x50];
 1004108:	00 e3 1a 1a 	CALL 0x100753c <_le_device_db_csrk_get>;
 100410c:	28 e4 14 00 	R0 = [P5 + 0x50];
 1004110:	00 e3 5c 1a 	CALL 0x10075c8 <_le_device_db_local_counter_get>;
 1004114:	61 61       	R1 = 0x2c (X);		/*		R1=0x2c( 44) */
 1004116:	a9 b0       	[P5 + 0x8] = R1;
 1004118:	69 e5 21 00 	R1 = W[P5 + 0x42] (X);
 100411c:	2a e4 11 00 	R2 = [P5 + 0x44];
 1004120:	f0 b0       	[SP + 0xc] = R0;
 1004122:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100002a(16777258) */
 1004126:	00 e1 d0 41 	R0.L = 0x41d0;		/* (16848)	R0=0x10041d0 <_att_signed_write_handle_cmac_result>(16794064) */
 100412a:	30 b1       	[SP + 0x10] = R0;
 100412c:	07 30       	R0 = R7;
 100412e:	00 e3 a1 2b 	CALL 0x1009870 <_sm_cmac_start>;
 1004132:	4a 20       	JUMP.S 0x10041c6 <_gatt_client_run+0x346>;
 1004134:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1004136:	a8 b0       	[P5 + 0x8] = R0;
 1004138:	28 e4 14 00 	R0 = [P5 + 0x50];
 100413c:	00 e3 46 1a 	CALL 0x10075c8 <_le_device_db_local_counter_get>;
 1004140:	28 30       	R5 = R0;
 1004142:	0d 30       	R1 = R5;
 1004144:	09 64       	R1 += 0x1;		/* (  1) */
 1004146:	28 e4 14 00 	R0 = [P5 + 0x50];
 100414a:	00 e3 4f 1a 	CALL 0x10075e8 <_le_device_db_local_counter_set>;
 100414e:	e8 a5       	R0 = W[P5 + 0xe] (Z);
 1004150:	6f e5 1f 00 	R7 = W[P5 + 0x3e] (X);
 1004154:	6e e5 21 00 	R6 = W[P5 + 0x42] (X);
 1004158:	18 32       	P3 = R0;
 100415a:	2c e4 11 00 	R4 = [P5 + 0x44];
 100415e:	00 e3 45 18 	CALL 0x10071e8 <_le_l2cap_reserve_packet_buffer>;
 1004162:	00 e3 3b 18 	CALL 0x10071d8 <_le_l2cap_get_outgoing_buffer>;
 1004166:	20 32       	P4 = R0;
 1004168:	90 62       	R0 = -0x2e (X);		/*		R0=0xffffffd2(-46) */
 100416a:	17 30       	R2 = R7;
 100416c:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100416e:	f7 42       	R7 = R6.L (Z);
 1004170:	20 9b       	B[P4] = R0;
 1004172:	44 30       	R0 = P4;
 1004174:	00 e3 32 30 	CALL 0x100a1d8 <_bt_store_16>;
 1004178:	44 30       	R0 = P4;
 100417a:	0c 30       	R1 = R4;
 100417c:	17 30       	R2 = R7;
 100417e:	18 64       	R0 += 0x3;		/* (  3) */
 1004180:	00 e3 c2 5d 	CALL 0x100fd04 <_memcpy>;
 1004184:	0e 30       	R1 = R6;
 1004186:	44 30       	R0 = P4;
 1004188:	15 30       	R2 = R5;
 100418a:	19 64       	R1 += 0x3;		/* (  3) */
 100418c:	00 e3 38 30 	CALL 0x100a1fc <_bt_store_32>;
 1004190:	07 30       	R0 = R7;
 1004192:	4c 30       	R1 = P4;
 1004194:	38 64       	R0 += 0x7;		/* (  7) */
 1004196:	2a e1 54 00 	P2 = 0x54 (X);		/*		P2=0x54( 84) */
 100419a:	95 5a       	P2 = P5 + P2;
 100419c:	01 50       	R0 = R1 + R0;
 100419e:	4a 30       	R1 = P2;
 10041a0:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 10041a2:	00 e3 b1 5d 	CALL 0x100fd04 <_memcpy>;
 10041a6:	17 30       	R2 = R7;
 10041a8:	43 30       	R0 = P3;
 10041aa:	7a 64       	R2 += 0xf;		/* ( 15) */
 10041ac:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 10041ae:	00 e3 29 18 	CALL 0x1007200 <_le_l2cap_send_prepared_connectionless>;
 10041b2:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10041b4:	a8 b0       	[P5 + 0x8] = R0;
 10041b6:	45 30       	R0 = P5;
 10041b8:	ff e3 06 fc 	CALL 0x10039c4 <_gatt_client_handle_transaction_complete>;
 10041bc:	05 20       	JUMP.S 0x10041c6 <_gatt_client_run+0x346>;
 10041be:	00 00       	NOP;
 10041c0:	6d 91       	P5 = [P5];
 10041c2:	45 0c       	CC = P5 == 0x0;
 10041c4:	6b 16       	IF !CC JUMP 0x1003e9a <_gatt_client_run+0x1a> (BP);
 10041c6:	01 e8 00 00 	UNLINK;
 10041ca:	a3 05       	(R7:4, P5:3) = [SP++];
 10041cc:	10 00       	RTS;
	...

010041d0 <_att_signed_write_handle_cmac_result>:
 10041d0:	f5 05       	[--SP] = (R7:6, P5:5);
 10041d2:	00 e8 06 00 	LINK 0x18;		/* (24) */
 10041d6:	7f 30       	R7 = FP;
 10041d8:	30 30       	R6 = R0;
 10041da:	a7 67       	R7 += -0xc;		/* (-12) */
 10041dc:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x4 <_att_client_handler>(  4) */
 10041e0:	07 30       	R0 = R7;
 10041e2:	01 e1 c8 21 	R1.L = 0x21c8;		/* (8648)	R1=0x21c8 <_gatt_client_connections>(8648) */
 10041e6:	00 e3 af 1a 	CALL 0x1007744 <_linked_list_iterator_init>;
 10041ea:	16 20       	JUMP.S 0x1004216 <_att_signed_write_handle_cmac_result+0x46>;
 10041ec:	07 30       	R0 = R7;
 10041ee:	00 e3 cf 1a 	CALL 0x100778c <_linked_list_iterator_next>;
 10041f2:	28 32       	P5 = R0;
 10041f4:	61 61       	R1 = 0x2c (X);		/*		R1=0x2c( 44) */
 10041f6:	a8 a0       	R0 = [P5 + 0x8];
 10041f8:	08 08       	CC = R0 == R1;
 10041fa:	0e 14       	IF !CC JUMP 0x1004216 <_att_signed_write_handle_cmac_result+0x46> (BP);
 10041fc:	2a e1 54 00 	P2 = 0x54 (X);		/*		P2=0x54( 84) */
 1004200:	95 5a       	P2 = P5 + P2;
 1004202:	42 30       	R0 = P2;
 1004204:	0e 30       	R1 = R6;
 1004206:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 1004208:	00 e3 7e 5d 	CALL 0x100fd04 <_memcpy>;
 100420c:	68 61       	R0 = 0x2d (X);		/*		R0=0x2d( 45) */
 100420e:	a8 b0       	[P5 + 0x8] = R0;
 1004210:	ff e3 38 fe 	CALL 0x1003e80 <_gatt_client_run>;
 1004214:	06 20       	JUMP.S 0x1004220 <_att_signed_write_handle_cmac_result+0x50>;
 1004216:	07 30       	R0 = R7;
 1004218:	00 e3 a2 1a 	CALL 0x100775c <_linked_list_iterator_has_next>;
 100421c:	00 0c       	CC = R0 == 0x0;
 100421e:	e7 17       	IF !CC JUMP 0x10041ec <_att_signed_write_handle_cmac_result+0x1c> (BP);
 1004220:	01 e8 00 00 	UNLINK;
 1004224:	b5 05       	(R7:6, P5:5) = [SP++];
 1004226:	10 00       	RTS;

01004228 <_gatt_client_att_packet_handler>:
 1004228:	e3 05       	[--SP] = (R7:4, P5:3);
 100422a:	22 32       	P4 = R2;
 100422c:	00 e8 2a 00 	LINK 0xa8;		/* (168) */
 1004230:	40 43       	R0 = R0.B (Z);
 1004232:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 1004234:	7f e5 18 00 	R7 = W[FP + 0x30] (X);
 1004238:	10 08       	CC = R0 == R2;
 100423a:	36 14       	IF !CC JUMP 0x10042a6 <_gatt_client_att_packet_handler+0x7e> (BP);
 100423c:	20 99       	R0 = B[P4] (Z);
 100423e:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 1004240:	08 08       	CC = R0 == R1;
 1004242:	02 18       	IF CC JUMP 0x1004246 <_gatt_client_att_packet_handler+0x1e>;
 1004244:	45 23       	JUMP.S 0x10048ce <_gatt_client_att_packet_handler+0x6a6>;
 1004246:	a0 e4 04 00 	R0 = B[P4 + 0x4] (Z);
 100424a:	a1 e4 03 00 	R1 = B[P4 + 0x3] (Z);
 100424e:	40 4f       	R0 <<= 0x8;
 1004250:	08 56       	R0 = R0 | R1;
 1004252:	ff e3 a1 fa 	CALL 0x1003794 <_get_gatt_client_context_for_handle>;
 1004256:	38 30       	R7 = R0;
 1004258:	00 0c       	CC = R0 == 0x0;
 100425a:	02 14       	IF !CC JUMP 0x100425e <_gatt_client_att_packet_handler+0x36> (BP);
 100425c:	39 23       	JUMP.S 0x10048ce <_gatt_client_att_packet_handler+0x6a6>;
 100425e:	f9 60       	R1 = 0x1f (X);		/*		R1=0x1f( 31) */
 1004260:	ff e3 c0 fb 	CALL 0x10039e0 <_gatt_client_report_error_if_pending>;
 1004264:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x2d( 45) */
 1004268:	0f 30       	R1 = R7;
 100426a:	00 e1 c8 21 	R0.L = 0x21c8;		/* (8648)	R0=0x21c8 <_gatt_client_connections>(8648) */
 100426e:	00 e3 39 1a 	CALL 0x10076e0 <_linked_list_remove>;
 1004272:	07 30       	R0 = R7;
 1004274:	ff e3 38 fa 	CALL 0x10036e4 <_btstack_memory_gatt_client_free>;
 1004278:	7f 30       	R7 = FP;
 100427a:	87 67       	R7 += -0x10;		/* (-16) */
 100427c:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x1f( 31) */
 1004280:	07 30       	R0 = R7;
 1004282:	01 e1 cc 21 	R1.L = 0x21cc;		/* (8652)	R1=0x21cc <_gatt_subclients>(8652) */
 1004286:	00 e3 5f 1a 	CALL 0x1007744 <_linked_list_iterator_init>;
 100428a:	08 20       	JUMP.S 0x100429a <_gatt_client_att_packet_handler+0x72>;
 100428c:	07 30       	R0 = R7;
 100428e:	00 e3 7f 1a 	CALL 0x100778c <_linked_list_iterator_next>;
 1004292:	08 32       	P1 = R0;
 1004294:	44 30       	R0 = P4;
 1004296:	ca ac       	P2 = [P1 + 0xc];
 1004298:	62 00       	CALL (P2);
 100429a:	07 30       	R0 = R7;
 100429c:	00 e3 60 1a 	CALL 0x100775c <_linked_list_iterator_has_next>;
 10042a0:	00 0c       	CC = R0 == 0x0;
 10042a2:	f5 17       	IF !CC JUMP 0x100428c <_gatt_client_att_packet_handler+0x64> (BP);
 10042a4:	15 23       	JUMP.S 0x10048ce <_gatt_client_att_packet_handler+0x6a6>;
 10042a6:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 10042a8:	10 08       	CC = R0 == R2;
 10042aa:	02 18       	IF CC JUMP 0x10042ae <_gatt_client_att_packet_handler+0x86>;
 10042ac:	13 23       	JUMP.S 0x10048d2 <_gatt_client_att_packet_handler+0x6aa>;
 10042ae:	01 30       	R0 = R1;
 10042b0:	ff e3 72 fa 	CALL 0x1003794 <_get_gatt_client_context_for_handle>;
 10042b4:	28 32       	P5 = R0;
 10042b6:	45 0c       	CC = P5 == 0x0;
 10042b8:	02 14       	IF !CC JUMP 0x10042bc <_gatt_client_att_packet_handler+0x94> (BP);
 10042ba:	0c 23       	JUMP.S 0x10048d2 <_gatt_client_att_packet_handler+0x6aa>;
 10042bc:	e1 60       	R1 = 0x1c (X);		/*		R1=0x1c( 28) */
 10042be:	60 99       	R0 = B[P4] (X);
 10042c0:	f8 67       	R0 += -0x1;		/* ( -1) */
 10042c2:	40 43       	R0 = R0.B (Z);
 10042c4:	08 0a       	CC = R0 <= R1 (IU);
 10042c6:	02 18       	IF CC JUMP 0x10042ca <_gatt_client_att_packet_handler+0xa2>;
 10042c8:	03 23       	JUMP.S 0x10048ce <_gatt_client_att_packet_handler+0x6a6>;
 10042ca:	08 32       	P1 = R0;
 10042cc:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1000054 */
 10042d0:	0a e1 74 52 	P2.L = 0x5274;		/* (21108)	P2=0x1005274 */
 10042d4:	8a 5e       	P2 = P2 + (P1 << 0x2);
 10042d6:	52 91       	P2 = [P2];
 10042d8:	52 00       	JUMP (P2);
 10042da:	a7 e4 02 00 	R7 = B[P4 + 0x2] (Z);
 10042de:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 10042e2:	47 4f       	R7 <<= 0x8;
 10042e4:	c7 57       	R7 = R7 | R0;
 10042e6:	00 e3 57 17 	CALL 0x1007194 <_l2cap_max_le_mtu>;
 10042ea:	c2 42       	R2 = R0.L (Z);
 10042ec:	f9 42       	R1 = R7.L (Z);
 10042ee:	0a 0a       	CC = R2 <= R1 (IU);
 10042f0:	38 07       	IF CC R7 = R0;
 10042f2:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 10042f4:	2f b7       	W[P5 + 0x18] = R7;
 10042f6:	e8 b1       	[P5 + 0x1c] = R0;
 10042f8:	eb 22       	JUMP.S 0x10048ce <_gatt_client_att_packet_handler+0x6a6>;
 10042fa:	a8 a0       	R0 = [P5 + 0x8];
 10042fc:	10 0c       	CC = R0 == 0x2;
 10042fe:	02 18       	IF CC JUMP 0x1004302 <_gatt_client_att_packet_handler+0xda>;
 1004300:	e7 22       	JUMP.S 0x10048ce <_gatt_client_att_packet_handler+0x6a6>;
 1004302:	a6 e4 01 00 	R6 = B[P4 + 0x1] (Z);
 1004306:	20 e1 a1 ff 	R0 = -0x5f (X);		/*		R0=0xffffffa1(-95) */
 100430a:	b8 e6 98 ff 	B[FP + -0x68] = R0;
 100430e:	e8 a9       	R0 = W[P5 + 0xe] (X);
 1004310:	78 e6 cd ff 	W[FP + -0x66] = R0;
 1004314:	f8 42       	R0 = R7.L (Z);
 1004316:	38 e6 dd ff 	[FP + -0x8c] = R0;
 100431a:	30 60       	R0 = 0x6 (X);		/*		R0=0x6(  6) */
 100431c:	2a e1 b4 ff 	P2 = -0x4c (X);		/*		P2=0xffffffb4(-76) */
 1004320:	97 5a       	P2 = FP + P2;
 1004322:	06 08       	CC = R6 == R0;
 1004324:	00 02       	R0 = CC;
 1004326:	62 30       	R4 = P2;
 1004328:	13 68       	P3 = 0x2 (X);		/*		P3=0x2(  2) */
 100432a:	b8 e6 73 ff 	B[FP + -0x8d] = R0;
 100432e:	6a 30       	R5 = P2;
 1004330:	34 64       	R4 += 0x6;		/* (  6) */
 1004332:	3d 20       	JUMP.S 0x10043ac <_gatt_client_att_packet_handler+0x184>;
 1004334:	9c 5a       	P2 = P4 + P3;
 1004336:	90 e4 01 00 	R0 = B[P2 + 0x1] (Z);
 100433a:	11 99       	R1 = B[P2] (Z);
 100433c:	40 4f       	R0 <<= 0x8;
 100433e:	08 56       	R0 = R0 | R1;
 1004340:	78 e6 da ff 	W[FP + -0x4c] = R0;
 1004344:	90 e4 03 00 	R0 = B[P2 + 0x3] (Z);
 1004348:	91 e4 02 00 	R1 = B[P2 + 0x2] (Z);
 100434c:	40 4f       	R0 <<= 0x8;
 100434e:	08 56       	R0 = R0 | R1;
 1004350:	78 e6 db ff 	W[FP + -0x4a] = R0;
 1004354:	b8 e4 73 ff 	R0 = B[FP + -0x8d] (Z);
 1004358:	08 02       	CC = R0;
 100435a:	0e 14       	IF !CC JUMP 0x1004376 <_gatt_client_att_packet_handler+0x14e> (BP);
 100435c:	91 e4 05 00 	R1 = B[P2 + 0x5] (Z);
 1004360:	90 e4 04 00 	R0 = B[P2 + 0x4] (Z);
 1004364:	41 4f       	R1 <<= 0x8;
 1004366:	41 56       	R1 = R1 | R0;
 1004368:	79 e6 dc ff 	W[FP + -0x48] = R1;
 100436c:	c9 42       	R1 = R1.L (Z);
 100436e:	04 30       	R0 = R4;
 1004370:	ff e3 da e4 	CALL 0x1000d24 <_sdp_normalize_uuid>;
 1004374:	0b 20       	JUMP.S 0x100438a <_gatt_client_att_packet_handler+0x162>;
 1004376:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1004378:	78 e6 dc ff 	W[FP + -0x48] = R0;
 100437c:	43 30       	R0 = P3;
 100437e:	4c 30       	R1 = P4;
 1004380:	20 64       	R0 += 0x4;		/* (  4) */
 1004382:	01 50       	R0 = R1 + R0;
 1004384:	0c 30       	R1 = R4;
 1004386:	00 e3 d5 2f 	CALL 0x100a330 <_swap128>;
 100438a:	29 e1 9c ff 	P1 = -0x64 (X);		/*		P1=0xffffff9c(-100) */
 100438e:	79 5a       	P1 = P1 + FP;
 1004390:	41 30       	R0 = P1;
 1004392:	0d 30       	R1 = R5;
 1004394:	b2 60       	R2 = 0x16 (X);		/*		R2=0x16( 22) */
 1004396:	00 e3 b7 5c 	CALL 0x100fd04 <_memcpy>;
 100439a:	2a e1 98 ff 	P2 = -0x68 (X);		/*		P2=0xffffff98(-104) */
 100439e:	ba 5a       	P2 = P2 + FP;
 10043a0:	a8 a9       	R0 = W[P5 + 0xc] (X);
 10043a2:	4a 30       	R1 = P2;
 10043a4:	ff e3 68 fa 	CALL 0x1003874 <_emit_event>;
 10043a8:	0e 32       	P1 = R6;
 10043aa:	cb 5a       	P3 = P3 + P1;
 10043ac:	3a e5 dd ff 	P2 = [FP + -0x8c];
 10043b0:	d3 08       	CC = P3 < P2;
 10043b2:	c1 1f       	IF CC JUMP 0x1004334 <_gatt_client_att_packet_handler+0x10c> (BP);
 10043b4:	0f 30       	R1 = R7;
 10043b6:	44 30       	R0 = P4;
 10043b8:	ff e3 02 fa 	CALL 0x10037bc <_get_last_result_handle>;
 10043bc:	08 30       	R1 = R0;
 10043be:	45 30       	R0 = P5;
 10043c0:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 10043c2:	5f 20       	JUMP.S 0x1004480 <_gatt_client_att_packet_handler+0x258>;
 10043c4:	a1 e4 02 00 	R1 = B[P4 + 0x2] (Z);
 10043c8:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 10043cc:	41 4f       	R1 <<= 0x8;
 10043ce:	41 56       	R1 = R1 | R0;
 10043d0:	a8 a9       	R0 = W[P5 + 0xc] (X);
 10043d2:	ea a9       	R2 = W[P5 + 0xe] (X);
 10043d4:	79 e6 f2 ff 	W[FP + -0x1c] = R1;
 10043d8:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10043da:	79 e6 f3 ff 	W[FP + -0x1a] = R1;
 10043de:	ff 42       	R7 = R7.L (Z);
 10043e0:	23 e1 a7 ff 	R3 = -0x59 (X);		/*		R3=0xffffffa7(-89) */
 10043e4:	ef 67       	R7 += -0x3;		/* ( -3) */
 10043e6:	1c 6c       	P4 += 0x3;		/* (  3) */
 10043e8:	4f 30       	R1 = FP;
 10043ea:	bb e6 e0 ff 	B[FP + -0x20] = R3;
 10043ee:	7a e6 f1 ff 	W[FP + -0x1e] = R2;
 10043f2:	7f e6 f4 ff 	W[FP + -0x18] = R7;
 10043f6:	bc bb       	[FP -0x14] = P4;
 10043f8:	01 67       	R1 += -0x20;		/* (-32) */
 10043fa:	ff e3 3d fa 	CALL 0x1003874 <_emit_event>;
 10043fe:	68 22       	JUMP.S 0x10048ce <_gatt_client_att_packet_handler+0x6a6>;
 1004400:	a1 e4 02 00 	R1 = B[P4 + 0x2] (Z);
 1004404:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 1004408:	41 4f       	R1 <<= 0x8;
 100440a:	41 56       	R1 = R1 | R0;
 100440c:	a8 a9       	R0 = W[P5 + 0xc] (X);
 100440e:	ea a9       	R2 = W[P5 + 0xe] (X);
 1004410:	79 e6 f2 ff 	W[FP + -0x1c] = R1;
 1004414:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1004416:	79 e6 f3 ff 	W[FP + -0x1a] = R1;
 100441a:	ff 42       	R7 = R7.L (Z);
 100441c:	23 e1 a8 ff 	R3 = -0x58 (X);		/*		R3=0xffffffa8(-88) */
 1004420:	ef 67       	R7 += -0x3;		/* ( -3) */
 1004422:	1c 6c       	P4 += 0x3;		/* (  3) */
 1004424:	4f 30       	R1 = FP;
 1004426:	bb e6 e0 ff 	B[FP + -0x20] = R3;
 100442a:	7a e6 f1 ff 	W[FP + -0x1e] = R2;
 100442e:	7f e6 f4 ff 	W[FP + -0x18] = R7;
 1004432:	bc bb       	[FP -0x14] = P4;
 1004434:	01 67       	R1 += -0x20;		/* (-32) */
 1004436:	ff e3 1f fa 	CALL 0x1003874 <_emit_event>;
 100443a:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100443c:	a8 e6 4d 00 	B[P5 + 0x4d] = R0;
 1004440:	47 22       	JUMP.S 0x10048ce <_gatt_client_att_packet_handler+0x6a6>;
 1004442:	a8 a0       	R0 = [P5 + 0x8];
 1004444:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 1004446:	08 08       	CC = R0 == R1;
 1004448:	10 18       	IF CC JUMP 0x1004468 <_gatt_client_att_packet_handler+0x240>;
 100444a:	08 0a       	CC = R0 <= R1 (IU);
 100444c:	06 14       	IF !CC JUMP 0x1004458 <_gatt_client_att_packet_handler+0x230> (BP);
 100444e:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 1004450:	10 08       	CC = R0 == R2;
 1004452:	02 18       	IF CC JUMP 0x1004456 <_gatt_client_att_packet_handler+0x22e>;
 1004454:	3d 22       	JUMP.S 0x10048ce <_gatt_client_att_packet_handler+0x6a6>;
 1004456:	09 20       	JUMP.S 0x1004468 <_gatt_client_att_packet_handler+0x240>;
 1004458:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 100445a:	08 08       	CC = R0 == R1;
 100445c:	15 18       	IF CC JUMP 0x1004486 <_gatt_client_att_packet_handler+0x25e>;
 100445e:	f2 60       	R2 = 0x1e (X);		/*		R2=0x1e( 30) */
 1004460:	10 08       	CC = R0 == R2;
 1004462:	02 18       	IF CC JUMP 0x1004466 <_gatt_client_att_packet_handler+0x23e>;
 1004464:	35 22       	JUMP.S 0x10048ce <_gatt_client_att_packet_handler+0x6a6>;
 1004466:	59 20       	JUMP.S 0x1004518 <_gatt_client_att_packet_handler+0x2f0>;
 1004468:	17 30       	R2 = R7;
 100446a:	45 30       	R0 = P5;
 100446c:	4c 30       	R1 = P4;
 100446e:	ff e3 b3 fb 	CALL 0x1003bd4 <_report_gatt_characteristics>;
 1004472:	0f 30       	R1 = R7;
 1004474:	44 30       	R0 = P4;
 1004476:	ff e3 a3 f9 	CALL 0x10037bc <_get_last_result_handle>;
 100447a:	08 30       	R1 = R0;
 100447c:	45 30       	R0 = P5;
 100447e:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 1004480:	ff e3 ec fa 	CALL 0x1003a58 <_trigger_next_query>;
 1004484:	25 22       	JUMP.S 0x10048ce <_gatt_client_att_packet_handler+0x6a6>;
 1004486:	a5 e4 01 00 	R5 = B[P4 + 0x1] (Z);
 100448a:	e8 42       	R0 = R5.L (Z);
 100448c:	30 0e       	CC = R0 <= 0x6 (IU);
 100448e:	04 1c       	IF CC JUMP 0x1004496 <_gatt_client_att_packet_handler+0x26e> (BP);
 1004490:	16 60       	R6 = 0x2 (X);		/*		R6=0x2(  2) */
 1004492:	fc 42       	R4 = R7.L (Z);
 1004494:	39 20       	JUMP.S 0x1004506 <_gatt_client_att_packet_handler+0x2de>;
 1004496:	00 00       	NOP;
 1004498:	a0 e4 03 00 	R0 = B[P4 + 0x3] (Z);
 100449c:	a1 e4 02 00 	R1 = B[P4 + 0x2] (Z);
 10044a0:	40 4f       	R0 <<= 0x8;
 10044a2:	08 56       	R0 = R0 | R1;
 10044a4:	68 e6 19 00 	W[P5 + 0x32] = R0;
 10044a8:	a0 e4 05 00 	R0 = B[P4 + 0x5] (Z);
 10044ac:	a1 e4 04 00 	R1 = B[P4 + 0x4] (Z);
 10044b0:	40 4f       	R0 <<= 0x8;
 10044b2:	08 56       	R0 = R0 | R1;
 10044b4:	68 e6 1b 00 	W[P5 + 0x36] = R0;
 10044b8:	a0 e4 07 00 	R0 = B[P4 + 0x7] (Z);
 10044bc:	a1 e4 06 00 	R1 = B[P4 + 0x6] (Z);
 10044c0:	40 4f       	R0 <<= 0x8;
 10044c2:	08 56       	R0 = R0 | R1;
 10044c4:	68 e6 1c 00 	W[P5 + 0x38] = R0;
 10044c8:	68 60       	R0 = 0xd (X);		/*		R0=0xd( 13) */
 10044ca:	cc 21       	JUMP.S 0x1004862 <_gatt_client_att_packet_handler+0x63a>;
 10044cc:	08 32       	P1 = R0;
 10044ce:	ae 51       	R6 = R6 + R5;
 10044d0:	8c 5a       	P2 = P4 + P1;
 10044d2:	90 e4 03 00 	R0 = B[P2 + 0x3] (Z);
 10044d6:	91 e4 02 00 	R1 = B[P2 + 0x2] (Z);
 10044da:	40 4f       	R0 <<= 0x8;
 10044dc:	08 56       	R0 = R0 | R1;
 10044de:	68 e6 1b 00 	W[P5 + 0x36] = R0;
 10044e2:	90 e4 05 00 	R0 = B[P2 + 0x5] (Z);
 10044e6:	91 e4 04 00 	R1 = B[P2 + 0x4] (Z);
 10044ea:	40 4f       	R0 <<= 0x8;
 10044ec:	08 56       	R0 = R0 | R1;
 10044ee:	68 e6 1c 00 	W[P5 + 0x38] = R0;
 10044f2:	92 e4 07 00 	R2 = B[P2 + 0x7] (Z);
 10044f6:	90 e4 06 00 	R0 = B[P2 + 0x6] (Z);
 10044fa:	42 4f       	R2 <<= 0x8;
 10044fc:	82 56       	R2 = R2 | R0;
 10044fe:	45 30       	R0 = P5;
 1004500:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1004502:	ff e3 33 fb 	CALL 0x1003b68 <_report_gatt_included_service>;
 1004506:	f0 42       	R0 = R6.L (Z);
 1004508:	a0 09       	CC = R0 < R4 (IU);
 100450a:	e1 1f       	IF CC JUMP 0x10044cc <_gatt_client_att_packet_handler+0x2a4> (BP);
 100450c:	0f 30       	R1 = R7;
 100450e:	44 30       	R0 = P4;
 1004510:	ff e3 56 f9 	CALL 0x10037bc <_get_last_result_handle>;
 1004514:	08 30       	R1 = R0;
 1004516:	23 20       	JUMP.S 0x100455c <_gatt_client_att_packet_handler+0x334>;
 1004518:	a0 e4 03 00 	R0 = B[P4 + 0x3] (Z);
 100451c:	a1 e4 02 00 	R1 = B[P4 + 0x2] (Z);
 1004520:	40 4f       	R0 <<= 0x8;
 1004522:	08 56       	R0 = R0 | R1;
 1004524:	68 e6 24 00 	W[P5 + 0x48] = R0;
 1004528:	f8 60       	R0 = 0x1f (X);		/*		R0=0x1f( 31) */
 100452a:	9c 21       	JUMP.S 0x1004862 <_gatt_client_att_packet_handler+0x63a>;
 100452c:	a8 a0       	R0 = [P5 + 0x8];
 100452e:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 1004530:	08 08       	CC = R0 == R1;
 1004532:	18 18       	IF CC JUMP 0x1004562 <_gatt_client_att_packet_handler+0x33a>;
 1004534:	12 61       	R2 = 0x22 (X);		/*		R2=0x22( 34) */
 1004536:	10 08       	CC = R0 == R2;
 1004538:	32 18       	IF CC JUMP 0x100459c <_gatt_client_att_packet_handler+0x374>;
 100453a:	71 60       	R1 = 0xe (X);		/*		R1=0xe( 14) */
 100453c:	08 08       	CC = R0 == R1;
 100453e:	c8 15       	IF !CC JUMP 0x10048ce <_gatt_client_att_packet_handler+0x6a6> (BP);
 1004540:	7f 30       	R7 = FP;
 1004542:	87 67       	R7 += -0x10;		/* (-16) */
 1004544:	44 30       	R0 = P4;
 1004546:	08 64       	R0 += 0x1;		/* (  1) */
 1004548:	0f 30       	R1 = R7;
 100454a:	00 e3 f3 2e 	CALL 0x100a330 <_swap128>;
 100454e:	0f 30       	R1 = R7;
 1004550:	45 30       	R0 = P5;
 1004552:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1004554:	ff e3 0a fb 	CALL 0x1003b68 <_report_gatt_included_service>;
 1004558:	69 e5 19 00 	R1 = W[P5 + 0x32] (X);
 100455c:	45 30       	R0 = P5;
 100455e:	5a 60       	R2 = 0xb (X);		/*		R2=0xb( 11) */
 1004560:	90 2f       	JUMP.S 0x1004480 <_gatt_client_att_packet_handler+0x258>;
 1004562:	45 30       	R0 = P5;
 1004564:	ff e3 30 fa 	CALL 0x10039c4 <_gatt_client_handle_transaction_complete>;
 1004568:	69 e5 1f 00 	R1 = W[P5 + 0x3e] (X);
 100456c:	a8 a9       	R0 = W[P5 + 0xc] (X);
 100456e:	ea a9       	R2 = W[P5 + 0xe] (X);
 1004570:	79 e6 f2 ff 	W[FP + -0x1c] = R1;
 1004574:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1004576:	79 e6 f3 ff 	W[FP + -0x1a] = R1;
 100457a:	ff 42       	R7 = R7.L (Z);
 100457c:	23 e1 a5 ff 	R3 = -0x5b (X);		/*		R3=0xffffffa5(-91) */
 1004580:	ff 67       	R7 += -0x1;		/* ( -1) */
 1004582:	0c 6c       	P4 += 0x1;		/* (  1) */
 1004584:	4f 30       	R1 = FP;
 1004586:	bb e6 e0 ff 	B[FP + -0x20] = R3;
 100458a:	7a e6 f1 ff 	W[FP + -0x1e] = R2;
 100458e:	7f e6 f4 ff 	W[FP + -0x18] = R7;
 1004592:	bc bb       	[FP -0x14] = P4;
 1004594:	01 67       	R1 += -0x20;		/* (-32) */
 1004596:	ff e3 6f f9 	CALL 0x1003874 <_emit_event>;
 100459a:	8f 21       	JUMP.S 0x10048b8 <_gatt_client_att_packet_handler+0x690>;
 100459c:	45 30       	R0 = P5;
 100459e:	ff e3 13 fa 	CALL 0x10039c4 <_gatt_client_handle_transaction_complete>;
 10045a2:	69 e5 1f 00 	R1 = W[P5 + 0x3e] (X);
 10045a6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10045a8:	30 b6       	W[SP + 0x10] = R0;
 10045aa:	20 e1 a9 ff 	R0 = -0x57 (X);		/*		R0=0xffffffa9(-87) */
 10045ae:	54 30       	R2 = P4;
 10045b0:	ff 67       	R7 += -0x1;		/* ( -1) */
 10045b2:	b0 e6 14 00 	B[SP + 0x14] = R0;
 10045b6:	0a 64       	R2 += 0x1;		/* (  1) */
 10045b8:	b7 b5       	W[SP + 0xc] = R7;
 10045ba:	45 30       	R0 = P5;
 10045bc:	ff e3 9c f9 	CALL 0x10038f4 <_report_gatt_characteristic_descriptor>;
 10045c0:	7c 21       	JUMP.S 0x10048b8 <_gatt_client_att_packet_handler+0x690>;
 10045c2:	55 30       	R2 = P5;
 10045c4:	20 e1 a1 ff 	R0 = -0x5f (X);		/*		R0=0xffffffa1(-95) */
 10045c8:	ff 42       	R7 = R7.L (Z);
 10045ca:	12 65       	R2 += 0x22;		/* ( 34) */
 10045cc:	b8 e6 98 ff 	B[FP + -0x68] = R0;
 10045d0:	0e 60       	R6 = 0x1 (X);		/*		R6=0x1(  1) */
 10045d2:	1f 32       	P3 = R7;
 10045d4:	3a e6 dd ff 	[FP + -0x8c] = R2;
 10045d8:	33 20       	JUMP.S 0x100463e <_gatt_client_att_packet_handler+0x416>;
 10045da:	29 e1 ba ff 	P1 = -0x46 (X);		/*		P1=0xffffffba(-70) */
 10045de:	a7 e4 fe ff 	R7 = B[P4 + -0x2] (Z);
 10045e2:	a0 e4 fd ff 	R0 = B[P4 + -0x3] (Z);
 10045e6:	47 4f       	R7 <<= 0x8;
 10045e8:	c7 57       	R7 = R7 | R0;
 10045ea:	25 99       	R5 = B[P4] (Z);
 10045ec:	a0 e4 ff ff 	R0 = B[P4 + -0x1] (Z);
 10045f0:	45 4f       	R5 <<= 0x8;
 10045f2:	79 5a       	P1 = P1 + FP;
 10045f4:	45 57       	R5 = R5 | R0;
 10045f6:	41 30       	R0 = P1;
 10045f8:	39 e4 dd ff 	R1 = [FP + -0x8c];
 10045fc:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 10045fe:	00 e3 83 5b 	CALL 0x100fd04 <_memcpy>;
 1004602:	2a e1 9c ff 	P2 = -0x64 (X);		/*		P2=0xffffff9c(-100) */
 1004606:	29 e1 b4 ff 	P1 = -0x4c (X);		/*		P1=0xffffffb4(-76) */
 100460a:	ba 5a       	P2 = P2 + FP;
 100460c:	79 5a       	P1 = P1 + FP;
 100460e:	49 30       	R1 = P1;
 1004610:	6c e5 10 00 	R4 = W[P5 + 0x20] (X);
 1004614:	42 30       	R0 = P2;
 1004616:	b2 60       	R2 = 0x16 (X);		/*		R2=0x16( 22) */
 1004618:	00 e3 76 5b 	CALL 0x100fd04 <_memcpy>;
 100461c:	7f e6 ce ff 	W[FP + -0x64] = R7;
 1004620:	7d e6 cf ff 	W[FP + -0x62] = R5;
 1004624:	7c e6 d0 ff 	W[FP + -0x60] = R4;
 1004628:	e8 a9       	R0 = W[P5 + 0xe] (X);
 100462a:	2a e1 98 ff 	P2 = -0x68 (X);		/*		P2=0xffffff98(-104) */
 100462e:	78 e6 cd ff 	W[FP + -0x66] = R0;
 1004632:	ba 5a       	P2 = P2 + FP;
 1004634:	a8 a9       	R0 = W[P5 + 0xc] (X);
 1004636:	4a 30       	R1 = P2;
 1004638:	ff e3 1e f9 	CALL 0x1003874 <_emit_event>;
 100463c:	26 64       	R6 += 0x4;		/* (  4) */
 100463e:	43 30       	R0 = P3;
 1004640:	24 6c       	P4 += 0x4;		/* (  4) */
 1004642:	86 08       	CC = R6 < R0;
 1004644:	cb 1f       	IF CC JUMP 0x10045da <_gatt_client_att_packet_handler+0x3b2> (BP);
 1004646:	45 30       	R0 = P5;
 1004648:	0d 30       	R1 = R5;
 100464a:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100464c:	1a 2f       	JUMP.S 0x1004480 <_gatt_client_att_packet_handler+0x258>;
 100464e:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 1004652:	10 0c       	CC = R0 == 0x2;
 1004654:	91 60       	R1 = 0x12 (X);		/*		R1=0x12( 18) */
 1004656:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1004658:	01 07       	IF CC R0 = R1;
 100465a:	fa 42       	R2 = R7.L (Z);
 100465c:	41 43       	R1 = R0.B (Z);
 100465e:	4a 52       	R1 = R2 - R1;
 1004660:	11 32       	P2 = R1;
 1004662:	f7 67       	R7 += -0x2;		/* ( -2) */
 1004664:	40 43       	R0 = R0.B (Z);
 1004666:	fc 42       	R4 = R7.L (Z);
 1004668:	c7 42       	R7 = R0.L (Z);
 100466a:	94 5a       	P2 = P4 + P2;
 100466c:	92 e4 01 00 	R2 = B[P2 + 0x1] (Z);
 1004670:	11 99       	R1 = B[P2] (Z);
 1004672:	42 4f       	R2 <<= 0x8;
 1004674:	4a 56       	R1 = R2 | R1;
 1004676:	79 e6 ba ff 	W[FP + -0x8c] = R1;
 100467a:	21 e1 a4 ff 	R1 = -0x5c (X);		/*		R1=0xffffffa4(-92) */
 100467e:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1004680:	b9 e6 78 ff 	B[FP + -0x88] = R1;
 1004684:	07 08       	CC = R7 == R0;
 1004686:	5c 32       	P3 = P4;
 1004688:	e9 a9       	R1 = W[P5 + 0xe] (X);
 100468a:	00 02       	R0 = CC;
 100468c:	6f 30       	R5 = FP;
 100468e:	13 6c       	P3 += 0x2;		/* (  2) */
 1004690:	79 e6 bd ff 	W[FP + -0x86] = R1;
 1004694:	04 68       	P4 = 0x0 (X);		/*		P4=0x0(  0) */
 1004696:	b8 e6 73 ff 	B[FP + -0x8d] = R0;
 100469a:	85 66       	R5 += -0x30;		/* (-48) */
 100469c:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100469e:	37 20       	JUMP.S 0x100470c <_gatt_client_att_packet_handler+0x4e4>;
 10046a0:	a3 5a       	P2 = P3 + P4;
 10046a2:	90 e4 01 00 	R0 = B[P2 + 0x1] (Z);
 10046a6:	11 99       	R1 = B[P2] (Z);
 10046a8:	40 4f       	R0 <<= 0x8;
 10046aa:	08 56       	R0 = R0 | R1;
 10046ac:	78 e6 e6 ff 	W[FP + -0x34] = R0;
 10046b0:	b8 e4 73 ff 	R0 = B[FP + -0x8d] (Z);
 10046b4:	08 02       	CC = R0;
 10046b6:	0e 14       	IF !CC JUMP 0x10046d2 <_gatt_client_att_packet_handler+0x4aa> (BP);
 10046b8:	91 e4 03 00 	R1 = B[P2 + 0x3] (Z);
 10046bc:	90 e4 02 00 	R0 = B[P2 + 0x2] (Z);
 10046c0:	41 4f       	R1 <<= 0x8;
 10046c2:	41 56       	R1 = R1 | R0;
 10046c4:	79 e6 e7 ff 	W[FP + -0x32] = R1;
 10046c8:	c9 42       	R1 = R1.L (Z);
 10046ca:	05 30       	R0 = R5;
 10046cc:	ff e3 2c e3 	CALL 0x1000d24 <_sdp_normalize_uuid>;
 10046d0:	0a 20       	JUMP.S 0x10046e4 <_gatt_client_att_packet_handler+0x4bc>;
 10046d2:	44 30       	R0 = P4;
 10046d4:	4b 30       	R1 = P3;
 10046d6:	10 64       	R0 += 0x2;		/* (  2) */
 10046d8:	01 50       	R0 = R1 + R0;
 10046da:	7e e6 e7 ff 	W[FP + -0x32] = R6;
 10046de:	0d 30       	R1 = R5;
 10046e0:	00 e3 28 2e 	CALL 0x100a330 <_swap128>;
 10046e4:	29 e1 7c ff 	P1 = -0x84 (X);		/*		P1=0xffffff7c(-132) */
 10046e8:	79 5a       	P1 = P1 + FP;
 10046ea:	4f 30       	R1 = FP;
 10046ec:	41 30       	R0 = P1;
 10046ee:	61 66       	R1 += -0x34;		/* (-52) */
 10046f0:	a2 60       	R2 = 0x14 (X);		/*		R2=0x14( 20) */
 10046f2:	7e e6 c8 ff 	W[FP + -0x70] = R6;
 10046f6:	00 e3 07 5b 	CALL 0x100fd04 <_memcpy>;
 10046fa:	2a e1 78 ff 	P2 = -0x88 (X);		/*		P2=0xffffff78(-136) */
 10046fe:	ba 5a       	P2 = P2 + FP;
 1004700:	a8 a9       	R0 = W[P5 + 0xc] (X);
 1004702:	4a 30       	R1 = P2;
 1004704:	ff e3 b8 f8 	CALL 0x1003874 <_emit_event>;
 1004708:	0f 32       	P1 = R7;
 100470a:	0c 5b       	P4 = P4 + P1;
 100470c:	44 30       	R0 = P4;
 100470e:	a0 08       	CC = R0 < R4;
 1004710:	c8 1f       	IF CC JUMP 0x10046a0 <_gatt_client_att_packet_handler+0x478> (BP);
 1004712:	45 30       	R0 = P5;
 1004714:	79 e5 ba ff 	R1 = W[FP + -0x8c] (X);
 1004718:	4a 60       	R2 = 0x9 (X);		/*		R2=0x9(  9) */
 100471a:	b3 2e       	JUMP.S 0x1004480 <_gatt_client_att_packet_handler+0x258>;
 100471c:	a8 a0       	R0 = [P5 + 0x8];
 100471e:	01 61       	R1 = 0x20 (X);		/*		R1=0x20( 32) */
 1004720:	08 08       	CC = R0 == R1;
 1004722:	c8 18       	IF CC JUMP 0x10048b2 <_gatt_client_att_packet_handler+0x68a>;
 1004724:	32 61       	R2 = 0x26 (X);		/*		R2=0x26( 38) */
 1004726:	10 08       	CC = R0 == R2;
 1004728:	c5 18       	IF CC JUMP 0x10048b2 <_gatt_client_att_packet_handler+0x68a>;
 100472a:	a1 60       	R1 = 0x14 (X);		/*		R1=0x14( 20) */
 100472c:	a5 20       	JUMP.S 0x1004876 <_gatt_client_att_packet_handler+0x64e>;
 100472e:	37 30       	R6 = R7;
 1004730:	a8 a0       	R0 = [P5 + 0x8];
 1004732:	92 60       	R2 = 0x12 (X);		/*		R2=0x12( 18) */
 1004734:	fe 67       	R6 += -0x1;		/* ( -1) */
 1004736:	10 08       	CC = R0 == R2;
 1004738:	05 18       	IF CC JUMP 0x1004742 <_gatt_client_att_packet_handler+0x51a>;
 100473a:	21 61       	R1 = 0x24 (X);		/*		R1=0x24( 36) */
 100473c:	08 08       	CC = R0 == R1;
 100473e:	c8 14       	IF !CC JUMP 0x10048ce <_gatt_client_att_packet_handler+0x6a6> (BP);
 1004740:	29 20       	JUMP.S 0x1004792 <_gatt_client_att_packet_handler+0x56a>;
 1004742:	69 e5 20 00 	R1 = W[P5 + 0x40] (X);
 1004746:	6a e5 1f 00 	R2 = W[P5 + 0x3e] (X);
 100474a:	a8 a9       	R0 = W[P5 + 0xc] (X);
 100474c:	eb a9       	R3 = W[P5 + 0xe] (X);
 100474e:	79 e6 f3 ff 	W[FP + -0x1a] = R1;
 1004752:	25 e1 a6 ff 	R5 = -0x5a (X);		/*		R5=0xffffffa6(-90) */
 1004756:	0c 6c       	P4 += 0x1;		/* (  1) */
 1004758:	4f 30       	R1 = FP;
 100475a:	7b e6 f1 ff 	W[FP + -0x1e] = R3;
 100475e:	7a e6 f2 ff 	W[FP + -0x1c] = R2;
 1004762:	01 67       	R1 += -0x20;		/* (-32) */
 1004764:	bd e6 e0 ff 	B[FP + -0x20] = R5;
 1004768:	7e e6 f4 ff 	W[FP + -0x18] = R6;
 100476c:	bc bb       	[FP -0x14] = P4;
 100476e:	ff e3 83 f8 	CALL 0x1003874 <_emit_event>;
 1004772:	45 30       	R0 = P5;
 1004774:	c0 64       	R0 += 0x18;		/* ( 24) */
 1004776:	ff e3 a1 fa 	CALL 0x1003cb8 <_peripheral_mtu.clone.5>;
 100477a:	f8 67       	R0 += -0x1;		/* ( -1) */
 100477c:	f7 42       	R7 = R6.L (Z);
 100477e:	c0 42       	R0 = R0.L (Z);
 1004780:	87 09       	CC = R7 < R0 (IU);
 1004782:	98 1c       	IF CC JUMP 0x10048b2 <_gatt_client_att_packet_handler+0x68a> (BP);
 1004784:	88 60       	R0 = 0x11 (X);		/*		R0=0x11( 17) */
 1004786:	6f e5 20 00 	R7 = W[P5 + 0x40] (X);
 100478a:	be 51       	R6 = R6 + R7;
 100478c:	6e e6 20 00 	W[P5 + 0x40] = R6;
 1004790:	69 20       	JUMP.S 0x1004862 <_gatt_client_att_packet_handler+0x63a>;
 1004792:	69 e5 1f 00 	R1 = W[P5 + 0x3e] (X);
 1004796:	b6 b5       	W[SP + 0xc] = R6;
 1004798:	68 e5 20 00 	R0 = W[P5 + 0x40] (X);
 100479c:	30 b6       	W[SP + 0x10] = R0;
 100479e:	20 e1 aa ff 	R0 = -0x56 (X);		/*		R0=0xffffffaa(-86) */
 10047a2:	b0 e6 14 00 	B[SP + 0x14] = R0;
 10047a6:	54 30       	R2 = P4;
 10047a8:	0a 64       	R2 += 0x1;		/* (  1) */
 10047aa:	45 30       	R0 = P5;
 10047ac:	ff e3 a4 f8 	CALL 0x10038f4 <_report_gatt_characteristic_descriptor>;
 10047b0:	45 30       	R0 = P5;
 10047b2:	c0 64       	R0 += 0x18;		/* ( 24) */
 10047b4:	ff e3 82 fa 	CALL 0x1003cb8 <_peripheral_mtu.clone.5>;
 10047b8:	f8 67       	R0 += -0x1;		/* ( -1) */
 10047ba:	f7 42       	R7 = R6.L (Z);
 10047bc:	c0 42       	R0 = R0.L (Z);
 10047be:	87 09       	CC = R7 < R0 (IU);
 10047c0:	79 1c       	IF CC JUMP 0x10048b2 <_gatt_client_att_packet_handler+0x68a> (BP);
 10047c2:	18 61       	R0 = 0x23 (X);		/*		R0=0x23( 35) */
 10047c4:	6f e5 20 00 	R7 = W[P5 + 0x40] (X);
 10047c8:	be 51       	R6 = R6 + R7;
 10047ca:	6e e6 20 00 	W[P5 + 0x40] = R6;
 10047ce:	4a 20       	JUMP.S 0x1004862 <_gatt_client_att_packet_handler+0x63a>;
 10047d0:	a8 a0       	R0 = [P5 + 0x8];
 10047d2:	c2 60       	R2 = 0x18 (X);		/*		R2=0x18( 24) */
 10047d4:	10 08       	CC = R0 == R2;
 10047d6:	1e 18       	IF CC JUMP 0x1004812 <_gatt_client_att_packet_handler+0x5ea>;
 10047d8:	41 61       	R1 = 0x28 (X);		/*		R1=0x28( 40) */
 10047da:	08 08       	CC = R0 == R1;
 10047dc:	0f 18       	IF CC JUMP 0x10047fa <_gatt_client_att_packet_handler+0x5d2>;
 10047de:	b2 60       	R2 = 0x16 (X);		/*		R2=0x16( 22) */
 10047e0:	10 08       	CC = R0 == R2;
 10047e2:	76 14       	IF !CC JUMP 0x10048ce <_gatt_client_att_packet_handler+0x6a6> (BP);
 10047e4:	a0 e4 04 00 	R0 = B[P4 + 0x4] (Z);
 10047e8:	a1 e4 03 00 	R1 = B[P4 + 0x3] (Z);
 10047ec:	40 4f       	R0 <<= 0x8;
 10047ee:	08 56       	R0 = R0 | R1;
 10047f0:	68 e6 20 00 	W[P5 + 0x40] = R0;
 10047f4:	45 30       	R0 = P5;
 10047f6:	a9 60       	R1 = 0x15 (X);		/*		R1=0x15( 21) */
 10047f8:	30 20       	JUMP.S 0x1004858 <_gatt_client_att_packet_handler+0x630>;
 10047fa:	a0 e4 04 00 	R0 = B[P4 + 0x4] (Z);
 10047fe:	a1 e4 03 00 	R1 = B[P4 + 0x3] (Z);
 1004802:	40 4f       	R0 <<= 0x8;
 1004804:	08 56       	R0 = R0 | R1;
 1004806:	68 e6 20 00 	W[P5 + 0x40] = R0;
 100480a:	45 30       	R0 = P5;
 100480c:	39 61       	R1 = 0x27 (X);		/*		R1=0x27( 39) */
 100480e:	4a 61       	R2 = 0x29 (X);		/*		R2=0x29( 41) */
 1004810:	25 20       	JUMP.S 0x100485a <_gatt_client_att_packet_handler+0x632>;
 1004812:	a0 e4 02 00 	R0 = B[P4 + 0x2] (Z);
 1004816:	40 4f       	R0 <<= 0x8;
 1004818:	a6 e4 01 00 	R6 = B[P4 + 0x1] (Z);
 100481c:	6b e4 1f 00 	R3 = W[P5 + 0x3e] (Z);
 1004820:	06 56       	R0 = R6 | R0;
 1004822:	a1 e5 03 00 	R1 = B[P4 + 0x3] (X);
 1004826:	a2 e5 04 00 	R2 = B[P4 + 0x4] (X);
 100482a:	03 08       	CC = R3 == R0;
 100482c:	1a 14       	IF !CC JUMP 0x1004860 <_gatt_client_att_packet_handler+0x638> (BP);
 100482e:	52 43       	R2 = R2.B (Z);
 1004830:	42 4f       	R2 <<= 0x8;
 1004832:	49 43       	R1 = R1.B (Z);
 1004834:	68 e4 20 00 	R0 = W[P5 + 0x40] (Z);
 1004838:	51 56       	R1 = R1 | R2;
 100483a:	08 08       	CC = R0 == R1;
 100483c:	12 14       	IF !CC JUMP 0x1004860 <_gatt_client_att_packet_handler+0x638> (BP);
 100483e:	29 e4 11 00 	R1 = [P5 + 0x44];
 1004842:	01 50       	R0 = R1 + R0;
 1004844:	4c 30       	R1 = P4;
 1004846:	fa 42       	R2 = R7.L (Z);
 1004848:	29 64       	R1 += 0x5;		/* (  5) */
 100484a:	da 67       	R2 += -0x5;		/* ( -5) */
 100484c:	00 e3 1e 5a 	CALL 0x100fc88 <_memcmp>;
 1004850:	00 0c       	CC = R0 == 0x0;
 1004852:	07 10       	IF !CC JUMP 0x1004860 <_gatt_client_att_packet_handler+0x638>;
 1004854:	45 30       	R0 = P5;
 1004856:	b9 60       	R1 = 0x17 (X);		/*		R1=0x17( 23) */
 1004858:	ca 60       	R2 = 0x19 (X);		/*		R2=0x19( 25) */
 100485a:	ff e3 5f fa 	CALL 0x1003d18 <_trigger_next_prepare_write_query>;
 100485e:	38 20       	JUMP.S 0x10048ce <_gatt_client_att_packet_handler+0x6a6>;
 1004860:	d8 60       	R0 = 0x1b (X);		/*		R0=0x1b( 27) */
 1004862:	a8 b0       	[P5 + 0x8] = R0;
 1004864:	35 20       	JUMP.S 0x10048ce <_gatt_client_att_packet_handler+0x6a6>;
 1004866:	a8 a0       	R0 = [P5 + 0x8];
 1004868:	e1 60       	R1 = 0x1c (X);		/*		R1=0x1c( 28) */
 100486a:	08 08       	CC = R0 == R1;
 100486c:	23 18       	IF CC JUMP 0x10048b2 <_gatt_client_att_packet_handler+0x68a>;
 100486e:	52 61       	R2 = 0x2a (X);		/*		R2=0x2a( 42) */
 1004870:	10 08       	CC = R0 == R2;
 1004872:	20 18       	IF CC JUMP 0x10048b2 <_gatt_client_att_packet_handler+0x68a>;
 1004874:	d1 60       	R1 = 0x1a (X);		/*		R1=0x1a( 26) */
 1004876:	08 08       	CC = R0 == R1;
 1004878:	2b 14       	IF !CC JUMP 0x10048ce <_gatt_client_att_packet_handler+0x6a6> (BP);
 100487a:	1c 20       	JUMP.S 0x10048b2 <_gatt_client_att_packet_handler+0x68a>;
 100487c:	a1 e5 04 00 	R1 = B[P4 + 0x4] (X);
 1004880:	48 43       	R0 = R1.B (Z);
 1004882:	52 60       	R2 = 0xa (X);		/*		R2=0xa( 10) */
 1004884:	10 08       	CC = R0 == R2;
 1004886:	21 14       	IF !CC JUMP 0x10048c8 <_gatt_client_att_packet_handler+0x6a0> (BP);
 1004888:	a9 a0       	R1 = [P5 + 0x8];
 100488a:	60 60       	R0 = 0xc (X);		/*		R0=0xc( 12) */
 100488c:	01 0a       	CC = R1 <= R0 (IU);
 100488e:	1a 14       	IF !CC JUMP 0x10048c2 <_gatt_client_att_packet_handler+0x69a> (BP);
 1004890:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1004892:	88 40       	R0 <<= R1;
 1004894:	21 e1 14 14 	R1 = 0x1414 (X);		/*		R1=0x1414(5140) */
 1004898:	48 54       	R1 = R0 & R1;
 100489a:	01 0c       	CC = R1 == 0x0;
 100489c:	0b 14       	IF !CC JUMP 0x10048b2 <_gatt_client_att_packet_handler+0x68a> (BP);
 100489e:	21 e1 40 01 	R1 = 0x140 (X);		/*		R1=0x140(320) */
 10048a2:	08 54       	R0 = R0 & R1;
 10048a4:	00 0c       	CC = R0 == 0x0;
 10048a6:	0e 1c       	IF CC JUMP 0x10048c2 <_gatt_client_att_packet_handler+0x69a> (BP);
 10048a8:	69 e5 1a 00 	R1 = W[P5 + 0x34] (X);
 10048ac:	45 30       	R0 = P5;
 10048ae:	ff e3 57 f8 	CALL 0x100395c <_characteristic_end_found>;
 10048b2:	45 30       	R0 = P5;
 10048b4:	ff e3 88 f8 	CALL 0x10039c4 <_gatt_client_handle_transaction_complete>;
 10048b8:	45 30       	R0 = P5;
 10048ba:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10048bc:	ff e3 04 f8 	CALL 0x10038c4 <_emit_gatt_complete_event>;
 10048c0:	07 20       	JUMP.S 0x10048ce <_gatt_client_att_packet_handler+0x6a6>;
 10048c2:	45 30       	R0 = P5;
 10048c4:	51 60       	R1 = 0xa (X);		/*		R1=0xa( 10) */
 10048c6:	02 20       	JUMP.S 0x10048ca <_gatt_client_att_packet_handler+0x6a2>;
 10048c8:	45 30       	R0 = P5;
 10048ca:	ff e3 8b f8 	CALL 0x10039e0 <_gatt_client_report_error_if_pending>;
 10048ce:	ff e3 d9 fa 	CALL 0x1003e80 <_gatt_client_run>;
 10048d2:	01 e8 00 00 	UNLINK;
 10048d6:	a3 05       	(R7:4, P5:3) = [SP++];
 10048d8:	10 00       	RTS;
	...

010048dc <_gatt_client_register_packet_handler>:
 10048dc:	fd 05       	[--SP] = (R7:7, P5:5);
 10048de:	00 0c       	CC = R0 == 0x0;
 10048e0:	38 30       	R7 = R0;
 10048e2:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000001(16777217) */
 10048e6:	00 e1 84 37 	R0.L = 0x3784;		/* (14212)	R0=0x1003784 <_dummy_notify>(16791428) */
 10048ea:	38 07       	IF CC R7 = R0;
 10048ec:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10048f0:	ff e3 06 f7 	CALL 0x10036fc <_btstack_memory_gatt_subclient_get>;
 10048f4:	28 32       	P5 = R0;
 10048f6:	45 0c       	CC = P5 == 0x0;
 10048f8:	1f 18       	IF CC JUMP 0x1004936 <_gatt_client_register_packet_handler+0x5a>;
 10048fa:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0xff78 */
 10048fe:	0a e1 d0 21 	P2.L = 0x21d0;		/* (8656)	P2=0x21d0 <_gatt_client_id> */
 1004902:	82 e1 ff ff 	R2 = 0xffff (Z);		/*		R2=0xffff(65535) */
 1004906:	10 95       	R0 = W[P2] (Z);
 1004908:	c1 42       	R1 = R0.L (Z);
 100490a:	11 08       	CC = R1 == R2;
 100490c:	03 18       	IF CC JUMP 0x1004912 <_gatt_client_register_packet_handler+0x36>;
 100490e:	08 64       	R0 += 0x1;		/* (  1) */
 1004910:	02 20       	JUMP.S 0x1004914 <_gatt_client_register_packet_handler+0x38>;
 1004912:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1004914:	10 97       	W[P2] = R0;
 1004916:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21d0 <_gatt_client_id> */
 100491a:	0a e1 d0 21 	P2.L = 0x21d0;		/* (8656)	P2=0x21d0 <_gatt_client_id> */
 100491e:	10 95       	R0 = W[P2] (Z);
 1004920:	28 b5       	W[P5 + 0x8] = R0;
 1004922:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x1(  1) */
 1004926:	00 e1 cc 21 	R0.L = 0x21cc;		/* (8652)	R0=0x21cc <_gatt_subclients>(8652) */
 100492a:	ef b0       	[P5 + 0xc] = R7;
 100492c:	4d 30       	R1 = P5;
 100492e:	00 e3 b7 16 	CALL 0x100769c <_linked_list_add>;
 1004932:	28 a9       	R0 = W[P5 + 0x8] (X);
 1004934:	02 20       	JUMP.S 0x1004938 <_gatt_client_register_packet_handler+0x5c>;
 1004936:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1004938:	01 e8 00 00 	UNLINK;
 100493c:	bd 05       	(R7:7, P5:5) = [SP++];
 100493e:	10 00       	RTS;

01004940 <_gatt_client_unregister_packet_handler>:
 1004940:	f5 05       	[--SP] = (R7:6, P5:5);
 1004942:	00 e8 06 00 	LINK 0x18;		/* (24) */
 1004946:	7f 30       	R7 = FP;
 1004948:	30 30       	R6 = R0;
 100494a:	a7 67       	R7 += -0xc;		/* (-12) */
 100494c:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0xa( 10) */
 1004950:	07 30       	R0 = R7;
 1004952:	01 e1 cc 21 	R1.L = 0x21cc;		/* (8652)	R1=0x21cc <_gatt_subclients>(8652) */
 1004956:	00 e3 f7 16 	CALL 0x1007744 <_linked_list_iterator_init>;
 100495a:	f6 42       	R6 = R6.L (Z);
 100495c:	12 20       	JUMP.S 0x1004980 <_gatt_client_unregister_packet_handler+0x40>;
 100495e:	07 30       	R0 = R7;
 1004960:	00 e3 16 17 	CALL 0x100778c <_linked_list_iterator_next>;
 1004964:	28 32       	P5 = R0;
 1004966:	28 a5       	R0 = W[P5 + 0x8] (Z);
 1004968:	30 08       	CC = R0 == R6;
 100496a:	0b 14       	IF !CC JUMP 0x1004980 <_gatt_client_unregister_packet_handler+0x40> (BP);
 100496c:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x0 <data_addr>(  0) */
 1004970:	00 e1 cc 21 	R0.L = 0x21cc;		/* (8652)	R0=0x21cc <_gatt_subclients>(8652) */
 1004974:	4d 30       	R1 = P5;
 1004976:	00 e3 b5 16 	CALL 0x10076e0 <_linked_list_remove>;
 100497a:	45 30       	R0 = P5;
 100497c:	ff e3 ca f6 	CALL 0x1003710 <_btstack_memory_gatt_subclient_free>;
 1004980:	07 30       	R0 = R7;
 1004982:	00 e3 ed 16 	CALL 0x100775c <_linked_list_iterator_has_next>;
 1004986:	00 0c       	CC = R0 == 0x0;
 1004988:	eb 17       	IF !CC JUMP 0x100495e <_gatt_client_unregister_packet_handler+0x1e> (BP);
 100498a:	01 e8 00 00 	UNLINK;
 100498e:	b5 05       	(R7:6, P5:5) = [SP++];
 1004990:	10 00       	RTS;
	...

01004994 <_gatt_client_init>:
 1004994:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21d0 <_gatt_client_id> */
 1004998:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100499c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100499e:	0a e1 2c 00 	P2.L = 0x2c;		/* ( 44)	P2=0x2c <_att_client_start_handle> */
 10049a2:	10 97       	W[P2] = R0;
 10049a4:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2c <_att_client_start_handle> */
 10049a8:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10049aa:	0a e1 c8 21 	P2.L = 0x21c8;		/* (8648)	P2=0x21c8 <_gatt_client_connections> */
 10049ae:	10 93       	[P2] = R0;
 10049b0:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 10049b4:	00 e1 28 42 	R0.L = 0x4228;		/* (16936)	R0=0x1004228 <_gatt_client_att_packet_handler>(16794152) */
 10049b8:	01 e8 00 00 	UNLINK;
 10049bc:	ff e2 56 f0 	JUMP.L 0x1002a68 <_att_dispatch_register_client>;

010049c0 <_gatt_client_is_ready>:
 10049c0:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10049c4:	ff e3 20 f7 	CALL 0x1003804 <_provide_context_for_conn_handle>;
 10049c8:	10 32       	P2 = R0;
 10049ca:	42 0c       	CC = P2 == 0x0;
 10049cc:	05 1c       	IF CC JUMP 0x10049d6 <_gatt_client_is_ready+0x16> (BP);
 10049ce:	90 a0       	R0 = [P2 + 0x8];
 10049d0:	00 0c       	CC = R0 == 0x0;
 10049d2:	00 02       	R0 = CC;
 10049d4:	02 20       	JUMP.S 0x10049d8 <_gatt_client_is_ready+0x18>;
 10049d6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10049d8:	01 e8 00 00 	UNLINK;
 10049dc:	10 00       	RTS;
	...

010049e0 <_gatt_client_get_mtu>:
 10049e0:	c5 04       	[--SP] = (P5:5);
 10049e2:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10049e6:	29 32       	P5 = R1;
 10049e8:	ff e3 0e f7 	CALL 0x1003804 <_provide_context_for_conn_handle>;
 10049ec:	10 32       	P2 = R0;
 10049ee:	42 0c       	CC = P2 == 0x0;
 10049f0:	09 1c       	IF CC JUMP 0x1004a02 <_gatt_client_get_mtu+0x22> (BP);
 10049f2:	d0 a1       	R0 = [P2 + 0x1c];
 10049f4:	10 0c       	CC = R0 == 0x2;
 10049f6:	06 14       	IF !CC JUMP 0x1004a02 <_gatt_client_get_mtu+0x22> (BP);
 10049f8:	10 ab       	R0 = W[P2 + 0x18] (X);
 10049fa:	28 97       	W[P5] = R0;
 10049fc:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004a00:	05 20       	JUMP.S 0x1004a0a <_gatt_client_get_mtu+0x2a>;
 1004a02:	b8 60       	R0 = 0x17 (X);		/*		R0=0x17( 23) */
 1004a04:	28 97       	W[P5] = R0;
 1004a06:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004a0a:	01 e8 00 00 	UNLINK;
 1004a0e:	85 04       	(P5:5) = [SP++];
 1004a10:	10 00       	RTS;
	...

01004a14 <_gatt_client_signed_write_without_response>:
 1004a14:	ed 05       	[--SP] = (R7:5, P5:5);
 1004a16:	28 30       	R5 = R0;
 1004a18:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1004a1c:	39 30       	R7 = R1;
 1004a1e:	32 30       	R6 = R2;
 1004a20:	01 30       	R0 = R1;
 1004a22:	ff e3 f1 f6 	CALL 0x1003804 <_provide_context_for_conn_handle>;
 1004a26:	28 32       	P5 = R0;
 1004a28:	a8 a0       	R0 = [P5 + 0x8];
 1004a2a:	00 0c       	CC = R0 == 0x0;
 1004a2c:	19 14       	IF !CC JUMP 0x1004a5e <_gatt_client_signed_write_without_response+0x4a> (BP);
 1004a2e:	07 30       	R0 = R7;
 1004a30:	00 e3 12 29 	CALL 0x1009c54 <_sm_le_device_index>;
 1004a34:	28 e6 14 00 	[P5 + 0x50] = R0;
 1004a38:	80 0c       	CC = R0 < 0x0;
 1004a3a:	12 18       	IF CC JUMP 0x1004a5e <_gatt_client_signed_write_without_response+0x4a>;
 1004a3c:	ad b5       	W[P5 + 0xc] = R5;
 1004a3e:	6e e6 1f 00 	W[P5 + 0x3e] = R6;
 1004a42:	78 e5 12 00 	R0 = W[FP + 0x24] (X);
 1004a46:	68 e6 21 00 	W[P5 + 0x42] = R0;
 1004a4a:	b8 a2       	R0 = [FP + 0x28];
 1004a4c:	28 e6 11 00 	[P5 + 0x44] = R0;
 1004a50:	58 61       	R0 = 0x2b (X);		/*		R0=0x2b( 43) */
 1004a52:	a8 b0       	[P5 + 0x8] = R0;
 1004a54:	ff e3 16 fa 	CALL 0x1003e80 <_gatt_client_run>;
 1004a58:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004a5c:	03 20       	JUMP.S 0x1004a62 <_gatt_client_signed_write_without_response+0x4e>;
 1004a5e:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004a62:	01 e8 00 00 	UNLINK;
 1004a66:	ad 05       	(R7:5, P5:5) = [SP++];
 1004a68:	10 00       	RTS;
	...

01004a6c <_gatt_client_discover_primary_services>:
 1004a6c:	78 05       	[--SP] = (R7:7);
 1004a6e:	38 30       	R7 = R0;
 1004a70:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1004a74:	01 30       	R0 = R1;
 1004a76:	ff e3 e7 f6 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1004a7a:	10 32       	P2 = R0;
 1004a7c:	42 0c       	CC = P2 == 0x0;
 1004a7e:	15 1c       	IF CC JUMP 0x1004aa8 <_gatt_client_discover_primary_services+0x3c> (BP);
 1004a80:	90 a0       	R0 = [P2 + 0x8];
 1004a82:	00 0c       	CC = R0 == 0x0;
 1004a84:	15 14       	IF !CC JUMP 0x1004aae <_gatt_client_discover_primary_services+0x42> (BP);
 1004a86:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1004a88:	50 e6 19 00 	W[P2 + 0x32] = R0;
 1004a8c:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 1004a8e:	50 e6 1a 00 	W[P2 + 0x34] = R0;
 1004a92:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1004a94:	90 b0       	[P2 + 0x8] = R0;
 1004a96:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1004a98:	50 e6 10 00 	W[P2 + 0x20] = R0;
 1004a9c:	97 b5       	W[P2 + 0xc] = R7;
 1004a9e:	ff e3 f1 f9 	CALL 0x1003e80 <_gatt_client_run>;
 1004aa2:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004aa6:	06 20       	JUMP.S 0x1004ab2 <_gatt_client_discover_primary_services+0x46>;
 1004aa8:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1004aac:	03 20       	JUMP.S 0x1004ab2 <_gatt_client_discover_primary_services+0x46>;
 1004aae:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004ab2:	01 e8 00 00 	UNLINK;
 1004ab6:	38 05       	(R7:7) = [SP++];
 1004ab8:	10 00       	RTS;
	...

01004abc <_gatt_client_discover_primary_services_by_uuid16>:
 1004abc:	70 05       	[--SP] = (R7:6);
 1004abe:	30 30       	R6 = R0;
 1004ac0:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1004ac4:	01 30       	R0 = R1;
 1004ac6:	3a 30       	R7 = R2;
 1004ac8:	ff e3 be f6 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1004acc:	10 32       	P2 = R0;
 1004ace:	42 0c       	CC = P2 == 0x0;
 1004ad0:	19 1c       	IF CC JUMP 0x1004b02 <_gatt_client_discover_primary_services_by_uuid16+0x46> (BP);
 1004ad2:	90 a0       	R0 = [P2 + 0x8];
 1004ad4:	00 0c       	CC = R0 == 0x0;
 1004ad6:	19 14       	IF !CC JUMP 0x1004b08 <_gatt_client_discover_primary_services_by_uuid16+0x4c> (BP);
 1004ad8:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1004ada:	50 e6 19 00 	W[P2 + 0x32] = R0;
 1004ade:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 1004ae0:	50 e6 1a 00 	W[P2 + 0x34] = R0;
 1004ae4:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 1004ae6:	90 b0       	[P2 + 0x8] = R0;
 1004ae8:	42 30       	R0 = P2;
 1004aea:	96 b5       	W[P2 + 0xc] = R6;
 1004aec:	57 e6 10 00 	W[P2 + 0x20] = R7;
 1004af0:	f9 42       	R1 = R7.L (Z);
 1004af2:	10 65       	R0 += 0x22;		/* ( 34) */
 1004af4:	ff e3 18 e1 	CALL 0x1000d24 <_sdp_normalize_uuid>;
 1004af8:	ff e3 c4 f9 	CALL 0x1003e80 <_gatt_client_run>;
 1004afc:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004b00:	06 20       	JUMP.S 0x1004b0c <_gatt_client_discover_primary_services_by_uuid16+0x50>;
 1004b02:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1004b06:	03 20       	JUMP.S 0x1004b0c <_gatt_client_discover_primary_services_by_uuid16+0x50>;
 1004b08:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004b0c:	01 e8 00 00 	UNLINK;
 1004b10:	30 05       	(R7:6) = [SP++];
 1004b12:	10 00       	RTS;

01004b14 <_gatt_client_discover_primary_services_by_uuid128>:
 1004b14:	f5 05       	[--SP] = (R7:6, P5:5);
 1004b16:	30 30       	R6 = R0;
 1004b18:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1004b1c:	01 30       	R0 = R1;
 1004b1e:	3a 30       	R7 = R2;
 1004b20:	ff e3 92 f6 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1004b24:	28 32       	P5 = R0;
 1004b26:	45 0c       	CC = P5 == 0x0;
 1004b28:	1b 1c       	IF CC JUMP 0x1004b5e <_gatt_client_discover_primary_services_by_uuid128+0x4a> (BP);
 1004b2a:	a8 a0       	R0 = [P5 + 0x8];
 1004b2c:	00 0c       	CC = R0 == 0x0;
 1004b2e:	1b 14       	IF !CC JUMP 0x1004b64 <_gatt_client_discover_primary_services_by_uuid128+0x50> (BP);
 1004b30:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1004b32:	68 e6 19 00 	W[P5 + 0x32] = R0;
 1004b36:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 1004b38:	68 e6 1a 00 	W[P5 + 0x34] = R0;
 1004b3c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1004b3e:	68 e6 10 00 	W[P5 + 0x20] = R0;
 1004b42:	45 30       	R0 = P5;
 1004b44:	0f 30       	R1 = R7;
 1004b46:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1004b48:	ae b5       	W[P5 + 0xc] = R6;
 1004b4a:	10 65       	R0 += 0x22;		/* ( 34) */
 1004b4c:	00 e3 dc 58 	CALL 0x100fd04 <_memcpy>;
 1004b50:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 1004b52:	a8 b0       	[P5 + 0x8] = R0;
 1004b54:	ff e3 96 f9 	CALL 0x1003e80 <_gatt_client_run>;
 1004b58:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004b5c:	06 20       	JUMP.S 0x1004b68 <_gatt_client_discover_primary_services_by_uuid128+0x54>;
 1004b5e:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1004b62:	03 20       	JUMP.S 0x1004b68 <_gatt_client_discover_primary_services_by_uuid128+0x54>;
 1004b64:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004b68:	01 e8 00 00 	UNLINK;
 1004b6c:	b5 05       	(R7:6, P5:5) = [SP++];
 1004b6e:	10 00       	RTS;

01004b70 <_gatt_client_discover_characteristics_for_service>:
 1004b70:	fd 05       	[--SP] = (R7:7, P5:5);
 1004b72:	38 30       	R7 = R0;
 1004b74:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1004b78:	01 30       	R0 = R1;
 1004b7a:	2a 32       	P5 = R2;
 1004b7c:	ff e3 64 f6 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1004b80:	10 32       	P2 = R0;
 1004b82:	42 0c       	CC = P2 == 0x0;
 1004b84:	18 1c       	IF CC JUMP 0x1004bb4 <_gatt_client_discover_characteristics_for_service+0x44> (BP);
 1004b86:	90 a0       	R0 = [P2 + 0x8];
 1004b88:	00 0c       	CC = R0 == 0x0;
 1004b8a:	18 14       	IF !CC JUMP 0x1004bba <_gatt_client_discover_characteristics_for_service+0x4a> (BP);
 1004b8c:	28 95       	R0 = W[P5] (Z);
 1004b8e:	50 e6 19 00 	W[P2 + 0x32] = R0;
 1004b92:	68 a8       	R0 = W[P5 + 0x2] (X);
 1004b94:	50 e6 1a 00 	W[P2 + 0x34] = R0;
 1004b98:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1004b9a:	90 e6 4c 00 	B[P2 + 0x4c] = R0;
 1004b9e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1004ba0:	50 e6 1e 00 	W[P2 + 0x3c] = R0;
 1004ba4:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 1004ba6:	90 b0       	[P2 + 0x8] = R0;
 1004ba8:	97 b5       	W[P2 + 0xc] = R7;
 1004baa:	ff e3 6b f9 	CALL 0x1003e80 <_gatt_client_run>;
 1004bae:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004bb2:	06 20       	JUMP.S 0x1004bbe <_gatt_client_discover_characteristics_for_service+0x4e>;
 1004bb4:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1004bb8:	03 20       	JUMP.S 0x1004bbe <_gatt_client_discover_characteristics_for_service+0x4e>;
 1004bba:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004bbe:	01 e8 00 00 	UNLINK;
 1004bc2:	bd 05       	(R7:7, P5:5) = [SP++];
 1004bc4:	10 00       	RTS;
	...

01004bc8 <_gatt_client_find_included_services_for_service>:
 1004bc8:	fd 05       	[--SP] = (R7:7, P5:5);
 1004bca:	38 30       	R7 = R0;
 1004bcc:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1004bd0:	01 30       	R0 = R1;
 1004bd2:	2a 32       	P5 = R2;
 1004bd4:	ff e3 38 f6 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1004bd8:	10 32       	P2 = R0;
 1004bda:	42 0c       	CC = P2 == 0x0;
 1004bdc:	12 1c       	IF CC JUMP 0x1004c00 <_gatt_client_find_included_services_for_service+0x38> (BP);
 1004bde:	90 a0       	R0 = [P2 + 0x8];
 1004be0:	00 0c       	CC = R0 == 0x0;
 1004be2:	12 14       	IF !CC JUMP 0x1004c06 <_gatt_client_find_included_services_for_service+0x3e> (BP);
 1004be4:	28 95       	R0 = W[P5] (Z);
 1004be6:	50 e6 19 00 	W[P2 + 0x32] = R0;
 1004bea:	68 a8       	R0 = W[P5 + 0x2] (X);
 1004bec:	50 e6 1a 00 	W[P2 + 0x34] = R0;
 1004bf0:	58 60       	R0 = 0xb (X);		/*		R0=0xb( 11) */
 1004bf2:	90 b0       	[P2 + 0x8] = R0;
 1004bf4:	97 b5       	W[P2 + 0xc] = R7;
 1004bf6:	ff e3 45 f9 	CALL 0x1003e80 <_gatt_client_run>;
 1004bfa:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004bfe:	06 20       	JUMP.S 0x1004c0a <_gatt_client_find_included_services_for_service+0x42>;
 1004c00:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1004c04:	03 20       	JUMP.S 0x1004c0a <_gatt_client_find_included_services_for_service+0x42>;
 1004c06:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004c0a:	01 e8 00 00 	UNLINK;
 1004c0e:	bd 05       	(R7:7, P5:5) = [SP++];
 1004c10:	10 00       	RTS;
	...

01004c14 <_gatt_client_discover_characteristics_for_handle_range_by_uuid16>:
 1004c14:	ed 05       	[--SP] = (R7:5, P5:5);
 1004c16:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1004c1a:	28 30       	R5 = R0;
 1004c1c:	01 30       	R0 = R1;
 1004c1e:	32 30       	R6 = R2;
 1004c20:	7f e5 14 00 	R7 = W[FP + 0x28] (X);
 1004c24:	ff e3 10 f6 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1004c28:	28 32       	P5 = R0;
 1004c2a:	45 0c       	CC = P5 == 0x0;
 1004c2c:	1f 1c       	IF CC JUMP 0x1004c6a <_gatt_client_discover_characteristics_for_handle_range_by_uuid16+0x56> (BP);
 1004c2e:	a8 a0       	R0 = [P5 + 0x8];
 1004c30:	00 0c       	CC = R0 == 0x0;
 1004c32:	1f 14       	IF !CC JUMP 0x1004c70 <_gatt_client_discover_characteristics_for_handle_range_by_uuid16+0x5c> (BP);
 1004c34:	78 e5 12 00 	R0 = W[FP + 0x24] (X);
 1004c38:	68 e6 1a 00 	W[P5 + 0x34] = R0;
 1004c3c:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1004c3e:	a8 e6 4c 00 	B[P5 + 0x4c] = R0;
 1004c42:	45 30       	R0 = P5;
 1004c44:	f9 42       	R1 = R7.L (Z);
 1004c46:	ad b5       	W[P5 + 0xc] = R5;
 1004c48:	6e e6 19 00 	W[P5 + 0x32] = R6;
 1004c4c:	6f e6 10 00 	W[P5 + 0x20] = R7;
 1004c50:	10 65       	R0 += 0x22;		/* ( 34) */
 1004c52:	ff e3 69 e0 	CALL 0x1000d24 <_sdp_normalize_uuid>;
 1004c56:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1004c58:	68 e6 1e 00 	W[P5 + 0x3c] = R0;
 1004c5c:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 1004c5e:	a8 b0       	[P5 + 0x8] = R0;
 1004c60:	ff e3 10 f9 	CALL 0x1003e80 <_gatt_client_run>;
 1004c64:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004c68:	06 20       	JUMP.S 0x1004c74 <_gatt_client_discover_characteristics_for_handle_range_by_uuid16+0x60>;
 1004c6a:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1004c6e:	03 20       	JUMP.S 0x1004c74 <_gatt_client_discover_characteristics_for_handle_range_by_uuid16+0x60>;
 1004c70:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004c74:	01 e8 00 00 	UNLINK;
 1004c78:	ad 05       	(R7:5, P5:5) = [SP++];
 1004c7a:	10 00       	RTS;

01004c7c <_gatt_client_discover_characteristics_for_handle_range_by_uuid128>:
 1004c7c:	f5 05       	[--SP] = (R7:6, P5:5);
 1004c7e:	30 30       	R6 = R0;
 1004c80:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1004c84:	01 30       	R0 = R1;
 1004c86:	3a 30       	R7 = R2;
 1004c88:	ff e3 de f5 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1004c8c:	28 32       	P5 = R0;
 1004c8e:	45 0c       	CC = P5 == 0x0;
 1004c90:	20 1c       	IF CC JUMP 0x1004cd0 <_gatt_client_discover_characteristics_for_handle_range_by_uuid128+0x54> (BP);
 1004c92:	a8 a0       	R0 = [P5 + 0x8];
 1004c94:	00 0c       	CC = R0 == 0x0;
 1004c96:	20 14       	IF !CC JUMP 0x1004cd6 <_gatt_client_discover_characteristics_for_handle_range_by_uuid128+0x5a> (BP);
 1004c98:	78 e5 10 00 	R0 = W[FP + 0x20] (X);
 1004c9c:	68 e6 1a 00 	W[P5 + 0x34] = R0;
 1004ca0:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1004ca2:	a8 e6 4c 00 	B[P5 + 0x4c] = R0;
 1004ca6:	6f e6 19 00 	W[P5 + 0x32] = R7;
 1004caa:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 1004cac:	45 30       	R0 = P5;
 1004cae:	79 a2       	R1 = [FP + 0x24];
 1004cb0:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1004cb2:	ae b5       	W[P5 + 0xc] = R6;
 1004cb4:	6f e6 10 00 	W[P5 + 0x20] = R7;
 1004cb8:	10 65       	R0 += 0x22;		/* ( 34) */
 1004cba:	00 e3 25 58 	CALL 0x100fd04 <_memcpy>;
 1004cbe:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 1004cc0:	a8 b0       	[P5 + 0x8] = R0;
 1004cc2:	6f e6 1e 00 	W[P5 + 0x3c] = R7;
 1004cc6:	ff e3 dd f8 	CALL 0x1003e80 <_gatt_client_run>;
 1004cca:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004cce:	06 20       	JUMP.S 0x1004cda <_gatt_client_discover_characteristics_for_handle_range_by_uuid128+0x5e>;
 1004cd0:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1004cd4:	03 20       	JUMP.S 0x1004cda <_gatt_client_discover_characteristics_for_handle_range_by_uuid128+0x5e>;
 1004cd6:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004cda:	01 e8 00 00 	UNLINK;
 1004cde:	b5 05       	(R7:6, P5:5) = [SP++];
 1004ce0:	10 00       	RTS;
	...

01004ce4 <_gatt_client_discover_characteristics_for_service_by_uuid16>:
 1004ce4:	12 32       	P2 = R2;
 1004ce6:	00 e8 05 00 	LINK 0x14;		/* (20) */
 1004cea:	52 a8       	R2 = W[P2 + 0x2] (X);
 1004cec:	b2 b5       	W[SP + 0xc] = R2;
 1004cee:	ba aa       	R2 = W[FP + 0x14] (X);
 1004cf0:	32 b6       	W[SP + 0x10] = R2;
 1004cf2:	12 95       	R2 = W[P2] (Z);
 1004cf4:	ff e3 90 ff 	CALL 0x1004c14 <_gatt_client_discover_characteristics_for_handle_range_by_uuid16>;
 1004cf8:	01 e8 00 00 	UNLINK;
 1004cfc:	10 00       	RTS;
	...

01004d00 <_gatt_client_discover_characteristics_for_service_by_uuid128>:
 1004d00:	12 32       	P2 = R2;
 1004d02:	00 e8 05 00 	LINK 0x14;		/* (20) */
 1004d06:	52 a8       	R2 = W[P2 + 0x2] (X);
 1004d08:	b2 b5       	W[SP + 0xc] = R2;
 1004d0a:	7a a1       	R2 = [FP + 0x14];
 1004d0c:	32 b1       	[SP + 0x10] = R2;
 1004d0e:	12 95       	R2 = W[P2] (Z);
 1004d10:	ff e3 b6 ff 	CALL 0x1004c7c <_gatt_client_discover_characteristics_for_handle_range_by_uuid128>;
 1004d14:	01 e8 00 00 	UNLINK;
 1004d18:	10 00       	RTS;
	...

01004d1c <_gatt_client_discover_characteristic_descriptors>:
 1004d1c:	fd 05       	[--SP] = (R7:7, P5:5);
 1004d1e:	38 30       	R7 = R0;
 1004d20:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1004d24:	01 30       	R0 = R1;
 1004d26:	2a 32       	P5 = R2;
 1004d28:	ff e3 8e f5 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1004d2c:	10 32       	P2 = R0;
 1004d2e:	42 0c       	CC = P2 == 0x0;
 1004d30:	1c 1c       	IF CC JUMP 0x1004d68 <_gatt_client_discover_characteristic_descriptors+0x4c> (BP);
 1004d32:	90 a0       	R0 = [P2 + 0x8];
 1004d34:	00 0c       	CC = R0 == 0x0;
 1004d36:	1c 14       	IF !CC JUMP 0x1004d6e <_gatt_client_discover_characteristic_descriptors+0x52> (BP);
 1004d38:	69 a8       	R1 = W[P5 + 0x2] (X);
 1004d3a:	a8 a8       	R0 = W[P5 + 0x4] (X);
 1004d3c:	cb 42       	R3 = R1.L (Z);
 1004d3e:	c2 42       	R2 = R0.L (Z);
 1004d40:	13 08       	CC = R3 == R2;
 1004d42:	06 14       	IF !CC JUMP 0x1004d4e <_gatt_client_discover_characteristic_descriptors+0x32> (BP);
 1004d44:	42 30       	R0 = P2;
 1004d46:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1004d48:	ff e3 be f5 	CALL 0x10038c4 <_emit_gatt_complete_event>;
 1004d4c:	0b 20       	JUMP.S 0x1004d62 <_gatt_client_discover_characteristic_descriptors+0x46>;
 1004d4e:	50 e6 1a 00 	W[P2 + 0x34] = R0;
 1004d52:	09 64       	R1 += 0x1;		/* (  1) */
 1004d54:	48 60       	R0 = 0x9 (X);		/*		R0=0x9(  9) */
 1004d56:	97 b5       	W[P2 + 0xc] = R7;
 1004d58:	51 e6 19 00 	W[P2 + 0x32] = R1;
 1004d5c:	90 b0       	[P2 + 0x8] = R0;
 1004d5e:	ff e3 91 f8 	CALL 0x1003e80 <_gatt_client_run>;
 1004d62:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004d66:	06 20       	JUMP.S 0x1004d72 <_gatt_client_discover_characteristic_descriptors+0x56>;
 1004d68:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1004d6c:	03 20       	JUMP.S 0x1004d72 <_gatt_client_discover_characteristic_descriptors+0x56>;
 1004d6e:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004d72:	01 e8 00 00 	UNLINK;
 1004d76:	bd 05       	(R7:7, P5:5) = [SP++];
 1004d78:	10 00       	RTS;
	...

01004d7c <_gatt_client_read_value_of_characteristic_using_value_handle>:
 1004d7c:	70 05       	[--SP] = (R7:6);
 1004d7e:	30 30       	R6 = R0;
 1004d80:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1004d84:	01 30       	R0 = R1;
 1004d86:	3a 30       	R7 = R2;
 1004d88:	ff e3 5e f5 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1004d8c:	10 32       	P2 = R0;
 1004d8e:	42 0c       	CC = P2 == 0x0;
 1004d90:	10 1c       	IF CC JUMP 0x1004db0 <_gatt_client_read_value_of_characteristic_using_value_handle+0x34> (BP);
 1004d92:	90 a0       	R0 = [P2 + 0x8];
 1004d94:	00 0c       	CC = R0 == 0x0;
 1004d96:	10 14       	IF !CC JUMP 0x1004db6 <_gatt_client_read_value_of_characteristic_using_value_handle+0x3a> (BP);
 1004d98:	50 e6 20 00 	W[P2 + 0x40] = R0;
 1004d9c:	78 60       	R0 = 0xf (X);		/*		R0=0xf( 15) */
 1004d9e:	90 b0       	[P2 + 0x8] = R0;
 1004da0:	96 b5       	W[P2 + 0xc] = R6;
 1004da2:	57 e6 1f 00 	W[P2 + 0x3e] = R7;
 1004da6:	ff e3 6d f8 	CALL 0x1003e80 <_gatt_client_run>;
 1004daa:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004dae:	06 20       	JUMP.S 0x1004dba <_gatt_client_read_value_of_characteristic_using_value_handle+0x3e>;
 1004db0:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1004db4:	03 20       	JUMP.S 0x1004dba <_gatt_client_read_value_of_characteristic_using_value_handle+0x3e>;
 1004db6:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004dba:	01 e8 00 00 	UNLINK;
 1004dbe:	30 05       	(R7:6) = [SP++];
 1004dc0:	10 00       	RTS;
	...

01004dc4 <_gatt_client_read_value_of_characteristic>:
 1004dc4:	12 32       	P2 = R2;
 1004dc6:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1004dca:	01 e8 00 00 	UNLINK;
 1004dce:	52 a8       	R2 = W[P2 + 0x2] (X);
 1004dd0:	ff e2 d6 ff 	JUMP.L 0x1004d7c <_gatt_client_read_value_of_characteristic_using_value_handle>;

01004dd4 <_gatt_client_read_long_value_of_characteristic_using_value_handle>:
 1004dd4:	70 05       	[--SP] = (R7:6);
 1004dd6:	30 30       	R6 = R0;
 1004dd8:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1004ddc:	01 30       	R0 = R1;
 1004dde:	3a 30       	R7 = R2;
 1004de0:	ff e3 32 f5 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1004de4:	10 32       	P2 = R0;
 1004de6:	42 0c       	CC = P2 == 0x0;
 1004de8:	10 1c       	IF CC JUMP 0x1004e08 <_gatt_client_read_long_value_of_characteristic_using_value_handle+0x34> (BP);
 1004dea:	90 a0       	R0 = [P2 + 0x8];
 1004dec:	00 0c       	CC = R0 == 0x0;
 1004dee:	10 14       	IF !CC JUMP 0x1004e0e <_gatt_client_read_long_value_of_characteristic_using_value_handle+0x3a> (BP);
 1004df0:	50 e6 20 00 	W[P2 + 0x40] = R0;
 1004df4:	88 60       	R0 = 0x11 (X);		/*		R0=0x11( 17) */
 1004df6:	90 b0       	[P2 + 0x8] = R0;
 1004df8:	96 b5       	W[P2 + 0xc] = R6;
 1004dfa:	57 e6 1f 00 	W[P2 + 0x3e] = R7;
 1004dfe:	ff e3 41 f8 	CALL 0x1003e80 <_gatt_client_run>;
 1004e02:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004e06:	06 20       	JUMP.S 0x1004e12 <_gatt_client_read_long_value_of_characteristic_using_value_handle+0x3e>;
 1004e08:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1004e0c:	03 20       	JUMP.S 0x1004e12 <_gatt_client_read_long_value_of_characteristic_using_value_handle+0x3e>;
 1004e0e:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004e12:	01 e8 00 00 	UNLINK;
 1004e16:	30 05       	(R7:6) = [SP++];
 1004e18:	10 00       	RTS;
	...

01004e1c <_gatt_client_read_long_value_of_characteristic>:
 1004e1c:	12 32       	P2 = R2;
 1004e1e:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1004e22:	01 e8 00 00 	UNLINK;
 1004e26:	52 a8       	R2 = W[P2 + 0x2] (X);
 1004e28:	ff e2 d6 ff 	JUMP.L 0x1004dd4 <_gatt_client_read_long_value_of_characteristic_using_value_handle>;

01004e2c <_gatt_client_write_value_of_characteristic_without_response>:
 1004e2c:	ed 05       	[--SP] = (R7:5, P5:5);
 1004e2e:	00 e8 05 00 	LINK 0x14;		/* (20) */
 1004e32:	30 30       	R6 = R0;
 1004e34:	01 30       	R0 = R1;
 1004e36:	2a 30       	R5 = R2;
 1004e38:	7f e5 12 00 	R7 = W[FP + 0x24] (X);
 1004e3c:	ff e3 e4 f4 	CALL 0x1003804 <_provide_context_for_conn_handle>;
 1004e40:	28 32       	P5 = R0;
 1004e42:	45 0c       	CC = P5 == 0x0;
 1004e44:	1f 1c       	IF CC JUMP 0x1004e82 <_gatt_client_write_value_of_characteristic_without_response+0x56> (BP);
 1004e46:	a8 a0       	R0 = [P5 + 0x8];
 1004e48:	00 0c       	CC = R0 == 0x0;
 1004e4a:	1f 14       	IF !CC JUMP 0x1004e88 <_gatt_client_write_value_of_characteristic_without_response+0x5c> (BP);
 1004e4c:	45 30       	R0 = P5;
 1004e4e:	c0 64       	R0 += 0x18;		/* ( 24) */
 1004e50:	ff e3 34 f7 	CALL 0x1003cb8 <_peripheral_mtu.clone.5>;
 1004e54:	c0 42       	R0 = R0.L (Z);
 1004e56:	f9 42       	R1 = R7.L (Z);
 1004e58:	e8 67       	R0 += -0x3;		/* ( -3) */
 1004e5a:	81 08       	CC = R1 < R0;
 1004e5c:	19 14       	IF !CC JUMP 0x1004e8e <_gatt_client_write_value_of_characteristic_without_response+0x62> (BP);
 1004e5e:	e8 a5       	R0 = W[P5 + 0xe] (Z);
 1004e60:	00 e3 ac 11 	CALL 0x10071b8 <_le_l2cap_can_send_fixed_channel_packet_now>;
 1004e64:	00 0c       	CC = R0 == 0x0;
 1004e66:	17 1c       	IF CC JUMP 0x1004e94 <_gatt_client_write_value_of_characteristic_without_response+0x68> (BP);
 1004e68:	ae b5       	W[P5 + 0xc] = R6;
 1004e6a:	e9 a9       	R1 = W[P5 + 0xe] (X);
 1004e6c:	b8 a2       	R0 = [FP + 0x28];
 1004e6e:	30 b1       	[SP + 0x10] = R0;
 1004e70:	20 e1 52 00 	R0 = 0x52 (X);		/*		R0=0x52( 82) */
 1004e74:	b7 b5       	W[SP + 0xc] = R7;
 1004e76:	15 30       	R2 = R5;
 1004e78:	ff e3 54 f6 	CALL 0x1003b20 <_att_write_request>;
 1004e7c:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004e80:	0c 20       	JUMP.S 0x1004e98 <_gatt_client_write_value_of_characteristic_without_response+0x6c>;
 1004e82:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1004e86:	09 20       	JUMP.S 0x1004e98 <_gatt_client_write_value_of_characteristic_without_response+0x6c>;
 1004e88:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004e8c:	06 20       	JUMP.S 0x1004e98 <_gatt_client_write_value_of_characteristic_without_response+0x6c>;
 1004e8e:	20 e1 a4 00 	R0 = 0xa4 (X);		/*		R0=0xa4(164) */
 1004e92:	03 20       	JUMP.S 0x1004e98 <_gatt_client_write_value_of_characteristic_without_response+0x6c>;
 1004e94:	20 e1 57 00 	R0 = 0x57 (X);		/*		R0=0x57( 87) */
 1004e98:	01 e8 00 00 	UNLINK;
 1004e9c:	ad 05       	(R7:5, P5:5) = [SP++];
 1004e9e:	10 00       	RTS;

01004ea0 <_gatt_client_write_value_of_characteristic>:
 1004ea0:	70 05       	[--SP] = (R7:6);
 1004ea2:	30 30       	R6 = R0;
 1004ea4:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1004ea8:	01 30       	R0 = R1;
 1004eaa:	3a 30       	R7 = R2;
 1004eac:	ff e3 cc f4 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1004eb0:	10 32       	P2 = R0;
 1004eb2:	42 0c       	CC = P2 == 0x0;
 1004eb4:	14 1c       	IF CC JUMP 0x1004edc <_gatt_client_write_value_of_characteristic+0x3c> (BP);
 1004eb6:	90 a0       	R0 = [P2 + 0x8];
 1004eb8:	00 0c       	CC = R0 == 0x0;
 1004eba:	14 14       	IF !CC JUMP 0x1004ee2 <_gatt_client_write_value_of_characteristic+0x42> (BP);
 1004ebc:	b8 ab       	R0 = W[FP + 0x1c] (X);
 1004ebe:	50 e6 21 00 	W[P2 + 0x42] = R0;
 1004ec2:	38 a2       	R0 = [FP + 0x20];
 1004ec4:	10 e6 11 00 	[P2 + 0x44] = R0;
 1004ec8:	98 60       	R0 = 0x13 (X);		/*		R0=0x13( 19) */
 1004eca:	90 b0       	[P2 + 0x8] = R0;
 1004ecc:	96 b5       	W[P2 + 0xc] = R6;
 1004ece:	57 e6 1f 00 	W[P2 + 0x3e] = R7;
 1004ed2:	ff e3 d7 f7 	CALL 0x1003e80 <_gatt_client_run>;
 1004ed6:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004eda:	06 20       	JUMP.S 0x1004ee6 <_gatt_client_write_value_of_characteristic+0x46>;
 1004edc:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1004ee0:	03 20       	JUMP.S 0x1004ee6 <_gatt_client_write_value_of_characteristic+0x46>;
 1004ee2:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004ee6:	01 e8 00 00 	UNLINK;
 1004eea:	30 05       	(R7:6) = [SP++];
 1004eec:	10 00       	RTS;
	...

01004ef0 <_gatt_client_write_long_value_of_characteristic>:
 1004ef0:	70 05       	[--SP] = (R7:6);
 1004ef2:	30 30       	R6 = R0;
 1004ef4:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1004ef8:	01 30       	R0 = R1;
 1004efa:	3a 30       	R7 = R2;
 1004efc:	ff e3 a4 f4 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1004f00:	10 32       	P2 = R0;
 1004f02:	42 0c       	CC = P2 == 0x0;
 1004f04:	17 1c       	IF CC JUMP 0x1004f32 <_gatt_client_write_long_value_of_characteristic+0x42> (BP);
 1004f06:	90 a0       	R0 = [P2 + 0x8];
 1004f08:	00 0c       	CC = R0 == 0x0;
 1004f0a:	17 14       	IF !CC JUMP 0x1004f38 <_gatt_client_write_long_value_of_characteristic+0x48> (BP);
 1004f0c:	b8 ab       	R0 = W[FP + 0x1c] (X);
 1004f0e:	50 e6 21 00 	W[P2 + 0x42] = R0;
 1004f12:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1004f14:	50 e6 20 00 	W[P2 + 0x40] = R0;
 1004f18:	38 a2       	R0 = [FP + 0x20];
 1004f1a:	10 e6 11 00 	[P2 + 0x44] = R0;
 1004f1e:	a8 60       	R0 = 0x15 (X);		/*		R0=0x15( 21) */
 1004f20:	90 b0       	[P2 + 0x8] = R0;
 1004f22:	96 b5       	W[P2 + 0xc] = R6;
 1004f24:	57 e6 1f 00 	W[P2 + 0x3e] = R7;
 1004f28:	ff e3 ac f7 	CALL 0x1003e80 <_gatt_client_run>;
 1004f2c:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004f30:	06 20       	JUMP.S 0x1004f3c <_gatt_client_write_long_value_of_characteristic+0x4c>;
 1004f32:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1004f36:	03 20       	JUMP.S 0x1004f3c <_gatt_client_write_long_value_of_characteristic+0x4c>;
 1004f38:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004f3c:	01 e8 00 00 	UNLINK;
 1004f40:	30 05       	(R7:6) = [SP++];
 1004f42:	10 00       	RTS;

01004f44 <_gatt_client_reliable_write_long_value_of_characteristic>:
 1004f44:	70 05       	[--SP] = (R7:6);
 1004f46:	30 30       	R6 = R0;
 1004f48:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1004f4c:	01 30       	R0 = R1;
 1004f4e:	3a 30       	R7 = R2;
 1004f50:	ff e3 7a f4 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1004f54:	10 32       	P2 = R0;
 1004f56:	42 0c       	CC = P2 == 0x0;
 1004f58:	17 1c       	IF CC JUMP 0x1004f86 <_gatt_client_reliable_write_long_value_of_characteristic+0x42> (BP);
 1004f5a:	90 a0       	R0 = [P2 + 0x8];
 1004f5c:	00 0c       	CC = R0 == 0x0;
 1004f5e:	17 14       	IF !CC JUMP 0x1004f8c <_gatt_client_reliable_write_long_value_of_characteristic+0x48> (BP);
 1004f60:	b8 ab       	R0 = W[FP + 0x1c] (X);
 1004f62:	50 e6 21 00 	W[P2 + 0x42] = R0;
 1004f66:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1004f68:	50 e6 20 00 	W[P2 + 0x40] = R0;
 1004f6c:	38 a2       	R0 = [FP + 0x20];
 1004f6e:	10 e6 11 00 	[P2 + 0x44] = R0;
 1004f72:	b8 60       	R0 = 0x17 (X);		/*		R0=0x17( 23) */
 1004f74:	90 b0       	[P2 + 0x8] = R0;
 1004f76:	96 b5       	W[P2 + 0xc] = R6;
 1004f78:	57 e6 1f 00 	W[P2 + 0x3e] = R7;
 1004f7c:	ff e3 82 f7 	CALL 0x1003e80 <_gatt_client_run>;
 1004f80:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004f84:	06 20       	JUMP.S 0x1004f90 <_gatt_client_reliable_write_long_value_of_characteristic+0x4c>;
 1004f86:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1004f8a:	03 20       	JUMP.S 0x1004f90 <_gatt_client_reliable_write_long_value_of_characteristic+0x4c>;
 1004f8c:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1004f90:	01 e8 00 00 	UNLINK;
 1004f94:	30 05       	(R7:6) = [SP++];
 1004f96:	10 00       	RTS;

01004f98 <_gatt_client_write_client_characteristic_configuration>:
 1004f98:	f4 05       	[--SP] = (R7:6, P5:4);
 1004f9a:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1004f9e:	30 30       	R6 = R0;
 1004fa0:	01 30       	R0 = R1;
 1004fa2:	22 32       	P4 = R2;
 1004fa4:	7f e5 12 00 	R7 = W[FP + 0x24] (X);
 1004fa8:	ff e3 4e f4 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1004fac:	28 32       	P5 = R0;
 1004fae:	45 0c       	CC = P5 == 0x0;
 1004fb0:	25 1c       	IF CC JUMP 0x1004ffa <_gatt_client_write_client_characteristic_configuration+0x62> (BP);
 1004fb2:	a8 a0       	R0 = [P5 + 0x8];
 1004fb4:	00 0c       	CC = R0 == 0x0;
 1004fb6:	25 10       	IF !CC JUMP 0x1005000 <_gatt_client_write_client_characteristic_configuration+0x68>;
 1004fb8:	f8 42       	R0 = R7.L (Z);
 1004fba:	00 48       	CC = !BITTST (R0, 0x0);		/* bit  0 */
 1004fbc:	04 1c       	IF CC JUMP 0x1004fc4 <_gatt_client_write_client_characteristic_configuration+0x2c> (BP);
 1004fbe:	e1 a4       	R1 = W[P4 + 0x6] (Z);
 1004fc0:	21 48       	CC = !BITTST (R1, 0x4);		/* bit  4 */
 1004fc2:	22 18       	IF CC JUMP 0x1005006 <_gatt_client_write_client_characteristic_configuration+0x6e>;
 1004fc4:	08 48       	CC = !BITTST (R0, 0x1);		/* bit  1 */
 1004fc6:	04 1c       	IF CC JUMP 0x1004fce <_gatt_client_write_client_characteristic_configuration+0x36> (BP);
 1004fc8:	e0 a4       	R0 = W[P4 + 0x6] (Z);
 1004fca:	28 48       	CC = !BITTST (R0, 0x5);		/* bit  5 */
 1004fcc:	20 18       	IF CC JUMP 0x100500c <_gatt_client_write_client_characteristic_configuration+0x74>;
 1004fce:	2a e1 4a 00 	P2 = 0x4a (X);		/*		P2=0x4a( 74) */
 1004fd2:	95 5a       	P2 = P5 + P2;
 1004fd4:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1004fd6:	60 a8       	R0 = W[P4 + 0x2] (X);
 1004fd8:	68 e6 19 00 	W[P5 + 0x32] = R0;
 1004fdc:	a0 a8       	R0 = W[P4 + 0x4] (X);
 1004fde:	68 e6 1a 00 	W[P5 + 0x34] = R0;
 1004fe2:	42 30       	R0 = P2;
 1004fe4:	17 30       	R2 = R7;
 1004fe6:	ae b5       	W[P5 + 0xc] = R6;
 1004fe8:	00 e3 f8 28 	CALL 0x100a1d8 <_bt_store_16>;
 1004fec:	e8 60       	R0 = 0x1d (X);		/*		R0=0x1d( 29) */
 1004fee:	a8 b0       	[P5 + 0x8] = R0;
 1004ff0:	ff e3 48 f7 	CALL 0x1003e80 <_gatt_client_run>;
 1004ff4:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1004ff8:	0c 20       	JUMP.S 0x1005010 <_gatt_client_write_client_characteristic_configuration+0x78>;
 1004ffa:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1004ffe:	09 20       	JUMP.S 0x1005010 <_gatt_client_write_client_characteristic_configuration+0x78>;
 1005000:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1005004:	06 20       	JUMP.S 0x1005010 <_gatt_client_write_client_characteristic_configuration+0x78>;
 1005006:	20 e1 a6 00 	R0 = 0xa6 (X);		/*		R0=0xa6(166) */
 100500a:	03 20       	JUMP.S 0x1005010 <_gatt_client_write_client_characteristic_configuration+0x78>;
 100500c:	20 e1 a7 00 	R0 = 0xa7 (X);		/*		R0=0xa7(167) */
 1005010:	01 e8 00 00 	UNLINK;
 1005014:	b4 05       	(R7:6, P5:4) = [SP++];
 1005016:	10 00       	RTS;

01005018 <_gatt_client_read_characteristic_descriptor>:
 1005018:	fc 05       	[--SP] = (R7:7, P5:4);
 100501a:	38 30       	R7 = R0;
 100501c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1005020:	01 30       	R0 = R1;
 1005022:	22 32       	P4 = R2;
 1005024:	ff e3 10 f4 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1005028:	28 32       	P5 = R0;
 100502a:	45 0c       	CC = P5 == 0x0;
 100502c:	1c 1c       	IF CC JUMP 0x1005064 <_gatt_client_read_characteristic_descriptor+0x4c> (BP);
 100502e:	a8 a0       	R0 = [P5 + 0x8];
 1005030:	00 0c       	CC = R0 == 0x0;
 1005032:	1c 14       	IF !CC JUMP 0x100506a <_gatt_client_read_characteristic_descriptor+0x52> (BP);
 1005034:	af b5       	W[P5 + 0xc] = R7;
 1005036:	20 95       	R0 = W[P4] (Z);
 1005038:	68 e6 1f 00 	W[P5 + 0x3e] = R0;
 100503c:	60 a8       	R0 = W[P4 + 0x2] (X);
 100503e:	68 e6 10 00 	W[P5 + 0x20] = R0;
 1005042:	c0 42       	R0 = R0.L (Z);
 1005044:	00 0c       	CC = R0 == 0x0;
 1005046:	08 14       	IF !CC JUMP 0x1005056 <_gatt_client_read_characteristic_descriptor+0x3e> (BP);
 1005048:	45 30       	R0 = P5;
 100504a:	4c 30       	R1 = P4;
 100504c:	10 65       	R0 += 0x22;		/* ( 34) */
 100504e:	21 64       	R1 += 0x4;		/* (  4) */
 1005050:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1005052:	00 e3 59 56 	CALL 0x100fd04 <_memcpy>;
 1005056:	08 61       	R0 = 0x21 (X);		/*		R0=0x21( 33) */
 1005058:	a8 b0       	[P5 + 0x8] = R0;
 100505a:	ff e3 13 f7 	CALL 0x1003e80 <_gatt_client_run>;
 100505e:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1005062:	06 20       	JUMP.S 0x100506e <_gatt_client_read_characteristic_descriptor+0x56>;
 1005064:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1005068:	03 20       	JUMP.S 0x100506e <_gatt_client_read_characteristic_descriptor+0x56>;
 100506a:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 100506e:	01 e8 00 00 	UNLINK;
 1005072:	bc 05       	(R7:7, P5:4) = [SP++];
 1005074:	10 00       	RTS;
	...

01005078 <_gatt_client_read_long_characteristic_descriptor>:
 1005078:	fd 05       	[--SP] = (R7:7, P5:5);
 100507a:	38 30       	R7 = R0;
 100507c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1005080:	01 30       	R0 = R1;
 1005082:	2a 32       	P5 = R2;
 1005084:	ff e3 e0 f3 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 1005088:	10 32       	P2 = R0;
 100508a:	42 0c       	CC = P2 == 0x0;
 100508c:	12 1c       	IF CC JUMP 0x10050b0 <_gatt_client_read_long_characteristic_descriptor+0x38> (BP);
 100508e:	90 a0       	R0 = [P2 + 0x8];
 1005090:	00 0c       	CC = R0 == 0x0;
 1005092:	12 14       	IF !CC JUMP 0x10050b6 <_gatt_client_read_long_characteristic_descriptor+0x3e> (BP);
 1005094:	28 95       	R0 = W[P5] (Z);
 1005096:	50 e6 1f 00 	W[P2 + 0x3e] = R0;
 100509a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100509c:	50 e6 20 00 	W[P2 + 0x40] = R0;
 10050a0:	18 61       	R0 = 0x23 (X);		/*		R0=0x23( 35) */
 10050a2:	90 b0       	[P2 + 0x8] = R0;
 10050a4:	97 b5       	W[P2 + 0xc] = R7;
 10050a6:	ff e3 ed f6 	CALL 0x1003e80 <_gatt_client_run>;
 10050aa:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 10050ae:	06 20       	JUMP.S 0x10050ba <_gatt_client_read_long_characteristic_descriptor+0x42>;
 10050b0:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 10050b4:	03 20       	JUMP.S 0x10050ba <_gatt_client_read_long_characteristic_descriptor+0x42>;
 10050b6:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 10050ba:	01 e8 00 00 	UNLINK;
 10050be:	bd 05       	(R7:7, P5:5) = [SP++];
 10050c0:	10 00       	RTS;
	...

010050c4 <_gatt_client_write_characteristic_descriptor>:
 10050c4:	fd 05       	[--SP] = (R7:7, P5:5);
 10050c6:	38 30       	R7 = R0;
 10050c8:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10050cc:	01 30       	R0 = R1;
 10050ce:	2a 32       	P5 = R2;
 10050d0:	ff e3 ba f3 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 10050d4:	10 32       	P2 = R0;
 10050d6:	42 0c       	CC = P2 == 0x0;
 10050d8:	18 1c       	IF CC JUMP 0x1005108 <_gatt_client_write_characteristic_descriptor+0x44> (BP);
 10050da:	90 a0       	R0 = [P2 + 0x8];
 10050dc:	00 0c       	CC = R0 == 0x0;
 10050de:	18 14       	IF !CC JUMP 0x100510e <_gatt_client_write_characteristic_descriptor+0x4a> (BP);
 10050e0:	28 95       	R0 = W[P5] (Z);
 10050e2:	50 e6 1f 00 	W[P2 + 0x3e] = R0;
 10050e6:	b8 ab       	R0 = W[FP + 0x1c] (X);
 10050e8:	50 e6 21 00 	W[P2 + 0x42] = R0;
 10050ec:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10050ee:	50 e6 20 00 	W[P2 + 0x40] = R0;
 10050f2:	38 a2       	R0 = [FP + 0x20];
 10050f4:	10 e6 11 00 	[P2 + 0x44] = R0;
 10050f8:	28 61       	R0 = 0x25 (X);		/*		R0=0x25( 37) */
 10050fa:	90 b0       	[P2 + 0x8] = R0;
 10050fc:	97 b5       	W[P2 + 0xc] = R7;
 10050fe:	ff e3 c1 f6 	CALL 0x1003e80 <_gatt_client_run>;
 1005102:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1005106:	06 20       	JUMP.S 0x1005112 <_gatt_client_write_characteristic_descriptor+0x4e>;
 1005108:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 100510c:	03 20       	JUMP.S 0x1005112 <_gatt_client_write_characteristic_descriptor+0x4e>;
 100510e:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 1005112:	01 e8 00 00 	UNLINK;
 1005116:	bd 05       	(R7:7, P5:5) = [SP++];
 1005118:	10 00       	RTS;
	...

0100511c <_gatt_client_write_long_characteristic_descriptor>:
 100511c:	fd 05       	[--SP] = (R7:7, P5:5);
 100511e:	38 30       	R7 = R0;
 1005120:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1005124:	01 30       	R0 = R1;
 1005126:	2a 32       	P5 = R2;
 1005128:	ff e3 8e f3 	CALL 0x1003844 <_provide_context_for_conn_handle_and_start_timer>;
 100512c:	10 32       	P2 = R0;
 100512e:	42 0c       	CC = P2 == 0x0;
 1005130:	18 1c       	IF CC JUMP 0x1005160 <_gatt_client_write_long_characteristic_descriptor+0x44> (BP);
 1005132:	90 a0       	R0 = [P2 + 0x8];
 1005134:	00 0c       	CC = R0 == 0x0;
 1005136:	18 14       	IF !CC JUMP 0x1005166 <_gatt_client_write_long_characteristic_descriptor+0x4a> (BP);
 1005138:	28 95       	R0 = W[P5] (Z);
 100513a:	50 e6 1f 00 	W[P2 + 0x3e] = R0;
 100513e:	b8 ab       	R0 = W[FP + 0x1c] (X);
 1005140:	50 e6 21 00 	W[P2 + 0x42] = R0;
 1005144:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1005146:	50 e6 20 00 	W[P2 + 0x40] = R0;
 100514a:	38 a2       	R0 = [FP + 0x20];
 100514c:	10 e6 11 00 	[P2 + 0x44] = R0;
 1005150:	38 61       	R0 = 0x27 (X);		/*		R0=0x27( 39) */
 1005152:	90 b0       	[P2 + 0x8] = R0;
 1005154:	97 b5       	W[P2 + 0xc] = R7;
 1005156:	ff e3 95 f6 	CALL 0x1003e80 <_gatt_client_run>;
 100515a:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 100515e:	06 20       	JUMP.S 0x100516a <_gatt_client_write_long_characteristic_descriptor+0x4e>;
 1005160:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1005164:	03 20       	JUMP.S 0x100516a <_gatt_client_write_long_characteristic_descriptor+0x4e>;
 1005166:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 100516a:	01 e8 00 00 	UNLINK;
 100516e:	bd 05       	(R7:7, P5:5) = [SP++];
 1005170:	10 00       	RTS;
 1005172:	00 00       	NOP;
 1005174:	61 74       	ILLEGAL;
 1005176:	74 5f       	P5 = P4 + (SP << 0x2);
 1005178:	72 65       	R2 += 0x2e;		/* ( 46) */
 100517a:	61 64       	R1 += 0xc;		/* ( 12) */
 100517c:	5f 72       	ILLEGAL;
 100517e:	65 71       	ILLEGAL;
 1005180:	75 65       	R5 += 0x2e;		/* ( 46) */
 1005182:	73 74       	ILLEGAL;
 1005184:	0a 00       	ILLEGAL;
 1005186:	00 00       	NOP;
 1005188:	2e 2e       	JUMP.S 0x1004de4 <_gatt_client_read_long_value_of_characteristic_using_value_handle+0x10>;
 100518a:	20 41       	R0 = (R0 + R4) << 0x1;
 100518c:	54 54       	R1 = R4 & R2;
 100518e:	5f 45       	FP += P3 (BREV);
 1005190:	52 52       	R1 = R2 - R2;
 1005192:	4f 52       	R1 = R7 - R1;
 1005194:	5f 49       	CC = BITTST (R7, 0xb);		/* bit 11 */
 1005196:	4e 56       	R1 = R6 | R1;
 1005198:	41 4c       	BITCLR (R1, 0x8);		/* bit  8 */
 100519a:	49 44       	P1 = P1 << 0x2;
 100519c:	5f 41       	R7 = (R7 + R3) << 0x2;
 100519e:	54 54       	R1 = R4 & R2;
 10051a0:	52 49       	CC = BITTST (R2, 0xa);		/* bit 10 */
 10051a2:	42 55       	R5 = R2 & R0;
 10051a4:	54 45       	P4 += P2 (BREV);
 10051a6:	5f 56       	R1 = R7 | R3;
 10051a8:	41 4c       	BITCLR (R1, 0x8);		/* bit  8 */
 10051aa:	55 45       	P5 += P2 (BREV);
 10051ac:	5f 4c       	BITCLR (R7, 0xb);		/* bit 11 */
 10051ae:	45 4e       	R5 >>= 0x8;
 10051b0:	47 54       	R1 = R7 & R0;
 10051b2:	48 20       	JUMP.S 0x1005242 <_gatt_client_write_long_characteristic_descriptor+0x126>;
 10051b4:	25 75       	ILLEGAL;
 10051b6:	20 3e       	RETX = R0;
 10051b8:	20 25       	JUMP.S 0x1005bf8 <_le_hci_send_cmd+0x18>;
 10051ba:	75 0a       	CC = P5 <= SP (IU);
 10051bc:	00 00       	NOP;
 10051be:	00 00       	NOP;
 10051c0:	66 3f       	ILLEGAL;
 10051c2:	00 01       	ILLEGAL;
 10051c4:	be 41       	ILLEGAL;
 10051c6:	00 01       	ILLEGAL;
 10051c8:	80 3f       	ILLEGAL;
 10051ca:	00 01       	ILLEGAL;
 10051cc:	be 41       	ILLEGAL;
 10051ce:	00 01       	ILLEGAL;
 10051d0:	ce 3f       	ILLEGAL;
 10051d2:	00 01       	ILLEGAL;
 10051d4:	be 41       	ILLEGAL;
 10051d6:	00 01       	ILLEGAL;
 10051d8:	ec 3f       	ILLEGAL;
 10051da:	00 01       	ILLEGAL;
 10051dc:	be 41       	ILLEGAL;
 10051de:	00 01       	ILLEGAL;
 10051e0:	f0 3f       	RETE = USP;
 10051e2:	00 01       	ILLEGAL;
 10051e4:	be 41       	ILLEGAL;
 10051e6:	00 01       	ILLEGAL;
 10051e8:	28 40       	R0 >>>= R5;
 10051ea:	00 01       	ILLEGAL;
 10051ec:	be 41       	ILLEGAL;
 10051ee:	00 01       	ILLEGAL;
 10051f0:	42 40       	R2 >>= R0;
 10051f2:	00 01       	ILLEGAL;
 10051f4:	be 41       	ILLEGAL;
 10051f6:	00 01       	ILLEGAL;
 10051f8:	4e 40       	R6 >>= R1;
 10051fa:	00 01       	ILLEGAL;
 10051fc:	be 41       	ILLEGAL;
 10051fe:	00 01       	ILLEGAL;
 1005200:	5e 40       	R6 >>= R3;
 1005202:	00 01       	ILLEGAL;
 1005204:	be 41       	ILLEGAL;
 1005206:	00 01       	ILLEGAL;
 1005208:	62 40       	R2 >>= R4;
 100520a:	00 01       	ILLEGAL;
 100520c:	be 41       	ILLEGAL;
 100520e:	00 01       	ILLEGAL;
 1005210:	66 40       	R6 >>= R4;
 1005212:	00 01       	ILLEGAL;
 1005214:	be 41       	ILLEGAL;
 1005216:	00 01       	ILLEGAL;
 1005218:	6a 40       	R2 >>= R5;
 100521a:	00 01       	ILLEGAL;
 100521c:	be 41       	ILLEGAL;
 100521e:	00 01       	ILLEGAL;
 1005220:	6e 40       	R6 >>= R5;
 1005222:	00 01       	ILLEGAL;
 1005224:	be 41       	ILLEGAL;
 1005226:	00 01       	ILLEGAL;
 1005228:	72 40       	R2 >>= R6;
 100522a:	00 01       	ILLEGAL;
 100522c:	be 41       	ILLEGAL;
 100522e:	00 01       	ILLEGAL;
 1005230:	7c 40       	R4 >>= R7;
 1005232:	00 01       	ILLEGAL;
 1005234:	be 41       	ILLEGAL;
 1005236:	00 01       	ILLEGAL;
 1005238:	be 40       	R6 <<= R7;
 100523a:	00 01       	ILLEGAL;
 100523c:	be 41       	ILLEGAL;
 100523e:	00 01       	ILLEGAL;
 1005240:	96 40       	R6 <<= R2;
 1005242:	00 01       	ILLEGAL;
 1005244:	be 41       	ILLEGAL;
 1005246:	00 01       	ILLEGAL;
 1005248:	9a 40       	R2 <<= R3;
 100524a:	00 01       	ILLEGAL;
 100524c:	be 41       	ILLEGAL;
 100524e:	00 01       	ILLEGAL;
 1005250:	a6 40       	R6 <<= R4;
 1005252:	00 01       	ILLEGAL;
 1005254:	be 41       	ILLEGAL;
 1005256:	00 01       	ILLEGAL;
 1005258:	dc 40       	R4 *= R3;
 100525a:	00 01       	ILLEGAL;
 100525c:	be 41       	ILLEGAL;
 100525e:	00 01       	ILLEGAL;
 1005260:	e8 40       	R0 *= R5;
 1005262:	00 01       	ILLEGAL;
 1005264:	be 41       	ILLEGAL;
 1005266:	00 01       	ILLEGAL;
 1005268:	f6 40       	R6 *= R6;
 100526a:	00 01       	ILLEGAL;
 100526c:	be 41       	ILLEGAL;
 100526e:	00 01       	ILLEGAL;
 1005270:	34 41       	R4 = (R4 + R6) << 0x1;
 1005272:	00 01       	ILLEGAL;
 1005274:	7c 48       	CC = !BITTST (R4, 0xf);		/* bit 15 */
 1005276:	00 01       	ILLEGAL;
 1005278:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 100527a:	00 01       	ILLEGAL;
 100527c:	da 42       	R2 = R3.L (Z);
 100527e:	00 01       	ILLEGAL;
 1005280:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 1005282:	00 01       	ILLEGAL;
 1005284:	4e 46       	ILLEGAL;
 1005286:	00 01       	ILLEGAL;
 1005288:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 100528a:	00 01       	ILLEGAL;
 100528c:	c2 45       	P2 = (P2 + P0) << 0x2;
 100528e:	00 01       	ILLEGAL;
 1005290:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 1005292:	00 01       	ILLEGAL;
 1005294:	42 44       	P2 = P0 << 0x2;
 1005296:	00 01       	ILLEGAL;
 1005298:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 100529a:	00 01       	ILLEGAL;
 100529c:	2c 45       	P4 = P5 >> 0x1;
 100529e:	00 01       	ILLEGAL;
 10052a0:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 10052a2:	00 01       	ILLEGAL;
 10052a4:	2e 47       	ILLEGAL;
 10052a6:	00 01       	ILLEGAL;
 10052a8:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 10052aa:	00 01       	ILLEGAL;
 10052ac:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 10052ae:	00 01       	ILLEGAL;
 10052b0:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 10052b2:	00 01       	ILLEGAL;
 10052b4:	fa 42       	R2 = R7.L (Z);
 10052b6:	00 01       	ILLEGAL;
 10052b8:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 10052ba:	00 01       	ILLEGAL;
 10052bc:	1c 47       	ILLEGAL;
 10052be:	00 01       	ILLEGAL;
 10052c0:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 10052c2:	00 01       	ILLEGAL;
 10052c4:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 10052c6:	00 01       	ILLEGAL;
 10052c8:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 10052ca:	00 01       	ILLEGAL;
 10052cc:	d0 47       	ILLEGAL;
 10052ce:	00 01       	ILLEGAL;
 10052d0:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 10052d2:	00 01       	ILLEGAL;
 10052d4:	66 48       	CC = !BITTST (R6, 0xc);		/* bit 12 */
 10052d6:	00 01       	ILLEGAL;
 10052d8:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 10052da:	00 01       	ILLEGAL;
 10052dc:	c4 43       	R4 =~ R0;
 10052de:	00 01       	ILLEGAL;
 10052e0:	ce 48       	CC = !BITTST (R6, 0x19);		/* bit 25 */
 10052e2:	00 01       	ILLEGAL;
 10052e4:	00 44       	P0 -= P0;
 10052e6:	00 01       	ILLEGAL;

010052e8 <_CSWTCH.22>:
 10052e8:	03 00       	ILLEGAL;
 10052ea:	00 00       	NOP;
 10052ec:	00 00       	NOP;
 10052ee:	00 00       	NOP;
 10052f0:	02 00       	ILLEGAL;
	...

010052f4 <_h4_packet_handler>:
 10052f4:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4a */
 10052f8:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10052fc:	0a e1 d4 21 	P2.L = 0x21d4;		/* (8660)	P2=0x21d4 <_h4> */
 1005300:	52 91       	P2 = [P2];
 1005302:	01 e8 00 00 	UNLINK;
 1005306:	52 00       	JUMP (P2);

01005308 <_h4_close>:
 1005308:	00 00       	NOP;
 100530a:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100530e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1005310:	01 e8 00 00 	UNLINK;
 1005314:	10 00       	RTS;
	...

01005318 <_h4_register_packet_handler>:
 1005318:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21d4 <_h4> */
 100531c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1005320:	0a e1 d4 21 	P2.L = 0x21d4;		/* (8660)	P2=0x21d4 <_h4> */
 1005324:	10 93       	[P2] = R0;
 1005326:	01 e8 00 00 	UNLINK;
 100532a:	10 00       	RTS;

0100532c <_h4_get_transport_name>:
 100532c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1005330:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1005334:	00 e1 94 53 	R0.L = 0x5394;		/* (21396)	R0=0x1005394(16798612) */
 1005338:	01 e8 00 00 	UNLINK;
 100533c:	10 00       	RTS;
	...

01005340 <_h4_send_packet>:
 1005340:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x10021d4 */
 1005344:	0a e1 68 01 	P2.L = 0x168;		/* (360)	P2=0x1000168 <__early_initcall_end> */
 1005348:	52 91       	P2 = [P2];
 100534a:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100534e:	40 43       	R0 = R0.B (Z);
 1005350:	62 00       	CALL (P2);
 1005352:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1005394(16798612) */
 1005356:	00 e1 98 53 	R0.L = 0x5398;		/* (21400)	R0=0x1005398(16798616) */
 100535a:	00 e3 2f 4e 	CALL 0x100efb8 <_puts>;
 100535e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1005360:	01 e8 00 00 	UNLINK;
 1005364:	10 00       	RTS;
	...

01005368 <_h4_open>:
 1005368:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 100536c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1005370:	00 e1 a4 53 	R0.L = 0x53a4;		/* (21412)	R0=0x10053a4(16798628) */
 1005374:	00 e3 22 4e 	CALL 0x100efb8 <_puts>;
 1005378:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100537a:	01 e8 00 00 	UNLINK;
 100537e:	10 00       	RTS;

01005380 <_ble_hci_transport_h4_instance>:
 1005380:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1005384:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1005388:	00 e1 b0 53 	R0.L = 0x53b0;		/* (21424)	R0=0x10053b0 <_transport>(16798640) */
 100538c:	01 e8 00 00 	UNLINK;
 1005390:	10 00       	RTS;
 1005392:	00 00       	NOP;
 1005394:	48 34       	I1 = P0;
 1005396:	00 00       	NOP;
 1005398:	68 34       	M1 = P0;
 100539a:	5f 73       	ILLEGAL;
 100539c:	65 6e       	P5 += -0x34;		/* (-52) */
 100539e:	64 0a       	CC = P4 <= P4 (IU);
 10053a0:	00 00       	NOP;
 10053a2:	00 00       	NOP;
 10053a4:	68 34       	M1 = P0;
 10053a6:	20 6f       	P0 += -0x1c;		/* (-28) */
 10053a8:	70 65       	R0 += 0x2e;		/* ( 46) */
 10053aa:	6e 0a       	CC = SP <= P5 (IU);
 10053ac:	00 00       	NOP;
	...

010053b0 <_transport>:
 10053b0:	68 53       	R5 = R0 - R5;
 10053b2:	00 01       	ILLEGAL;
 10053b4:	08 53       	R4 = R0 - R1;
 10053b6:	00 01       	ILLEGAL;
 10053b8:	40 53       	R5 = R0 - R0;
 10053ba:	00 01       	ILLEGAL;
 10053bc:	18 53       	R4 = R0 - R3;
 10053be:	00 01       	ILLEGAL;
 10053c0:	2c 53       	R4 = R4 - R5;
 10053c2:	00 01       	ILLEGAL;
	...

010053cc <_hci_drop_link_key_for_bd_addr>:
 10053cc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x168 */
 10053d0:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10053d4:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 10053d8:	52 91       	P2 = [P2];
 10053da:	12 e5 52 00 	P2 = [P2 + 0x148];
 10053de:	42 0c       	CC = P2 == 0x0;
 10053e0:	05 1c       	IF CC JUMP 0x10053ea <_hci_drop_link_key_for_bd_addr+0x1e> (BP);
 10053e2:	01 e8 00 00 	UNLINK;
 10053e6:	12 ad       	P2 = [P2 + 0x10];
 10053e8:	52 00       	JUMP (P2);
 10053ea:	01 e8 00 00 	UNLINK;
 10053ee:	10 00       	RTS;

010053f0 <_dummy_handler>:
 10053f0:	00 00       	NOP;
 10053f2:	00 00       	NOP;
 10053f4:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10053f8:	01 e8 00 00 	UNLINK;
 10053fc:	10 00       	RTS;
	...

01005400 <_gap_security_level_for_connection>:
 1005400:	10 32       	P2 = R0;
 1005402:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1005406:	42 0c       	CC = P2 == 0x0;
 1005408:	0f 1c       	IF CC JUMP 0x1005426 <_gap_security_level_for_connection+0x26> (BP);
 100540a:	50 a2       	R0 = [P2 + 0x24];
 100540c:	78 48       	CC = !BITTST (R0, 0xf);		/* bit 15 */
 100540e:	0c 1c       	IF CC JUMP 0x1005426 <_gap_security_level_for_connection+0x26> (BP);
 1005410:	41 68       	P1 = 0x8 (X);		/*		P1=0x8(  8) */
 1005412:	12 ae       	P2 = [P2 + 0x20];
 1005414:	4a 0a       	CC = P2 <= P1 (IU);
 1005416:	0a 14       	IF !CC JUMP 0x100542a <_gap_security_level_for_connection+0x2a> (BP);
 1005418:	49 e1 00 01 	P1.H = 0x100;		/* (256)	P1=0x1000008 */
 100541c:	09 e1 14 6c 	P1.L = 0x6c14;		/* (27668)	P1=0x1006c14 <_CSWTCH.74> */
 1005420:	91 5e       	P2 = P1 + (P2 << 0x2);
 1005422:	10 91       	R0 = [P2];
 1005424:	04 20       	JUMP.S 0x100542c <_gap_security_level_for_connection+0x2c>;
 1005426:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1005428:	02 20       	JUMP.S 0x100542c <_gap_security_level_for_connection+0x2c>;
 100542a:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100542c:	01 e8 00 00 	UNLINK;
 1005430:	10 00       	RTS;
	...

01005434 <_hci_state_reset>:
 1005434:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005438:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100543c:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005440:	52 91       	P2 = [P2];
 1005442:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1005444:	29 e1 74 01 	P1 = 0x174 (X);		/*		P1=0x174(372) */
 1005448:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100544a:	91 e6 27 01 	B[P2 + 0x127] = R1;
 100544e:	91 e6 6c 01 	B[P2 + 0x16c] = R1;
 1005452:	91 e6 73 01 	B[P2 + 0x173] = R1;
 1005456:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1005458:	4a 5a       	P1 = P2 + P1;
 100545a:	10 b2       	[P2 + 0x20] = R0;
 100545c:	08 93       	[P1] = R0;
 100545e:	89 b4       	W[P1 + 0x4] = R1;
 1005460:	10 e6 5f 00 	[P2 + 0x17c] = R0;
 1005464:	51 e6 c5 00 	W[P2 + 0x18a] = R1;
 1005468:	30 60       	R0 = 0x6 (X);		/*		R0=0x6(  6) */
 100546a:	21 e1 e8 03 	R1 = 0x3e8 (X);		/*		R1=0x3e8(1000) */
 100546e:	50 e6 c3 00 	W[P2 + 0x186] = R0;
 1005472:	51 e6 c6 00 	W[P2 + 0x18c] = R1;
 1005476:	20 e1 80 0c 	R0 = 0xc80 (X);		/*		R0=0xc80(3200) */
 100547a:	fa 63       	R2 = -0x1 (X);		/*		R2=0xffffffff( -1) */
 100547c:	51 60       	R1 = 0xa (X);		/*		R1=0xa( 10) */
 100547e:	92 e6 80 01 	B[P2 + 0x180] = R2;
 1005482:	50 e6 c4 00 	W[P2 + 0x188] = R0;
 1005486:	51 e6 c7 00 	W[P2 + 0x18e] = R1;
 100548a:	50 e6 c8 00 	W[P2 + 0x190] = R0;
 100548e:	01 e8 00 00 	UNLINK;
 1005492:	10 00       	RTS;

01005494 <_create_connection_for_bd_addr_and_type>:
 1005494:	f5 05       	[--SP] = (R7:6, P5:5);
 1005496:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100549a:	30 30       	R6 = R0;
 100549c:	39 30       	R7 = R1;
 100549e:	ff e3 e3 f0 	CALL 0x1003664 <_le_btstack_memory_hci_connection_get>;
 10054a2:	28 32       	P5 = R0;
 10054a4:	45 0c       	CC = P5 == 0x0;
 10054a6:	25 18       	IF CC JUMP 0x10054f0 <_create_connection_for_bd_addr_and_type+0x5c>;
 10054a8:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10054aa:	22 e1 c4 00 	R2 = 0xc4 (X);		/*		R2=0xc4(196) */
 10054ae:	00 e3 79 54 	CALL 0x100fda0 <_memset>;
 10054b2:	45 30       	R0 = P5;
 10054b4:	0e 30       	R1 = R6;
 10054b6:	40 64       	R0 += 0x8;		/* (  8) */
 10054b8:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 10054ba:	00 e3 25 54 	CALL 0x100fd04 <_memcpy>;
 10054be:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 10054c0:	e8 b5       	W[P5 + 0xe] = R0;
 10054c2:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10054c4:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10054c6:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 10054ca:	a9 e6 7c 00 	B[P5 + 0x7c] = R1;
 10054ce:	68 b2       	[P5 + 0x24] = R0;
 10054d0:	e8 b1       	[P5 + 0x1c] = R0;
 10054d2:	28 e6 20 00 	[P5 + 0x80] = R0;
 10054d6:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 10054da:	29 b7       	W[P5 + 0x18] = R1;
 10054dc:	69 e6 3d 00 	W[P5 + 0x7a] = R1;
 10054e0:	69 e6 3c 00 	W[P5 + 0x78] = R1;
 10054e4:	10 91       	R0 = [P2];
 10054e6:	2f b1       	[P5 + 0x10] = R7;
 10054e8:	00 65       	R0 += 0x20;		/* ( 32) */
 10054ea:	4d 30       	R1 = P5;
 10054ec:	00 e3 d8 10 	CALL 0x100769c <_linked_list_add>;
 10054f0:	45 30       	R0 = P5;
 10054f2:	01 e8 00 00 	UNLINK;
 10054f6:	b5 05       	(R7:6, P5:5) = [SP++];
 10054f8:	10 00       	RTS;
	...

010054fc <_hci_emit_state>:
 10054fc:	c5 04       	[--SP] = (P5:5);
 10054fe:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x1f14 <_gap_device_name> */
 1005502:	0d e1 e8 21 	P5.L = 0x21e8;		/* (8680)	P5=0x21e8 <_hci_stack> */
 1005506:	6a 91       	P2 = [P5];
 1005508:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100550c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1005510:	00 e1 ec 69 	R0.L = 0x69ec;		/* (27116)	R0=0x10069ec(16804332) */
 1005514:	11 e4 53 00 	R1 = [P2 + 0x14c];
 1005518:	00 e3 34 4d 	CALL 0x100ef80 <_printf>;
 100551c:	6a 91       	P2 = [P5];
 100551e:	20 e1 60 00 	R0 = 0x60 (X);		/*		R0=0x60( 96) */
 1005522:	b8 e6 fc ff 	B[FP + -0x4] = R0;
 1005526:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1005528:	b8 e6 fd ff 	B[FP + -0x3] = R0;
 100552c:	90 e5 4c 01 	R0 = B[P2 + 0x14c] (X);
 1005530:	b8 e6 fe ff 	B[FP + -0x2] = R0;
 1005534:	12 e5 51 00 	P2 = [P2 + 0x144];
 1005538:	4f 30       	R1 = FP;
 100553a:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100553c:	e1 67       	R1 += -0x4;		/* ( -4) */
 100553e:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 1005540:	62 00       	CALL (P2);
 1005542:	01 e8 00 00 	UNLINK;
 1005546:	85 04       	(P5:5) = [SP++];
 1005548:	10 00       	RTS;
	...

0100554c <_gap_le_get_connection_parameter_range>:
 100554c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005550:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005554:	11 91       	R1 = [P2];
 1005556:	20 e1 86 01 	R0 = 0x186 (X);		/*		R0=0x186(390) */
 100555a:	78 05       	[--SP] = (R7:7);
 100555c:	41 50       	R1 = R1 + R0;
 100555e:	78 30       	R7 = P0;
 1005560:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1005564:	40 30       	R0 = P0;
 1005566:	62 60       	R2 = 0xc (X);		/*		R2=0xc( 12) */
 1005568:	00 e3 ce 53 	CALL 0x100fd04 <_memcpy>;
 100556c:	07 30       	R0 = R7;
 100556e:	01 e8 00 00 	UNLINK;
 1005572:	38 05       	(R7:7) = [SP++];
 1005574:	10 00       	RTS;
	...

01005578 <_le_hci_connections_get_iterator>:
 1005578:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 100557c:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005580:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1005584:	11 91       	R1 = [P2];
 1005586:	01 65       	R1 += 0x20;		/* ( 32) */
 1005588:	01 e8 00 00 	UNLINK;
 100558c:	00 e2 dc 10 	JUMP.L 0x1007744 <_linked_list_iterator_init>;

01005590 <_le_hci_connection_for_handle>:
 1005590:	70 05       	[--SP] = (R7:6);
 1005592:	00 e8 06 00 	LINK 0x18;		/* (24) */
 1005596:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 100559a:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 100559e:	7f 30       	R7 = FP;
 10055a0:	30 30       	R6 = R0;
 10055a2:	11 91       	R1 = [P2];
 10055a4:	a7 67       	R7 += -0xc;		/* (-12) */
 10055a6:	01 65       	R1 += 0x20;		/* ( 32) */
 10055a8:	07 30       	R0 = R7;
 10055aa:	00 e3 cd 10 	CALL 0x1007744 <_linked_list_iterator_init>;
 10055ae:	f6 42       	R6 = R6.L (Z);
 10055b0:	08 20       	JUMP.S 0x10055c0 <_le_hci_connection_for_handle+0x30>;
 10055b2:	07 30       	R0 = R7;
 10055b4:	00 e3 ec 10 	CALL 0x100778c <_linked_list_iterator_next>;
 10055b8:	10 32       	P2 = R0;
 10055ba:	d1 a5       	R1 = W[P2 + 0xe] (Z);
 10055bc:	31 08       	CC = R1 == R6;
 10055be:	06 18       	IF CC JUMP 0x10055ca <_le_hci_connection_for_handle+0x3a>;
 10055c0:	07 30       	R0 = R7;
 10055c2:	00 e3 cd 10 	CALL 0x100775c <_linked_list_iterator_has_next>;
 10055c6:	00 0c       	CC = R0 == 0x0;
 10055c8:	f5 17       	IF !CC JUMP 0x10055b2 <_le_hci_connection_for_handle+0x22> (BP);
 10055ca:	01 e8 00 00 	UNLINK;
 10055ce:	30 05       	(R7:6) = [SP++];
 10055d0:	10 00       	RTS;
	...

010055d4 <_le_hci_connection_for_bd_addr_and_type>:
 10055d4:	ed 05       	[--SP] = (R7:5, P5:5);
 10055d6:	00 e8 06 00 	LINK 0x18;		/* (24) */
 10055da:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 10055de:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 10055e2:	31 30       	R6 = R1;
 10055e4:	6f 32       	P5 = FP;
 10055e6:	a5 6f       	P5 += -0xc;		/* (-12) */
 10055e8:	11 91       	R1 = [P2];
 10055ea:	28 30       	R5 = R0;
 10055ec:	01 65       	R1 += 0x20;		/* ( 32) */
 10055ee:	45 30       	R0 = P5;
 10055f0:	00 e3 aa 10 	CALL 0x1007744 <_linked_list_iterator_init>;
 10055f4:	7d 30       	R7 = P5;
 10055f6:	10 20       	JUMP.S 0x1005616 <_le_hci_connection_for_bd_addr_and_type+0x42>;
 10055f8:	07 30       	R0 = R7;
 10055fa:	00 e3 c9 10 	CALL 0x100778c <_linked_list_iterator_next>;
 10055fe:	28 32       	P5 = R0;
 1005600:	28 a1       	R0 = [P5 + 0x10];
 1005602:	30 08       	CC = R0 == R6;
 1005604:	09 10       	IF !CC JUMP 0x1005616 <_le_hci_connection_for_bd_addr_and_type+0x42>;
 1005606:	4d 30       	R1 = P5;
 1005608:	41 64       	R1 += 0x8;		/* (  8) */
 100560a:	05 30       	R0 = R5;
 100560c:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 100560e:	00 e3 3d 53 	CALL 0x100fc88 <_memcmp>;
 1005612:	00 0c       	CC = R0 == 0x0;
 1005614:	07 1c       	IF CC JUMP 0x1005622 <_le_hci_connection_for_bd_addr_and_type+0x4e> (BP);
 1005616:	07 30       	R0 = R7;
 1005618:	00 e3 a2 10 	CALL 0x100775c <_linked_list_iterator_has_next>;
 100561c:	00 0c       	CC = R0 == 0x0;
 100561e:	ed 17       	IF !CC JUMP 0x10055f8 <_le_hci_connection_for_bd_addr_and_type+0x24> (BP);
 1005620:	05 68       	P5 = 0x0 (X);		/*		P5=0x0(  0) */
 1005622:	45 30       	R0 = P5;
 1005624:	01 e8 00 00 	UNLINK;
 1005628:	ad 05       	(R7:5, P5:5) = [SP++];
 100562a:	10 00       	RTS;

0100562c <_hci_number_free_acl_slots_for_handle>:
 100562c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005630:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1005634:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005638:	51 91       	P1 = [P2];
 100563a:	28 e1 fe 00 	P0 = 0xfe (X);		/*		P0=0xfe(254) */
 100563e:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1005640:	c0 42       	R0 = R0.L (Z);
 1005642:	0a ae       	P2 = [P1 + 0x20];
 1005644:	3b 60       	R3 = 0x7 (X);		/*		R3=0x7(  7) */
 1005646:	0e 20       	JUMP.S 0x1005662 <_hci_number_free_acl_slots_for_handle+0x36>;
 1005648:	00 00       	NOP;
 100564a:	91 e4 7c 00 	R1 = B[P2 + 0x7c] (Z);
 100564e:	8a 50       	R2 = R2 + R1;
 1005650:	d1 a5       	R1 = W[P2 + 0xe] (Z);
 1005652:	01 08       	CC = R1 == R0;
 1005654:	05 14       	IF !CC JUMP 0x100565e <_hci_number_free_acl_slots_for_handle+0x32> (BP);
 1005656:	51 a1       	R1 = [P2 + 0x14];
 1005658:	19 08       	CC = R1 == R3;
 100565a:	02 14       	IF !CC JUMP 0x100565e <_hci_number_free_acl_slots_for_handle+0x32> (BP);
 100565c:	10 ad       	P0 = [P2 + 0x10];
 100565e:	00 00       	NOP;
 1005660:	52 91       	P2 = [P2];
 1005662:	42 0c       	CC = P2 == 0x0;
 1005664:	f2 17       	IF !CC JUMP 0x1005648 <_hci_number_free_acl_slots_for_handle+0x1c> (BP);
 1005666:	8b e5 32 01 	R3 = B[P1 + 0x132] (X);
 100566a:	58 43       	R0 = R3.B (Z);
 100566c:	89 e4 2d 01 	R1 = B[P1 + 0x12d] (Z);
 1005670:	00 0c       	CC = R0 == 0x0;
 1005672:	05 1c       	IF CC JUMP 0x100567c <_hci_number_free_acl_slots_for_handle+0x50> (BP);
 1005674:	10 52       	R0 = R0 - R2;
 1005676:	80 0c       	CC = R0 < 0x0;
 1005678:	06 14       	IF !CC JUMP 0x1005684 <_hci_number_free_acl_slots_for_handle+0x58> (BP);
 100567a:	0d 20       	JUMP.S 0x1005694 <_hci_number_free_acl_slots_for_handle+0x68>;
 100567c:	51 52       	R1 = R1 - R2;
 100567e:	81 0c       	CC = R1 < 0x0;
 1005680:	0a 18       	IF CC JUMP 0x1005694 <_hci_number_free_acl_slots_for_handle+0x68>;
 1005682:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1005684:	2a e1 fe 00 	P2 = 0xfe (X);		/*		P2=0xfe(254) */
 1005688:	50 08       	CC = P0 == P2;
 100568a:	05 18       	IF CC JUMP 0x1005694 <_hci_number_free_acl_slots_for_handle+0x68>;
 100568c:	5b 43       	R3 = R3.B (Z);
 100568e:	03 0c       	CC = R3 == 0x0;
 1005690:	01 07       	IF CC R0 = R1;
 1005692:	02 20       	JUMP.S 0x1005696 <_hci_number_free_acl_slots_for_handle+0x6a>;
 1005694:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1005696:	01 e8 00 00 	UNLINK;
 100569a:	10 00       	RTS;

0100569c <_le_hci_can_send_command_packet_now>:
 100569c:	00 00       	NOP;
 100569e:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10056a2:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 10056a4:	01 e8 00 00 	UNLINK;
 10056a8:	10 00       	RTS;
	...

010056ac <_le_hci_can_send_prepared_acl_packet_now>:
 10056ac:	00 00       	NOP;
 10056ae:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10056b2:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 10056b4:	01 e8 00 00 	UNLINK;
 10056b8:	10 00       	RTS;
	...

010056bc <_le_hci_can_send_acl_packet_now>:
 10056bc:	00 00       	NOP;
 10056be:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10056c2:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 10056c4:	01 e8 00 00 	UNLINK;
 10056c8:	10 00       	RTS;
	...

010056cc <_le_hci_is_packet_buffer_reserved>:
 10056cc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0xfe */
 10056d0:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10056d4:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 10056d8:	52 91       	P2 = [P2];
 10056da:	01 e8 00 00 	UNLINK;
 10056de:	90 e4 27 01 	R0 = B[P2 + 0x127] (Z);
 10056e2:	10 00       	RTS;

010056e4 <_le_hci_reserve_packet_buffer>:
 10056e4:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 10056e8:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10056ec:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 10056f0:	52 91       	P2 = [P2];
 10056f2:	90 e4 27 01 	R0 = B[P2 + 0x127] (Z);
 10056f6:	00 0c       	CC = R0 == 0x0;
 10056f8:	06 10       	IF !CC JUMP 0x1005704 <_le_hci_reserve_packet_buffer+0x20>;
 10056fa:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 10056fc:	90 e6 27 01 	B[P2 + 0x127] = R0;
 1005700:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1005702:	02 20       	JUMP.S 0x1005706 <_le_hci_reserve_packet_buffer+0x22>;
 1005704:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1005706:	01 e8 00 00 	UNLINK;
 100570a:	10 00       	RTS;

0100570c <_le_hci_release_packet_buffer>:
 100570c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005710:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1005714:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005718:	52 91       	P2 = [P2];
 100571a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100571c:	90 e6 27 01 	B[P2 + 0x127] = R0;
 1005720:	01 e8 00 00 	UNLINK;
 1005724:	10 00       	RTS;
	...

01005728 <_hci_transport_synchronous>:
 1005728:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 100572c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1005730:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005734:	52 91       	P2 = [P2];
 1005736:	01 e8 00 00 	UNLINK;
 100573a:	52 91       	P2 = [P2];
 100573c:	90 a1       	R0 = [P2 + 0x18];
 100573e:	00 0c       	CC = R0 == 0x0;
 1005740:	00 02       	R0 = CC;
 1005742:	10 00       	RTS;

01005744 <_hci_send_acl_packet_fragments.clone.2>:
 1005744:	e3 05       	[--SP] = (R7:4, P5:3);
 1005746:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x0 <data_addr> */
 100574a:	00 e8 05 00 	LINK 0x14;		/* (20) */
 100574e:	0d e1 e8 21 	P5.L = 0x21e8;		/* (8680)	P5=0x21e8 <_hci_stack> */
 1005752:	6a 91       	P2 = [P5];
 1005754:	20 32       	P4 = R0;
 1005756:	2b e1 ff cf 	P3 = -0x3001 (X);		/*		P3=0xffffcfff(-12289) */
 100575a:	50 e5 9a 00 	R0 = W[P2 + 0x134] (X);
 100575e:	c1 42       	R1 = R0.L (Z);
 1005760:	55 e5 97 00 	R5 = W[P2 + 0x12e] (X);
 1005764:	01 0c       	CC = R1 == 0x0;
 1005766:	28 06       	IF !CC R5 = R0;
 1005768:	ed 42       	R5 = R5.L (Z);
 100576a:	6a 91       	P2 = [P5];
 100576c:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100576e:	57 e4 94 00 	R7 = W[P2 + 0x128] (Z);
 1005772:	37 30       	R6 = R7;
 1005774:	50 e4 95 00 	R0 = W[P2 + 0x12a] (Z);
 1005778:	f8 53       	R7 = R0 - R7;
 100577a:	2f 09       	CC = R7 <= R5;
 100577c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100577e:	01 06       	IF !CC R0 = R1;
 1005780:	e6 67       	R6 += -0x4;		/* ( -4) */
 1005782:	e0 bb       	[FP -0x8] = R0;
 1005784:	3d 06       	IF !CC R7 = R5;
 1005786:	f0 42       	R0 = R6.L (Z);
 1005788:	26 30       	R4 = R6;
 100578a:	00 0c       	CC = R0 == 0x0;
 100578c:	0f 1c       	IF CC JUMP 0x10057aa <_hci_send_acl_packet_fragments.clone.2+0x66> (BP);
 100578e:	92 e4 26 00 	R2 = B[P2 + 0x26] (Z);
 1005792:	91 e4 25 00 	R1 = B[P2 + 0x25] (Z);
 1005796:	42 4f       	R2 <<= 0x8;
 1005798:	8a 56       	R2 = R2 | R1;
 100579a:	4b 30       	R1 = P3;
 100579c:	8a 54       	R2 = R2 & R1;
 100579e:	42 30       	R0 = P2;
 10057a0:	28 65       	R0 += 0x25;		/* ( 37) */
 10057a2:	62 4a       	BITSET (R2, 0xc);		/* bit 12 */
 10057a4:	0e 30       	R1 = R6;
 10057a6:	00 e3 19 25 	CALL 0x100a1d8 <_bt_store_16>;
 10057aa:	0e 30       	R1 = R6;
 10057ac:	28 91       	R0 = [P5];
 10057ae:	28 65       	R0 += 0x25;		/* ( 37) */
 10057b0:	11 64       	R1 += 0x2;		/* (  2) */
 10057b2:	17 30       	R2 = R7;
 10057b4:	00 e3 12 25 	CALL 0x100a1d8 <_bt_store_16>;
 10057b8:	60 99       	R0 = B[P4] (X);
 10057ba:	08 64       	R0 += 0x1;		/* (  1) */
 10057bc:	20 9b       	B[P4] = R0;
 10057be:	28 91       	R0 = [P5];
 10057c0:	08 32       	P1 = R0;
 10057c2:	e4 42       	R4 = R4.L (Z);
 10057c4:	60 50       	R1 = R0 + R4;
 10057c6:	17 30       	R2 = R7;
 10057c8:	29 65       	R1 += 0x25;		/* ( 37) */
 10057ca:	4a 91       	P2 = [P1];
 10057cc:	22 64       	R2 += 0x4;		/* (  4) */
 10057ce:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 10057d0:	92 ac       	P2 = [P2 + 0x8];
 10057d2:	62 00       	CALL (P2);
 10057d4:	30 30       	R6 = R0;
 10057d6:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000002(16777218) */
 10057da:	00 e1 04 6a 	R0.L = 0x6a04;		/* (27140)	R0=0x1006a04(16804356) */
 10057de:	00 e3 ed 4b 	CALL 0x100efb8 <_puts>;
 10057e2:	e0 b9       	R0 = [FP -0x8];
 10057e4:	00 0c       	CC = R0 == 0x0;
 10057e6:	08 1c       	IF CC JUMP 0x10057f6 <_hci_send_acl_packet_fragments.clone.2+0xb2> (BP);
 10057e8:	6a 91       	P2 = [P5];
 10057ea:	50 e5 94 00 	R0 = W[P2 + 0x128] (X);
 10057ee:	c7 51       	R7 = R7 + R0;
 10057f0:	57 e6 94 00 	W[P2 + 0x128] = R7;
 10057f4:	bb 2f       	JUMP.S 0x100576a <_hci_send_acl_packet_fragments.clone.2+0x26>;
 10057f6:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1006a04(16804356) */
 10057fa:	00 e1 10 6a 	R0.L = 0x6a10;		/* (27152)	R0=0x1006a10(16804368) */
 10057fe:	00 e3 dd 4b 	CALL 0x100efb8 <_puts>;
 1005802:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005806:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 100580a:	55 91       	P5 = [P2];
 100580c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100580e:	68 e6 94 00 	W[P5 + 0x128] = R0;
 1005812:	68 e6 95 00 	W[P5 + 0x12a] = R0;
 1005816:	ff e3 89 ff 	CALL 0x1005728 <_hci_transport_synchronous>;
 100581a:	00 0c       	CC = R0 == 0x0;
 100581c:	11 1c       	IF CC JUMP 0x100583e <_hci_send_acl_packet_fragments.clone.2+0xfa> (BP);
 100581e:	ff e3 77 ff 	CALL 0x100570c <_le_hci_release_packet_buffer>;
 1005822:	20 e1 6c 00 	R0 = 0x6c (X);		/*		R0=0x6c(108) */
 1005826:	b8 e6 fc ff 	B[FP + -0x4] = R0;
 100582a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100582c:	b8 e6 fd ff 	B[FP + -0x3] = R0;
 1005830:	2a e5 51 00 	P2 = [P5 + 0x144];
 1005834:	4f 30       	R1 = FP;
 1005836:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1005838:	e1 67       	R1 += -0x4;		/* ( -4) */
 100583a:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100583c:	62 00       	CALL (P2);
 100583e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000004(16777220) */
 1005842:	00 e1 18 6a 	R0.L = 0x6a18;		/* (27160)	R0=0x1006a18(16804376) */
 1005846:	00 e3 b9 4b 	CALL 0x100efb8 <_puts>;
 100584a:	06 30       	R0 = R6;
 100584c:	01 e8 00 00 	UNLINK;
 1005850:	a3 05       	(R7:4, P5:3) = [SP++];
 1005852:	10 00       	RTS;

01005854 <_hci_max_acl_le_data_packet_length>:
 1005854:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005858:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100585c:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005860:	52 91       	P2 = [P2];
 1005862:	50 e5 9a 00 	R0 = W[P2 + 0x134] (X);
 1005866:	c1 42       	R1 = R0.L (Z);
 1005868:	01 0c       	CC = R1 == 0x0;
 100586a:	03 14       	IF !CC JUMP 0x1005870 <_hci_max_acl_le_data_packet_length+0x1c> (BP);
 100586c:	50 e5 97 00 	R0 = W[P2 + 0x12e] (X);
 1005870:	01 e8 00 00 	UNLINK;
 1005874:	10 00       	RTS;
	...

01005878 <_le_hci_send_acl_packet_buffer>:
 1005878:	fd 05       	[--SP] = (R7:7, P5:5);
 100587a:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x21e8 <_hci_stack> */
 100587e:	0d e1 e8 21 	P5.L = 0x21e8;		/* (8680)	P5=0x21e8 <_hci_stack> */
 1005882:	6a 91       	P2 = [P5];
 1005884:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1005888:	38 30       	R7 = R0;
 100588a:	90 e4 27 01 	R0 = B[P2 + 0x127] (Z);
 100588e:	00 0c       	CC = R0 == 0x0;
 1005890:	1f 1c       	IF CC JUMP 0x10058ce <_le_hci_send_acl_packet_buffer+0x56> (BP);
 1005892:	90 e4 26 00 	R0 = B[P2 + 0x26] (Z);
 1005896:	91 e4 25 00 	R1 = B[P2 + 0x25] (Z);
 100589a:	40 4f       	R0 <<= 0x8;
 100589c:	08 56       	R0 = R0 | R1;
 100589e:	21 e1 ff 0f 	R1 = 0xfff (X);		/*		R1=0xfff(4095) */
 10058a2:	08 54       	R0 = R0 & R1;
 10058a4:	ff e3 76 fe 	CALL 0x1005590 <_le_hci_connection_for_handle>;
 10058a8:	00 0c       	CC = R0 == 0x0;
 10058aa:	04 14       	IF !CC JUMP 0x10058b2 <_le_hci_send_acl_packet_buffer+0x3a> (BP);
 10058ac:	ff e3 30 ff 	CALL 0x100570c <_le_hci_release_packet_buffer>;
 10058b0:	0f 20       	JUMP.S 0x10058ce <_le_hci_send_acl_packet_buffer+0x56>;
 10058b2:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 10058b4:	6a 91       	P2 = [P5];
 10058b6:	51 e6 94 00 	W[P2 + 0x128] = R1;
 10058ba:	57 e6 95 00 	W[P2 + 0x12a] = R7;
 10058be:	21 e1 7c 00 	R1 = 0x7c (X);		/*		R1=0x7c(124) */
 10058c2:	01 e8 00 00 	UNLINK;
 10058c6:	08 50       	R0 = R0 + R1;
 10058c8:	bd 05       	(R7:7, P5:5) = [SP++];
 10058ca:	ff e2 3d ff 	JUMP.L 0x1005744 <_hci_send_acl_packet_fragments.clone.2>;
 10058ce:	01 e8 00 00 	UNLINK;
 10058d2:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10058d4:	bd 05       	(R7:7, P5:5) = [SP++];
 10058d6:	10 00       	RTS;

010058d8 <_le_hci_get_outgoing_packet_buffer>:
 10058d8:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 10058dc:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 10058e0:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10058e4:	10 91       	R0 = [P2];
 10058e6:	28 65       	R0 += 0x25;		/* ( 37) */
 10058e8:	01 e8 00 00 	UNLINK;
 10058ec:	10 00       	RTS;
	...

010058f0 <_le_hci_max_acl_data_packet_length>:
 10058f0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 10058f4:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10058f8:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 10058fc:	52 91       	P2 = [P2];
 10058fe:	01 e8 00 00 	UNLINK;
 1005902:	50 e5 97 00 	R0 = W[P2 + 0x12e] (X);
 1005906:	10 00       	RTS;

01005908 <_hci_non_flushable_packet_boundary_flag_supported>:
 1005908:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 100590c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1005910:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005914:	52 91       	P2 = [P2];
 1005916:	01 e8 00 00 	UNLINK;
 100591a:	90 e4 3c 01 	R0 = B[P2 + 0x13c] (Z);
 100591e:	30 49       	CC = BITTST (R0, 0x6);		/* bit  6 */
 1005920:	00 02       	R0 = CC;
 1005922:	10 00       	RTS;

01005924 <_hci_ssp_supported>:
 1005924:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005928:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100592c:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005930:	52 91       	P2 = [P2];
 1005932:	01 e8 00 00 	UNLINK;
 1005936:	90 e4 3c 01 	R0 = B[P2 + 0x13c] (Z);
 100593a:	18 49       	CC = BITTST (R0, 0x3);		/* bit  3 */
 100593c:	00 02       	R0 = CC;
 100593e:	10 00       	RTS;

01005940 <_hci_classic_supported>:
 1005940:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005944:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1005948:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 100594c:	52 91       	P2 = [P2];
 100594e:	01 e8 00 00 	UNLINK;
 1005952:	90 e4 3a 01 	R0 = B[P2 + 0x13a] (Z);
 1005956:	28 48       	CC = !BITTST (R0, 0x5);		/* bit  5 */
 1005958:	00 02       	R0 = CC;
 100595a:	10 00       	RTS;

0100595c <_hci_le_advertisement_address>:
 100595c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005960:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1005964:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005968:	52 91       	P2 = [P2];
 100596a:	08 32       	P1 = R0;
 100596c:	01 30       	R0 = R1;
 100596e:	91 e5 73 01 	R1 = B[P2 + 0x173] (X);
 1005972:	09 9b       	B[P1] = R1;
 1005974:	91 e4 73 01 	R1 = B[P2 + 0x173] (Z);
 1005978:	01 0c       	CC = R1 == 0x0;
 100597a:	06 1c       	IF CC JUMP 0x1005986 <_hci_le_advertisement_address+0x2a> (BP);
 100597c:	29 e1 74 01 	P1 = 0x174 (X);		/*		P1=0x174(372) */
 1005980:	8a 5a       	P2 = P2 + P1;
 1005982:	4a 30       	R1 = P2;
 1005984:	03 20       	JUMP.S 0x100598a <_hci_le_advertisement_address+0x2e>;
 1005986:	4a 30       	R1 = P2;
 1005988:	81 64       	R1 += 0x10;		/* ( 16) */
 100598a:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 100598c:	01 e8 00 00 	UNLINK;
 1005990:	00 e2 ba 51 	JUMP.L 0x100fd04 <_memcpy>;

01005994 <_le_handle_advertisement_report>:
 1005994:	e3 05       	[--SP] = (R7:4, P5:3);
 1005996:	20 32       	P4 = R0;
 1005998:	4b e1 00 00 	P3.H = 0x0;		/* (  0)	P3=0xcfff */
 100599c:	00 e8 0e 00 	LINK 0x38;		/* (56) */
 10059a0:	25 68       	P5 = 0x4 (X);		/*		P5=0x4(  4) */
 10059a2:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 10059a4:	a5 e4 03 00 	R5 = B[P4 + 0x3] (Z);
 10059a8:	14 63       	R4 = -0x1e (X);		/*		R4=0xffffffe2(-30) */
 10059aa:	0b e1 e8 21 	P3.L = 0x21e8;		/* (8680)	P3=0x21e8 <_hci_stack> */
 10059ae:	30 20       	JUMP.S 0x1005a0e <_le_handle_advertisement_report+0x7a>;
 10059b0:	ac 5a       	P2 = P4 + P5;
 10059b2:	97 e4 08 00 	R7 = B[P2 + 0x8] (Z);
 10059b6:	07 30       	R0 = R7;
 10059b8:	50 64       	R0 += 0xa;		/* ( 10) */
 10059ba:	b8 e6 d5 ff 	B[FP + -0x2b] = R0;
 10059be:	47 30       	R0 = FP;
 10059c0:	4a 30       	R1 = P2;
 10059c2:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 10059c4:	bc e6 d4 ff 	B[FP + -0x2c] = R4;
 10059c8:	b0 66       	R0 += -0x2a;		/* (-42) */
 10059ca:	00 e3 9d 51 	CALL 0x100fd04 <_memcpy>;
 10059ce:	4d 30       	R1 = P5;
 10059d0:	44 30       	R0 = P4;
 10059d2:	49 64       	R1 += 0x9;		/* (  9) */
 10059d4:	48 50       	R1 = R0 + R1;
 10059d6:	39 50       	R0 = R1 + R7;
 10059d8:	10 32       	P2 = R0;
 10059da:	17 30       	R2 = R7;
 10059dc:	0e 64       	R6 += 0x1;		/* (  1) */
 10059de:	50 99       	R0 = B[P2] (X);
 10059e0:	ac 5a       	P2 = P4 + P5;
 10059e2:	b8 e6 de ff 	B[FP + -0x22] = R0;
 10059e6:	90 e5 08 00 	R0 = B[P2 + 0x8] (X);
 10059ea:	b8 e6 df ff 	B[FP + -0x21] = R0;
 10059ee:	47 30       	R0 = FP;
 10059f0:	00 67       	R0 += -0x20;		/* (-32) */
 10059f2:	00 e3 89 51 	CALL 0x100fd04 <_memcpy>;
 10059f6:	17 32       	P2 = R7;
 10059f8:	55 6c       	P5 += 0xa;		/* ( 10) */
 10059fa:	17 30       	R2 = R7;
 10059fc:	4f 30       	R1 = FP;
 10059fe:	62 64       	R2 += 0xc;		/* ( 12) */
 1005a00:	55 5b       	P5 = P5 + P2;
 1005a02:	5a 91       	P2 = [P3];
 1005a04:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1005a06:	a1 66       	R1 += -0x2c;		/* (-44) */
 1005a08:	12 e5 51 00 	P2 = [P2 + 0x144];
 1005a0c:	62 00       	CALL (P2);
 1005a0e:	ae 08       	CC = R6 < R5;
 1005a10:	d0 1f       	IF CC JUMP 0x10059b0 <_le_handle_advertisement_report+0x1c> (BP);
 1005a12:	01 e8 00 00 	UNLINK;
 1005a16:	a3 05       	(R7:4, P5:3) = [SP++];
 1005a18:	10 00       	RTS;
	...

01005a1c <_le_hci_register_packet_handler>:
 1005a1c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005a20:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1005a24:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005a28:	52 91       	P2 = [P2];
 1005a2a:	10 e6 51 00 	[P2 + 0x144] = R0;
 1005a2e:	01 e8 00 00 	UNLINK;
 1005a32:	10 00       	RTS;

01005a34 <_le_hci_init>:
 1005a34:	f3 05       	[--SP] = (R7:6, P5:3);
 1005a36:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x4 <_att_client_handler> */
 1005a3a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005a3e:	0d e1 f0 21 	P5.L = 0x21f0;		/* (8688)	P5=0x21f0 <_hci_stack_static> */
 1005a42:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1005a46:	18 32       	P3 = R0;
 1005a48:	31 30       	R6 = R1;
 1005a4a:	3a 30       	R7 = R2;
 1005a4c:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005a50:	bc ae       	P4 = [FP + 0x28];
 1005a52:	55 93       	[P2] = P5;
 1005a54:	45 30       	R0 = P5;
 1005a56:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1005a58:	22 e1 9c 01 	R2 = 0x19c (X);		/*		R2=0x19c(412) */
 1005a5c:	00 e3 a2 51 	CALL 0x100fda0 <_memset>;
 1005a60:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000004(16777220) */
 1005a64:	00 e1 f0 53 	R0.L = 0x53f0;		/* (21488)	R0=0x10053f0 <_dummy_handler>(16798704) */
 1005a68:	6b 93       	[P5] = P3;
 1005a6a:	ef b1       	[P5 + 0x1c] = R7;
 1005a6c:	6e b0       	[P5 + 0x4] = R6;
 1005a6e:	28 e6 51 00 	[P5 + 0x144] = R0;
 1005a72:	2c e7 52 00 	[P5 + 0x148] = P4;
 1005a76:	44 0c       	CC = P4 == 0x0;
 1005a78:	03 1c       	IF CC JUMP 0x1005a7e <_le_hci_init+0x4a> (BP);
 1005a7a:	62 91       	P2 = [P4];
 1005a7c:	62 00       	CALL (P2);
 1005a7e:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x21f0 <_hci_stack_static> */
 1005a82:	0d e1 e8 21 	P5.L = 0x21e8;		/* (8680)	P5=0x21e8 <_hci_stack> */
 1005a86:	6a 91       	P2 = [P5];
 1005a88:	a0 61       	R0 = 0x34 (X);		/*		R0=0x34( 52) */
 1005a8a:	50 e6 97 00 	W[P2 + 0x12e] = R0;
 1005a8e:	da ac       	P2 = [P3 + 0xc];
 1005a90:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000034(16777268) */
 1005a94:	00 e1 2c 61 	R0.L = 0x612c;		/* (24876)	R0=0x100612c <_packet_handler>(16802092) */
 1005a98:	62 00       	CALL (P2);
 1005a9a:	6a 91       	P2 = [P5];
 1005a9c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1005a9e:	10 e6 53 00 	[P2 + 0x14c] = R0;
 1005aa2:	40 e1 7a 00 	R0.H = 0x7a;		/* (122)	R0=0x7a0000(7995392) */
 1005aa6:	00 e1 0c 02 	R0.L = 0x20c;		/* (524)	R0=0x7a020c(7995916) */
 1005aaa:	d0 b0       	[P2 + 0xc] = R0;
 1005aac:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1005aae:	90 e6 6a 01 	B[P2 + 0x16a] = R0;
 1005ab2:	01 e8 00 00 	UNLINK;
 1005ab6:	b3 05       	(R7:6, P5:3) = [SP++];
 1005ab8:	ff e2 be fc 	JUMP.L 0x1005434 <_hci_state_reset>;

01005abc <_le_hci_set_class_of_device>:
 1005abc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005ac0:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1005ac4:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005ac8:	52 91       	P2 = [P2];
 1005aca:	d0 b0       	[P2 + 0xc] = R0;
 1005acc:	01 e8 00 00 	UNLINK;
 1005ad0:	10 00       	RTS;
	...

01005ad4 <_le_hci_set_bd_addr>:
 1005ad4:	c5 04       	[--SP] = (P5:5);
 1005ad6:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005ada:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1005ade:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005ae2:	55 91       	P5 = [P2];
 1005ae4:	2a e1 92 01 	P2 = 0x192 (X);		/*		P2=0x192(402) */
 1005ae8:	08 30       	R1 = R0;
 1005aea:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 1005aec:	95 5a       	P2 = P5 + P2;
 1005aee:	42 30       	R0 = P2;
 1005af0:	00 e3 0a 51 	CALL 0x100fd04 <_memcpy>;
 1005af4:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1005af6:	a8 e6 98 01 	B[P5 + 0x198] = R0;
 1005afa:	01 e8 00 00 	UNLINK;
 1005afe:	85 04       	(P5:5) = [SP++];
 1005b00:	10 00       	RTS;
	...

01005b04 <_le_hci_disable_l2cap_timeout_check>:
 1005b04:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x192 */
 1005b08:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1005b0c:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1005b0e:	0a e1 ec 21 	P2.L = 0x21ec;		/* (8684)	P2=0x21ec <_disable_l2cap_timeouts> */
 1005b12:	10 9b       	B[P2] = R0;
 1005b14:	01 e8 00 00 	UNLINK;
 1005b18:	10 00       	RTS;
	...

01005b1c <_le_hci_local_bd_addr>:
 1005b1c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21ec <_disable_l2cap_timeouts> */
 1005b20:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005b24:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1005b28:	11 91       	R1 = [P2];
 1005b2a:	81 64       	R1 += 0x10;		/* ( 16) */
 1005b2c:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 1005b2e:	01 e8 00 00 	UNLINK;
 1005b32:	00 e2 e9 50 	JUMP.L 0x100fd04 <_memcpy>;
	...

01005b38 <_le_hci_send_cmd_packet>:
 1005b38:	fc 05       	[--SP] = (R7:7, P5:4);
 1005b3a:	28 32       	P5 = R0;
 1005b3c:	39 30       	R7 = R1;
 1005b3e:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x10021e8 */
 1005b42:	0a e1 34 6f 	P2.L = 0x6f34;		/* (28468)	P2=0x1006f34 <_hci_le_set_advertising_parameters> */
 1005b46:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1005b4a:	a9 e4 01 00 	R1 = B[P5 + 0x1] (Z);
 1005b4e:	28 99       	R0 = B[P5] (Z);
 1005b50:	41 4f       	R1 <<= 0x8;
 1005b52:	41 56       	R1 = R1 | R0;
 1005b54:	10 95       	R0 = W[P2] (Z);
 1005b56:	01 08       	CC = R1 == R0;
 1005b58:	0a 14       	IF !CC JUMP 0x1005b6c <_le_hci_send_cmd_packet+0x34> (BP);
 1005b5a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x6f34 */
 1005b5e:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005b62:	52 91       	P2 = [P2];
 1005b64:	a8 e5 08 00 	R0 = B[P5 + 0x8] (X);
 1005b68:	90 e6 73 01 	B[P2 + 0x173] = R0;
 1005b6c:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x10021e8 */
 1005b70:	a9 e4 01 00 	R1 = B[P5 + 0x1] (Z);
 1005b74:	28 99       	R0 = B[P5] (Z);
 1005b76:	41 4f       	R1 <<= 0x8;
 1005b78:	41 56       	R1 = R1 | R0;
 1005b7a:	0a e1 2c 6f 	P2.L = 0x6f2c;		/* (28460)	P2=0x1006f2c <_hci_le_set_random_address> */
 1005b7e:	10 95       	R0 = W[P2] (Z);
 1005b80:	01 08       	CC = R1 == R0;
 1005b82:	0d 14       	IF !CC JUMP 0x1005b9c <_le_hci_send_cmd_packet+0x64> (BP);
 1005b84:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x6f2c */
 1005b88:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005b8c:	11 91       	R1 = [P2];
 1005b8e:	20 e1 74 01 	R0 = 0x174 (X);		/*		R0=0x174(372) */
 1005b92:	01 50       	R0 = R1 + R0;
 1005b94:	4d 30       	R1 = P5;
 1005b96:	19 64       	R1 += 0x3;		/* (  3) */
 1005b98:	00 e3 84 23 	CALL 0x100a2a0 <_bt_flip_addr>;
 1005b9c:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x0 <data_addr> */
 1005ba0:	0c e1 e8 21 	P4.L = 0x21e8;		/* (8680)	P4=0x21e8 <_hci_stack> */
 1005ba4:	62 91       	P2 = [P4];
 1005ba6:	17 30       	R2 = R7;
 1005ba8:	4d 30       	R1 = P5;
 1005baa:	90 e5 2c 01 	R0 = B[P2 + 0x12c] (X);
 1005bae:	f8 67       	R0 += -0x1;		/* ( -1) */
 1005bb0:	90 e6 2c 01 	B[P2 + 0x12c] = R0;
 1005bb4:	52 91       	P2 = [P2];
 1005bb6:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1005bb8:	92 ac       	P2 = [P2 + 0x8];
 1005bba:	62 00       	CALL (P2);
 1005bbc:	38 30       	R7 = R0;
 1005bbe:	ff e3 b5 fd 	CALL 0x1005728 <_hci_transport_synchronous>;
 1005bc2:	00 0c       	CC = R0 == 0x0;
 1005bc4:	09 18       	IF CC JUMP 0x1005bd6 <_le_hci_send_cmd_packet+0x9e>;
 1005bc6:	62 91       	P2 = [P4];
 1005bc8:	4a 32       	P1 = P2;
 1005bca:	29 6d       	P1 += 0x25;		/* ( 37) */
 1005bcc:	4d 08       	CC = P5 == P1;
 1005bce:	04 14       	IF !CC JUMP 0x1005bd6 <_le_hci_send_cmd_packet+0x9e> (BP);
 1005bd0:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1005bd2:	90 e6 27 01 	B[P2 + 0x127] = R0;
 1005bd6:	07 30       	R0 = R7;
 1005bd8:	01 e8 00 00 	UNLINK;
 1005bdc:	bc 05       	(R7:7, P5:4) = [SP++];
 1005bde:	10 00       	RTS;

01005be0 <_le_hci_send_cmd>:
 1005be0:	c4 04       	[--SP] = (P5:4);
 1005be2:	28 32       	P5 = R0;
 1005be4:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1005be8:	ba b1       	[FP + 0x18] = R2;
 1005bea:	79 b1       	[FP + 0x14] = R1;
 1005bec:	22 e1 ff 03 	R2 = 0x3ff (X);		/*		R2=0x3ff(1023) */
 1005bf0:	28 95       	R0 = W[P5] (Z);
 1005bf2:	82 c6 b0 83 	R1 = R0 >> 0xa;
 1005bf6:	90 54       	R2 = R0 & R2;
 1005bf8:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1005bfc:	00 e1 20 6a 	R0.L = 0x6a20;		/* (27168)	R0=0x1006a20(16804384) */
 1005c00:	00 e3 c0 49 	CALL 0x100ef80 <_printf>;
 1005c04:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005c08:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005c0c:	54 91       	P4 = [P2];
 1005c0e:	28 95       	R0 = W[P5] (Z);
 1005c10:	60 e6 b3 00 	W[P4 + 0x166] = R0;
 1005c14:	ff e3 68 fd 	CALL 0x10056e4 <_le_hci_reserve_packet_buffer>;
 1005c18:	2c 6d       	P4 += 0x25;		/* ( 37) */
 1005c1a:	57 30       	R2 = FP;
 1005c1c:	4d 30       	R1 = P5;
 1005c1e:	44 30       	R0 = P4;
 1005c20:	a2 64       	R2 += 0x14;		/* ( 20) */
 1005c22:	00 e3 0b 08 	CALL 0x1006c38 <_le_hci_create_cmd_internal>;
 1005c26:	c1 42       	R1 = R0.L (Z);
 1005c28:	44 30       	R0 = P4;
 1005c2a:	ff e3 87 ff 	CALL 0x1005b38 <_le_hci_send_cmd_packet>;
 1005c2e:	01 e8 00 00 	UNLINK;
 1005c32:	84 04       	(P5:4) = [SP++];
 1005c34:	10 00       	RTS;
	...

01005c38 <_le_hci_run>:
 1005c38:	fd 05       	[--SP] = (R7:7, P5:5);
 1005c3a:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x21e8 <_hci_stack> */
 1005c3e:	00 e8 0d 00 	LINK 0x34;		/* (52) */
 1005c42:	0d e1 e8 21 	P5.L = 0x21e8;		/* (8680)	P5=0x21e8 <_hci_stack> */
 1005c46:	6a 91       	P2 = [P5];
 1005c48:	50 e4 95 00 	R0 = W[P2 + 0x12a] (Z);
 1005c4c:	00 0c       	CC = R0 == 0x0;
 1005c4e:	1c 1c       	IF CC JUMP 0x1005c86 <_le_hci_run+0x4e> (BP);
 1005c50:	90 e4 26 00 	R0 = B[P2 + 0x26] (Z);
 1005c54:	91 e4 25 00 	R1 = B[P2 + 0x25] (Z);
 1005c58:	40 4f       	R0 <<= 0x8;
 1005c5a:	08 56       	R0 = R0 | R1;
 1005c5c:	21 e1 ff 0f 	R1 = 0xfff (X);		/*		R1=0xfff(4095) */
 1005c60:	08 54       	R0 = R0 & R1;
 1005c62:	ff e3 97 fc 	CALL 0x1005590 <_le_hci_connection_for_handle>;
 1005c66:	00 0c       	CC = R0 == 0x0;
 1005c68:	09 18       	IF CC JUMP 0x1005c7a <_le_hci_run+0x42>;
 1005c6a:	21 e1 7c 00 	R1 = 0x7c (X);		/*		R1=0x7c(124) */
 1005c6e:	01 e8 00 00 	UNLINK;
 1005c72:	08 50       	R0 = R0 + R1;
 1005c74:	bd 05       	(R7:7, P5:5) = [SP++];
 1005c76:	ff e2 67 fd 	JUMP.L 0x1005744 <_hci_send_acl_packet_fragments.clone.2>;
 1005c7a:	6a 91       	P2 = [P5];
 1005c7c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1005c7e:	50 e6 95 00 	W[P2 + 0x12a] = R0;
 1005c82:	50 e6 94 00 	W[P2 + 0x128] = R0;
 1005c86:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005c8a:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005c8e:	52 91       	P2 = [P2];
 1005c90:	12 e4 53 00 	R2 = [P2 + 0x14c];
 1005c94:	12 0c       	CC = R2 == 0x2;
 1005c96:	36 14       	IF !CC JUMP 0x1005d02 <_le_hci_run+0xca> (BP);
 1005c98:	10 e4 5f 00 	R0 = [P2 + 0x17c];
 1005c9c:	08 0c       	CC = R0 == 0x1;
 1005c9e:	04 18       	IF CC JUMP 0x1005ca6 <_le_hci_run+0x6e>;
 1005ca0:	18 0c       	CC = R0 == 0x3;
 1005ca2:	18 14       	IF !CC JUMP 0x1005cd2 <_le_hci_run+0x9a> (BP);
 1005ca4:	09 20       	JUMP.S 0x1005cb6 <_le_hci_run+0x7e>;
 1005ca6:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 1005ca8:	10 e6 5f 00 	[P2 + 0x17c] = R0;
 1005cac:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000002(16777218) */
 1005cb0:	00 e1 64 6f 	R0.L = 0x6f64;		/* (28516)	R0=0x1006f64 <_hci_le_set_scan_enable>(16805732) */
 1005cb4:	cf 20       	JUMP.S 0x1005e52 <_le_hci_run+0x21a>;
 1005cb6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1005cb8:	10 e6 5f 00 	[P2 + 0x17c] = R0;
 1005cbc:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1005cc0:	00 e1 64 6f 	R0.L = 0x6f64;		/* (28516)	R0=0x1006f64 <_hci_le_set_scan_enable>(16805732) */
 1005cc4:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1005cc6:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1005cc8:	01 e8 00 00 	UNLINK;
 1005ccc:	bd 05       	(R7:7, P5:5) = [SP++];
 1005cce:	ff e2 89 ff 	JUMP.L 0x1005be0 <_le_hci_send_cmd>;
 1005cd2:	20 e1 ff 00 	R0 = 0xff (X);		/*		R0=0xff(255) */
 1005cd6:	91 e4 80 01 	R1 = B[P2 + 0x180] (Z);
 1005cda:	01 08       	CC = R1 == R0;
 1005cdc:	13 1c       	IF CC JUMP 0x1005d02 <_le_hci_run+0xca> (BP);
 1005cde:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 1005ce0:	90 e6 80 01 	B[P2 + 0x180] = R0;
 1005ce4:	50 e4 c2 00 	R0 = W[P2 + 0x184] (Z);
 1005ce8:	52 e4 c1 00 	R2 = W[P2 + 0x182] (Z);
 1005cec:	f0 b0       	[SP + 0xc] = R0;
 1005cee:	90 e4 73 01 	R0 = B[P2 + 0x173] (Z);
 1005cf2:	30 b1       	[SP + 0x10] = R0;
 1005cf4:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1005cf6:	70 b1       	[SP + 0x14] = R0;
 1005cf8:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1005cfc:	00 e1 5c 6f 	R0.L = 0x6f5c;		/* (28508)	R0=0x1006f5c <_hci_le_set_scan_parameters>(16805724) */
 1005d00:	c5 20       	JUMP.S 0x1005e8a <_le_hci_run+0x252>;
 1005d02:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 1005d04:	15 ae       	P5 = [P2 + 0x20];
 1005d06:	3a 20       	JUMP.S 0x1005d7a <_le_hci_run+0x142>;
 1005d08:	00 00       	NOP;
 1005d0a:	68 a1       	R0 = [P5 + 0x14];
 1005d0c:	10 0c       	CC = R0 == 0x2;
 1005d0e:	24 18       	IF CC JUMP 0x1005d56 <_le_hci_run+0x11e>;
 1005d10:	08 08       	CC = R0 == R1;
 1005d12:	29 18       	IF CC JUMP 0x1005d64 <_le_hci_run+0x12c>;
 1005d14:	00 0c       	CC = R0 == 0x0;
 1005d16:	30 14       	IF !CC JUMP 0x1005d76 <_le_hci_run+0x13e> (BP);
 1005d18:	f0 b0       	[SP + 0xc] = R0;
 1005d1a:	29 a1       	R1 = [P5 + 0x10];
 1005d1c:	31 b1       	[SP + 0x10] = R1;
 1005d1e:	4d 30       	R1 = P5;
 1005d20:	41 64       	R1 += 0x8;		/* (  8) */
 1005d22:	71 b1       	[SP + 0x14] = R1;
 1005d24:	91 e4 73 01 	R1 = B[P2 + 0x173] (Z);
 1005d28:	b1 b1       	[SP + 0x18] = R1;
 1005d2a:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 1005d2c:	70 b2       	[SP + 0x24] = R0;
 1005d2e:	f1 b1       	[SP + 0x1c] = R1;
 1005d30:	20 e1 48 00 	R0 = 0x48 (X);		/*		R0=0x48( 72) */
 1005d34:	c1 60       	R1 = 0x18 (X);		/*		R1=0x18( 24) */
 1005d36:	b0 b2       	[SP + 0x28] = R0;
 1005d38:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 1005d3a:	31 b2       	[SP + 0x20] = R1;
 1005d3c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000048(16777288) */
 1005d40:	f7 b2       	[SP + 0x2c] = R7;
 1005d42:	37 b3       	[SP + 0x30] = R7;
 1005d44:	00 e1 6c 6f 	R0.L = 0x6f6c;		/* (28524)	R0=0x1006f6c <_hci_le_create_connection>(16805740) */
 1005d48:	21 e1 60 00 	R1 = 0x60 (X);		/*		R1=0x60( 96) */
 1005d4c:	82 61       	R2 = 0x30 (X);		/*		R2=0x30( 48) */
 1005d4e:	ff e3 49 ff 	CALL 0x1005be0 <_le_hci_send_cmd>;
 1005d52:	6f b1       	[P5 + 0x14] = R7;
 1005d54:	b1 20       	JUMP.S 0x1005eb6 <_le_hci_run+0x27e>;
 1005d56:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 1005d58:	68 b1       	[P5 + 0x14] = R0;
 1005d5a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000003(16777219) */
 1005d5e:	00 e1 74 6f 	R0.L = 0x6f74;		/* (28532)	R0=0x1006f74 <_hci_le_create_connection_cancel>(16805748) */
 1005d62:	3b 20       	JUMP.S 0x1005dd8 <_le_hci_run+0x1a0>;
 1005d64:	48 60       	R0 = 0x9 (X);		/*		R0=0x9(  9) */
 1005d66:	68 b1       	[P5 + 0x14] = R0;
 1005d68:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000009(16777225) */
 1005d6c:	e9 a5       	R1 = W[P5 + 0xe] (Z);
 1005d6e:	00 e1 54 6e 	R0.L = 0x6e54;		/* (28244)	R0=0x1006e54 <_hci_disconnect>(16805460) */
 1005d72:	9a 60       	R2 = 0x13 (X);		/*		R2=0x13( 19) */
 1005d74:	aa 2f       	JUMP.S 0x1005cc8 <_le_hci_run+0x90>;
 1005d76:	00 00       	NOP;
 1005d78:	6d 91       	P5 = [P5];
 1005d7a:	45 0c       	CC = P5 == 0x0;
 1005d7c:	c6 17       	IF !CC JUMP 0x1005d08 <_le_hci_run+0xd0> (BP);
 1005d7e:	0a 0c       	CC = R2 == 0x1;
 1005d80:	9b 14       	IF !CC JUMP 0x1005eb6 <_le_hci_run+0x27e> (BP);
 1005d82:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1006e54 <_hci_disconnect>(16805460) */
 1005d86:	00 e1 44 6a 	R0.L = 0x6a44;		/* (27204)	R0=0x1006a44(16804420) */
 1005d8a:	00 e3 17 49 	CALL 0x100efb8 <_puts>;
 1005d8e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005d92:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005d96:	52 91       	P2 = [P2];
 1005d98:	51 68       	P1 = 0xa (X);		/*		P1=0xa( 10) */
 1005d9a:	12 e5 54 00 	P2 = [P2 + 0x150];
 1005d9e:	4a 0a       	CC = P2 <= P1 (IU);
 1005da0:	8b 14       	IF !CC JUMP 0x1005eb6 <_le_hci_run+0x27e> (BP);
 1005da2:	49 e1 00 01 	P1.H = 0x100;		/* (256)	P1=0x100000a */
 1005da6:	09 e1 dc 6b 	P1.L = 0x6bdc;		/* (27612)	P1=0x1006bdc */
 1005daa:	91 5e       	P2 = P1 + (P2 << 0x2);
 1005dac:	52 91       	P2 = [P2];
 1005dae:	52 00       	JUMP (P2);
 1005db0:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1006a44(16804420) */
 1005db4:	00 e1 50 6a 	R0.L = 0x6a50;		/* (27216)	R0=0x1006a50(16804432) */
 1005db8:	00 e3 00 49 	CALL 0x100efb8 <_puts>;
 1005dbc:	ff e3 3c fb 	CALL 0x1005434 <_hci_state_reset>;
 1005dc0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005dc4:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005dc8:	52 91       	P2 = [P2];
 1005dca:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1005dcc:	10 e6 54 00 	[P2 + 0x150] = R0;
 1005dd0:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000001(16777217) */
 1005dd4:	00 e1 5c 6e 	R0.L = 0x6e5c;		/* (28252)	R0=0x1006e5c <_hci_reset>(16805468) */
 1005dd8:	01 e8 00 00 	UNLINK;
 1005ddc:	bd 05       	(R7:7, P5:5) = [SP++];
 1005dde:	ff e2 01 ff 	JUMP.L 0x1005be0 <_le_hci_send_cmd>;
 1005de2:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1006e5c <_hci_reset>(16805468) */
 1005de6:	00 e1 68 6a 	R0.L = 0x6a68;		/* (27240)	R0=0x1006a68(16804456) */
 1005dea:	00 e3 e7 48 	CALL 0x100efb8 <_puts>;
 1005dee:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005df2:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005df6:	52 91       	P2 = [P2];
 1005df8:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 1005dfa:	10 e6 54 00 	[P2 + 0x150] = R0;
 1005dfe:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000003(16777219) */
 1005e02:	00 e1 04 6f 	R0.L = 0x6f04;		/* (28420)	R0=0x1006f04 <_hci_read_bd_addr>(16805636) */
 1005e06:	e9 2f       	JUMP.S 0x1005dd8 <_le_hci_run+0x1a0>;
 1005e08:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1006f04 <_hci_read_bd_addr>(16805636) */
 1005e0c:	00 e1 80 6a 	R0.L = 0x6a80;		/* (27264)	R0=0x1006a80(16804480) */
 1005e10:	00 e3 d4 48 	CALL 0x100efb8 <_puts>;
 1005e14:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005e18:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005e1c:	52 91       	P2 = [P2];
 1005e1e:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 1005e20:	10 e6 54 00 	[P2 + 0x150] = R0;
 1005e24:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000005(16777221) */
 1005e28:	00 e1 1c 6f 	R0.L = 0x6f1c;		/* (28444)	R0=0x1006f1c <_hci_le_read_buffer_size>(16805660) */
 1005e2c:	d6 2f       	JUMP.S 0x1005dd8 <_le_hci_run+0x1a0>;
 1005e2e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1006f1c <_hci_le_read_buffer_size>(16805660) */
 1005e32:	00 e1 a0 6a 	R0.L = 0x6aa0;		/* (27296)	R0=0x1006aa0(16804512) */
 1005e36:	00 e3 c1 48 	CALL 0x100efb8 <_puts>;
 1005e3a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005e3e:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005e42:	52 91       	P2 = [P2];
 1005e44:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 1005e46:	10 e6 54 00 	[P2 + 0x150] = R0;
 1005e4a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000007(16777223) */
 1005e4e:	00 e1 e4 6e 	R0.L = 0x6ee4;		/* (28388)	R0=0x1006ee4 <_hci_write_le_host_supported>(16805604) */
 1005e52:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 1005e54:	39 2f       	JUMP.S 0x1005cc6 <_le_hci_run+0x8e>;
 1005e56:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1006ee4 <_hci_write_le_host_supported>(16805604) */
 1005e5a:	00 e1 c4 6a 	R0.L = 0x6ac4;		/* (27332)	R0=0x1006ac4(16804548) */
 1005e5e:	00 e3 ad 48 	CALL 0x100efb8 <_puts>;
 1005e62:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005e66:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005e6a:	52 91       	P2 = [P2];
 1005e6c:	48 60       	R0 = 0x9 (X);		/*		R0=0x9(  9) */
 1005e6e:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 1005e70:	22 e1 e0 01 	R2 = 0x1e0 (X);		/*		R2=0x1e0(480) */
 1005e74:	10 e6 54 00 	[P2 + 0x150] = R0;
 1005e78:	80 61       	R0 = 0x30 (X);		/*		R0=0x30( 48) */
 1005e7a:	f0 b0       	[SP + 0xc] = R0;
 1005e7c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1005e7e:	30 b1       	[SP + 0x10] = R0;
 1005e80:	70 b1       	[SP + 0x14] = R0;
 1005e82:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1005e86:	00 e1 5c 6f 	R0.L = 0x6f5c;		/* (28508)	R0=0x1006f5c <_hci_le_set_scan_parameters>(16805724) */
 1005e8a:	ff e3 ab fe 	CALL 0x1005be0 <_le_hci_send_cmd>;
 1005e8e:	14 20       	JUMP.S 0x1005eb6 <_le_hci_run+0x27e>;
 1005e90:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1006f5c <_hci_le_set_scan_parameters>(16805724) */
 1005e94:	00 e1 e8 6a 	R0.L = 0x6ae8;		/* (27368)	R0=0x1006ae8(16804584) */
 1005e98:	00 e3 90 48 	CALL 0x100efb8 <_puts>;
 1005e9c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005ea0:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005ea4:	52 91       	P2 = [P2];
 1005ea6:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 1005ea8:	10 e6 53 00 	[P2 + 0x14c] = R0;
 1005eac:	01 e8 00 00 	UNLINK;
 1005eb0:	bd 05       	(R7:7, P5:5) = [SP++];
 1005eb2:	ff e2 25 fb 	JUMP.L 0x10054fc <_hci_emit_state>;
 1005eb6:	01 e8 00 00 	UNLINK;
 1005eba:	bd 05       	(R7:7, P5:5) = [SP++];
 1005ebc:	10 00       	RTS;
	...

01005ec0 <_hci_emit_le_connection_complete>:
 1005ec0:	60 05       	[--SP] = (R7:4);
 1005ec2:	28 30       	R5 = R0;
 1005ec4:	00 e8 09 00 	LINK 0x24;		/* (36) */
 1005ec8:	f0 61       	R0 = 0x3e (X);		/*		R0=0x3e( 62) */
 1005eca:	b8 e6 e8 ff 	B[FP + -0x18] = R0;
 1005ece:	98 60       	R0 = 0x13 (X);		/*		R0=0x13( 19) */
 1005ed0:	b8 e6 e9 ff 	B[FP + -0x17] = R0;
 1005ed4:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1005ed6:	b8 e6 ea ff 	B[FP + -0x16] = R0;
 1005eda:	b8 e5 24 00 	R0 = B[FP + 0x24] (X);
 1005ede:	7f 30       	R7 = FP;
 1005ee0:	47 67       	R7 += -0x18;		/* (-24) */
 1005ee2:	21 30       	R4 = R1;
 1005ee4:	b8 e6 eb ff 	B[FP + -0x15] = R0;
 1005ee8:	07 30       	R0 = R7;
 1005eea:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1005eec:	00 e3 76 21 	CALL 0x100a1d8 <_bt_store_16>;
 1005ef0:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 1005ef2:	47 30       	R0 = FP;
 1005ef4:	be e6 ee ff 	B[FP + -0x12] = R6;
 1005ef8:	bd e6 ef ff 	B[FP + -0x11] = R5;
 1005efc:	0c 30       	R1 = R4;
 1005efe:	80 67       	R0 += -0x10;		/* (-16) */
 1005f00:	00 e3 d0 21 	CALL 0x100a2a0 <_bt_flip_addr>;
 1005f04:	07 30       	R0 = R7;
 1005f06:	71 60       	R1 = 0xe (X);		/*		R1=0xe( 14) */
 1005f08:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1005f0a:	00 e3 67 21 	CALL 0x100a1d8 <_bt_store_16>;
 1005f0e:	07 30       	R0 = R7;
 1005f10:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 1005f12:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1005f14:	00 e3 62 21 	CALL 0x100a1d8 <_bt_store_16>;
 1005f18:	07 30       	R0 = R7;
 1005f1a:	91 60       	R1 = 0x12 (X);		/*		R1=0x12( 18) */
 1005f1c:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1005f1e:	00 e3 5d 21 	CALL 0x100a1d8 <_bt_store_16>;
 1005f22:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005f26:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005f2a:	52 91       	P2 = [P2];
 1005f2c:	be e6 fc ff 	B[FP + -0x4] = R6;
 1005f30:	0f 30       	R1 = R7;
 1005f32:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1005f34:	12 e5 51 00 	P2 = [P2 + 0x144];
 1005f38:	aa 60       	R2 = 0x15 (X);		/*		R2=0x15( 21) */
 1005f3a:	62 00       	CALL (P2);
 1005f3c:	01 e8 00 00 	UNLINK;
 1005f40:	20 05       	(R7:4) = [SP++];
 1005f42:	10 00       	RTS;

01005f44 <_le_hci_emit_disconnection_complete>:
 1005f44:	70 05       	[--SP] = (R7:6);
 1005f46:	10 30       	R2 = R0;
 1005f48:	00 e8 05 00 	LINK 0x14;		/* (20) */
 1005f4c:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 1005f4e:	b8 e6 f8 ff 	B[FP + -0x8] = R0;
 1005f52:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1005f54:	b8 e6 f9 ff 	B[FP + -0x7] = R0;
 1005f58:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1005f5a:	7f 30       	R7 = FP;
 1005f5c:	31 30       	R6 = R1;
 1005f5e:	b8 e6 fa ff 	B[FP + -0x6] = R0;
 1005f62:	c7 67       	R7 += -0x8;		/* ( -8) */
 1005f64:	07 30       	R0 = R7;
 1005f66:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 1005f68:	00 e3 38 21 	CALL 0x100a1d8 <_bt_store_16>;
 1005f6c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005f70:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005f74:	52 91       	P2 = [P2];
 1005f76:	be e6 fd ff 	B[FP + -0x3] = R6;
 1005f7a:	0f 30       	R1 = R7;
 1005f7c:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1005f7e:	12 e5 51 00 	P2 = [P2 + 0x144];
 1005f82:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 1005f84:	62 00       	CALL (P2);
 1005f86:	01 e8 00 00 	UNLINK;
 1005f8a:	30 05       	(R7:6) = [SP++];
 1005f8c:	10 00       	RTS;
	...

01005f90 <_le_hci_emit_l2cap_check_timeout>:
 1005f90:	78 05       	[--SP] = (R7:7);
 1005f92:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005f96:	00 e8 04 00 	LINK 0x10;		/* (16) */
 1005f9a:	0a e1 ec 21 	P2.L = 0x21ec;		/* (8684)	P2=0x21ec <_disable_l2cap_timeouts> */
 1005f9e:	11 99       	R1 = B[P2] (Z);
 1005fa0:	01 0c       	CC = R1 == 0x0;
 1005fa2:	1b 14       	IF !CC JUMP 0x1005fd8 <_le_hci_emit_l2cap_check_timeout+0x48> (BP);
 1005fa4:	10 32       	P2 = R0;
 1005fa6:	21 e1 73 00 	R1 = 0x73 (X);		/*		R1=0x73(115) */
 1005faa:	b9 e6 fc ff 	B[FP + -0x4] = R1;
 1005fae:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 1005fb0:	7f 30       	R7 = FP;
 1005fb2:	b9 e6 fd ff 	B[FP + -0x3] = R1;
 1005fb6:	e7 67       	R7 += -0x4;		/* ( -4) */
 1005fb8:	d2 a9       	R2 = W[P2 + 0xe] (X);
 1005fba:	07 30       	R0 = R7;
 1005fbc:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 1005fbe:	00 e3 0d 21 	CALL 0x100a1d8 <_bt_store_16>;
 1005fc2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21ec <_disable_l2cap_timeouts> */
 1005fc6:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005fca:	52 91       	P2 = [P2];
 1005fcc:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1005fce:	0f 30       	R1 = R7;
 1005fd0:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 1005fd2:	12 e5 51 00 	P2 = [P2 + 0x144];
 1005fd6:	62 00       	CALL (P2);
 1005fd8:	01 e8 00 00 	UNLINK;
 1005fdc:	38 05       	(R7:7) = [SP++];
 1005fde:	10 00       	RTS;

01005fe0 <_le_hci_emit_nr_connections_changed>:
 1005fe0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1005fe4:	00 e8 04 00 	LINK 0x10;		/* (16) */
 1005fe8:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1005fec:	20 e1 61 00 	R0 = 0x61 (X);		/*		R0=0x61( 97) */
 1005ff0:	51 91       	P1 = [P2];
 1005ff2:	b8 e6 fc ff 	B[FP + -0x4] = R0;
 1005ff6:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1005ff8:	b8 e6 fd ff 	B[FP + -0x3] = R0;
 1005ffc:	0a ae       	P2 = [P1 + 0x20];
 1005ffe:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1006000:	03 20       	JUMP.S 0x1006006 <_le_hci_emit_nr_connections_changed+0x26>;
 1006002:	08 64       	R0 += 0x1;		/* (  1) */
 1006004:	52 91       	P2 = [P2];
 1006006:	42 0c       	CC = P2 == 0x0;
 1006008:	fd 17       	IF !CC JUMP 0x1006002 <_le_hci_emit_nr_connections_changed+0x22> (BP);
 100600a:	b8 e6 fe ff 	B[FP + -0x2] = R0;
 100600e:	0a e5 51 00 	P2 = [P1 + 0x144];
 1006012:	4f 30       	R1 = FP;
 1006014:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1006016:	e1 67       	R1 += -0x4;		/* ( -4) */
 1006018:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100601a:	62 00       	CALL (P2);
 100601c:	01 e8 00 00 	UNLINK;
 1006020:	10 00       	RTS;
	...

01006024 <_le_hci_emit_hci_open_failed>:
 1006024:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1006028:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100602c:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1006030:	20 e1 62 00 	R0 = 0x62 (X);		/*		R0=0x62( 98) */
 1006034:	52 91       	P2 = [P2];
 1006036:	b8 e6 fc ff 	B[FP + -0x4] = R0;
 100603a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100603c:	b8 e6 fd ff 	B[FP + -0x3] = R0;
 1006040:	12 e5 51 00 	P2 = [P2 + 0x144];
 1006044:	4f 30       	R1 = FP;
 1006046:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1006048:	e1 67       	R1 += -0x4;		/* ( -4) */
 100604a:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100604c:	62 00       	CALL (P2);
 100604e:	01 e8 00 00 	UNLINK;
 1006052:	10 00       	RTS;

01006054 <_le_hci_power_control>:
 1006054:	fd 05       	[--SP] = (R7:7, P5:5);
 1006056:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 100605a:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100605e:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1006062:	51 91       	P1 = [P2];
 1006064:	09 e4 53 00 	R1 = [P1 + 0x14c];
 1006068:	01 0c       	CC = R1 == 0x0;
 100606a:	26 14       	IF !CC JUMP 0x10060b6 <_le_hci_power_control+0x62> (BP);
 100606c:	08 0c       	CC = R0 == 0x1;
 100606e:	24 14       	IF !CC JUMP 0x10060b6 <_le_hci_power_control+0x62> (BP);
 1006070:	ca ad       	P2 = [P1 + 0x1c];
 1006072:	42 0c       	CC = P2 == 0x0;
 1006074:	09 1c       	IF CC JUMP 0x1006086 <_le_hci_power_control+0x32> (BP);
 1006076:	52 91       	P2 = [P2];
 1006078:	42 0c       	CC = P2 == 0x0;
 100607a:	06 1c       	IF CC JUMP 0x1006086 <_le_hci_power_control+0x32> (BP);
 100607c:	48 a0       	R0 = [P1 + 0x4];
 100607e:	62 00       	CALL (P2);
 1006080:	38 30       	R7 = R0;
 1006082:	00 0c       	CC = R0 == 0x0;
 1006084:	16 14       	IF !CC JUMP 0x10060b0 <_le_hci_power_control+0x5c> (BP);
 1006086:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x21e8 <_hci_stack> */
 100608a:	0d e1 e8 21 	P5.L = 0x21e8;		/* (8680)	P5=0x21e8 <_hci_stack> */
 100608e:	6a 91       	P2 = [P5];
 1006090:	51 91       	P1 = [P2];
 1006092:	50 a0       	R0 = [P2 + 0x4];
 1006094:	4a 91       	P2 = [P1];
 1006096:	62 00       	CALL (P2);
 1006098:	38 30       	R7 = R0;
 100609a:	00 0c       	CC = R0 == 0x0;
 100609c:	17 1c       	IF CC JUMP 0x10060ca <_le_hci_power_control+0x76> (BP);
 100609e:	69 91       	P1 = [P5];
 10060a0:	ca ad       	P2 = [P1 + 0x1c];
 10060a2:	42 0c       	CC = P2 == 0x0;
 10060a4:	06 1c       	IF CC JUMP 0x10060b0 <_le_hci_power_control+0x5c> (BP);
 10060a6:	52 ac       	P2 = [P2 + 0x4];
 10060a8:	42 0c       	CC = P2 == 0x0;
 10060aa:	03 1c       	IF CC JUMP 0x10060b0 <_le_hci_power_control+0x5c> (BP);
 10060ac:	48 a0       	R0 = [P1 + 0x4];
 10060ae:	62 00       	CALL (P2);
 10060b0:	ff e3 ba ff 	CALL 0x1006024 <_le_hci_emit_hci_open_failed>;
 10060b4:	06 20       	JUMP.S 0x10060c0 <_le_hci_power_control+0x6c>;
 10060b6:	ff e3 23 fa 	CALL 0x10054fc <_hci_emit_state>;
 10060ba:	ff e3 bf fd 	CALL 0x1005c38 <_le_hci_run>;
 10060be:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 10060c0:	07 30       	R0 = R7;
 10060c2:	01 e8 00 00 	UNLINK;
 10060c6:	bd 05       	(R7:7, P5:5) = [SP++];
 10060c8:	10 00       	RTS;
 10060ca:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 10060cc:	6a 91       	P2 = [P5];
 10060ce:	90 e6 2c 01 	B[P2 + 0x12c] = R0;
 10060d2:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10060d4:	90 e6 27 01 	B[P2 + 0x127] = R0;
 10060d8:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 10060da:	10 e6 53 00 	[P2 + 0x14c] = R0;
 10060de:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10060e0:	10 e6 54 00 	[P2 + 0x150] = R0;
 10060e4:	e9 2f       	JUMP.S 0x10060b6 <_le_hci_power_control+0x62>;
	...

010060e8 <_hci_emit_security_level>:
 10060e8:	70 05       	[--SP] = (R7:6);
 10060ea:	10 30       	R2 = R0;
 10060ec:	00 e8 05 00 	LINK 0x14;		/* (20) */
 10060f0:	00 63       	R0 = -0x20 (X);		/*		R0=0xffffffe0(-32) */
 10060f2:	b8 e6 f8 ff 	B[FP + -0x8] = R0;
 10060f6:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 10060f8:	7f 30       	R7 = FP;
 10060fa:	31 30       	R6 = R1;
 10060fc:	b8 e6 f9 ff 	B[FP + -0x7] = R0;
 1006100:	c7 67       	R7 += -0x8;		/* ( -8) */
 1006102:	07 30       	R0 = R7;
 1006104:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 1006106:	00 e3 69 20 	CALL 0x100a1d8 <_bt_store_16>;
 100610a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 100610e:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1006112:	52 91       	P2 = [P2];
 1006114:	be e6 fc ff 	B[FP + -0x4] = R6;
 1006118:	0f 30       	R1 = R7;
 100611a:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100611c:	12 e5 51 00 	P2 = [P2 + 0x144];
 1006120:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 1006122:	62 00       	CALL (P2);
 1006124:	01 e8 00 00 	UNLINK;
 1006128:	30 05       	(R7:6) = [SP++];
 100612a:	10 00       	RTS;

0100612c <_packet_handler>:
 100612c:	e3 05       	[--SP] = (R7:4, P5:3);
 100612e:	38 30       	R7 = R0;
 1006130:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000004(16777220) */
 1006134:	00 e8 05 00 	LINK 0x14;		/* (20) */
 1006138:	29 32       	P5 = R1;
 100613a:	2a 30       	R5 = R2;
 100613c:	00 e1 fc 6a 	R0.L = 0x6afc;		/* (27388)	R0=0x1006afc(16804604) */
 1006140:	00 e3 3c 47 	CALL 0x100efb8 <_puts>;
 1006144:	7f 43       	R7 = R7.B (Z);
 1006146:	17 0c       	CC = R7 == 0x2;
 1006148:	e8 19       	IF CC JUMP 0x1006518 <_packet_handler+0x3ec>;
 100614a:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100614c:	07 08       	CC = R7 == R0;
 100614e:	02 18       	IF CC JUMP 0x1006152 <_packet_handler+0x26>;
 1006150:	86 22       	JUMP.S 0x100665c <_packet_handler+0x530>;
 1006152:	a8 e4 01 00 	R0 = B[P5 + 0x1] (Z);
 1006156:	ef 42       	R7 = R5.L (Z);
 1006158:	10 64       	R0 += 0x2;		/* (  2) */
 100615a:	07 08       	CC = R7 == R0;
 100615c:	02 18       	IF CC JUMP 0x1006160 <_packet_handler+0x34>;
 100615e:	7f 22       	JUMP.S 0x100665c <_packet_handler+0x530>;
 1006160:	28 99       	R0 = B[P5] (Z);
 1006162:	71 60       	R1 = 0xe (X);		/*		R1=0xe( 14) */
 1006164:	08 08       	CC = R0 == R1;
 1006166:	1b 18       	IF CC JUMP 0x100619c <_packet_handler+0x70>;
 1006168:	08 0a       	CC = R0 <= R1 (IU);
 100616a:	0b 14       	IF !CC JUMP 0x1006180 <_packet_handler+0x54> (BP);
 100616c:	33 60       	R3 = 0x6 (X);		/*		R3=0x6(  6) */
 100616e:	18 08       	CC = R0 == R3;
 1006170:	a7 18       	IF CC JUMP 0x10062be <_packet_handler+0x192>;
 1006172:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 1006174:	08 08       	CC = R0 == R1;
 1006176:	8a 18       	IF CC JUMP 0x100628a <_packet_handler+0x15e>;
 1006178:	2b 60       	R3 = 0x5 (X);		/*		R3=0x5(  5) */
 100617a:	18 08       	CC = R0 == R3;
 100617c:	5e 15       	IF !CC JUMP 0x1006438 <_packet_handler+0x30c> (BP);
 100617e:	d6 20       	JUMP.S 0x100632a <_packet_handler+0x1fe>;
 1006180:	99 60       	R1 = 0x13 (X);		/*		R1=0x13( 19) */
 1006182:	08 08       	CC = R0 == R1;
 1006184:	08 18       	IF CC JUMP 0x1006194 <_packet_handler+0x68>;
 1006186:	f3 61       	R3 = 0x3e (X);		/*		R3=0x3e( 62) */
 1006188:	18 08       	CC = R0 == R3;
 100618a:	ea 18       	IF CC JUMP 0x100635e <_packet_handler+0x232>;
 100618c:	79 60       	R1 = 0xf (X);		/*		R1=0xf( 15) */
 100618e:	08 08       	CC = R0 == R1;
 1006190:	54 15       	IF !CC JUMP 0x1006438 <_packet_handler+0x30c> (BP);
 1006192:	4a 20       	JUMP.S 0x1006226 <_packet_handler+0xfa>;
 1006194:	65 32       	P4 = P5;
 1006196:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 1006198:	03 68       	P3 = 0x0 (X);		/*		P3=0x0(  0) */
 100619a:	73 20       	JUMP.S 0x1006280 <_packet_handler+0x154>;
 100619c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 10061a0:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 10061a4:	52 91       	P2 = [P2];
 10061a6:	a8 e5 02 00 	R0 = B[P5 + 0x2] (X);
 10061aa:	73 60       	R3 = 0xe (X);		/*		R3=0xe( 14) */
 10061ac:	90 e6 2c 01 	B[P2 + 0x12c] = R0;
 10061b0:	28 99       	R0 = B[P5] (Z);
 10061b2:	18 08       	CC = R0 == R3;
 10061b4:	21 14       	IF !CC JUMP 0x10061f6 <_packet_handler+0xca> (BP);
 10061b6:	a9 e4 04 00 	R1 = B[P5 + 0x4] (Z);
 10061ba:	a8 e4 03 00 	R0 = B[P5 + 0x3] (Z);
 10061be:	41 4f       	R1 <<= 0x8;
 10061c0:	49 e1 00 01 	P1.H = 0x100;		/* (256)	P1=0x1006bdc */
 10061c4:	41 56       	R1 = R1 | R0;
 10061c6:	09 e1 1c 6f 	P1.L = 0x6f1c;		/* (28444)	P1=0x1006f1c <_hci_le_read_buffer_size> */
 10061ca:	08 95       	R0 = W[P1] (Z);
 10061cc:	01 08       	CC = R1 == R0;
 10061ce:	14 14       	IF !CC JUMP 0x10061f6 <_packet_handler+0xca> (BP);
 10061d0:	a8 e4 07 00 	R0 = B[P5 + 0x7] (Z);
 10061d4:	a9 e4 06 00 	R1 = B[P5 + 0x6] (Z);
 10061d8:	40 4f       	R0 <<= 0x8;
 10061da:	08 56       	R0 = R0 | R1;
 10061dc:	50 e6 9a 00 	W[P2 + 0x134] = R0;
 10061e0:	a9 e5 08 00 	R1 = B[P5 + 0x8] (X);
 10061e4:	91 e6 32 01 	B[P2 + 0x132] = R1;
 10061e8:	c0 42       	R0 = R0.L (Z);
 10061ea:	a1 61       	R1 = 0x34 (X);		/*		R1=0x34( 52) */
 10061ec:	08 0a       	CC = R0 <= R1 (IU);
 10061ee:	04 1c       	IF CC JUMP 0x10061f6 <_packet_handler+0xca> (BP);
 10061f0:	a0 61       	R0 = 0x34 (X);		/*		R0=0x34( 52) */
 10061f2:	50 e6 9a 00 	W[P2 + 0x134] = R0;
 10061f6:	73 60       	R3 = 0xe (X);		/*		R3=0xe( 14) */
 10061f8:	28 99       	R0 = B[P5] (Z);
 10061fa:	18 08       	CC = R0 == R3;
 10061fc:	1e 15       	IF !CC JUMP 0x1006438 <_packet_handler+0x30c> (BP);
 10061fe:	a9 e4 04 00 	R1 = B[P5 + 0x4] (Z);
 1006202:	a8 e4 03 00 	R0 = B[P5 + 0x3] (Z);
 1006206:	41 4f       	R1 <<= 0x8;
 1006208:	49 e1 00 01 	P1.H = 0x100;		/* (256)	P1=0x1006f1c <_hci_le_read_buffer_size> */
 100620c:	41 56       	R1 = R1 | R0;
 100620e:	09 e1 04 6f 	P1.L = 0x6f04;		/* (28420)	P1=0x1006f04 <_hci_read_bd_addr> */
 1006212:	08 95       	R0 = W[P1] (Z);
 1006214:	01 08       	CC = R1 == R0;
 1006216:	11 15       	IF !CC JUMP 0x1006438 <_packet_handler+0x30c> (BP);
 1006218:	42 30       	R0 = P2;
 100621a:	4d 30       	R1 = P5;
 100621c:	80 64       	R0 += 0x10;		/* ( 16) */
 100621e:	31 64       	R1 += 0x6;		/* (  6) */
 1006220:	00 e3 40 20 	CALL 0x100a2a0 <_bt_flip_addr>;
 1006224:	0a 21       	JUMP.S 0x1006438 <_packet_handler+0x30c>;
 1006226:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 100622a:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 100622e:	52 91       	P2 = [P2];
 1006230:	a8 e5 03 00 	R0 = B[P5 + 0x3] (X);
 1006234:	90 e6 2c 01 	B[P2 + 0x12c] = R0;
 1006238:	00 21       	JUMP.S 0x1006438 <_packet_handler+0x30c>;
 100623a:	00 00       	NOP;
 100623c:	a0 e4 04 00 	R0 = B[P4 + 0x4] (Z);
 1006240:	a1 e4 03 00 	R1 = B[P4 + 0x3] (Z);
 1006244:	40 4f       	R0 <<= 0x8;
 1006246:	a4 e5 05 00 	R4 = B[P4 + 0x5] (X);
 100624a:	a6 e5 06 00 	R6 = B[P4 + 0x6] (X);
 100624e:	08 56       	R0 = R0 | R1;
 1006250:	ff e3 a0 f9 	CALL 0x1005590 <_le_hci_connection_for_handle>;
 1006254:	10 32       	P2 = R0;
 1006256:	42 0c       	CC = P2 == 0x0;
 1006258:	12 18       	IF CC JUMP 0x100627c <_packet_handler+0x150>;
 100625a:	76 43       	R6 = R6.B (Z);
 100625c:	46 4f       	R6 <<= 0x8;
 100625e:	64 43       	R4 = R4.B (Z);
 1006260:	26 57       	R4 = R6 | R4;
 1006262:	90 e5 7c 00 	R0 = B[P2 + 0x7c] (X);
 1006266:	42 43       	R2 = R0.B (Z);
 1006268:	e1 42       	R1 = R4.L (Z);
 100626a:	8a 09       	CC = R2 < R1 (IU);
 100626c:	05 1c       	IF CC JUMP 0x1006276 <_packet_handler+0x14a> (BP);
 100626e:	20 53       	R4 = R0 - R4;
 1006270:	94 e6 7c 00 	B[P2 + 0x7c] = R4;
 1006274:	04 20       	JUMP.S 0x100627c <_packet_handler+0x150>;
 1006276:	43 30       	R0 = P3;
 1006278:	90 e6 7c 00 	B[P2 + 0x7c] = R0;
 100627c:	0f 64       	R7 += 0x1;		/* (  1) */
 100627e:	24 6c       	P4 += 0x4;		/* (  4) */
 1006280:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 1006284:	87 08       	CC = R7 < R0;
 1006286:	da 1f       	IF CC JUMP 0x100623a <_packet_handler+0x10e> (BP);
 1006288:	d8 20       	JUMP.S 0x1006438 <_packet_handler+0x30c>;
 100628a:	a8 e4 04 00 	R0 = B[P5 + 0x4] (Z);
 100628e:	a9 e4 03 00 	R1 = B[P5 + 0x3] (Z);
 1006292:	40 4f       	R0 <<= 0x8;
 1006294:	08 56       	R0 = R0 | R1;
 1006296:	38 30       	R7 = R0;
 1006298:	ff e3 7c f9 	CALL 0x1005590 <_le_hci_connection_for_handle>;
 100629c:	10 32       	P2 = R0;
 100629e:	42 0c       	CC = P2 == 0x0;
 10062a0:	cc 1c       	IF CC JUMP 0x1006438 <_packet_handler+0x30c> (BP);
 10062a2:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 10062a6:	00 0c       	CC = R0 == 0x0;
 10062a8:	39 14       	IF !CC JUMP 0x100631a <_packet_handler+0x1ee> (BP);
 10062aa:	a8 e4 05 00 	R0 = B[P5 + 0x5] (Z);
 10062ae:	00 0c       	CC = R0 == 0x0;
 10062b0:	50 a2       	R0 = [P2 + 0x24];
 10062b2:	03 1c       	IF CC JUMP 0x10062b8 <_packet_handler+0x18c> (BP);
 10062b4:	78 4a       	BITSET (R0, 0xf);		/* bit 15 */
 10062b6:	02 20       	JUMP.S 0x10062ba <_packet_handler+0x18e>;
 10062b8:	78 4c       	BITCLR (R0, 0xf);		/* bit 15 */
 10062ba:	50 b2       	[P2 + 0x24] = R0;
 10062bc:	2f 20       	JUMP.S 0x100631a <_packet_handler+0x1ee>;
 10062be:	a8 e4 04 00 	R0 = B[P5 + 0x4] (Z);
 10062c2:	a9 e4 03 00 	R1 = B[P5 + 0x3] (Z);
 10062c6:	40 4f       	R0 <<= 0x8;
 10062c8:	08 56       	R0 = R0 | R1;
 10062ca:	38 30       	R7 = R0;
 10062cc:	ff e3 62 f9 	CALL 0x1005590 <_le_hci_connection_for_handle>;
 10062d0:	10 32       	P2 = R0;
 10062d2:	42 0c       	CC = P2 == 0x0;
 10062d4:	b2 1c       	IF CC JUMP 0x1006438 <_packet_handler+0x30c> (BP);
 10062d6:	10 ab       	R0 = W[P2 + 0x18] (X);
 10062d8:	38 48       	CC = !BITTST (R0, 0x7);		/* bit  7 */
 10062da:	09 1c       	IF CC JUMP 0x10062ec <_packet_handler+0x1c0> (BP);
 10062dc:	38 4c       	BITCLR (R0, 0x7);		/* bit  7 */
 10062de:	20 4a       	BITSET (R0, 0x4);		/* bit  4 */
 10062e0:	10 b7       	W[P2 + 0x18] = R0;
 10062e2:	a8 e5 02 00 	R0 = B[P5 + 0x2] (X);
 10062e6:	90 e6 1a 00 	B[P2 + 0x1a] = R0;
 10062ea:	a7 20       	JUMP.S 0x1006438 <_packet_handler+0x30c>;
 10062ec:	00 00       	NOP;
 10062ee:	a9 e4 02 00 	R1 = B[P5 + 0x2] (Z);
 10062f2:	01 0c       	CC = R1 == 0x0;
 10062f4:	13 14       	IF !CC JUMP 0x100631a <_packet_handler+0x1ee> (BP);
 10062f6:	40 68       	P0 = 0x8 (X);		/*		P0=0x8(  8) */
 10062f8:	11 ae       	P1 = [P2 + 0x20];
 10062fa:	41 0a       	CC = P1 <= P0 (IU);
 10062fc:	08 14       	IF !CC JUMP 0x100630c <_packet_handler+0x1e0> (BP);
 10062fe:	48 e1 00 01 	P0.H = 0x100;		/* (256)	P0=0x1000008 */
 1006302:	08 e1 14 6c 	P0.L = 0x6c14;		/* (27668)	P0=0x1006c14 <_CSWTCH.74> */
 1006306:	48 5e       	P1 = P0 + (P1 << 0x2);
 1006308:	09 91       	R1 = [P1];
 100630a:	02 20       	JUMP.S 0x100630e <_packet_handler+0x1e2>;
 100630c:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 100630e:	d2 a1       	R2 = [P2 + 0x1c];
 1006310:	91 09       	CC = R1 < R2 (IU);
 1006312:	04 1c       	IF CC JUMP 0x100631a <_packet_handler+0x1ee> (BP);
 1006314:	30 4a       	BITSET (R0, 0x6);		/* bit  6 */
 1006316:	10 b7       	W[P2 + 0x18] = R0;
 1006318:	90 20       	JUMP.S 0x1006438 <_packet_handler+0x30c>;
 100631a:	42 30       	R0 = P2;
 100631c:	ff e3 72 f8 	CALL 0x1005400 <_gap_security_level_for_connection>;
 1006320:	08 30       	R1 = R0;
 1006322:	07 30       	R0 = R7;
 1006324:	ff e3 e2 fe 	CALL 0x10060e8 <_hci_emit_security_level>;
 1006328:	88 20       	JUMP.S 0x1006438 <_packet_handler+0x30c>;
 100632a:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 100632e:	00 0c       	CC = R0 == 0x0;
 1006330:	84 14       	IF !CC JUMP 0x1006438 <_packet_handler+0x30c> (BP);
 1006332:	af e4 04 00 	R7 = B[P5 + 0x4] (Z);
 1006336:	a8 e4 03 00 	R0 = B[P5 + 0x3] (Z);
 100633a:	47 4f       	R7 <<= 0x8;
 100633c:	c7 57       	R7 = R7 | R0;
 100633e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000034(16777268) */
 1006342:	f9 42       	R1 = R7.L (Z);
 1006344:	00 e1 08 6b 	R0.L = 0x6b08;		/* (27400)	R0=0x1006b08(16804616) */
 1006348:	00 e3 1c 46 	CALL 0x100ef80 <_printf>;
 100634c:	07 30       	R0 = R7;
 100634e:	ff e3 21 f9 	CALL 0x1005590 <_le_hci_connection_for_handle>;
 1006352:	10 32       	P2 = R0;
 1006354:	42 0c       	CC = P2 == 0x0;
 1006356:	71 18       	IF CC JUMP 0x1006438 <_packet_handler+0x30c>;
 1006358:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100635a:	50 b1       	[P2 + 0x14] = R0;
 100635c:	6e 20       	JUMP.S 0x1006438 <_packet_handler+0x30c>;
 100635e:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 1006362:	08 0c       	CC = R0 == 0x1;
 1006364:	17 18       	IF CC JUMP 0x1006392 <_packet_handler+0x266>;
 1006366:	10 0c       	CC = R0 == 0x2;
 1006368:	68 14       	IF !CC JUMP 0x1006438 <_packet_handler+0x30c> (BP);
 100636a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100000a(16777226) */
 100636e:	00 e1 24 6b 	R0.L = 0x6b24;		/* (27428)	R0=0x1006b24(16804644) */
 1006372:	00 e3 23 46 	CALL 0x100efb8 <_puts>;
 1006376:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 100637a:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 100637e:	52 91       	P2 = [P2];
 1006380:	10 e4 5f 00 	R0 = [P2 + 0x17c];
 1006384:	10 0c       	CC = R0 == 0x2;
 1006386:	59 14       	IF !CC JUMP 0x1006438 <_packet_handler+0x30c> (BP);
 1006388:	45 30       	R0 = P5;
 100638a:	0f 30       	R1 = R7;
 100638c:	ff e3 04 fb 	CALL 0x1005994 <_le_handle_advertisement_report>;
 1006390:	54 20       	JUMP.S 0x1006438 <_packet_handler+0x30c>;
 1006392:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1006b24(16804644) */
 1006396:	00 e1 40 6b 	R0.L = 0x6b40;		/* (27456)	R0=0x1006b40(16804672) */
 100639a:	00 e3 0f 46 	CALL 0x100efb8 <_puts>;
 100639e:	7f 30       	R7 = FP;
 10063a0:	c7 67       	R7 += -0x8;		/* ( -8) */
 10063a2:	4d 30       	R1 = P5;
 10063a4:	41 64       	R1 += 0x8;		/* (  8) */
 10063a6:	07 30       	R0 = R7;
 10063a8:	00 e3 7c 1f 	CALL 0x100a2a0 <_bt_flip_addr>;
 10063ac:	ae e4 07 00 	R6 = B[P5 + 0x7] (Z);
 10063b0:	45 30       	R0 = P5;
 10063b2:	ff e3 49 d2 	CALL 0x1000844 <_debug_link>;
 10063b6:	07 30       	R0 = R7;
 10063b8:	0e 30       	R1 = R6;
 10063ba:	ff e3 0d f9 	CALL 0x10055d4 <_le_hci_connection_for_bd_addr_and_type>;
 10063be:	20 32       	P4 = R0;
 10063c0:	a8 e4 03 00 	R0 = B[P5 + 0x3] (Z);
 10063c4:	00 0c       	CC = R0 == 0x0;
 10063c6:	19 1c       	IF CC JUMP 0x10063f8 <_packet_handler+0x2cc> (BP);
 10063c8:	44 0c       	CC = P4 == 0x0;
 10063ca:	0d 18       	IF CC JUMP 0x10063e4 <_packet_handler+0x2b8>;
 10063cc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 10063d0:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 10063d4:	4c 30       	R1 = P4;
 10063d6:	10 91       	R0 = [P2];
 10063d8:	00 65       	R0 += 0x20;		/* ( 32) */
 10063da:	00 e3 83 09 	CALL 0x10076e0 <_linked_list_remove>;
 10063de:	44 30       	R0 = P4;
 10063e0:	ff e3 4c e9 	CALL 0x1003678 <_le_btstack_memory_hci_connection_free>;
 10063e4:	a8 e4 03 00 	R0 = B[P5 + 0x3] (Z);
 10063e8:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 10063ea:	08 08       	CC = R0 == R1;
 10063ec:	26 14       	IF !CC JUMP 0x1006438 <_packet_handler+0x30c> (BP);
 10063ee:	47 30       	R0 = FP;
 10063f0:	c0 67       	R0 += -0x8;		/* ( -8) */
 10063f2:	ff e3 ed f7 	CALL 0x10053cc <_hci_drop_link_key_for_bd_addr>;
 10063f6:	21 20       	JUMP.S 0x1006438 <_packet_handler+0x30c>;
 10063f8:	44 0c       	CC = P4 == 0x0;
 10063fa:	14 14       	IF !CC JUMP 0x1006422 <_packet_handler+0x2f6> (BP);
 10063fc:	47 30       	R0 = FP;
 10063fe:	c0 67       	R0 += -0x8;		/* ( -8) */
 1006400:	0e 30       	R1 = R6;
 1006402:	ff e3 49 f8 	CALL 0x1005494 <_create_connection_for_bd_addr_and_type>;
 1006406:	20 32       	P4 = R0;
 1006408:	44 0c       	CC = P4 == 0x0;
 100640a:	0c 14       	IF !CC JUMP 0x1006422 <_packet_handler+0x2f6> (BP);
 100640c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1006b40(16804672) */
 1006410:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000005(16777221) */
 1006414:	00 e1 58 6b 	R0.L = 0x6b58;		/* (27480)	R0=0x1006b58(16804696) */
 1006418:	01 e1 6c 6b 	R1.L = 0x6b6c;		/* (27500)	R1=0x1006b6c(16804716) */
 100641c:	00 e3 b2 45 	CALL 0x100ef80 <_printf>;
 1006420:	00 20       	JUMP.S 0x1006420 <_packet_handler+0x2f4>;
 1006422:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 1006424:	60 b1       	[P4 + 0x14] = R0;
 1006426:	a8 e4 05 00 	R0 = B[P5 + 0x5] (Z);
 100642a:	a9 e4 04 00 	R1 = B[P5 + 0x4] (Z);
 100642e:	40 4f       	R0 <<= 0x8;
 1006430:	08 56       	R0 = R0 | R1;
 1006432:	e0 b5       	W[P4 + 0xe] = R0;
 1006434:	ff e3 d6 fd 	CALL 0x1005fe0 <_le_hci_emit_nr_connections_changed>;
 1006438:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 100643c:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1006440:	52 91       	P2 = [P2];
 1006442:	10 e4 53 00 	R0 = [P2 + 0x14c];
 1006446:	08 0c       	CC = R0 == 0x1;
 1006448:	3c 14       	IF !CC JUMP 0x10064c0 <_packet_handler+0x394> (BP);
 100644a:	28 99       	R0 = B[P5] (Z);
 100644c:	73 60       	R3 = 0xe (X);		/*		R3=0xe( 14) */
 100644e:	18 08       	CC = R0 == R3;
 1006450:	0c 14       	IF !CC JUMP 0x1006468 <_packet_handler+0x33c> (BP);
 1006452:	a8 e4 04 00 	R0 = B[P5 + 0x4] (Z);
 1006456:	40 4f       	R0 <<= 0x8;
 1006458:	aa e4 03 00 	R2 = B[P5 + 0x3] (Z);
 100645c:	51 e4 b3 00 	R1 = W[P2 + 0x166] (Z);
 1006460:	02 56       	R0 = R2 | R0;
 1006462:	01 08       	CC = R1 == R0;
 1006464:	07 02       	R7 = CC;
 1006466:	15 20       	JUMP.S 0x1006490 <_packet_handler+0x364>;
 1006468:	79 60       	R1 = 0xf (X);		/*		R1=0xf( 15) */
 100646a:	08 08       	CC = R0 == R1;
 100646c:	11 14       	IF !CC JUMP 0x100648e <_packet_handler+0x362> (BP);
 100646e:	a8 e4 05 00 	R0 = B[P5 + 0x5] (Z);
 1006472:	40 4f       	R0 <<= 0x8;
 1006474:	aa e4 04 00 	R2 = B[P5 + 0x4] (Z);
 1006478:	51 e4 b3 00 	R1 = W[P2 + 0x166] (Z);
 100647c:	02 56       	R0 = R2 | R0;
 100647e:	af e5 02 00 	R7 = B[P5 + 0x2] (X);
 1006482:	01 08       	CC = R1 == R0;
 1006484:	05 14       	IF !CC JUMP 0x100648e <_packet_handler+0x362> (BP);
 1006486:	7f 43       	R7 = R7.B (Z);
 1006488:	bf 43       	R7 = -R7;
 100648a:	ff 4e       	R7 >>= 0x1f;
 100648c:	02 20       	JUMP.S 0x1006490 <_packet_handler+0x364>;
 100648e:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 1006490:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000007(16777223) */
 1006494:	00 e1 78 6b 	R0.L = 0x6b78;		/* (27512)	R0=0x1006b78(16804728) */
 1006498:	00 e3 90 45 	CALL 0x100efb8 <_puts>;
 100649c:	07 48       	CC = !BITTST (R7, 0x0);		/* bit  0 */
 100649e:	11 1c       	IF CC JUMP 0x10064c0 <_packet_handler+0x394> (BP);
 10064a0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 10064a4:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 10064a8:	52 91       	P2 = [P2];
 10064aa:	10 e4 54 00 	R0 = [P2 + 0x150];
 10064ae:	08 64       	R0 += 0x1;		/* (  1) */
 10064b0:	10 e6 54 00 	[P2 + 0x150] = R0;
 10064b4:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1006b78(16804728) */
 10064b8:	00 e1 8c 6b 	R0.L = 0x6b8c;		/* (27532)	R0=0x1006b8c(16804748) */
 10064bc:	00 e3 7e 45 	CALL 0x100efb8 <_puts>;
 10064c0:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x21e8 <_hci_stack> */
 10064c4:	0c e1 e8 21 	P4.L = 0x21e8;		/* (8680)	P4=0x21e8 <_hci_stack> */
 10064c8:	62 91       	P2 = [P4];
 10064ca:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 10064cc:	4d 30       	R1 = P5;
 10064ce:	15 30       	R2 = R5;
 10064d0:	12 e5 51 00 	P2 = [P2 + 0x144];
 10064d4:	62 00       	CALL (P2);
 10064d6:	28 99       	R0 = B[P5] (Z);
 10064d8:	2b 60       	R3 = 0x5 (X);		/*		R3=0x5(  5) */
 10064da:	18 08       	CC = R0 == R3;
 10064dc:	be 14       	IF !CC JUMP 0x1006658 <_packet_handler+0x52c> (BP);
 10064de:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 10064e2:	00 0c       	CC = R0 == 0x0;
 10064e4:	ba 14       	IF !CC JUMP 0x1006658 <_packet_handler+0x52c> (BP);
 10064e6:	a8 e4 04 00 	R0 = B[P5 + 0x4] (Z);
 10064ea:	a9 e4 03 00 	R1 = B[P5 + 0x3] (Z);
 10064ee:	40 4f       	R0 <<= 0x8;
 10064f0:	08 56       	R0 = R0 | R1;
 10064f2:	ff e3 4f f8 	CALL 0x1005590 <_le_hci_connection_for_handle>;
 10064f6:	38 30       	R7 = R0;
 10064f8:	00 0c       	CC = R0 == 0x0;
 10064fa:	af 18       	IF CC JUMP 0x1006658 <_packet_handler+0x52c>;
 10064fc:	40 65       	R0 += 0x28;		/* ( 40) */
 10064fe:	00 e3 e3 45 	CALL 0x100f0c4 <_sys_timer_remove>;
 1006502:	0f 30       	R1 = R7;
 1006504:	20 91       	R0 = [P4];
 1006506:	00 65       	R0 += 0x20;		/* ( 32) */
 1006508:	00 e3 ec 08 	CALL 0x10076e0 <_linked_list_remove>;
 100650c:	07 30       	R0 = R7;
 100650e:	ff e3 b5 e8 	CALL 0x1003678 <_le_btstack_memory_hci_connection_free>;
 1006512:	ff e3 67 fd 	CALL 0x1005fe0 <_le_hci_emit_nr_connections_changed>;
 1006516:	a1 20       	JUMP.S 0x1006658 <_packet_handler+0x52c>;
 1006518:	a8 e4 01 00 	R0 = B[P5 + 0x1] (Z);
 100651c:	29 99       	R1 = B[P5] (Z);
 100651e:	40 4f       	R0 <<= 0x8;
 1006520:	08 56       	R0 = R0 | R1;
 1006522:	21 e1 ff 0f 	R1 = 0xfff (X);		/*		R1=0xfff(4095) */
 1006526:	08 54       	R0 = R0 & R1;
 1006528:	ff e3 34 f8 	CALL 0x1005590 <_le_hci_connection_for_handle>;
 100652c:	20 32       	P4 = R0;
 100652e:	a8 e5 01 00 	R0 = B[P5 + 0x1] (X);
 1006532:	a9 e5 02 00 	R1 = B[P5 + 0x2] (X);
 1006536:	af e5 03 00 	R7 = B[P5 + 0x3] (X);
 100653a:	44 0c       	CC = P4 == 0x0;
 100653c:	0c 14       	IF !CC JUMP 0x1006554 <_packet_handler+0x428> (BP);
 100653e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000004(16777220) */
 1006542:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000fff(16781311) */
 1006546:	00 e1 9c 6b 	R0.L = 0x6b9c;		/* (27548)	R0=0x1006b9c(16804764) */
 100654a:	01 e1 08 6c 	R1.L = 0x6c08;		/* (27656)	R1=0x1006c08 <___func__.3623>(16804872) */
 100654e:	00 e3 19 45 	CALL 0x100ef80 <_printf>;
 1006552:	00 20       	JUMP.S 0x1006552 <_packet_handler+0x426>;
 1006554:	7f 43       	R7 = R7.B (Z);
 1006556:	49 43       	R1 = R1.B (Z);
 1006558:	47 4f       	R7 <<= 0x8;
 100655a:	cf 57       	R7 = R7 | R1;
 100655c:	fa 42       	R2 = R7.L (Z);
 100655e:	1a 30       	R3 = R2;
 1006560:	23 64       	R3 += 0x4;		/* (  4) */
 1006562:	ed 42       	R5 = R5.L (Z);
 1006564:	0f 30       	R1 = R7;
 1006566:	2b 08       	CC = R3 == R5;
 1006568:	7a 14       	IF !CC JUMP 0x100665c <_packet_handler+0x530> (BP);
 100656a:	20 4e       	R0 >>= 0x4;
 100656c:	1e 60       	R6 = 0x3 (X);		/*		R6=0x3(  3) */
 100656e:	30 54       	R0 = R0 & R6;
 1006570:	08 0c       	CC = R0 == 0x1;
 1006572:	04 18       	IF CC JUMP 0x100657a <_packet_handler+0x44e>;
 1006574:	10 0c       	CC = R0 == 0x2;
 1006576:	66 14       	IF !CC JUMP 0x1006642 <_packet_handler+0x516> (BP);
 1006578:	2f 20       	JUMP.S 0x10065d6 <_packet_handler+0x4aa>;
 100657a:	60 e4 3c 00 	R0 = W[P4 + 0x78] (Z);
 100657e:	00 0c       	CC = R0 == 0x0;
 1006580:	6e 18       	IF CC JUMP 0x100665c <_packet_handler+0x530>;
 1006582:	42 50       	R1 = R2 + R0;
 1006584:	e3 61       	R3 = 0x3c (X);		/*		R3=0x3c( 60) */
 1006586:	19 09       	CC = R1 <= R3;
 1006588:	05 18       	IF CC JUMP 0x1006592 <_packet_handler+0x466>;
 100658a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100658c:	60 e6 3c 00 	W[P4 + 0x78] = R0;
 1006590:	66 20       	JUMP.S 0x100665c <_packet_handler+0x530>;
 1006592:	74 30       	R6 = P4;
 1006594:	e6 65       	R6 += 0x3c;		/* ( 60) */
 1006596:	4d 30       	R1 = P5;
 1006598:	21 64       	R1 += 0x4;		/* (  4) */
 100659a:	06 50       	R0 = R6 + R0;
 100659c:	00 e3 b4 4b 	CALL 0x100fd04 <_memcpy>;
 10065a0:	62 e5 3c 00 	R2 = W[P4 + 0x78] (X);
 10065a4:	97 50       	R2 = R7 + R2;
 10065a6:	60 e4 3d 00 	R0 = W[P4 + 0x7a] (Z);
 10065aa:	38 64       	R0 += 0x7;		/* (  7) */
 10065ac:	d1 42       	R1 = R2.L (Z);
 10065ae:	62 e6 3c 00 	W[P4 + 0x78] = R2;
 10065b2:	88 08       	CC = R0 < R1;
 10065b4:	52 14       	IF !CC JUMP 0x1006658 <_packet_handler+0x52c> (BP);
 10065b6:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 10065ba:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 10065be:	52 91       	P2 = [P2];
 10065c0:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 10065c2:	0e 30       	R1 = R6;
 10065c4:	12 e5 51 00 	P2 = [P2 + 0x144];
 10065c8:	62 00       	CALL (P2);
 10065ca:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10065cc:	60 e6 3d 00 	W[P4 + 0x7a] = R0;
 10065d0:	60 e6 3c 00 	W[P4 + 0x78] = R0;
 10065d4:	42 20       	JUMP.S 0x1006658 <_packet_handler+0x52c>;
 10065d6:	60 e4 3c 00 	R0 = W[P4 + 0x78] (Z);
 10065da:	00 0c       	CC = R0 == 0x0;
 10065dc:	04 1c       	IF CC JUMP 0x10065e4 <_packet_handler+0x4b8> (BP);
 10065de:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10065e0:	60 e6 3c 00 	W[P4 + 0x78] = R0;
 10065e4:	00 00       	NOP;
 10065e6:	ad e4 05 00 	R5 = B[P5 + 0x5] (Z);
 10065ea:	a8 e4 04 00 	R0 = B[P5 + 0x4] (Z);
 10065ee:	45 4f       	R5 <<= 0x8;
 10065f0:	45 57       	R5 = R5 | R0;
 10065f2:	e8 42       	R0 = R5.L (Z);
 10065f4:	18 64       	R0 += 0x3;		/* (  3) */
 10065f6:	90 08       	CC = R0 < R2;
 10065f8:	0e 14       	IF !CC JUMP 0x1006614 <_packet_handler+0x4e8> (BP);
 10065fa:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 10065fe:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1006602:	52 91       	P2 = [P2];
 1006604:	17 30       	R2 = R7;
 1006606:	22 64       	R2 += 0x4;		/* (  4) */
 1006608:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100660a:	12 e5 51 00 	P2 = [P2 + 0x144];
 100660e:	4d 30       	R1 = P5;
 1006610:	62 00       	CALL (P2);
 1006612:	23 20       	JUMP.S 0x1006658 <_packet_handler+0x52c>;
 1006614:	c9 42       	R1 = R1.L (Z);
 1006616:	c0 61       	R0 = 0x38 (X);		/*		R0=0x38( 56) */
 1006618:	01 0a       	CC = R1 <= R0 (IU);
 100661a:	21 14       	IF !CC JUMP 0x100665c <_packet_handler+0x530> (BP);
 100661c:	64 30       	R4 = P4;
 100661e:	e4 65       	R4 += 0x3c;		/* ( 60) */
 1006620:	4d 30       	R1 = P5;
 1006622:	13 30       	R2 = R3;
 1006624:	04 30       	R0 = R4;
 1006626:	00 e3 6f 4b 	CALL 0x100fd04 <_memcpy>;
 100662a:	27 64       	R7 += 0x4;		/* (  4) */
 100662c:	15 30       	R2 = R5;
 100662e:	67 e6 3c 00 	W[P4 + 0x78] = R7;
 1006632:	65 e6 3d 00 	W[P4 + 0x7a] = R5;
 1006636:	22 64       	R2 += 0x4;		/* (  4) */
 1006638:	04 30       	R0 = R4;
 100663a:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 100663c:	00 e3 ce 1d 	CALL 0x100a1d8 <_bt_store_16>;
 1006640:	0c 20       	JUMP.S 0x1006658 <_packet_handler+0x52c>;
 1006642:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000038(16777272) */
 1006646:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000002(16777218) */
 100664a:	00 e1 58 6b 	R0.L = 0x6b58;		/* (27480)	R0=0x1006b58(16804696) */
 100664e:	01 e1 bc 6b 	R1.L = 0x6bbc;		/* (27580)	R1=0x1006bbc(16804796) */
 1006652:	00 e3 97 44 	CALL 0x100ef80 <_printf>;
 1006656:	00 20       	JUMP.S 0x1006656 <_packet_handler+0x52a>;
 1006658:	ff e3 f0 fa 	CALL 0x1005c38 <_le_hci_run>;
 100665c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1006b58(16804696) */
 1006660:	00 e1 d0 6b 	R0.L = 0x6bd0;		/* (27600)	R0=0x1006bd0(16804816) */
 1006664:	00 e3 aa 44 	CALL 0x100efb8 <_puts>;
 1006668:	01 e8 00 00 	UNLINK;
 100666c:	a3 05       	(R7:4, P5:3) = [SP++];
 100666e:	10 00       	RTS;

01006670 <_gap_set_bondable_mode>:
 1006670:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1006674:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1006678:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 100667c:	52 91       	P2 = [P2];
 100667e:	00 0c       	CC = R0 == 0x0;
 1006680:	00 02       	R0 = CC;
 1006682:	00 4b       	BITTGL (R0, 0x0);		/* bit  0 */
 1006684:	90 e6 6a 01 	B[P2 + 0x16a] = R0;
 1006688:	01 e8 00 00 	UNLINK;
 100668c:	10 00       	RTS;
	...

01006690 <_gap_security_level_for_link_key_type>:
 1006690:	10 32       	P2 = R0;
 1006692:	41 68       	P1 = 0x8 (X);		/*		P1=0x8(  8) */
 1006694:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1006698:	4a 0a       	CC = P2 <= P1 (IU);
 100669a:	08 10       	IF !CC JUMP 0x10066aa <_gap_security_level_for_link_key_type+0x1a>;
 100669c:	49 e1 00 01 	P1.H = 0x100;		/* (256)	P1=0x1000008 */
 10066a0:	09 e1 14 6c 	P1.L = 0x6c14;		/* (27668)	P1=0x1006c14 <_CSWTCH.74> */
 10066a4:	91 5e       	P2 = P1 + (P2 << 0x2);
 10066a6:	10 91       	R0 = [P2];
 10066a8:	02 20       	JUMP.S 0x10066ac <_gap_security_level_for_link_key_type+0x1c>;
 10066aa:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 10066ac:	01 e8 00 00 	UNLINK;
 10066b0:	10 00       	RTS;
	...

010066b4 <_gap_mitm_protection_required_for_security_level>:
 10066b4:	10 0e       	CC = R0 <= 0x2 (IU);
 10066b6:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10066ba:	00 02       	R0 = CC;
 10066bc:	00 4b       	BITTGL (R0, 0x0);		/* bit  0 */
 10066be:	01 e8 00 00 	UNLINK;
 10066c2:	10 00       	RTS;

010066c4 <_gap_security_level>:
 10066c4:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10066c8:	ff e3 64 f7 	CALL 0x1005590 <_le_hci_connection_for_handle>;
 10066cc:	00 0c       	CC = R0 == 0x0;
 10066ce:	05 18       	IF CC JUMP 0x10066d8 <_gap_security_level+0x14>;
 10066d0:	01 e8 00 00 	UNLINK;
 10066d4:	ff e2 96 f6 	JUMP.L 0x1005400 <_gap_security_level_for_connection>;
 10066d8:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10066da:	01 e8 00 00 	UNLINK;
 10066de:	10 00       	RTS;

010066e0 <_gap_request_security_level>:
 10066e0:	f5 05       	[--SP] = (R7:6, P5:5);
 10066e2:	00 e8 08 00 	LINK 0x20;		/* (32) */
 10066e6:	38 30       	R7 = R0;
 10066e8:	31 30       	R6 = R1;
 10066ea:	ff e3 53 f7 	CALL 0x1005590 <_le_hci_connection_for_handle>;
 10066ee:	28 32       	P5 = R0;
 10066f0:	45 0c       	CC = P5 == 0x0;
 10066f2:	04 14       	IF !CC JUMP 0x10066fa <_gap_request_security_level+0x1a> (BP);
 10066f4:	07 30       	R0 = R7;
 10066f6:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10066f8:	08 20       	JUMP.S 0x1006708 <_gap_request_security_level+0x28>;
 10066fa:	07 30       	R0 = R7;
 10066fc:	ff e3 e4 ff 	CALL 0x10066c4 <_gap_security_level>;
 1006700:	08 30       	R1 = R0;
 1006702:	b0 09       	CC = R0 < R6 (IU);
 1006704:	05 1c       	IF CC JUMP 0x100670e <_gap_request_security_level+0x2e> (BP);
 1006706:	07 30       	R0 = R7;
 1006708:	ff e3 f0 fc 	CALL 0x10060e8 <_hci_emit_security_level>;
 100670c:	2d 20       	JUMP.S 0x1006766 <_gap_request_security_level+0x86>;
 100670e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1006712:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1006716:	52 91       	P2 = [P2];
 1006718:	ee b1       	[P5 + 0x1c] = R6;
 100671a:	12 e5 52 00 	P2 = [P2 + 0x148];
 100671e:	42 0c       	CC = P2 == 0x0;
 1006720:	1d 18       	IF CC JUMP 0x100675a <_gap_request_security_level+0x7a>;
 1006722:	45 30       	R0 = P5;
 1006724:	4f 30       	R1 = FP;
 1006726:	57 30       	R2 = FP;
 1006728:	92 ac       	P2 = [P2 + 0x8];
 100672a:	40 64       	R0 += 0x8;		/* (  8) */
 100672c:	61 67       	R1 += -0x14;		/* (-20) */
 100672e:	e2 67       	R2 += -0x4;		/* ( -4) */
 1006730:	62 00       	CALL (P2);
 1006732:	00 0c       	CC = R0 == 0x0;
 1006734:	13 1c       	IF CC JUMP 0x100675a <_gap_request_security_level+0x7a> (BP);
 1006736:	fa b9       	P2 = [FP -0x4];
 1006738:	41 68       	P1 = 0x8 (X);		/*		P1=0x8(  8) */
 100673a:	4a 0a       	CC = P2 <= P1 (IU);
 100673c:	08 14       	IF !CC JUMP 0x100674c <_gap_request_security_level+0x6c> (BP);
 100673e:	49 e1 00 01 	P1.H = 0x100;		/* (256)	P1=0x1000008 */
 1006742:	09 e1 14 6c 	P1.L = 0x6c14;		/* (27668)	P1=0x1006c14 <_CSWTCH.74> */
 1006746:	91 5e       	P2 = P1 + (P2 << 0x2);
 1006748:	10 91       	R0 = [P2];
 100674a:	02 20       	JUMP.S 0x100674e <_gap_request_security_level+0x6e>;
 100674c:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100674e:	b0 09       	CC = R0 < R6 (IU);
 1006750:	05 1c       	IF CC JUMP 0x100675a <_gap_request_security_level+0x7a> (BP);
 1006752:	28 ab       	R0 = W[P5 + 0x18] (X);
 1006754:	30 4a       	BITSET (R0, 0x6);		/* bit  6 */
 1006756:	28 b7       	W[P5 + 0x18] = R0;
 1006758:	07 20       	JUMP.S 0x1006766 <_gap_request_security_level+0x86>;
 100675a:	00 00       	NOP;
 100675c:	28 ab       	R0 = W[P5 + 0x18] (X);
 100675e:	28 4a       	BITSET (R0, 0x5);		/* bit  5 */
 1006760:	28 b7       	W[P5 + 0x18] = R0;
 1006762:	ff e3 6b fa 	CALL 0x1005c38 <_le_hci_run>;
 1006766:	01 e8 00 00 	UNLINK;
 100676a:	b5 05       	(R7:6, P5:5) = [SP++];
 100676c:	10 00       	RTS;
	...

01006770 <_gap_dedicated_bonding>:
 1006770:	f5 05       	[--SP] = (R7:6, P5:5);
 1006772:	31 30       	R6 = R1;
 1006774:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1006778:	38 30       	R7 = R0;
 100677a:	21 e1 ff 00 	R1 = 0xff (X);		/*		R1=0xff(255) */
 100677e:	ff e3 8b f6 	CALL 0x1005494 <_create_connection_for_bd_addr_and_type>;
 1006782:	28 32       	P5 = R0;
 1006784:	45 0c       	CC = P5 == 0x0;
 1006786:	12 18       	IF CC JUMP 0x10067aa <_gap_dedicated_bonding+0x3a>;
 1006788:	07 30       	R0 = R7;
 100678a:	ff e3 21 f6 	CALL 0x10053cc <_hci_drop_link_key_for_bd_addr>;
 100678e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1006790:	68 b1       	[P5 + 0x14] = R0;
 1006792:	06 0c       	CC = R6 == 0x0;
 1006794:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 1006796:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 1006798:	01 07       	IF CC R0 = R1;
 100679a:	e8 b1       	[P5 + 0x1c] = R0;
 100679c:	20 e1 80 00 	R0 = 0x80 (X);		/*		R0=0x80(128) */
 10067a0:	28 b7       	W[P5 + 0x18] = R0;
 10067a2:	ff e3 4b fa 	CALL 0x1005c38 <_le_hci_run>;
 10067a6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10067a8:	03 20       	JUMP.S 0x10067ae <_gap_dedicated_bonding+0x3e>;
 10067aa:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 10067ae:	01 e8 00 00 	UNLINK;
 10067b2:	b5 05       	(R7:6, P5:5) = [SP++];
 10067b4:	10 00       	RTS;
	...

010067b8 <_gap_set_local_name>:
 10067b8:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 10067bc:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10067c0:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 10067c4:	52 91       	P2 = [P2];
 10067c6:	90 b0       	[P2 + 0x8] = R0;
 10067c8:	01 e8 00 00 	UNLINK;
 10067cc:	10 00       	RTS;
	...

010067d0 <_le_central_start_scan>:
 10067d0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 10067d4:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10067d8:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 10067dc:	52 91       	P2 = [P2];
 10067de:	10 e4 5f 00 	R0 = [P2 + 0x17c];
 10067e2:	10 0c       	CC = R0 == 0x2;
 10067e4:	06 18       	IF CC JUMP 0x10067f0 <_le_central_start_scan+0x20>;
 10067e6:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 10067e8:	10 e6 5f 00 	[P2 + 0x17c] = R0;
 10067ec:	ff e3 26 fa 	CALL 0x1005c38 <_le_hci_run>;
 10067f0:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 10067f4:	01 e8 00 00 	UNLINK;
 10067f8:	10 00       	RTS;
	...

010067fc <_le_central_stop_scan>:
 10067fc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1006800:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1006804:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1006808:	52 91       	P2 = [P2];
 100680a:	10 e4 5f 00 	R0 = [P2 + 0x17c];
 100680e:	00 0c       	CC = R0 == 0x0;
 1006810:	06 1c       	IF CC JUMP 0x100681c <_le_central_stop_scan+0x20> (BP);
 1006812:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 1006814:	10 e6 5f 00 	[P2 + 0x17c] = R0;
 1006818:	ff e3 10 fa 	CALL 0x1005c38 <_le_hci_run>;
 100681c:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1006820:	01 e8 00 00 	UNLINK;
 1006824:	10 00       	RTS;
	...

01006828 <_le_central_set_scan_parameters>:
 1006828:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 100682c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1006830:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1006834:	52 91       	P2 = [P2];
 1006836:	90 e6 80 01 	B[P2 + 0x180] = R0;
 100683a:	51 e6 c1 00 	W[P2 + 0x182] = R1;
 100683e:	52 e6 c2 00 	W[P2 + 0x184] = R2;
 1006842:	01 e8 00 00 	UNLINK;
 1006846:	ff e2 f9 f9 	JUMP.L 0x1005c38 <_le_hci_run>;
	...

0100684c <_le_central_connect>:
 100684c:	70 05       	[--SP] = (R7:6);
 100684e:	00 e8 04 00 	LINK 0x10;		/* (16) */
 1006852:	30 30       	R6 = R0;
 1006854:	39 30       	R7 = R1;
 1006856:	ff e3 bf f6 	CALL 0x10055d4 <_le_hci_connection_for_bd_addr_and_type>;
 100685a:	10 32       	P2 = R0;
 100685c:	42 0c       	CC = P2 == 0x0;
 100685e:	17 14       	IF !CC JUMP 0x100688c <_le_central_connect+0x40> (BP);
 1006860:	06 30       	R0 = R6;
 1006862:	0f 30       	R1 = R7;
 1006864:	ff e3 18 f6 	CALL 0x1005494 <_create_connection_for_bd_addr_and_type>;
 1006868:	10 32       	P2 = R0;
 100686a:	42 0c       	CC = P2 == 0x0;
 100686c:	0d 14       	IF !CC JUMP 0x1006886 <_le_central_connect+0x3a> (BP);
 100686e:	20 e1 56 00 	R0 = 0x56 (X);		/*		R0=0x56( 86) */
 1006872:	b0 e6 0c 00 	B[SP + 0xc] = R0;
 1006876:	07 30       	R0 = R7;
 1006878:	0e 30       	R1 = R6;
 100687a:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100687c:	ff e3 22 fb 	CALL 0x1005ec0 <_hci_emit_le_connection_complete>;
 1006880:	20 e1 a3 00 	R0 = 0xa3 (X);		/*		R0=0xa3(163) */
 1006884:	1d 20       	JUMP.S 0x10068be <_le_central_connect+0x72>;
 1006886:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1006888:	50 b1       	[P2 + 0x14] = R0;
 100688a:	16 20       	JUMP.S 0x10068b6 <_le_central_connect+0x6a>;
 100688c:	4a 30       	R1 = P2;
 100688e:	50 a1       	R0 = [P2 + 0x14];
 1006890:	08 0e       	CC = R0 <= 0x1 (IU);
 1006892:	10 a1       	R0 = [P2 + 0x10];
 1006894:	41 64       	R1 += 0x8;		/* (  8) */
 1006896:	0a 14       	IF !CC JUMP 0x10068aa <_le_central_connect+0x5e> (BP);
 1006898:	62 60       	R2 = 0xc (X);		/*		R2=0xc( 12) */
 100689a:	b2 e6 0c 00 	B[SP + 0xc] = R2;
 100689e:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 10068a0:	ff e3 10 fb 	CALL 0x1005ec0 <_hci_emit_le_connection_complete>;
 10068a4:	20 e1 a1 00 	R0 = 0xa1 (X);		/*		R0=0xa1(161) */
 10068a8:	0b 20       	JUMP.S 0x10068be <_le_central_connect+0x72>;
 10068aa:	03 60       	R3 = 0x0 (X);		/*		R3=0x0(  0) */
 10068ac:	d2 a9       	R2 = W[P2 + 0xe] (X);
 10068ae:	b3 e6 0c 00 	B[SP + 0xc] = R3;
 10068b2:	ff e3 07 fb 	CALL 0x1005ec0 <_hci_emit_le_connection_complete>;
 10068b6:	ff e3 c1 f9 	CALL 0x1005c38 <_le_hci_run>;
 10068ba:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 10068be:	01 e8 00 00 	UNLINK;
 10068c2:	30 05       	(R7:6) = [SP++];
 10068c4:	10 00       	RTS;
	...

010068c8 <_le_central_connect_cancel>:
 10068c8:	c5 04       	[--SP] = (P5:5);
 10068ca:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 10068ce:	00 e8 04 00 	LINK 0x10;		/* (16) */
 10068d2:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 10068d6:	52 91       	P2 = [P2];
 10068d8:	12 ae       	P2 = [P2 + 0x20];
 10068da:	06 20       	JUMP.S 0x10068e6 <_le_central_connect_cancel+0x1e>;
 10068dc:	6a 32       	P5 = P2;
 10068de:	50 a1       	R0 = [P2 + 0x14];
 10068e0:	08 0e       	CC = R0 <= 0x1 (IU);
 10068e2:	05 1c       	IF CC JUMP 0x10068ec <_le_central_connect_cancel+0x24> (BP);
 10068e4:	52 91       	P2 = [P2];
 10068e6:	42 0c       	CC = P2 == 0x0;
 10068e8:	fa 17       	IF !CC JUMP 0x10068dc <_le_central_connect_cancel+0x14> (BP);
 10068ea:	05 68       	P5 = 0x0 (X);		/*		P5=0x0(  0) */
 10068ec:	00 00       	NOP;
 10068ee:	68 a1       	R0 = [P5 + 0x14];
 10068f0:	00 0c       	CC = R0 == 0x0;
 10068f2:	04 1c       	IF CC JUMP 0x10068fa <_le_central_connect_cancel+0x32> (BP);
 10068f4:	08 0c       	CC = R0 == 0x1;
 10068f6:	1c 14       	IF !CC JUMP 0x100692e <_le_central_connect_cancel+0x66> (BP);
 10068f8:	17 20       	JUMP.S 0x1006926 <_le_central_connect_cancel+0x5e>;
 10068fa:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 10068fc:	28 a1       	R0 = [P5 + 0x10];
 10068fe:	b2 e6 0c 00 	B[SP + 0xc] = R2;
 1006902:	4d 30       	R1 = P5;
 1006904:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1006906:	41 64       	R1 += 0x8;		/* (  8) */
 1006908:	ff e3 dc fa 	CALL 0x1005ec0 <_hci_emit_le_connection_complete>;
 100690c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 1006910:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 1006914:	10 91       	R0 = [P2];
 1006916:	4d 30       	R1 = P5;
 1006918:	00 65       	R0 += 0x20;		/* ( 32) */
 100691a:	00 e3 e3 06 	CALL 0x10076e0 <_linked_list_remove>;
 100691e:	45 30       	R0 = P5;
 1006920:	ff e3 ac e6 	CALL 0x1003678 <_le_btstack_memory_hci_connection_free>;
 1006924:	05 20       	JUMP.S 0x100692e <_le_central_connect_cancel+0x66>;
 1006926:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 1006928:	68 b1       	[P5 + 0x14] = R0;
 100692a:	ff e3 87 f9 	CALL 0x1005c38 <_le_hci_run>;
 100692e:	01 e8 00 00 	UNLINK;
 1006932:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 1006936:	85 04       	(P5:5) = [SP++];
 1006938:	10 00       	RTS;
	...

0100693c <_gap_update_connection_parameters>:
 100693c:	70 05       	[--SP] = (R7:6);
 100693e:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1006942:	31 30       	R6 = R1;
 1006944:	3a 30       	R7 = R2;
 1006946:	ff e3 25 f6 	CALL 0x1005590 <_le_hci_connection_for_handle>;
 100694a:	10 32       	P2 = R0;
 100694c:	42 0c       	CC = P2 == 0x0;
 100694e:	0e 18       	IF CC JUMP 0x100696a <_gap_update_connection_parameters+0x2e>;
 1006950:	b8 ab       	R0 = W[FP + 0x1c] (X);
 1006952:	50 e6 44 00 	W[P2 + 0x88] = R0;
 1006956:	56 e6 42 00 	W[P2 + 0x84] = R6;
 100695a:	78 e5 10 00 	R0 = W[FP + 0x20] (X);
 100695e:	50 e6 45 00 	W[P2 + 0x8a] = R0;
 1006962:	57 e6 43 00 	W[P2 + 0x86] = R7;
 1006966:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1006968:	02 20       	JUMP.S 0x100696c <_gap_update_connection_parameters+0x30>;
 100696a:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100696c:	01 e8 00 00 	UNLINK;
 1006970:	30 05       	(R7:6) = [SP++];
 1006972:	10 00       	RTS;

01006974 <_gap_disconnect>:
 1006974:	78 05       	[--SP] = (R7:7);
 1006976:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100697a:	38 30       	R7 = R0;
 100697c:	ff e3 0a f6 	CALL 0x1005590 <_le_hci_connection_for_handle>;
 1006980:	10 32       	P2 = R0;
 1006982:	42 0c       	CC = P2 == 0x0;
 1006984:	06 14       	IF !CC JUMP 0x1006990 <_gap_disconnect+0x1c> (BP);
 1006986:	07 30       	R0 = R7;
 1006988:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100698a:	ff e3 dd fa 	CALL 0x1005f44 <_le_hci_emit_disconnection_complete>;
 100698e:	05 20       	JUMP.S 0x1006998 <_gap_disconnect+0x24>;
 1006990:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 1006992:	50 b1       	[P2 + 0x14] = R0;
 1006994:	ff e3 52 f9 	CALL 0x1005c38 <_le_hci_run>;
 1006998:	01 e8 00 00 	UNLINK;
 100699c:	20 e1 a0 00 	R0 = 0xa0 (X);		/*		R0=0xa0(160) */
 10069a0:	38 05       	(R7:7) = [SP++];
 10069a2:	10 00       	RTS;

010069a4 <_hci_disconnect_all>:
 10069a4:	70 05       	[--SP] = (R7:6);
 10069a6:	00 e8 06 00 	LINK 0x18;		/* (24) */
 10069aa:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 10069ae:	0a e1 e8 21 	P2.L = 0x21e8;		/* (8680)	P2=0x21e8 <_hci_stack> */
 10069b2:	7f 30       	R7 = FP;
 10069b4:	11 91       	R1 = [P2];
 10069b6:	a7 67       	R7 += -0xc;		/* (-12) */
 10069b8:	01 65       	R1 += 0x20;		/* ( 32) */
 10069ba:	07 30       	R0 = R7;
 10069bc:	00 e3 c4 06 	CALL 0x1007744 <_linked_list_iterator_init>;
 10069c0:	46 60       	R6 = 0x8 (X);		/*		R6=0x8(  8) */
 10069c2:	0a 20       	JUMP.S 0x10069d6 <_hci_disconnect_all+0x32>;
 10069c4:	07 30       	R0 = R7;
 10069c6:	00 e3 e3 06 	CALL 0x100778c <_linked_list_iterator_next>;
 10069ca:	10 32       	P2 = R0;
 10069cc:	49 60       	R1 = 0x9 (X);		/*		R1=0x9(  9) */
 10069ce:	50 a1       	R0 = [P2 + 0x14];
 10069d0:	08 08       	CC = R0 == R1;
 10069d2:	02 18       	IF CC JUMP 0x10069d6 <_hci_disconnect_all+0x32>;
 10069d4:	56 b1       	[P2 + 0x14] = R6;
 10069d6:	07 30       	R0 = R7;
 10069d8:	00 e3 c2 06 	CALL 0x100775c <_linked_list_iterator_has_next>;
 10069dc:	00 0c       	CC = R0 == 0x0;
 10069de:	f3 17       	IF !CC JUMP 0x10069c4 <_hci_disconnect_all+0x20> (BP);
 10069e0:	ff e3 2c f9 	CALL 0x1005c38 <_le_hci_run>;
 10069e4:	01 e8 00 00 	UNLINK;
 10069e8:	30 05       	(R7:6) = [SP++];
 10069ea:	10 00       	RTS;
 10069ec:	42 54       	R1 = R2 & R0;
 10069ee:	53 54       	R1 = R3 & R2;
 10069f0:	41 43       	R1 = R0.B (Z);
 10069f2:	4b 5f       	P5 = P3 + (P1 << 0x2);
 10069f4:	45 56       	R1 = R5 | R0;
 10069f6:	45 4e       	R5 >>= 0x8;
 10069f8:	54 5f       	P5 = P4 + (P2 << 0x2);
 10069fa:	53 54       	R1 = R3 & R2;
 10069fc:	41 54       	R1 = R1 & R0;
 10069fe:	45 20       	JUMP.S 0x1006a88 <_hci_disconnect_all+0xe4>;
 1006a00:	25 78       	ILLEGAL;
 1006a02:	00 00       	NOP;
 1006a04:	62 6c       	P2 += 0xc;		/* ( 12) */
 1006a06:	65 5f       	P5 = P5 + (P4 << 0x2);
 1006a08:	61 63       	R1 = -0x14 (X);		/*		R1=0xffffffec(-20) */
 1006a0a:	6c 20       	JUMP.S 0x1006ae2 <_hci_disconnect_all+0x13e>;
 1006a0c:	00 00       	NOP;
 1006a0e:	00 00       	NOP;
 1006a10:	64 6f       	P4 += -0x14;		/* (-20) */
 1006a12:	6e 65       	R6 += 0x2d;		/* ( 45) */
 1006a14:	21 0a       	CC = R1 <= R4 (IU);
 1006a16:	00 00       	NOP;
 1006a18:	65 78       	ILLEGAL;
 1006a1a:	69 74       	ILLEGAL;
 1006a1c:	32 0a       	CC = R2 <= R6 (IU);
 1006a1e:	00 00       	NOP;
 1006a20:	68 63       	R0 = -0x13 (X);		/*		R0=0xffffffed(-19) */
 1006a22:	69 5f       	P5 = P1 + (P5 << 0x2);
 1006a24:	73 65       	R3 += 0x2e;		/* ( 46) */
 1006a26:	6e 64       	R6 += 0xd;		/* ( 13) */
 1006a28:	5f 63       	R7 = -0x15 (X);		/*		R7=0xffffffeb(-21) */
 1006a2a:	6d 64       	R5 += 0xd;		/* ( 13) */
 1006a2c:	3a 20       	JUMP.S 0x1006aa0 <_hci_disconnect_all+0xfc>;
 1006a2e:	6f 67       	R7 += -0x13;		/* (-19) */
 1006a30:	66 20       	JUMP.S 0x1006afc <_hci_disconnect_all+0x158>;
 1006a32:	25 30       	R4 = R5;
 1006a34:	34 78       	ILLEGAL;
 1006a36:	2d 20       	JUMP.S 0x1006a90 <_hci_disconnect_all+0xec>;
 1006a38:	6f 63       	R7 = -0x13 (X);		/*		R7=0xffffffed(-19) */
 1006a3a:	66 20       	JUMP.S 0x1006b06 <_hci_disconnect_all+0x162>;
 1006a3c:	25 30       	R4 = R5;
 1006a3e:	34 78       	ILLEGAL;
 1006a40:	0a 00       	ILLEGAL;
 1006a42:	00 00       	NOP;
 1006a44:	73 75       	ILLEGAL;
 1006a46:	62 73       	ILLEGAL;
 1006a48:	74 61       	R4 = 0x2e (X);		/*		R4=0x2e( 46) */
 1006a4a:	74 65       	R4 += 0x2e;		/* ( 46) */
 1006a4c:	20 3a       	ILLEGAL;
 1006a4e:	20 00       	IDLE;
 1006a50:	48 43       	R0 = R1.B (Z);
 1006a52:	49 5f       	P5 = P1 + (P1 << 0x2);
 1006a54:	49 4e       	R1 >>= 0x9;
 1006a56:	49 54       	R1 = R1 & R1;
 1006a58:	5f 53       	R5 = R7 - R3;
 1006a5a:	45 4e       	R5 >>= 0x8;
 1006a5c:	44 5f       	P5 = P4 + (P0 << 0x2);
 1006a5e:	52 45       	P2 += P2 (BREV);
 1006a60:	53 45       	P3 += P2 (BREV);
 1006a62:	54 0a       	CC = P4 <= P2 (IU);
 1006a64:	00 00       	NOP;
 1006a66:	00 00       	NOP;
 1006a68:	48 43       	R0 = R1.B (Z);
 1006a6a:	49 5f       	P5 = P1 + (P1 << 0x2);
 1006a6c:	49 4e       	R1 >>= 0x9;
 1006a6e:	49 54       	R1 = R1 & R1;
 1006a70:	5f 52       	R1 = R7 - R3;
 1006a72:	45 41       	R5 = (R5 + R0) << 0x2;
 1006a74:	44 5f       	P5 = P4 + (P0 << 0x2);
 1006a76:	42 44       	P2 = P0 << 0x2;
 1006a78:	5f 41       	R7 = (R7 + R3) << 0x2;
 1006a7a:	44 44       	P4 = P0 << 0x2;
 1006a7c:	52 0a       	CC = P2 <= P2 (IU);
 1006a7e:	00 00       	NOP;
 1006a80:	48 43       	R0 = R1.B (Z);
 1006a82:	49 5f       	P5 = P1 + (P1 << 0x2);
 1006a84:	49 4e       	R1 >>= 0x9;
 1006a86:	49 54       	R1 = R1 & R1;
 1006a88:	5f 4c       	BITCLR (R7, 0xb);		/* bit 11 */
 1006a8a:	45 5f       	P5 = P5 + (P0 << 0x2);
 1006a8c:	52 45       	P2 += P2 (BREV);
 1006a8e:	41 44       	P1 = P0 << 0x2;
 1006a90:	5f 42       	DIVS (R7, R3);
 1006a92:	55 46       	ILLEGAL;
 1006a94:	46 45       	SP += P0 (BREV);
 1006a96:	52 5f       	P5 = P2 + (P2 << 0x2);
 1006a98:	53 49       	CC = BITTST (R3, 0xa);		/* bit 10 */
 1006a9a:	5a 45       	P2 += P3 (BREV);
 1006a9c:	0a 00       	ILLEGAL;
 1006a9e:	00 00       	NOP;
 1006aa0:	48 43       	R0 = R1.B (Z);
 1006aa2:	49 5f       	P5 = P1 + (P1 << 0x2);
 1006aa4:	49 4e       	R1 >>= 0x9;
 1006aa6:	49 54       	R1 = R1 & R1;
 1006aa8:	5f 57       	R5 = R7 | R3;
 1006aaa:	52 49       	CC = BITTST (R2, 0xa);		/* bit 10 */
 1006aac:	54 45       	P4 += P2 (BREV);
 1006aae:	5f 4c       	BITCLR (R7, 0xb);		/* bit 11 */
 1006ab0:	45 5f       	P5 = P5 + (P0 << 0x2);
 1006ab2:	48 4f       	R0 <<= 0x9;
 1006ab4:	53 54       	R1 = R3 & R2;
 1006ab6:	5f 53       	R5 = R7 - R3;
 1006ab8:	55 50       	R1 = R5 + R2;
 1006aba:	50 4f       	R0 <<= 0xa;
 1006abc:	52 54       	R1 = R2 & R2;
 1006abe:	45 44       	P5 = P0 << 0x2;
 1006ac0:	0a 00       	ILLEGAL;
 1006ac2:	00 00       	NOP;
 1006ac4:	48 43       	R0 = R1.B (Z);
 1006ac6:	49 5f       	P5 = P1 + (P1 << 0x2);
 1006ac8:	49 4e       	R1 >>= 0x9;
 1006aca:	49 54       	R1 = R1 & R1;
 1006acc:	5f 4c       	BITCLR (R7, 0xb);		/* bit 11 */
 1006ace:	45 5f       	P5 = P5 + (P0 << 0x2);
 1006ad0:	53 45       	P3 += P2 (BREV);
 1006ad2:	54 5f       	P5 = P4 + (P2 << 0x2);
 1006ad4:	53 43       	R3 = R2.B (Z);
 1006ad6:	41 4e       	R1 >>= 0x8;
 1006ad8:	5f 50       	R1 = R7 + R3;
 1006ada:	41 52       	R1 = R1 - R0;
 1006adc:	41 4d       	R1 >>>= 0x8;
 1006ade:	45 54       	R1 = R5 & R0;
 1006ae0:	45 52       	R1 = R5 - R0;
 1006ae2:	53 0a       	CC = P3 <= P2 (IU);
 1006ae4:	00 00       	NOP;
 1006ae6:	00 00       	NOP;
 1006ae8:	48 43       	R0 = R1.B (Z);
 1006aea:	49 5f       	P5 = P1 + (P1 << 0x2);
 1006aec:	53 54       	R1 = R3 & R2;
 1006aee:	41 54       	R1 = R1 & R0;
 1006af0:	45 5f       	P5 = P5 + (P0 << 0x2);
 1006af2:	57 4f       	R7 <<= 0xa;
 1006af4:	52 4b       	BITTGL (R2, 0xa);		/* bit 10 */
 1006af6:	49 4e       	R1 >>= 0x9;
 1006af8:	47 0a       	CC = FP <= P0 (IU);
 1006afa:	00 00       	NOP;
 1006afc:	2d 2d       	JUMP.S 0x1006556 <_packet_handler+0x42a>;
 1006afe:	48 43       	R0 = R1.B (Z);
 1006b00:	49 20       	JUMP.S 0x1006b92 <_hci_disconnect_all+0x1ee>;
 1006b02:	50 48       	CC = !BITTST (R0, 0xa);		/* bit 10 */
 1006b04:	20 00       	IDLE;
 1006b06:	00 00       	NOP;
 1006b08:	68 63       	R0 = -0x13 (X);		/*		R0=0xffffffed(-19) */
 1006b0a:	69 5f       	P5 = P1 + (P5 << 0x2);
 1006b0c:	65 76       	ILLEGAL;
 1006b0e:	65 6e       	P5 += -0x34;		/* (-52) */
 1006b10:	74 5f       	P5 = P4 + (SP << 0x2);
 1006b12:	64 69       	P4 = 0x2c (X);		/*		P4=0x2c( 44) */
 1006b14:	73 63       	R3 = -0x12 (X);		/*		R3=0xffffffee(-18) */
 1006b16:	6f 6e       	FP += -0x33;		/* (-51) */
 1006b18:	6e 65       	R6 += 0x2d;		/* ( 45) */
 1006b1a:	63 74       	ILLEGAL;
 1006b1c:	3a 20       	JUMP.S 0x1006b90 <_hci_disconnect_all+0x1ec>;
 1006b1e:	25 78       	ILLEGAL;
 1006b20:	0a 00       	ILLEGAL;
 1006b22:	00 00       	NOP;
 1006b24:	61 64       	R1 += 0xc;		/* ( 12) */
 1006b26:	76 65       	R6 += 0x2e;		/* ( 46) */
 1006b28:	72 74       	ILLEGAL;
 1006b2a:	69 73       	ILLEGAL;
 1006b2c:	69 6e       	P1 += -0x33;		/* (-51) */
 1006b2e:	67 20       	JUMP.S 0x1006bfc <_hci_disconnect_all+0x258>;
 1006b30:	72 65       	R2 += 0x2e;		/* ( 46) */
 1006b32:	70 6f       	P0 += -0x12;		/* (-18) */
 1006b34:	72 74       	ILLEGAL;
 1006b36:	20 72       	ILLEGAL;
 1006b38:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1006b3a:	65 69       	P5 = 0x2c (X);		/*		P5=0x2c( 44) */
 1006b3c:	76 65       	R6 += 0x2e;		/* ( 46) */
 1006b3e:	64 00       	CALL (P4);
 1006b40:	6c 65       	R4 += 0x2d;		/* ( 45) */
 1006b42:	5f 63       	R7 = -0x15 (X);		/*		R7=0xffffffeb(-21) */
 1006b44:	6f 6e       	FP += -0x33;		/* (-51) */
 1006b46:	6e 65       	R6 += 0x2d;		/* ( 45) */
 1006b48:	63 74       	ILLEGAL;
 1006b4a:	69 6f       	P1 += -0x13;		/* (-19) */
 1006b4c:	6e 5f       	P5 = SP + (P5 << 0x2);
 1006b4e:	63 6f       	P3 += -0x14;		/* (-20) */
 1006b50:	6d 70       	ILLEGAL;
 1006b52:	6c 65       	R4 += 0x2d;		/* ( 45) */
 1006b54:	74 65       	R4 += 0x2e;		/* ( 46) */
 1006b56:	0a 00       	ILLEGAL;
 1006b58:	41 53       	R5 = R1 - R0;
 1006b5a:	53 45       	P3 += P2 (BREV);
 1006b5c:	52 54       	R1 = R2 & R2;
 1006b5e:	2d 46       	ILLEGAL;
 1006b60:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 1006b62:	4c 44       	P4 = P1 << 0x2;
 1006b64:	3a 20       	JUMP.S 0x1006bd8 <_hci_disconnect_all+0x234>;
 1006b66:	30 0a       	CC = R0 <= R6 (IU);
 1006b68:	25 73       	ILLEGAL;
 1006b6a:	0a 00       	ILLEGAL;
 1006b6c:	6e 6f       	SP += -0x13;		/* (-19) */
 1006b6e:	20 6d       	P0 += 0x24;		/* ( 36) */
 1006b70:	65 6d       	P5 += 0x2c;		/* ( 44) */
 1006b72:	6f 72       	ILLEGAL;
 1006b74:	79 00       	ILLEGAL;
 1006b76:	00 00       	NOP;
 1006b78:	63 6f       	P3 += -0x14;		/* (-20) */
 1006b7a:	6d 6d       	P5 += 0x2d;		/* ( 45) */
 1006b7c:	61 6e       	P1 += -0x34;		/* (-52) */
 1006b7e:	64 5f       	P5 = P4 + (P4 << 0x2);
 1006b80:	63 6f       	P3 += -0x14;		/* (-20) */
 1006b82:	6d 70       	ILLEGAL;
 1006b84:	6c 65       	R4 += 0x2d;		/* ( 45) */
 1006b86:	74 65       	R4 += 0x2e;		/* ( 46) */
 1006b88:	64 0a       	CC = P4 <= P4 (IU);
 1006b8a:	00 00       	NOP;
 1006b8c:	6e 65       	R6 += 0x2d;		/* ( 45) */
 1006b8e:	78 74       	ILLEGAL;
 1006b90:	5f 73       	ILLEGAL;
 1006b92:	75 62       	R5 = -0x32 (X);		/*		R5=0xffffffce(-50) */
 1006b94:	73 74       	ILLEGAL;
 1006b96:	61 74       	ILLEGAL;
 1006b98:	65 0a       	CC = P5 <= P4 (IU);
 1006b9a:	00 00       	NOP;
 1006b9c:	41 53       	R5 = R1 - R0;
 1006b9e:	53 45       	P3 += P2 (BREV);
 1006ba0:	52 54       	R1 = R2 & R2;
 1006ba2:	2d 46       	ILLEGAL;
 1006ba4:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 1006ba6:	4c 44       	P4 = P1 << 0x2;
 1006ba8:	3a 20       	JUMP.S 0x1006c1c <_CSWTCH.74+0x8>;
 1006baa:	63 6f       	P3 += -0x14;		/* (-20) */
 1006bac:	6e 6e       	SP += -0x33;		/* (-51) */
 1006bae:	20 21       	JUMP.S 0x1006dee <_le_hci_create_cmd_internal+0x1b6>;
 1006bb0:	3d 20       	JUMP.S 0x1006c2a <_CSWTCH.74+0x16>;
 1006bb2:	4e 55       	R5 = R6 & R1;
 1006bb4:	4c 4c       	BITCLR (R4, 0x9);		/* bit  9 */
 1006bb6:	0a 25       	JUMP.S 0x10075ca <_le_device_db_local_counter_get+0x2>;
 1006bb8:	73 0a       	CC = P3 <= SP (IU);
 1006bba:	00 00       	NOP;
 1006bbc:	61 63       	R1 = -0x14 (X);		/*		R1=0xffffffec(-20) */
 1006bbe:	6c 5f       	P5 = P4 + (P5 << 0x2);
 1006bc0:	66 6c       	SP += 0xc;		/* ( 12) */
 1006bc2:	61 67       	R1 += -0x14;		/* (-20) */
 1006bc4:	73 20       	JUMP.S 0x1006caa <_le_hci_create_cmd_internal+0x72>;
 1006bc6:	65 72       	ILLEGAL;
 1006bc8:	72 6f       	P2 += -0x12;		/* (-18) */
 1006bca:	72 0a       	CC = P2 <= SP (IU);
 1006bcc:	00 00       	NOP;
 1006bce:	00 00       	NOP;
 1006bd0:	0a 48       	CC = !BITTST (R2, 0x1);		/* bit  1 */
 1006bd2:	43 49       	CC = BITTST (R3, 0x8);		/* bit  8 */
 1006bd4:	20 65       	R0 += 0x24;		/* ( 36) */
 1006bd6:	78 69       	P0 = 0x2f (X);		/*		P0=0x2f( 47) */
 1006bd8:	74 20       	JUMP.S 0x1006cc0 <_le_hci_create_cmd_internal+0x88>;
 1006bda:	00 00       	NOP;
 1006bdc:	b0 5d       	SP = P0 + (SP << 0x1);
 1006bde:	00 01       	ILLEGAL;
 1006be0:	b6 5e       	P2 = SP + (SP << 0x2);
 1006be2:	00 01       	ILLEGAL;
 1006be4:	e2 5d       	FP = P2 + (P4 << 0x1);
 1006be6:	00 01       	ILLEGAL;
 1006be8:	b6 5e       	P2 = SP + (SP << 0x2);
 1006bea:	00 01       	ILLEGAL;
 1006bec:	08 5e       	P0 = P0 + (P1 << 0x2);
 1006bee:	00 01       	ILLEGAL;
 1006bf0:	b6 5e       	P2 = SP + (SP << 0x2);
 1006bf2:	00 01       	ILLEGAL;
 1006bf4:	2e 5e       	P0 = SP + (P5 << 0x2);
 1006bf6:	00 01       	ILLEGAL;
 1006bf8:	b6 5e       	P2 = SP + (SP << 0x2);
 1006bfa:	00 01       	ILLEGAL;
 1006bfc:	56 5e       	P1 = SP + (P2 << 0x2);
 1006bfe:	00 01       	ILLEGAL;
 1006c00:	b6 5e       	P2 = SP + (SP << 0x2);
 1006c02:	00 01       	ILLEGAL;
 1006c04:	90 5e       	P2 = P0 + (P2 << 0x2);
 1006c06:	00 01       	ILLEGAL;

01006c08 <___func__.3623>:
 1006c08:	61 63       	R1 = -0x14 (X);		/*		R1=0xffffffec(-20) */
 1006c0a:	6c 5f       	P5 = P4 + (P5 << 0x2);
 1006c0c:	68 61       	R0 = 0x2d (X);		/*		R0=0x2d( 45) */
 1006c0e:	6e 64       	R6 += 0xd;		/* ( 13) */
 1006c10:	6c 65       	R4 += 0x2d;		/* ( 45) */
 1006c12:	72 00       	CALL (PC + P2);

01006c14 <_CSWTCH.74>:
 1006c14:	03 00       	ILLEGAL;
 1006c16:	00 00       	NOP;
 1006c18:	02 00       	ILLEGAL;
 1006c1a:	00 00       	NOP;
 1006c1c:	02 00       	ILLEGAL;
 1006c1e:	00 00       	NOP;
 1006c20:	02 00       	ILLEGAL;
 1006c22:	00 00       	NOP;
 1006c24:	02 00       	ILLEGAL;
 1006c26:	00 00       	NOP;
 1006c28:	03 00       	ILLEGAL;
 1006c2a:	00 00       	NOP;
 1006c2c:	02 00       	ILLEGAL;
 1006c2e:	00 00       	NOP;
 1006c30:	02 00       	ILLEGAL;
 1006c32:	00 00       	NOP;
 1006c34:	04 00       	ILLEGAL;
	...

01006c38 <_le_hci_create_cmd_internal>:
 1006c38:	e3 05       	[--SP] = (R7:4, P5:3);
 1006c3a:	11 32       	P2 = R1;
 1006c3c:	28 32       	P5 = R0;
 1006c3e:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1006c42:	0a 32       	P1 = R2;
 1006c44:	1f 60       	R7 = 0x3 (X);		/*		R7=0x3(  3) */
 1006c46:	50 99       	R0 = B[P2] (X);
 1006c48:	28 9b       	B[P5] = R0;
 1006c4a:	90 e5 01 00 	R0 = B[P2 + 0x1] (X);
 1006c4e:	a8 e6 01 00 	B[P5 + 0x1] = R0;
 1006c52:	54 ac       	P4 = [P2 + 0x4];
 1006c54:	24 e1 f8 00 	R4 = 0xf8 (X);		/*		R4=0xf8(248) */
 1006c58:	b1 20       	JUMP.S 0x1006dba <_le_hci_create_cmd_internal+0x182>;
 1006c5a:	78 66       	R0 += -0x31;		/* (-49) */
 1006c5c:	40 43       	R0 = R0.B (Z);
 1006c5e:	f9 60       	R1 = 0x1f (X);		/*		R1=0x1f( 31) */
 1006c60:	08 0a       	CC = R0 <= R1 (IU);
 1006c62:	aa 14       	IF !CC JUMP 0x1006db6 <_le_hci_create_cmd_internal+0x17e> (BP);
 1006c64:	00 32       	P0 = R0;
 1006c66:	4b e1 00 01 	P3.H = 0x100;		/* (256)	P3=0x1000000 <_START> */
 1006c6a:	0b e1 d4 6d 	P3.L = 0x6dd4;		/* (28116)	P3=0x1006dd4 */
 1006c6e:	83 5e       	P2 = P3 + (P0 << 0x2);
 1006c70:	52 91       	P2 = [P2];
 1006c72:	52 00       	JUMP (P2);
 1006c74:	07 32       	P0 = R7;
 1006c76:	08 95       	R0 = W[P1] (Z);
 1006c78:	71 30       	R6 = P1;
 1006c7a:	92 61       	R2 = 0x32 (X);		/*		R2=0x32( 50) */
 1006c7c:	26 64       	R6 += 0x4;		/* (  4) */
 1006c7e:	85 5a       	P2 = P5 + P0;
 1006c80:	10 9b       	B[P2] = R0;
 1006c82:	a1 e5 ff ff 	R1 = B[P4 + -0x1] (X);
 1006c86:	0f 64       	R7 += 0x1;		/* (  1) */
 1006c88:	11 08       	CC = R1 == R2;
 1006c8a:	05 18       	IF CC JUMP 0x1006c94 <_le_hci_create_cmd_internal+0x5c>;
 1006c8c:	22 e1 48 00 	R2 = 0x48 (X);		/*		R2=0x48( 72) */
 1006c90:	11 08       	CC = R1 == R2;
 1006c92:	93 14       	IF !CC JUMP 0x1006db8 <_le_hci_create_cmd_internal+0x180> (BP);
 1006c94:	07 32       	P0 = R7;
 1006c96:	c0 42       	R0 = R0.L (Z);
 1006c98:	40 4e       	R0 >>= 0x8;
 1006c9a:	85 5a       	P2 = P5 + P0;
 1006c9c:	1b 20       	JUMP.S 0x1006cd2 <_le_hci_create_cmd_internal+0x9a>;
 1006c9e:	08 91       	R0 = [P1];
 1006ca0:	71 30       	R6 = P1;
 1006ca2:	0f 32       	P1 = R7;
 1006ca4:	82 c6 c0 83 	R1 = R0 >> 0x8;
 1006ca8:	a2 61       	R2 = 0x34 (X);		/*		R2=0x34( 52) */
 1006caa:	26 64       	R6 += 0x4;		/* (  4) */
 1006cac:	8d 5a       	P2 = P5 + P1;
 1006cae:	10 9b       	B[P2] = R0;
 1006cb0:	17 32       	P2 = R7;
 1006cb2:	1f 64       	R7 += 0x3;		/* (  3) */
 1006cb4:	0a 6c       	P2 += 0x1;		/* (  1) */
 1006cb6:	55 5a       	P1 = P5 + P2;
 1006cb8:	09 9b       	B[P1] = R1;
 1006cba:	0a 6c       	P2 += 0x1;		/* (  1) */
 1006cbc:	82 c6 80 83 	R1 = R0 >> 0x10;
 1006cc0:	55 5a       	P1 = P5 + P2;
 1006cc2:	09 9b       	B[P1] = R1;
 1006cc4:	a1 e5 ff ff 	R1 = B[P4 + -0x1] (X);
 1006cc8:	11 08       	CC = R1 == R2;
 1006cca:	77 14       	IF !CC JUMP 0x1006db8 <_le_hci_create_cmd_internal+0x180> (BP);
 1006ccc:	07 32       	P0 = R7;
 1006cce:	c0 4e       	R0 >>= 0x18;
 1006cd0:	85 5a       	P2 = P5 + P0;
 1006cd2:	10 9b       	B[P2] = R0;
 1006cd4:	0f 64       	R7 += 0x1;		/* (  1) */
 1006cd6:	71 20       	JUMP.S 0x1006db8 <_le_hci_create_cmd_internal+0x180>;
 1006cd8:	1f 32       	P3 = R7;
 1006cda:	4a 91       	P2 = [P1];
 1006cdc:	71 30       	R6 = P1;
 1006cde:	26 64       	R6 += 0x4;		/* (  4) */
 1006ce0:	90 e5 05 00 	R0 = B[P2 + 0x5] (X);
 1006ce4:	5d 5a       	P1 = P5 + P3;
 1006ce6:	08 9b       	B[P1] = R0;
 1006ce8:	0f 32       	P1 = R7;
 1006cea:	90 e5 04 00 	R0 = B[P2 + 0x4] (X);
 1006cee:	37 64       	R7 += 0x6;		/* (  6) */
 1006cf0:	09 6c       	P1 += 0x1;		/* (  1) */
 1006cf2:	0d 5a       	P0 = P5 + P1;
 1006cf4:	00 9b       	B[P0] = R0;
 1006cf6:	09 6c       	P1 += 0x1;		/* (  1) */
 1006cf8:	90 e5 03 00 	R0 = B[P2 + 0x3] (X);
 1006cfc:	0d 5a       	P0 = P5 + P1;
 1006cfe:	00 9b       	B[P0] = R0;
 1006d00:	09 6c       	P1 += 0x1;		/* (  1) */
 1006d02:	90 e5 02 00 	R0 = B[P2 + 0x2] (X);
 1006d06:	0d 5a       	P0 = P5 + P1;
 1006d08:	00 9b       	B[P0] = R0;
 1006d0a:	09 6c       	P1 += 0x1;		/* (  1) */
 1006d0c:	0d 5a       	P0 = P5 + P1;
 1006d0e:	90 e5 01 00 	R0 = B[P2 + 0x1] (X);
 1006d12:	00 9b       	B[P0] = R0;
 1006d14:	09 6c       	P1 += 0x1;		/* (  1) */
 1006d16:	0d 5a       	P0 = P5 + P1;
 1006d18:	50 99       	R0 = B[P2] (X);
 1006d1a:	00 9b       	B[P0] = R0;
 1006d1c:	4e 20       	JUMP.S 0x1006db8 <_le_hci_create_cmd_internal+0x180>;
 1006d1e:	4d 30       	R1 = P5;
 1006d20:	39 50       	R0 = R1 + R7;
 1006d22:	71 30       	R6 = P1;
 1006d24:	09 91       	R1 = [P1];
 1006d26:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 1006d28:	26 64       	R6 += 0x4;		/* (  4) */
 1006d2a:	00 e3 ed 47 	CALL 0x100fd04 <_memcpy>;
 1006d2e:	47 64       	R7 += 0x8;		/* (  8) */
 1006d30:	44 20       	JUMP.S 0x1006db8 <_le_hci_create_cmd_internal+0x180>;
 1006d32:	55 30       	R2 = P5;
 1006d34:	3a 50       	R0 = R2 + R7;
 1006d36:	71 30       	R6 = P1;
 1006d38:	09 91       	R1 = [P1];
 1006d3a:	22 e1 f0 00 	R2 = 0xf0 (X);		/*		R2=0xf0(240) */
 1006d3e:	00 e3 e3 47 	CALL 0x100fd04 <_memcpy>;
 1006d42:	20 e1 f0 00 	R0 = 0xf0 (X);		/*		R0=0xf0(240) */
 1006d46:	26 64       	R6 += 0x4;		/* (  4) */
 1006d48:	c7 51       	R7 = R7 + R0;
 1006d4a:	37 20       	JUMP.S 0x1006db8 <_le_hci_create_cmd_internal+0x180>;
 1006d4c:	4b 91       	P3 = [P1];
 1006d4e:	71 30       	R6 = P1;
 1006d50:	25 e1 f8 00 	R5 = 0xf8 (X);		/*		R5=0xf8(248) */
 1006d54:	26 64       	R6 += 0x4;		/* (  4) */
 1006d56:	43 30       	R0 = P3;
 1006d58:	00 e3 0a 49 	CALL 0x100ff6c <_strlen>;
 1006d5c:	c1 42       	R1 = R0.L (Z);
 1006d5e:	22 e1 f8 00 	R2 = 0xf8 (X);		/*		R2=0xf8(248) */
 1006d62:	11 0a       	CC = R1 <= R2 (IU);
 1006d64:	28 07       	IF CC R5 = R0;
 1006d66:	4d 30       	R1 = P5;
 1006d68:	39 50       	R0 = R1 + R7;
 1006d6a:	ed 42       	R5 = R5.L (Z);
 1006d6c:	15 30       	R2 = R5;
 1006d6e:	4b 30       	R1 = P3;
 1006d70:	00 e3 ca 47 	CALL 0x100fd04 <_memcpy>;
 1006d74:	22 e1 f8 00 	R2 = 0xf8 (X);		/*		R2=0xf8(248) */
 1006d78:	15 08       	CC = R5 == R2;
 1006d7a:	08 1c       	IF CC JUMP 0x1006d8a <_le_hci_create_cmd_internal+0x152> (BP);
 1006d7c:	ac 52       	R2 = R4 - R5;
 1006d7e:	4d 30       	R1 = P5;
 1006d80:	7d 51       	R5 = R5 + R7;
 1006d82:	29 50       	R0 = R1 + R5;
 1006d84:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1006d86:	00 e3 0d 48 	CALL 0x100fda0 <_memset>;
 1006d8a:	e7 51       	R7 = R7 + R4;
 1006d8c:	16 20       	JUMP.S 0x1006db8 <_le_hci_create_cmd_internal+0x180>;
 1006d8e:	55 30       	R2 = P5;
 1006d90:	3a 50       	R0 = R2 + R7;
 1006d92:	71 30       	R6 = P1;
 1006d94:	09 91       	R1 = [P1];
 1006d96:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1006d98:	26 64       	R6 += 0x4;		/* (  4) */
 1006d9a:	00 e3 b5 47 	CALL 0x100fd04 <_memcpy>;
 1006d9e:	87 64       	R7 += 0x10;		/* ( 16) */
 1006da0:	0c 20       	JUMP.S 0x1006db8 <_le_hci_create_cmd_internal+0x180>;
 1006da2:	4d 30       	R1 = P5;
 1006da4:	39 50       	R0 = R1 + R7;
 1006da6:	71 30       	R6 = P1;
 1006da8:	09 91       	R1 = [P1];
 1006daa:	fa 60       	R2 = 0x1f (X);		/*		R2=0x1f( 31) */
 1006dac:	26 64       	R6 += 0x4;		/* (  4) */
 1006dae:	00 e3 ab 47 	CALL 0x100fd04 <_memcpy>;
 1006db2:	ff 64       	R7 += 0x1f;		/* ( 31) */
 1006db4:	02 20       	JUMP.S 0x1006db8 <_le_hci_create_cmd_internal+0x180>;
 1006db6:	71 30       	R6 = P1;
 1006db8:	0e 32       	P1 = R6;
 1006dba:	60 98       	R0 = B[P4++] (X);
 1006dbc:	01 43       	R1 = R0.B (X);
 1006dbe:	01 0c       	CC = R1 == 0x0;
 1006dc0:	4d 17       	IF !CC JUMP 0x1006c5a <_le_hci_create_cmd_internal+0x22> (BP);
 1006dc2:	07 30       	R0 = R7;
 1006dc4:	e8 67       	R0 += -0x3;		/* ( -3) */
 1006dc6:	a8 e6 02 00 	B[P5 + 0x2] = R0;
 1006dca:	07 30       	R0 = R7;
 1006dcc:	01 e8 00 00 	UNLINK;
 1006dd0:	a3 05       	(R7:4, P5:3) = [SP++];
 1006dd2:	10 00       	RTS;
 1006dd4:	74 6c       	P4 += 0xe;		/* ( 14) */
 1006dd6:	00 01       	ILLEGAL;
 1006dd8:	74 6c       	P4 += 0xe;		/* ( 14) */
 1006dda:	00 01       	ILLEGAL;
 1006ddc:	9e 6c       	SP += 0x13;		/* ( 19) */
 1006dde:	00 01       	ILLEGAL;
 1006de0:	9e 6c       	SP += 0x13;		/* ( 19) */
 1006de2:	00 01       	ILLEGAL;
 1006de4:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006de6:	00 01       	ILLEGAL;
 1006de8:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006dea:	00 01       	ILLEGAL;
 1006dec:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006dee:	00 01       	ILLEGAL;
 1006df0:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006df2:	00 01       	ILLEGAL;
 1006df4:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006df6:	00 01       	ILLEGAL;
 1006df8:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006dfa:	00 01       	ILLEGAL;
 1006dfc:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006dfe:	00 01       	ILLEGAL;
 1006e00:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006e02:	00 01       	ILLEGAL;
 1006e04:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006e06:	00 01       	ILLEGAL;
 1006e08:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006e0a:	00 01       	ILLEGAL;
 1006e0c:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006e0e:	00 01       	ILLEGAL;
 1006e10:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006e12:	00 01       	ILLEGAL;
 1006e14:	a2 6d       	P2 += 0x34;		/* ( 52) */
 1006e16:	00 01       	ILLEGAL;
 1006e18:	d8 6c       	P0 += 0x1b;		/* ( 27) */
 1006e1a:	00 01       	ILLEGAL;
 1006e1c:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006e1e:	00 01       	ILLEGAL;
 1006e20:	1e 6d       	SP += 0x23;		/* ( 35) */
 1006e22:	00 01       	ILLEGAL;
 1006e24:	32 6d       	P2 += 0x26;		/* ( 38) */
 1006e26:	00 01       	ILLEGAL;
 1006e28:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006e2a:	00 01       	ILLEGAL;
 1006e2c:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006e2e:	00 01       	ILLEGAL;
 1006e30:	74 6c       	P4 += 0xe;		/* ( 14) */
 1006e32:	00 01       	ILLEGAL;
 1006e34:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006e36:	00 01       	ILLEGAL;
 1006e38:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006e3a:	00 01       	ILLEGAL;
 1006e3c:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006e3e:	00 01       	ILLEGAL;
 1006e40:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006e42:	00 01       	ILLEGAL;
 1006e44:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006e46:	00 01       	ILLEGAL;
 1006e48:	4c 6d       	P4 += 0x29;		/* ( 41) */
 1006e4a:	00 01       	ILLEGAL;
 1006e4c:	b6 6d       	SP += 0x36;		/* ( 54) */
 1006e4e:	00 01       	ILLEGAL;
 1006e50:	8e 6d       	SP += 0x31;		/* ( 49) */
 1006e52:	00 01       	ILLEGAL;

01006e54 <_hci_disconnect>:
 1006e54:	06 04       	ILLEGAL;
 1006e56:	00 00       	NOP;
 1006e58:	04 70       	ILLEGAL;
 1006e5a:	00 01       	ILLEGAL;

01006e5c <_hci_reset>:
 1006e5c:	03 0c       	CC = R3 == 0x0;
 1006e5e:	00 00       	NOP;
 1006e60:	98 b4       	W[P3 + 0x4] = R0;
 1006e62:	00 01       	ILLEGAL;

01006e64 <_hci_delete_stored_link_key>:
 1006e64:	12 0c       	CC = R2 == 0x2;
 1006e66:	00 00       	NOP;
 1006e68:	08 70       	ILLEGAL;
 1006e6a:	00 01       	ILLEGAL;

01006e6c <_hci_write_local_name>:
 1006e6c:	13 0c       	CC = R3 == 0x2;
 1006e6e:	00 00       	NOP;
 1006e70:	0c 70       	ILLEGAL;
 1006e72:	00 01       	ILLEGAL;

01006e74 <_hci_write_page_timeout>:
 1006e74:	18 0c       	CC = R0 == 0x3;
 1006e76:	00 00       	NOP;
 1006e78:	10 70       	ILLEGAL;
 1006e7a:	00 01       	ILLEGAL;

01006e7c <_hci_write_scan_enable>:
 1006e7c:	1a 0c       	CC = R2 == 0x3;
 1006e7e:	00 00       	NOP;
 1006e80:	48 70       	ILLEGAL;
 1006e82:	00 01       	ILLEGAL;

01006e84 <_hci_write_authentication_enable>:
 1006e84:	20 0c       	CC = R0 == -0x4;
 1006e86:	00 00       	NOP;
 1006e88:	48 70       	ILLEGAL;
 1006e8a:	00 01       	ILLEGAL;

01006e8c <_hci_write_class_of_device>:
 1006e8c:	24 0c       	CC = R4 == -0x4;
 1006e8e:	00 00       	NOP;
 1006e90:	14 70       	ILLEGAL;
 1006e92:	00 01       	ILLEGAL;

01006e94 <_hci_read_num_broadcast_retransmissions>:
 1006e94:	29 0c       	CC = R1 == -0x3;
 1006e96:	00 00       	NOP;
 1006e98:	98 b4       	W[P3 + 0x4] = R0;
 1006e9a:	00 01       	ILLEGAL;

01006e9c <_hci_write_num_broadcast_retransmissions>:
 1006e9c:	2a 0c       	CC = R2 == -0x3;
 1006e9e:	00 00       	NOP;
 1006ea0:	48 70       	ILLEGAL;
 1006ea2:	00 01       	ILLEGAL;

01006ea4 <_hci_write_synchronous_flow_control_enable>:
 1006ea4:	2f 0c       	CC = R7 == -0x3;
 1006ea6:	00 00       	NOP;
 1006ea8:	48 70       	ILLEGAL;
 1006eaa:	00 01       	ILLEGAL;

01006eac <_hci_host_buffer_size>:
 1006eac:	33 0c       	CC = R3 == -0x2;
 1006eae:	00 00       	NOP;
 1006eb0:	18 70       	ILLEGAL;
 1006eb2:	00 01       	ILLEGAL;

01006eb4 <_hci_read_link_supervision_timeout>:
 1006eb4:	36 0c       	CC = R6 == -0x2;
 1006eb6:	00 00       	NOP;
 1006eb8:	20 70       	ILLEGAL;
 1006eba:	00 01       	ILLEGAL;

01006ebc <_hci_write_link_supervision_timeout>:
 1006ebc:	37 0c       	CC = R7 == -0x2;
 1006ebe:	00 00       	NOP;
 1006ec0:	24 70       	ILLEGAL;
 1006ec2:	00 01       	ILLEGAL;

01006ec4 <_hci_write_inquiry_mode>:
 1006ec4:	45 0c       	CC = P5 == 0x0;
 1006ec6:	00 00       	NOP;
 1006ec8:	48 70       	ILLEGAL;
 1006eca:	00 01       	ILLEGAL;

01006ecc <_hci_write_extended_inquiry_response>:
 1006ecc:	52 0c       	CC = P2 == 0x2;
 1006ece:	00 00       	NOP;
 1006ed0:	28 70       	ILLEGAL;
 1006ed2:	00 01       	ILLEGAL;

01006ed4 <_hci_write_simple_pairing_mode>:
 1006ed4:	56 0c       	CC = SP == 0x2;
 1006ed6:	00 00       	NOP;
 1006ed8:	48 70       	ILLEGAL;
 1006eda:	00 01       	ILLEGAL;

01006edc <_hci_read_le_host_supported>:
 1006edc:	6c 0c       	CC = P4 == -0x3;
 1006ede:	00 00       	NOP;
 1006ee0:	98 b4       	W[P3 + 0x4] = R0;
 1006ee2:	00 01       	ILLEGAL;

01006ee4 <_hci_write_le_host_supported>:
 1006ee4:	6d 0c       	CC = P5 == -0x3;
 1006ee6:	00 00       	NOP;
 1006ee8:	2c 70       	ILLEGAL;
 1006eea:	00 01       	ILLEGAL;

01006eec <_hci_read_local_version_information>:
 1006eec:	01 10       	IF !CC JUMP 0x1006eee <_hci_read_local_version_information+0x2>;
 1006eee:	00 00       	NOP;
 1006ef0:	98 b4       	W[P3 + 0x4] = R0;
 1006ef2:	00 01       	ILLEGAL;

01006ef4 <_hci_read_local_supported_features>:
 1006ef4:	03 10       	IF !CC JUMP 0x1006efa <_hci_read_local_supported_features+0x6>;
 1006ef6:	00 00       	NOP;
 1006ef8:	98 b4       	W[P3 + 0x4] = R0;
 1006efa:	00 01       	ILLEGAL;

01006efc <_hci_read_buffer_size>:
 1006efc:	05 10       	IF !CC JUMP 0x1006f06 <_hci_read_bd_addr+0x2>;
 1006efe:	00 00       	NOP;
 1006f00:	98 b4       	W[P3 + 0x4] = R0;
 1006f02:	00 01       	ILLEGAL;

01006f04 <_hci_read_bd_addr>:
 1006f04:	09 10       	IF !CC JUMP 0x1006f16 <_hci_le_set_event_mask+0x2>;
 1006f06:	00 00       	NOP;
 1006f08:	98 b4       	W[P3 + 0x4] = R0;
 1006f0a:	00 01       	ILLEGAL;

01006f0c <_hci_read_rssi>:
 1006f0c:	05 14       	IF !CC JUMP 0x1006f16 <_hci_le_set_event_mask+0x2> (BP);
 1006f0e:	00 00       	NOP;
 1006f10:	20 70       	ILLEGAL;
 1006f12:	00 01       	ILLEGAL;

01006f14 <_hci_le_set_event_mask>:
 1006f14:	01 20       	JUMP.S 0x1006f16 <_hci_le_set_event_mask+0x2>;
 1006f16:	00 00       	NOP;
 1006f18:	30 70       	ILLEGAL;
 1006f1a:	00 01       	ILLEGAL;

01006f1c <_hci_le_read_buffer_size>:
 1006f1c:	02 20       	JUMP.S 0x1006f20 <_hci_le_read_buffer_size+0x4>;
 1006f1e:	00 00       	NOP;
 1006f20:	98 b4       	W[P3 + 0x4] = R0;
 1006f22:	00 01       	ILLEGAL;

01006f24 <_hci_le_read_supported_features>:
 1006f24:	03 20       	JUMP.S 0x1006f2a <_hci_le_read_supported_features+0x6>;
 1006f26:	00 00       	NOP;
 1006f28:	98 b4       	W[P3 + 0x4] = R0;
 1006f2a:	00 01       	ILLEGAL;

01006f2c <_hci_le_set_random_address>:
 1006f2c:	05 20       	JUMP.S 0x1006f36 <_hci_le_set_advertising_parameters+0x2>;
 1006f2e:	00 00       	NOP;
 1006f30:	34 70       	ILLEGAL;
 1006f32:	00 01       	ILLEGAL;

01006f34 <_hci_le_set_advertising_parameters>:
 1006f34:	06 20       	JUMP.S 0x1006f40 <_hci_le_read_advertising_channel_tx_power+0x4>;
 1006f36:	00 00       	NOP;
 1006f38:	38 70       	ILLEGAL;
 1006f3a:	00 01       	ILLEGAL;

01006f3c <_hci_le_read_advertising_channel_tx_power>:
 1006f3c:	07 20       	JUMP.S 0x1006f4a <_hci_le_set_advertising_data+0x6>;
 1006f3e:	00 00       	NOP;
 1006f40:	98 b4       	W[P3 + 0x4] = R0;
 1006f42:	00 01       	ILLEGAL;

01006f44 <_hci_le_set_advertising_data>:
 1006f44:	08 20       	JUMP.S 0x1006f54 <_hci_le_set_advertise_enable>;
 1006f46:	00 00       	NOP;
 1006f48:	0c 0a       	CC = R4 <= R1 (IU);
 1006f4a:	00 01       	ILLEGAL;

01006f4c <_hci_le_set_scan_response_data>:
 1006f4c:	09 20       	JUMP.S 0x1006f5e <_hci_le_set_scan_parameters+0x2>;
 1006f4e:	00 00       	NOP;
 1006f50:	0c 0a       	CC = R4 <= R1 (IU);
 1006f52:	00 01       	ILLEGAL;

01006f54 <_hci_le_set_advertise_enable>:
 1006f54:	0a 20       	JUMP.S 0x1006f68 <_hci_le_set_scan_enable+0x4>;
 1006f56:	00 00       	NOP;
 1006f58:	48 70       	ILLEGAL;
 1006f5a:	00 01       	ILLEGAL;

01006f5c <_hci_le_set_scan_parameters>:
 1006f5c:	0b 20       	JUMP.S 0x1006f72 <_hci_le_create_connection+0x6>;
 1006f5e:	00 00       	NOP;
 1006f60:	44 70       	ILLEGAL;
 1006f62:	00 01       	ILLEGAL;

01006f64 <_hci_le_set_scan_enable>:
 1006f64:	0c 20       	JUMP.S 0x1006f7c <_hci_le_read_white_list_size>;
 1006f66:	00 00       	NOP;
 1006f68:	2c 70       	ILLEGAL;
 1006f6a:	00 01       	ILLEGAL;

01006f6c <_hci_le_create_connection>:
 1006f6c:	0d 20       	JUMP.S 0x1006f86 <_hci_le_clear_white_list+0x2>;
 1006f6e:	00 00       	NOP;
 1006f70:	4c 70       	ILLEGAL;
 1006f72:	00 01       	ILLEGAL;

01006f74 <_hci_le_create_connection_cancel>:
 1006f74:	0e 20       	JUMP.S 0x1006f90 <_hci_le_add_device_to_whitelist+0x4>;
 1006f76:	00 00       	NOP;
 1006f78:	98 b4       	W[P3 + 0x4] = R0;
 1006f7a:	00 01       	ILLEGAL;

01006f7c <_hci_le_read_white_list_size>:
 1006f7c:	0f 20       	JUMP.S 0x1006f9a <_hci_le_remove_device_from_whitelist+0x6>;
 1006f7e:	00 00       	NOP;
 1006f80:	98 b4       	W[P3 + 0x4] = R0;
 1006f82:	00 01       	ILLEGAL;

01006f84 <_hci_le_clear_white_list>:
 1006f84:	10 20       	JUMP.S 0x1006fa4 <_hci_le_set_host_channel_classification>;
 1006f86:	00 00       	NOP;
 1006f88:	98 b4       	W[P3 + 0x4] = R0;
 1006f8a:	00 01       	ILLEGAL;

01006f8c <_hci_le_add_device_to_whitelist>:
 1006f8c:	11 20       	JUMP.S 0x1006fae <_hci_le_read_channel_map+0x2>;
 1006f8e:	00 00       	NOP;
 1006f90:	5c 70       	ILLEGAL;
 1006f92:	00 01       	ILLEGAL;

01006f94 <_hci_le_remove_device_from_whitelist>:
 1006f94:	12 20       	JUMP.S 0x1006fb8 <_hci_le_read_remote_used_features+0x4>;
 1006f96:	00 00       	NOP;
 1006f98:	5c 70       	ILLEGAL;
 1006f9a:	00 01       	ILLEGAL;

01006f9c <_hci_le_connection_update>:
 1006f9c:	13 20       	JUMP.S 0x1006fc2 <_hci_le_encrypt+0x6>;
 1006f9e:	00 00       	NOP;
 1006fa0:	60 70       	ILLEGAL;
 1006fa2:	00 01       	ILLEGAL;

01006fa4 <_hci_le_set_host_channel_classification>:
 1006fa4:	14 20       	JUMP.S 0x1006fcc <_hci_le_start_encryption>;
 1006fa6:	00 00       	NOP;
 1006fa8:	68 70       	ILLEGAL;
 1006faa:	00 01       	ILLEGAL;

01006fac <_hci_le_read_channel_map>:
 1006fac:	15 20       	JUMP.S 0x1006fd6 <_hci_le_long_term_key_request_reply+0x2>;
 1006fae:	00 00       	NOP;
 1006fb0:	20 70       	ILLEGAL;
 1006fb2:	00 01       	ILLEGAL;

01006fb4 <_hci_le_read_remote_used_features>:
 1006fb4:	16 20       	JUMP.S 0x1006fe0 <_hci_le_long_term_key_negative_reply+0x4>;
 1006fb6:	00 00       	NOP;
 1006fb8:	20 70       	ILLEGAL;
 1006fba:	00 01       	ILLEGAL;

01006fbc <_hci_le_encrypt>:
 1006fbc:	17 20       	JUMP.S 0x1006fea <_hci_le_read_supported_states+0x6>;
 1006fbe:	00 00       	NOP;
 1006fc0:	6c 70       	ILLEGAL;
 1006fc2:	00 01       	ILLEGAL;

01006fc4 <_hci_le_rand>:
 1006fc4:	18 20       	JUMP.S 0x1006ff4 <_hci_le_transmitter_test>;
 1006fc6:	00 00       	NOP;
 1006fc8:	98 b4       	W[P3 + 0x4] = R0;
 1006fca:	00 01       	ILLEGAL;

01006fcc <_hci_le_start_encryption>:
 1006fcc:	19 20       	JUMP.S 0x1006ffe <_hci_le_test_end+0x2>;
 1006fce:	00 00       	NOP;
 1006fd0:	70 70       	ILLEGAL;
 1006fd2:	00 01       	ILLEGAL;

01006fd4 <_hci_le_long_term_key_request_reply>:
 1006fd4:	1a 20       	JUMP.S 0x1007008 <_hci_le_test_end+0xc>;
 1006fd6:	00 00       	NOP;
 1006fd8:	78 70       	ILLEGAL;
 1006fda:	00 01       	ILLEGAL;

01006fdc <_hci_le_long_term_key_negative_reply>:
 1006fdc:	1b 20       	JUMP.S 0x1007012 <_hci_le_test_end+0x16>;
 1006fde:	00 00       	NOP;
 1006fe0:	20 70       	ILLEGAL;
 1006fe2:	00 01       	ILLEGAL;

01006fe4 <_hci_le_read_supported_states>:
 1006fe4:	1c 20       	JUMP.S 0x100701c <_hci_le_test_end+0x20>;
 1006fe6:	00 00       	NOP;
 1006fe8:	20 70       	ILLEGAL;
 1006fea:	00 01       	ILLEGAL;

01006fec <_hci_le_receiver_test>:
 1006fec:	1d 20       	JUMP.S 0x1007026 <_hci_le_test_end+0x2a>;
 1006fee:	00 00       	NOP;
 1006ff0:	48 70       	ILLEGAL;
 1006ff2:	00 01       	ILLEGAL;

01006ff4 <_hci_le_transmitter_test>:
 1006ff4:	1e 20       	JUMP.S 0x1007030 <_hci_le_test_end+0x34>;
 1006ff6:	00 00       	NOP;
 1006ff8:	7c 70       	ILLEGAL;
 1006ffa:	00 01       	ILLEGAL;

01006ffc <_hci_le_test_end>:
 1006ffc:	1f 20       	JUMP.S 0x100703a <_hci_le_test_end+0x3e>;
 1006ffe:	00 00       	NOP;
 1007000:	48 70       	ILLEGAL;
 1007002:	00 01       	ILLEGAL;
 1007004:	48 31       	ILLEGAL;
 1007006:	00 00       	NOP;
 1007008:	42 31       	ILLEGAL;
 100700a:	00 00       	NOP;
 100700c:	4e 00       	ILLEGAL;
 100700e:	00 00       	NOP;
 1007010:	32 00       	CLI R2;
 1007012:	00 00       	NOP;
 1007014:	33 00       	CLI R3;
 1007016:	00 00       	NOP;
 1007018:	32 31       	R6 = A1.X;
 100701a:	32 32       	SP = R2;
 100701c:	00 00       	NOP;
 100701e:	00 00       	NOP;
 1007020:	48 00       	ILLEGAL;
 1007022:	00 00       	NOP;
 1007024:	48 32       	P1 = P0;
 1007026:	00 00       	NOP;
 1007028:	31 45       	P1 = SP >> 0x1;
 100702a:	00 00       	NOP;
 100702c:	31 31       	R6 = A0.W;
 100702e:	00 00       	NOP;
 1007030:	34 34       	M2 = R4;
 1007032:	00 00       	NOP;
 1007034:	42 00       	STI R2;
 1007036:	00 00       	NOP;
 1007038:	32 32       	SP = R2;
 100703a:	31 31       	R6 = A0.W;
 100703c:	31 42       	DIVQ (R1, R6);
 100703e:	31 31       	R6 = A0.W;
 1007040:	00 00       	NOP;
 1007042:	00 00       	NOP;
 1007044:	31 32       	SP = R1;
 1007046:	32 31       	R6 = A1.X;
 1007048:	31 00       	CLI R1;
 100704a:	00 00       	NOP;
 100704c:	32 32       	SP = R2;
 100704e:	31 31       	R6 = A0.W;
 1007050:	42 31       	ILLEGAL;
 1007052:	32 32       	SP = R2;
 1007054:	32 32       	SP = R2;
 1007056:	32 32       	SP = R2;
 1007058:	00 00       	NOP;
 100705a:	00 00       	NOP;
 100705c:	31 42       	DIVQ (R1, R6);
 100705e:	00 00       	NOP;
 1007060:	48 32       	P1 = P0;
 1007062:	32 32       	SP = R2;
 1007064:	32 32       	SP = R2;
 1007066:	32 00       	CLI R2;
 1007068:	34 31       	ILLEGAL;
 100706a:	00 00       	NOP;
 100706c:	50 50       	R1 = R0 + R2;
 100706e:	00 00       	NOP;
 1007070:	48 34       	I1 = P0;
 1007072:	34 32       	SP = R4;
 1007074:	50 00       	JUMP (P0);
 1007076:	00 00       	NOP;
 1007078:	48 50       	R1 = R0 + R1;
 100707a:	00 00       	NOP;
 100707c:	31 31       	R6 = A0.W;
 100707e:	31 00       	CLI R1;

01007080 <_l2cap_packet_handler>:
 1007080:	f5 05       	[--SP] = (R7:6, P5:5);
 1007082:	30 30       	R6 = R0;
 1007084:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10000f0(16777456) */
 1007088:	00 e8 05 00 	LINK 0x14;		/* (20) */
 100708c:	29 32       	P5 = R1;
 100708e:	3a 30       	R7 = R2;
 1007090:	00 e1 ec 72 	R0.L = 0x72ec;		/* (29420)	R0=0x10072ec(16806636) */
 1007094:	00 e3 92 3f 	CALL 0x100efb8 <_puts>;
 1007098:	76 43       	R6 = R6.B (Z);
 100709a:	16 0c       	CC = R6 == 0x2;
 100709c:	29 18       	IF CC JUMP 0x10070ee <_l2cap_packet_handler+0x6e>;
 100709e:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 10070a0:	06 08       	CC = R6 == R0;
 10070a2:	55 14       	IF !CC JUMP 0x100714c <_l2cap_packet_handler+0xcc> (BP);
 10070a4:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21e8 <_hci_stack> */
 10070a8:	0a e1 94 23 	P2.L = 0x2394;		/* (9108)	P2=0x2394 <_packet_handler> */
 10070ac:	52 91       	P2 = [P2];
 10070ae:	42 0c       	CC = P2 == 0x0;
 10070b0:	07 18       	IF CC JUMP 0x10070be <_l2cap_packet_handler+0x3e>;
 10070b2:	f5 bc       	[SP + 0xc] = P5;
 10070b4:	37 b6       	W[SP + 0x10] = R7;
 10070b6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10070b8:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 10070ba:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 10070bc:	62 00       	CALL (P2);
 10070be:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2394 <_packet_handler> */
 10070c2:	0a e1 8c 23 	P2.L = 0x238c;		/* (9100)	P2=0x238c <_attribute_protocol_packet_handler> */
 10070c6:	52 91       	P2 = [P2];
 10070c8:	42 0c       	CC = P2 == 0x0;
 10070ca:	06 18       	IF CC JUMP 0x10070d6 <_l2cap_packet_handler+0x56>;
 10070cc:	b7 b5       	W[SP + 0xc] = R7;
 10070ce:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 10070d0:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10070d2:	55 30       	R2 = P5;
 10070d4:	62 00       	CALL (P2);
 10070d6:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x238c <_attribute_protocol_packet_handler> */
 10070da:	0a e1 90 23 	P2.L = 0x2390;		/* (9104)	P2=0x2390 <_security_protocol_packet_handler> */
 10070de:	52 91       	P2 = [P2];
 10070e0:	42 0c       	CC = P2 == 0x0;
 10070e2:	35 18       	IF CC JUMP 0x100714c <_l2cap_packet_handler+0xcc>;
 10070e4:	b7 b5       	W[SP + 0xc] = R7;
 10070e6:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 10070e8:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10070ea:	55 30       	R2 = P5;
 10070ec:	2f 20       	JUMP.S 0x100714a <_l2cap_packet_handler+0xca>;
 10070ee:	a9 e4 01 00 	R1 = B[P5 + 0x1] (Z);
 10070f2:	28 99       	R0 = B[P5] (Z);
 10070f4:	41 4f       	R1 <<= 0x8;
 10070f6:	41 56       	R1 = R1 | R0;
 10070f8:	20 e1 ff 0f 	R0 = 0xfff (X);		/*		R0=0xfff(4095) */
 10070fc:	41 54       	R1 = R1 & R0;
 10070fe:	a8 e4 07 00 	R0 = B[P5 + 0x7] (Z);
 1007102:	aa e4 06 00 	R2 = B[P5 + 0x6] (Z);
 1007106:	40 4f       	R0 <<= 0x8;
 1007108:	02 56       	R0 = R2 | R0;
 100710a:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 100710c:	10 08       	CC = R0 == R2;
 100710e:	05 18       	IF CC JUMP 0x1007118 <_l2cap_packet_handler+0x98>;
 1007110:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 1007112:	10 08       	CC = R0 == R2;
 1007114:	1c 14       	IF !CC JUMP 0x100714c <_l2cap_packet_handler+0xcc> (BP);
 1007116:	0e 20       	JUMP.S 0x1007132 <_l2cap_packet_handler+0xb2>;
 1007118:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2390 <_security_protocol_packet_handler> */
 100711c:	0a e1 8c 23 	P2.L = 0x238c;		/* (9100)	P2=0x238c <_attribute_protocol_packet_handler> */
 1007120:	52 91       	P2 = [P2];
 1007122:	42 0c       	CC = P2 == 0x0;
 1007124:	14 18       	IF CC JUMP 0x100714c <_l2cap_packet_handler+0xcc>;
 1007126:	55 30       	R2 = P5;
 1007128:	c7 67       	R7 += -0x8;		/* ( -8) */
 100712a:	42 64       	R2 += 0x8;		/* (  8) */
 100712c:	b7 b5       	W[SP + 0xc] = R7;
 100712e:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 1007130:	0d 20       	JUMP.S 0x100714a <_l2cap_packet_handler+0xca>;
 1007132:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x238c <_attribute_protocol_packet_handler> */
 1007136:	0a e1 90 23 	P2.L = 0x2390;		/* (9104)	P2=0x2390 <_security_protocol_packet_handler> */
 100713a:	52 91       	P2 = [P2];
 100713c:	42 0c       	CC = P2 == 0x0;
 100713e:	07 18       	IF CC JUMP 0x100714c <_l2cap_packet_handler+0xcc>;
 1007140:	55 30       	R2 = P5;
 1007142:	c7 67       	R7 += -0x8;		/* ( -8) */
 1007144:	42 64       	R2 += 0x8;		/* (  8) */
 1007146:	b7 b5       	W[SP + 0xc] = R7;
 1007148:	48 60       	R0 = 0x9 (X);		/*		R0=0x9(  9) */
 100714a:	62 00       	CALL (P2);
 100714c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000009(16777225) */
 1007150:	01 e8 00 00 	UNLINK;
 1007154:	00 e1 f8 72 	R0.L = 0x72f8;		/* (29432)	R0=0x10072f8(16806648) */
 1007158:	b5 05       	(R7:6, P5:5) = [SP++];
 100715a:	00 e2 2f 3f 	JUMP.L 0x100efb8 <_puts>;
	...

01007160 <_le_l2cap_init>:
 1007160:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2390 <_security_protocol_packet_handler> */
 1007164:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1007168:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100716a:	0a e1 94 23 	P2.L = 0x2394;		/* (9108)	P2=0x2394 <_packet_handler> */
 100716e:	10 93       	[P2] = R0;
 1007170:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2394 <_packet_handler> */
 1007174:	0a e1 8c 23 	P2.L = 0x238c;		/* (9100)	P2=0x238c <_attribute_protocol_packet_handler> */
 1007178:	10 93       	[P2] = R0;
 100717a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x238c <_attribute_protocol_packet_handler> */
 100717e:	0a e1 90 23 	P2.L = 0x2390;		/* (9104)	P2=0x2390 <_security_protocol_packet_handler> */
 1007182:	10 93       	[P2] = R0;
 1007184:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1007188:	00 e1 80 70 	R0.L = 0x7080;		/* (28800)	R0=0x1007080 <_l2cap_packet_handler>(16806016) */
 100718c:	01 e8 00 00 	UNLINK;
 1007190:	ff e2 46 f4 	JUMP.L 0x1005a1c <_le_hci_register_packet_handler>;

01007194 <_l2cap_max_le_mtu>:
 1007194:	00 00       	NOP;
 1007196:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100719a:	80 61       	R0 = 0x30 (X);		/*		R0=0x30( 48) */
 100719c:	01 e8 00 00 	UNLINK;
 10071a0:	10 00       	RTS;
	...

010071a4 <_le_l2cap_register_packet_handler>:
 10071a4:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2390 <_security_protocol_packet_handler> */
 10071a8:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10071ac:	0a e1 94 23 	P2.L = 0x2394;		/* (9108)	P2=0x2394 <_packet_handler> */
 10071b0:	10 93       	[P2] = R0;
 10071b2:	01 e8 00 00 	UNLINK;
 10071b6:	10 00       	RTS;

010071b8 <_le_l2cap_can_send_fixed_channel_packet_now>:
 10071b8:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10071bc:	c0 42       	R0 = R0.L (Z);
 10071be:	01 e8 00 00 	UNLINK;
 10071c2:	ff e2 7d f2 	JUMP.L 0x10056bc <_le_hci_can_send_acl_packet_now>;
	...

010071c8 <_le_l2cap_can_send_connectionless_packet_now>:
 10071c8:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10071cc:	20 e1 34 12 	R0 = 0x1234 (X);		/*		R0=0x1234(4660) */
 10071d0:	01 e8 00 00 	UNLINK;
 10071d4:	ff e2 74 f2 	JUMP.L 0x10056bc <_le_hci_can_send_acl_packet_now>;

010071d8 <_le_l2cap_get_outgoing_buffer>:
 10071d8:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10071dc:	ff e3 7e f3 	CALL 0x10058d8 <_le_hci_get_outgoing_packet_buffer>;
 10071e0:	40 64       	R0 += 0x8;		/* (  8) */
 10071e2:	01 e8 00 00 	UNLINK;
 10071e6:	10 00       	RTS;

010071e8 <_le_l2cap_reserve_packet_buffer>:
 10071e8:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10071ec:	01 e8 00 00 	UNLINK;
 10071f0:	ff e2 7a f2 	JUMP.L 0x10056e4 <_le_hci_reserve_packet_buffer>;

010071f4 <_le_l2cap_release_packet_buffer>:
 10071f4:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10071f8:	01 e8 00 00 	UNLINK;
 10071fc:	ff e2 88 f2 	JUMP.L 0x100570c <_le_hci_release_packet_buffer>;

01007200 <_le_l2cap_send_prepared_connectionless>:
 1007200:	60 05       	[--SP] = (R7:4);
 1007202:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007206:	28 30       	R5 = R0;
 1007208:	21 30       	R4 = R1;
 100720a:	32 30       	R6 = R2;
 100720c:	ff e3 60 f2 	CALL 0x10056cc <_le_hci_is_packet_buffer_reserved>;
 1007210:	00 0c       	CC = R0 == 0x0;
 1007212:	29 1c       	IF CC JUMP 0x1007264 <_le_l2cap_send_prepared_connectionless+0x64> (BP);
 1007214:	e8 42       	R0 = R5.L (Z);
 1007216:	ff e3 4b f2 	CALL 0x10056ac <_le_hci_can_send_prepared_acl_packet_now>;
 100721a:	00 0c       	CC = R0 == 0x0;
 100721c:	24 1c       	IF CC JUMP 0x1007264 <_le_l2cap_send_prepared_connectionless+0x64> (BP);
 100721e:	ff e3 5d f3 	CALL 0x10058d8 <_le_hci_get_outgoing_packet_buffer>;
 1007222:	38 30       	R7 = R0;
 1007224:	15 30       	R2 = R5;
 1007226:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1007228:	00 e3 d8 17 	CALL 0x100a1d8 <_bt_store_16>;
 100722c:	16 30       	R2 = R6;
 100722e:	07 30       	R0 = R7;
 1007230:	22 64       	R2 += 0x4;		/* (  4) */
 1007232:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 1007234:	00 e3 d2 17 	CALL 0x100a1d8 <_bt_store_16>;
 1007238:	07 30       	R0 = R7;
 100723a:	16 30       	R2 = R6;
 100723c:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 100723e:	00 e3 cd 17 	CALL 0x100a1d8 <_bt_store_16>;
 1007242:	07 30       	R0 = R7;
 1007244:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 1007246:	14 30       	R2 = R4;
 1007248:	00 e3 c8 17 	CALL 0x100a1d8 <_bt_store_16>;
 100724c:	f0 42       	R0 = R6.L (Z);
 100724e:	40 64       	R0 += 0x8;		/* (  8) */
 1007250:	ff e3 14 f3 	CALL 0x1005878 <_le_hci_send_acl_packet_buffer>;
 1007254:	38 30       	R7 = R0;
 1007256:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1001234(16781876) */
 100725a:	00 e1 08 73 	R0.L = 0x7308;		/* (29448)	R0=0x1007308(16806664) */
 100725e:	00 e3 ad 3e 	CALL 0x100efb8 <_puts>;
 1007262:	03 20       	JUMP.S 0x1007268 <_le_l2cap_send_prepared_connectionless+0x68>;
 1007264:	27 e1 57 00 	R7 = 0x57 (X);		/*		R7=0x57( 87) */
 1007268:	07 30       	R0 = R7;
 100726a:	01 e8 00 00 	UNLINK;
 100726e:	20 05       	(R7:4) = [SP++];
 1007270:	10 00       	RTS;
	...

01007274 <_le_l2cap_send_connectionless>:
 1007274:	60 05       	[--SP] = (R7:4);
 1007276:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100727a:	30 30       	R6 = R0;
 100727c:	21 30       	R4 = R1;
 100727e:	2a 30       	R5 = R2;
 1007280:	7f e5 12 00 	R7 = W[FP + 0x24] (X);
 1007284:	c0 42       	R0 = R0.L (Z);
 1007286:	ff e3 1b f2 	CALL 0x10056bc <_le_hci_can_send_acl_packet_now>;
 100728a:	00 0c       	CC = R0 == 0x0;
 100728c:	12 1c       	IF CC JUMP 0x10072b0 <_le_l2cap_send_connectionless+0x3c> (BP);
 100728e:	ff e3 2b f2 	CALL 0x10056e4 <_le_hci_reserve_packet_buffer>;
 1007292:	ff e3 23 f3 	CALL 0x10058d8 <_le_hci_get_outgoing_packet_buffer>;
 1007296:	fa 42       	R2 = R7.L (Z);
 1007298:	0d 30       	R1 = R5;
 100729a:	40 64       	R0 += 0x8;		/* (  8) */
 100729c:	00 e3 34 45 	CALL 0x100fd04 <_memcpy>;
 10072a0:	06 30       	R0 = R6;
 10072a2:	0c 30       	R1 = R4;
 10072a4:	17 30       	R2 = R7;
 10072a6:	01 e8 00 00 	UNLINK;
 10072aa:	20 05       	(R7:4) = [SP++];
 10072ac:	ff e2 aa ff 	JUMP.L 0x1007200 <_le_l2cap_send_prepared_connectionless>;
 10072b0:	01 e8 00 00 	UNLINK;
 10072b4:	20 e1 57 00 	R0 = 0x57 (X);		/*		R0=0x57( 87) */
 10072b8:	20 05       	(R7:4) = [SP++];
 10072ba:	10 00       	RTS;

010072bc <_le_l2cap_register_fixed_channel>:
 10072bc:	c9 42       	R1 = R1.L (Z);
 10072be:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 10072c0:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10072c4:	11 08       	CC = R1 == R2;
 10072c6:	05 18       	IF CC JUMP 0x10072d0 <_le_l2cap_register_fixed_channel+0x14>;
 10072c8:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 10072ca:	11 08       	CC = R1 == R2;
 10072cc:	0c 14       	IF !CC JUMP 0x10072e4 <_le_l2cap_register_fixed_channel+0x28> (BP);
 10072ce:	06 20       	JUMP.S 0x10072da <_le_l2cap_register_fixed_channel+0x1e>;
 10072d0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2394 <_packet_handler> */
 10072d4:	0a e1 8c 23 	P2.L = 0x238c;		/* (9100)	P2=0x238c <_attribute_protocol_packet_handler> */
 10072d8:	05 20       	JUMP.S 0x10072e2 <_le_l2cap_register_fixed_channel+0x26>;
 10072da:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x238c <_attribute_protocol_packet_handler> */
 10072de:	0a e1 90 23 	P2.L = 0x2390;		/* (9104)	P2=0x2390 <_security_protocol_packet_handler> */
 10072e2:	10 93       	[P2] = R0;
 10072e4:	01 e8 00 00 	UNLINK;
 10072e8:	10 00       	RTS;
 10072ea:	00 00       	NOP;
 10072ec:	2d 2d       	JUMP.S 0x1006d46 <_le_hci_create_cmd_internal+0x10e>;
 10072ee:	4c 32       	P1 = P4;
 10072f0:	43 41       	R3 = (R3 + R0) << 0x2;
 10072f2:	50 20       	JUMP.S 0x1007392 <_le_device_db_remove+0x1e>;
 10072f4:	50 48       	CC = !BITTST (R0, 0xa);		/* bit 10 */
 10072f6:	20 00       	IDLE;
 10072f8:	0a 20       	JUMP.S 0x100730c <_le_l2cap_register_fixed_channel+0x50>;
 10072fa:	4c 32       	P1 = P4;
 10072fc:	43 41       	R3 = (R3 + R0) << 0x2;
 10072fe:	50 20       	JUMP.S 0x100739e <_le_device_db_add+0x6>;
 1007300:	65 78       	ILLEGAL;
 1007302:	69 74       	ILLEGAL;
 1007304:	20 00       	IDLE;
 1007306:	00 00       	NOP;
 1007308:	6c 32       	P5 = P4;
 100730a:	63 61       	R3 = 0x2c (X);		/*		R3=0x2c( 44) */
 100730c:	70 5f       	P5 = P0 + (SP << 0x2);
 100730e:	73 65       	R3 += 0x2e;		/* ( 46) */
 1007310:	6e 64       	R6 += 0xd;		/* ( 13) */
 1007312:	5f 61       	R7 = 0x2b (X);		/*		R7=0x2b( 43) */
 1007314:	63 6c       	P3 += 0xc;		/* ( 12) */
 1007316:	5f 65       	R7 += 0x2b;		/* ( 43) */
 1007318:	78 69       	P0 = 0x2f (X);		/*		P0=0x2f( 47) */
 100731a:	74 0a       	CC = P4 <= SP (IU);
 100731c:	00 00       	NOP;
	...

01007320 <_le_device_db_init>:
 1007320:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2390 <_security_protocol_packet_handler> */
 1007324:	0a e1 98 23 	P2.L = 0x2398;		/* (9112)	P2=0x2398 <_le_devices> */
 1007328:	20 e1 ff 00 	R0 = 0xff (X);		/*		R0=0xff(255) */
 100732c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1007330:	10 93       	[P2] = R0;
 1007332:	10 e6 13 00 	[P2 + 0x4c] = R0;
 1007336:	10 e6 26 00 	[P2 + 0x98] = R0;
 100733a:	10 e6 39 00 	[P2 + 0xe4] = R0;
 100733e:	01 e8 00 00 	UNLINK;
 1007342:	10 00       	RTS;

01007344 <_le_device_db_count>:
 1007344:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x6c14 */
 1007348:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100734c:	09 e1 98 23 	P1.L = 0x2398;		/* (9112)	P1=0x2398 <_le_devices> */
 1007350:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007352:	28 e1 4c 00 	P0 = 0x4c (X);		/*		P0=0x4c <_device_ble>( 76) */
 1007356:	22 68       	P2 = 0x4 (X);		/*		P2=0x4(  4) */
 1007358:	22 e1 ff 00 	R2 = 0xff (X);		/*		R2=0xff(255) */
 100735c:	b2 e0 07 20 	LSETUP(0x1007360 <_le_device_db_count+0x1c>, 0x100736a <_le_device_db_count+0x26>) LC1 = P2;
 1007360:	09 91       	R1 = [P1];
 1007362:	11 08       	CC = R1 == R2;
 1007364:	08 30       	R1 = R0;
 1007366:	09 64       	R1 += 0x1;		/* (  1) */
 1007368:	01 06       	IF !CC R0 = R1;
 100736a:	41 5a       	P1 = P1 + P0;
 100736c:	01 e8 00 00 	UNLINK;
 1007370:	10 00       	RTS;
	...

01007374 <_le_device_db_remove>:
 1007374:	21 e1 4c 00 	R1 = 0x4c (X);		/*		R1=0x4c <_device_ble>( 76) */
 1007378:	c8 40       	R0 *= R1;
 100737a:	08 32       	P1 = R0;
 100737c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4 <_att_client_handler> */
 1007380:	0a e1 98 23 	P2.L = 0x2398;		/* (9112)	P2=0x2398 <_le_devices> */
 1007384:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1007388:	20 e1 ff 00 	R0 = 0xff (X);		/*		R0=0xff(255) */
 100738c:	8a 5a       	P2 = P2 + P1;
 100738e:	10 93       	[P2] = R0;
 1007390:	01 e8 00 00 	UNLINK;
 1007394:	10 00       	RTS;
	...

01007398 <_le_device_db_add>:
 1007398:	e5 05       	[--SP] = (R7:4, P5:5);
 100739a:	21 30       	R4 = R1;
 100739c:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x2398 <_le_devices> */
 10073a0:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10073a4:	28 30       	R5 = R0;
 10073a6:	32 30       	R6 = R2;
 10073a8:	09 e1 98 23 	P1.L = 0x2398;		/* (9112)	P1=0x2398 <_le_devices> */
 10073ac:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 10073ae:	28 e1 4c 00 	P0 = 0x4c (X);		/*		P0=0x4c <_device_ble>( 76) */
 10073b2:	22 68       	P2 = 0x4 (X);		/*		P2=0x4(  4) */
 10073b4:	21 e1 ff 00 	R1 = 0xff (X);		/*		R1=0xff(255) */
 10073b8:	b2 e0 06 20 	LSETUP(0x10073bc <_le_device_db_add+0x24>, 0x10073c4 <_le_device_db_add+0x2c>) LC1 = P2;
 10073bc:	08 91       	R0 = [P1];
 10073be:	08 08       	CC = R0 == R1;
 10073c0:	05 18       	IF CC JUMP 0x10073ca <_le_device_db_add+0x32>;
 10073c2:	0f 64       	R7 += 0x1;		/* (  1) */
 10073c4:	41 5a       	P1 = P1 + P0;
 10073c6:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 10073c8:	24 20       	JUMP.S 0x1007410 <_le_device_db_add+0x78>;
 10073ca:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100ffff(16842751) */
 10073ce:	00 e1 60 76 	R0.L = 0x7660;		/* (30304)	R0=0x1007660(16807520) */
 10073d2:	0e 30       	R1 = R6;
 10073d4:	00 e3 e0 17 	CALL 0x100a394 <_log_key>;
 10073d8:	20 e1 4c 00 	R0 = 0x4c (X);		/*		R0=0x4c <_device_ble>( 76) */
 10073dc:	f8 40       	R0 *= R7;
 10073de:	10 32       	P2 = R0;
 10073e0:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x2c <_att_client_start_handle> */
 10073e4:	0d e1 98 23 	P5.L = 0x2398;		/* (9112)	P5=0x2398 <_le_devices> */
 10073e8:	0c 30       	R1 = R4;
 10073ea:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 10073ec:	55 5b       	P5 = P5 + P2;
 10073ee:	55 32       	P2 = P5;
 10073f0:	15 92       	[P2++] = R5;
 10073f2:	42 30       	R0 = P2;
 10073f4:	00 e3 88 44 	CALL 0x100fd04 <_memcpy>;
 10073f8:	45 30       	R0 = P5;
 10073fa:	50 64       	R0 += 0xa;		/* ( 10) */
 10073fc:	0e 30       	R1 = R6;
 10073fe:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1007400:	00 e3 82 44 	CALL 0x100fd04 <_memcpy>;
 1007404:	2a e1 44 00 	P2 = 0x44 (X);		/*		P2=0x44( 68) */
 1007408:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100740a:	55 5b       	P5 = P5 + P2;
 100740c:	28 93       	[P5] = R0;
 100740e:	07 30       	R0 = R7;
 1007410:	01 e8 00 00 	UNLINK;
 1007414:	a5 05       	(R7:4, P5:5) = [SP++];
 1007416:	10 00       	RTS;

01007418 <_le_device_db_info>:
 1007418:	11 32       	P2 = R1;
 100741a:	70 05       	[--SP] = (R7:6);
 100741c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007420:	38 30       	R7 = R0;
 1007422:	02 30       	R0 = R2;
 1007424:	fe a1       	R6 = [FP + 0x1c];
 1007426:	42 0c       	CC = P2 == 0x0;
 1007428:	0c 18       	IF CC JUMP 0x1007440 <_le_device_db_info+0x28>;
 100742a:	21 e1 4c 00 	R1 = 0x4c (X);		/*		R1=0x4c <_device_ble>( 76) */
 100742e:	f9 40       	R1 *= R7;
 1007430:	01 32       	P0 = R1;
 1007432:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x2398 <_le_devices> */
 1007436:	09 e1 98 23 	P1.L = 0x2398;		/* (9112)	P1=0x2398 <_le_devices> */
 100743a:	41 5a       	P1 = P1 + P0;
 100743c:	09 91       	R1 = [P1];
 100743e:	11 93       	[P2] = R1;
 1007440:	00 0c       	CC = R0 == 0x0;
 1007442:	0c 18       	IF CC JUMP 0x100745a <_le_device_db_info+0x42>;
 1007444:	21 e1 4c 00 	R1 = 0x4c (X);		/*		R1=0x4c <_device_ble>( 76) */
 1007448:	f9 40       	R1 *= R7;
 100744a:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x10( 16) */
 100744e:	02 e1 9c 23 	R2.L = 0x239c;		/* (9116)	R2=0x239c(9116) */
 1007452:	51 50       	R1 = R1 + R2;
 1007454:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 1007456:	00 e3 57 44 	CALL 0x100fd04 <_memcpy>;
 100745a:	06 0c       	CC = R6 == 0x0;
 100745c:	0d 18       	IF CC JUMP 0x1007476 <_le_device_db_info+0x5e>;
 100745e:	20 e1 4c 00 	R0 = 0x4c (X);		/*		R0=0x4c <_device_ble>( 76) */
 1007462:	f8 40       	R0 *= R7;
 1007464:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x4c <_device_ble>( 76) */
 1007468:	01 e1 a2 23 	R1.L = 0x23a2;		/* (9122)	R1=0x23a2(9122) */
 100746c:	48 50       	R1 = R0 + R1;
 100746e:	06 30       	R0 = R6;
 1007470:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1007472:	00 e3 49 44 	CALL 0x100fd04 <_memcpy>;
 1007476:	01 e8 00 00 	UNLINK;
 100747a:	30 05       	(R7:6) = [SP++];
 100747c:	10 00       	RTS;
	...

01007480 <_le_device_db_encryption_set>:
 1007480:	70 05       	[--SP] = (R7:6);
 1007482:	38 30       	R7 = R0;
 1007484:	20 e1 4c 00 	R0 = 0x4c (X);		/*		R0=0x4c <_device_ble>( 76) */
 1007488:	f8 40       	R0 *= R7;
 100748a:	08 32       	P1 = R0;
 100748c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x44 */
 1007490:	0a e1 98 23 	P2.L = 0x2398;		/* (9112)	P2=0x2398 <_le_devices> */
 1007494:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007498:	fe a1       	R6 = [FP + 0x1c];
 100749a:	8a 5a       	P2 = P2 + P1;
 100749c:	51 e6 15 00 	W[P2 + 0x2a] = R1;
 10074a0:	02 0c       	CC = R2 == 0x0;
 10074a2:	07 18       	IF CC JUMP 0x10074b0 <_le_device_db_encryption_set+0x30>;
 10074a4:	42 30       	R0 = P2;
 10074a6:	0a 30       	R1 = R2;
 10074a8:	60 65       	R0 += 0x2c;		/* ( 44) */
 10074aa:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 10074ac:	00 e3 2c 44 	CALL 0x100fd04 <_memcpy>;
 10074b0:	06 0c       	CC = R6 == 0x0;
 10074b2:	0d 18       	IF CC JUMP 0x10074cc <_le_device_db_encryption_set+0x4c>;
 10074b4:	20 e1 4c 00 	R0 = 0x4c (X);		/*		R0=0x4c <_device_ble>( 76) */
 10074b8:	f8 40       	R0 *= R7;
 10074ba:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x23a2(9122) */
 10074be:	01 e1 b2 23 	R1.L = 0x23b2;		/* (9138)	R1=0x23b2(9138) */
 10074c2:	08 50       	R0 = R0 + R1;
 10074c4:	0e 30       	R1 = R6;
 10074c6:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 10074c8:	00 e3 1e 44 	CALL 0x100fd04 <_memcpy>;
 10074cc:	01 e8 00 00 	UNLINK;
 10074d0:	30 05       	(R7:6) = [SP++];
 10074d2:	10 00       	RTS;

010074d4 <_le_device_db_encryption_get>:
 10074d4:	11 32       	P2 = R1;
 10074d6:	70 05       	[--SP] = (R7:6);
 10074d8:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10074dc:	38 30       	R7 = R0;
 10074de:	02 30       	R0 = R2;
 10074e0:	fe a1       	R6 = [FP + 0x1c];
 10074e2:	42 0c       	CC = P2 == 0x0;
 10074e4:	0c 18       	IF CC JUMP 0x10074fc <_le_device_db_encryption_get+0x28>;
 10074e6:	21 e1 4c 00 	R1 = 0x4c (X);		/*		R1=0x4c <_device_ble>( 76) */
 10074ea:	f9 40       	R1 *= R7;
 10074ec:	01 32       	P0 = R1;
 10074ee:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x2398 <_le_devices> */
 10074f2:	09 e1 c0 23 	P1.L = 0x23c0;		/* (9152)	P1=0x23c0 */
 10074f6:	48 5a       	P1 = P0 + P1;
 10074f8:	49 a8       	R1 = W[P1 + 0x2] (X);
 10074fa:	11 97       	W[P2] = R1;
 10074fc:	00 0c       	CC = R0 == 0x0;
 10074fe:	0c 18       	IF CC JUMP 0x1007516 <_le_device_db_encryption_get+0x42>;
 1007500:	21 e1 4c 00 	R1 = 0x4c (X);		/*		R1=0x4c <_device_ble>( 76) */
 1007504:	f9 40       	R1 *= R7;
 1007506:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x10( 16) */
 100750a:	02 e1 c4 23 	R2.L = 0x23c4;		/* (9156)	R2=0x23c4(9156) */
 100750e:	51 50       	R1 = R1 + R2;
 1007510:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 1007512:	00 e3 f9 43 	CALL 0x100fd04 <_memcpy>;
 1007516:	06 0c       	CC = R6 == 0x0;
 1007518:	0d 18       	IF CC JUMP 0x1007532 <_le_device_db_encryption_get+0x5e>;
 100751a:	20 e1 4c 00 	R0 = 0x4c (X);		/*		R0=0x4c <_device_ble>( 76) */
 100751e:	f8 40       	R0 *= R7;
 1007520:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x4c <_device_ble>( 76) */
 1007524:	01 e1 b2 23 	R1.L = 0x23b2;		/* (9138)	R1=0x23b2(9138) */
 1007528:	48 50       	R1 = R0 + R1;
 100752a:	06 30       	R0 = R6;
 100752c:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 100752e:	00 e3 eb 43 	CALL 0x100fd04 <_memcpy>;
 1007532:	01 e8 00 00 	UNLINK;
 1007536:	30 05       	(R7:6) = [SP++];
 1007538:	10 00       	RTS;
	...

0100753c <_le_device_db_csrk_get>:
 100753c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007540:	19 30       	R3 = R1;
 1007542:	01 0c       	CC = R1 == 0x0;
 1007544:	0d 18       	IF CC JUMP 0x100755e <_le_device_db_csrk_get+0x22>;
 1007546:	22 e1 4c 00 	R2 = 0x4c (X);		/*		R2=0x4c <_device_ble>( 76) */
 100754a:	c2 40       	R2 *= R0;
 100754c:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x23b2(9138) */
 1007550:	01 e1 cc 23 	R1.L = 0x23cc;		/* (9164)	R1=0x23cc(9164) */
 1007554:	4a 50       	R1 = R2 + R1;
 1007556:	03 30       	R0 = R3;
 1007558:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 100755a:	00 e3 d5 43 	CALL 0x100fd04 <_memcpy>;
 100755e:	01 e8 00 00 	UNLINK;
 1007562:	10 00       	RTS;

01007564 <_le_device_db_csrk_set>:
 1007564:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007568:	01 0c       	CC = R1 == 0x0;
 100756a:	0c 18       	IF CC JUMP 0x1007582 <_le_device_db_csrk_set+0x1e>;
 100756c:	22 e1 4c 00 	R2 = 0x4c (X);		/*		R2=0x4c <_device_ble>( 76) */
 1007570:	c2 40       	R2 *= R0;
 1007572:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x4c <_device_ble>( 76) */
 1007576:	00 e1 cc 23 	R0.L = 0x23cc;		/* (9164)	R0=0x23cc(9164) */
 100757a:	02 50       	R0 = R2 + R0;
 100757c:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 100757e:	00 e3 c3 43 	CALL 0x100fd04 <_memcpy>;
 1007582:	01 e8 00 00 	UNLINK;
 1007586:	10 00       	RTS;

01007588 <_le_device_db_remote_counter_get>:
 1007588:	21 e1 4c 00 	R1 = 0x4c (X);		/*		R1=0x4c <_device_ble>( 76) */
 100758c:	c8 40       	R0 *= R1;
 100758e:	08 32       	P1 = R0;
 1007590:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2398 <_le_devices> */
 1007594:	0a e1 98 23 	P2.L = 0x2398;		/* (9112)	P2=0x2398 <_le_devices> */
 1007598:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100759c:	01 e8 00 00 	UNLINK;
 10075a0:	8a 5a       	P2 = P2 + P1;
 10075a2:	10 e4 11 00 	R0 = [P2 + 0x44];
 10075a6:	10 00       	RTS;

010075a8 <_le_device_db_remote_counter_set>:
 10075a8:	22 e1 4c 00 	R2 = 0x4c (X);		/*		R2=0x4c <_device_ble>( 76) */
 10075ac:	d0 40       	R0 *= R2;
 10075ae:	08 32       	P1 = R0;
 10075b0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2398 <_le_devices> */
 10075b4:	0a e1 98 23 	P2.L = 0x2398;		/* (9112)	P2=0x2398 <_le_devices> */
 10075b8:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10075bc:	8a 5a       	P2 = P2 + P1;
 10075be:	11 e6 11 00 	[P2 + 0x44] = R1;
 10075c2:	01 e8 00 00 	UNLINK;
 10075c6:	10 00       	RTS;

010075c8 <_le_device_db_local_counter_get>:
 10075c8:	21 e1 4c 00 	R1 = 0x4c (X);		/*		R1=0x4c <_device_ble>( 76) */
 10075cc:	c8 40       	R0 *= R1;
 10075ce:	08 32       	P1 = R0;
 10075d0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2398 <_le_devices> */
 10075d4:	0a e1 98 23 	P2.L = 0x2398;		/* (9112)	P2=0x2398 <_le_devices> */
 10075d8:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10075dc:	01 e8 00 00 	UNLINK;
 10075e0:	8a 5a       	P2 = P2 + P1;
 10075e2:	10 e4 12 00 	R0 = [P2 + 0x48];
 10075e6:	10 00       	RTS;

010075e8 <_le_device_db_local_counter_set>:
 10075e8:	22 e1 4c 00 	R2 = 0x4c (X);		/*		R2=0x4c <_device_ble>( 76) */
 10075ec:	d0 40       	R0 *= R2;
 10075ee:	08 32       	P1 = R0;
 10075f0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2398 <_le_devices> */
 10075f4:	0a e1 98 23 	P2.L = 0x2398;		/* (9112)	P2=0x2398 <_le_devices> */
 10075f8:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10075fc:	8a 5a       	P2 = P2 + P1;
 10075fe:	11 e6 12 00 	[P2 + 0x48] = R1;
 1007602:	01 e8 00 00 	UNLINK;
 1007606:	10 00       	RTS;

01007608 <_le_device_db_dump>:
 1007608:	e5 05       	[--SP] = (R7:4, P5:5);
 100760a:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x2398 <_le_devices> */
 100760e:	0d e1 98 23 	P5.L = 0x2398;		/* (9112)	P5=0x2398 <_le_devices> */
 1007612:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007616:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 1007618:	25 e1 4c 00 	R5 = 0x4c (X);		/*		R5=0x4c <_device_ble>( 76) */
 100761c:	65 30       	R4 = P5;
 100761e:	21 e1 ff 00 	R1 = 0xff (X);		/*		R1=0xff(255) */
 1007622:	28 91       	R0 = [P5];
 1007624:	08 08       	CC = R0 == R1;
 1007626:	13 18       	IF CC JUMP 0x100764c <_le_device_db_dump+0x44>;
 1007628:	37 30       	R6 = R7;
 100762a:	ee 40       	R6 *= R5;
 100762c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10023cc(16786380) */
 1007630:	74 50       	R1 = R4 + R6;
 1007632:	51 64       	R1 += 0xa;		/* ( 10) */
 1007634:	00 e1 60 76 	R0.L = 0x7660;		/* (30304)	R0=0x1007660(16807520) */
 1007638:	00 e3 ae 16 	CALL 0x100a394 <_log_key>;
 100763c:	a6 65       	R6 += 0x34;		/* ( 52) */
 100763e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1007660(16807520) */
 1007642:	66 50       	R1 = R6 + R4;
 1007644:	00 e1 64 76 	R0.L = 0x7664;		/* (30308)	R0=0x1007664(16807524) */
 1007648:	00 e3 a6 16 	CALL 0x100a394 <_log_key>;
 100764c:	15 32       	P2 = R5;
 100764e:	0f 64       	R7 += 0x1;		/* (  1) */
 1007650:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1007652:	07 08       	CC = R7 == R0;
 1007654:	55 5b       	P5 = P5 + P2;
 1007656:	e4 17       	IF !CC JUMP 0x100761e <_le_device_db_dump+0x16> (BP);
 1007658:	01 e8 00 00 	UNLINK;
 100765c:	a5 05       	(R7:4, P5:5) = [SP++];
 100765e:	10 00       	RTS;
 1007660:	69 72       	ILLEGAL;
 1007662:	6b 00       	ILLEGAL;
 1007664:	63 73       	ILLEGAL;
 1007666:	72 6b       	P2 = -0x12 (X);		/*		P2=0xffffffee(-18) */
 1007668:	00 00       	NOP;
	...

0100766c <_linked_list_empty>:
 100766c:	10 32       	P2 = R0;
 100766e:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1007672:	01 e8 00 00 	UNLINK;
 1007676:	10 91       	R0 = [P2];
 1007678:	00 0c       	CC = R0 == 0x0;
 100767a:	00 02       	R0 = CC;
 100767c:	10 00       	RTS;
	...

01007680 <_linked_list_get_last_item>:
 1007680:	08 32       	P1 = R0;
 1007682:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1007686:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007688:	4a 91       	P2 = [P1];
 100768a:	03 20       	JUMP.S 0x1007690 <_linked_list_get_last_item+0x10>;
 100768c:	42 30       	R0 = P2;
 100768e:	52 91       	P2 = [P2];
 1007690:	42 0c       	CC = P2 == 0x0;
 1007692:	fd 17       	IF !CC JUMP 0x100768c <_linked_list_get_last_item+0xc> (BP);
 1007694:	01 e8 00 00 	UNLINK;
 1007698:	10 00       	RTS;
	...

0100769c <_linked_list_add>:
 100769c:	10 32       	P2 = R0;
 100769e:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10076a2:	01 32       	P0 = R1;
 10076a4:	10 91       	R0 = [P2];
 10076a6:	08 32       	P1 = R0;
 10076a8:	04 20       	JUMP.S 0x10076b0 <_linked_list_add+0x14>;
 10076aa:	41 08       	CC = P1 == P0;
 10076ac:	06 1c       	IF CC JUMP 0x10076b8 <_linked_list_add+0x1c> (BP);
 10076ae:	49 91       	P1 = [P1];
 10076b0:	41 0c       	CC = P1 == 0x0;
 10076b2:	fc 17       	IF !CC JUMP 0x10076aa <_linked_list_add+0xe> (BP);
 10076b4:	00 93       	[P0] = R0;
 10076b6:	50 93       	[P2] = P0;
 10076b8:	01 e8 00 00 	UNLINK;
 10076bc:	10 00       	RTS;
	...

010076c0 <_linked_list_add_tail>:
 10076c0:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10076c4:	03 20       	JUMP.S 0x10076ca <_linked_list_add_tail+0xa>;
 10076c6:	08 08       	CC = R0 == R1;
 10076c8:	08 1c       	IF CC JUMP 0x10076d8 <_linked_list_add_tail+0x18> (BP);
 10076ca:	10 32       	P2 = R0;
 10076cc:	10 91       	R0 = [P2];
 10076ce:	00 0c       	CC = R0 == 0x0;
 10076d0:	fb 17       	IF !CC JUMP 0x10076c6 <_linked_list_add_tail+0x6> (BP);
 10076d2:	09 32       	P1 = R1;
 10076d4:	08 93       	[P1] = R0;
 10076d6:	11 93       	[P2] = R1;
 10076d8:	01 e8 00 00 	UNLINK;
 10076dc:	10 00       	RTS;
	...

010076e0 <_linked_list_remove>:
 10076e0:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10076e4:	09 32       	P1 = R1;
 10076e6:	09 20       	JUMP.S 0x10076f8 <_linked_list_remove+0x18>;
 10076e8:	49 30       	R1 = P1;
 10076ea:	10 91       	R0 = [P2];
 10076ec:	08 08       	CC = R0 == R1;
 10076ee:	05 14       	IF !CC JUMP 0x10076f8 <_linked_list_remove+0x18> (BP);
 10076f0:	08 91       	R0 = [P1];
 10076f2:	10 93       	[P2] = R0;
 10076f4:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10076f6:	05 20       	JUMP.S 0x1007700 <_linked_list_remove+0x20>;
 10076f8:	10 32       	P2 = R0;
 10076fa:	42 0c       	CC = P2 == 0x0;
 10076fc:	f6 17       	IF !CC JUMP 0x10076e8 <_linked_list_remove+0x8> (BP);
 10076fe:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 1007700:	01 e8 00 00 	UNLINK;
 1007704:	10 00       	RTS;
	...

01007708 <_linked_list_count>:
 1007708:	10 32       	P2 = R0;
 100770a:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100770e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007710:	03 20       	JUMP.S 0x1007716 <_linked_list_count+0xe>;
 1007712:	08 64       	R0 += 0x1;		/* (  1) */
 1007714:	52 91       	P2 = [P2];
 1007716:	42 0c       	CC = P2 == 0x0;
 1007718:	fd 17       	IF !CC JUMP 0x1007712 <_linked_list_count+0xa> (BP);
 100771a:	01 e8 00 00 	UNLINK;
 100771e:	10 00       	RTS;

01007720 <_linked_item_set_user>:
 1007720:	10 32       	P2 = R0;
 1007722:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1007726:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007728:	01 e8 00 00 	UNLINK;
 100772c:	10 93       	[P2] = R0;
 100772e:	51 b0       	[P2 + 0x4] = R1;
 1007730:	10 00       	RTS;
	...

01007734 <_linked_item_get_user>:
 1007734:	10 32       	P2 = R0;
 1007736:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100773a:	01 e8 00 00 	UNLINK;
 100773e:	50 a0       	R0 = [P2 + 0x4];
 1007740:	10 00       	RTS;
	...

01007744 <_linked_list_iterator_init>:
 1007744:	10 32       	P2 = R0;
 1007746:	09 32       	P1 = R1;
 1007748:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100774a:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100774e:	01 e8 00 00 	UNLINK;
 1007752:	10 93       	[P2] = R0;
 1007754:	51 b0       	[P2 + 0x4] = R1;
 1007756:	08 91       	R0 = [P1];
 1007758:	90 b0       	[P2 + 0x8] = R0;
 100775a:	10 00       	RTS;

0100775c <_linked_list_iterator_has_next>:
 100775c:	10 32       	P2 = R0;
 100775e:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1007762:	10 91       	R0 = [P2];
 1007764:	00 0c       	CC = R0 == 0x0;
 1007766:	91 ac       	P1 = [P2 + 0x8];
 1007768:	03 14       	IF !CC JUMP 0x100776e <_linked_list_iterator_has_next+0x12> (BP);
 100776a:	41 0c       	CC = P1 == 0x0;
 100776c:	0a 20       	JUMP.S 0x1007780 <_linked_list_iterator_has_next+0x24>;
 100776e:	00 00       	NOP;
 1007770:	52 ac       	P2 = [P2 + 0x4];
 1007772:	52 91       	P2 = [P2];
 1007774:	4a 08       	CC = P2 == P1;
 1007776:	03 18       	IF CC JUMP 0x100777c <_linked_list_iterator_has_next+0x20>;
 1007778:	42 0c       	CC = P2 == 0x0;
 100777a:	03 20       	JUMP.S 0x1007780 <_linked_list_iterator_has_next+0x24>;
 100777c:	10 91       	R0 = [P2];
 100777e:	00 0c       	CC = R0 == 0x0;
 1007780:	00 02       	R0 = CC;
 1007782:	00 4b       	BITTGL (R0, 0x0);		/* bit  0 */
 1007784:	01 e8 00 00 	UNLINK;
 1007788:	10 00       	RTS;
	...

0100778c <_linked_list_iterator_next>:
 100778c:	10 32       	P2 = R0;
 100778e:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1007792:	10 91       	R0 = [P2];
 1007794:	00 0c       	CC = R0 == 0x0;
 1007796:	0c 1c       	IF CC JUMP 0x10077ae <_linked_list_iterator_next+0x22> (BP);
 1007798:	51 ac       	P1 = [P2 + 0x4];
 100779a:	90 ac       	P0 = [P2 + 0x8];
 100779c:	49 91       	P1 = [P1];
 100779e:	41 08       	CC = P1 == P0;
 10077a0:	05 14       	IF !CC JUMP 0x10077aa <_linked_list_iterator_next+0x1e> (BP);
 10077a2:	08 91       	R0 = [P1];
 10077a4:	51 bc       	[P2 + 0x4] = P1;
 10077a6:	90 b0       	[P2 + 0x8] = R0;
 10077a8:	05 20       	JUMP.S 0x10077b2 <_linked_list_iterator_next+0x26>;
 10077aa:	91 bc       	[P2 + 0x8] = P1;
 10077ac:	03 20       	JUMP.S 0x10077b2 <_linked_list_iterator_next+0x26>;
 10077ae:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 10077b0:	10 93       	[P2] = R0;
 10077b2:	90 a0       	R0 = [P2 + 0x8];
 10077b4:	01 e8 00 00 	UNLINK;
 10077b8:	10 00       	RTS;
	...

010077bc <_linked_list_iterator_remove>:
 10077bc:	10 32       	P2 = R0;
 10077be:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10077c2:	91 ac       	P1 = [P2 + 0x8];
 10077c4:	08 91       	R0 = [P1];
 10077c6:	51 ac       	P1 = [P2 + 0x4];
 10077c8:	90 b0       	[P2 + 0x8] = R0;
 10077ca:	08 93       	[P1] = R0;
 10077cc:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10077ce:	10 93       	[P2] = R0;
 10077d0:	01 e8 00 00 	UNLINK;
 10077d4:	10 00       	RTS;
	...

010077d8 <_memory_pool_get>:
 10077d8:	08 32       	P1 = R0;
 10077da:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10077de:	4a 91       	P2 = [P1];
 10077e0:	42 0c       	CC = P2 == 0x0;
 10077e2:	05 1c       	IF CC JUMP 0x10077ec <_memory_pool_get+0x14> (BP);
 10077e4:	10 91       	R0 = [P2];
 10077e6:	08 93       	[P1] = R0;
 10077e8:	42 30       	R0 = P2;
 10077ea:	02 20       	JUMP.S 0x10077ee <_memory_pool_get+0x16>;
 10077ec:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10077ee:	01 e8 00 00 	UNLINK;
 10077f2:	10 00       	RTS;

010077f4 <_memory_pool_free>:
 10077f4:	10 32       	P2 = R0;
 10077f6:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10077fa:	01 32       	P0 = R1;
 10077fc:	10 91       	R0 = [P2];
 10077fe:	08 32       	P1 = R0;
 1007800:	04 20       	JUMP.S 0x1007808 <_memory_pool_free+0x14>;
 1007802:	41 08       	CC = P1 == P0;
 1007804:	06 1c       	IF CC JUMP 0x1007810 <_memory_pool_free+0x1c> (BP);
 1007806:	49 91       	P1 = [P1];
 1007808:	41 0c       	CC = P1 == 0x0;
 100780a:	fc 17       	IF !CC JUMP 0x1007802 <_memory_pool_free+0xe> (BP);
 100780c:	00 93       	[P0] = R0;
 100780e:	50 93       	[P2] = P0;
 1007810:	01 e8 00 00 	UNLINK;
 1007814:	10 00       	RTS;
	...

01007818 <_memory_pool_create>:
 1007818:	e5 05       	[--SP] = (R7:4, P5:5);
 100781a:	28 32       	P5 = R0;
 100781c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007820:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007822:	2a 30       	R5 = R2;
 1007824:	bc a2       	R4 = [FP + 0x28];
 1007826:	31 30       	R6 = R1;
 1007828:	28 93       	[P5] = R0;
 100782a:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100782c:	07 20       	JUMP.S 0x100783a <_memory_pool_create+0x22>;
 100782e:	0e 30       	R1 = R6;
 1007830:	45 30       	R0 = P5;
 1007832:	ff e3 e1 ff 	CALL 0x10077f4 <_memory_pool_free>;
 1007836:	a6 51       	R6 = R6 + R4;
 1007838:	0f 64       	R7 += 0x1;		/* (  1) */
 100783a:	af 08       	CC = R7 < R5;
 100783c:	f9 1f       	IF CC JUMP 0x100782e <_memory_pool_create+0x16> (BP);
 100783e:	01 e8 00 00 	UNLINK;
 1007842:	a5 05       	(R7:4, P5:5) = [SP++];
 1007844:	10 00       	RTS;
	...

01007848 <_sm_reset_tk>:
 1007848:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x23c0 */
 100784c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1007850:	09 e1 e8 24 	P1.L = 0x24e8;		/* (9448)	P1=0x24e8 */
 1007854:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007856:	82 68       	P2 = 0x10 (X);		/*		P2=0x10( 16) */
 1007858:	b2 e0 02 20 	LSETUP(0x100785c <_sm_reset_tk+0x14>, 0x100785c <_sm_reset_tk+0x14>) LC1 = P2;
 100785c:	08 9a       	B[P1++] = R0;
 100785e:	01 e8 00 00 	UNLINK;
 1007862:	10 00       	RTS;

01007864 <_sm_notify_client>:
 1007864:	00 e8 08 00 	LINK 0x20;		/* (32) */
 1007868:	b8 e6 f0 ff 	B[FP + -0x10] = R0;
 100786c:	b9 e6 f1 ff 	B[FP + -0xf] = R1;
 1007870:	0a 30       	R1 = R2;
 1007872:	47 30       	R0 = FP;
 1007874:	90 67       	R0 += -0xe;		/* (-14) */
 1007876:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 1007878:	00 e3 46 42 	CALL 0x100fd04 <_memcpy>;
 100787c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x10 */
 1007880:	0a e1 f8 25 	P2.L = 0x25f8;		/* (9720)	P2=0x25f8 <_sm_client_packet_handler> */
 1007884:	52 91       	P2 = [P2];
 1007886:	78 a1       	R0 = [FP + 0x14];
 1007888:	e0 bb       	[FP -0x8] = R0;
 100788a:	38 ab       	R0 = W[FP + 0x18] (X);
 100788c:	78 e6 fe ff 	W[FP + -0x4] = R0;
 1007890:	42 0c       	CC = P2 == 0x0;
 1007892:	08 18       	IF CC JUMP 0x10078a2 <_sm_notify_client+0x3e>;
 1007894:	80 60       	R0 = 0x10 (X);		/*		R0=0x10( 16) */
 1007896:	b0 b5       	W[SP + 0xc] = R0;
 1007898:	57 30       	R2 = FP;
 100789a:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100789c:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100789e:	82 67       	R2 += -0x10;		/* (-16) */
 10078a0:	62 00       	CALL (P2);
 10078a2:	01 e8 00 00 	UNLINK;
 10078a6:	10 00       	RTS;

010078a8 <_sm_key_distribution_flags_for_set>:
 10078a8:	41 43       	R1 = R0.B (Z);
 10078aa:	01 48       	CC = !BITTST (R1, 0x0);		/* bit  0 */
 10078ac:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 10078ae:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 10078b0:	02 07       	IF CC R0 = R2;
 10078b2:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10078b6:	09 48       	CC = !BITTST (R1, 0x1);		/* bit  1 */
 10078b8:	03 1c       	IF CC JUMP 0x10078be <_sm_key_distribution_flags_for_set+0x16> (BP);
 10078ba:	62 60       	R2 = 0xc (X);		/*		R2=0xc( 12) */
 10078bc:	10 56       	R0 = R0 | R2;
 10078be:	11 48       	CC = !BITTST (R1, 0x2);		/* bit  2 */
 10078c0:	08 30       	R1 = R0;
 10078c2:	21 4a       	BITSET (R1, 0x4);		/* bit  4 */
 10078c4:	01 06       	IF !CC R0 = R1;
 10078c6:	01 e8 00 00 	UNLINK;
 10078ca:	10 00       	RTS;

010078cc <_dkg_next_state>:
 10078cc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x25f8 <_sm_client_packet_handler> */
 10078d0:	0a e1 04 26 	P2.L = 0x2604;		/* (9732)	P2=0x2604 <_dkg_state> */
 10078d4:	10 91       	R0 = [P2];
 10078d6:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10078da:	08 64       	R0 += 0x1;		/* (  1) */
 10078dc:	10 93       	[P2] = R0;
 10078de:	01 e8 00 00 	UNLINK;
 10078e2:	10 00       	RTS;

010078e4 <_rau_next_state>:
 10078e4:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2604 <_dkg_state> */
 10078e8:	0a e1 08 26 	P2.L = 0x2608;		/* (9736)	P2=0x2608 <_rau_state> */
 10078ec:	10 91       	R0 = [P2];
 10078ee:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10078f2:	08 64       	R0 += 0x1;		/* (  1) */
 10078f4:	10 93       	[P2] = R0;
 10078f6:	01 e8 00 00 	UNLINK;
 10078fa:	10 00       	RTS;

010078fc <_sm_cmac_next_state>:
 10078fc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2608 <_rau_state> */
 1007900:	0a e1 00 26 	P2.L = 0x2600;		/* (9728)	P2=0x2600 <_sm_cmac_state> */
 1007904:	10 91       	R0 = [P2];
 1007906:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100790a:	08 64       	R0 += 0x1;		/* (  1) */
 100790c:	10 93       	[P2] = R0;
 100790e:	01 e8 00 00 	UNLINK;
 1007912:	10 00       	RTS;

01007914 <_sm_cmac_message_get_byte>:
 1007914:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2600 <_sm_cmac_state> */
 1007918:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100791c:	0a e1 6c 26 	P2.L = 0x266c;		/* (9836)	P2=0x266c <_sm_cmac_message_len> */
 1007920:	11 95       	R1 = W[P2] (Z);
 1007922:	88 08       	CC = R0 < R1;
 1007924:	11 10       	IF !CC JUMP 0x1007946 <_sm_cmac_message_get_byte+0x32>;
 1007926:	e1 67       	R1 += -0x4;		/* ( -4) */
 1007928:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x266c <_sm_cmac_message_len> */
 100792c:	88 08       	CC = R0 < R1;
 100792e:	0a e1 94 26 	P2.L = 0x2694;		/* (9876)	P2=0x2694 <_sm_cmac_message> */
 1007932:	04 14       	IF !CC JUMP 0x100793a <_sm_cmac_message_get_byte+0x26> (BP);
 1007934:	52 91       	P2 = [P2];
 1007936:	08 32       	P1 = R0;
 1007938:	04 20       	JUMP.S 0x1007940 <_sm_cmac_message_get_byte+0x2c>;
 100793a:	48 52       	R1 = R0 - R1;
 100793c:	52 91       	P2 = [P2];
 100793e:	09 32       	P1 = R1;
 1007940:	8a 5a       	P2 = P2 + P1;
 1007942:	50 99       	R0 = B[P2] (X);
 1007944:	02 20       	JUMP.S 0x1007948 <_sm_cmac_message_get_byte+0x34>;
 1007946:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007948:	01 e8 00 00 	UNLINK;
 100794c:	10 00       	RTS;
	...

01007950 <_sm_get_connection_for_handle>:
 1007950:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007954:	c0 42       	R0 = R0.L (Z);
 1007956:	ff e3 1d ee 	CALL 0x1005590 <_le_hci_connection_for_handle>;
 100795a:	00 0c       	CC = R0 == 0x0;
 100795c:	05 18       	IF CC JUMP 0x1007966 <_sm_get_connection_for_handle+0x16>;
 100795e:	21 e1 90 00 	R1 = 0x90 (X);		/*		R1=0x90(144) */
 1007962:	08 50       	R0 = R0 + R1;
 1007964:	02 20       	JUMP.S 0x1007968 <_sm_get_connection_for_handle+0x18>;
 1007966:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007968:	01 e8 00 00 	UNLINK;
 100796c:	10 00       	RTS;
	...

01007970 <_sm_get_connection>:
 1007970:	11 30       	R2 = R1;
 1007972:	41 43       	R1 = R0.B (Z);
 1007974:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007978:	02 30       	R0 = R2;
 100797a:	ff e3 2d ee 	CALL 0x10055d4 <_le_hci_connection_for_bd_addr_and_type>;
 100797e:	00 0c       	CC = R0 == 0x0;
 1007980:	05 18       	IF CC JUMP 0x100798a <_sm_get_connection+0x1a>;
 1007982:	21 e1 90 00 	R1 = 0x90 (X);		/*		R1=0x90(144) */
 1007986:	08 50       	R0 = R0 + R1;
 1007988:	02 20       	JUMP.S 0x100798c <_sm_get_connection+0x1c>;
 100798a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100798c:	01 e8 00 00 	UNLINK;
 1007990:	10 00       	RTS;
	...

01007994 <_sm_stk_generation_init>:
 1007994:	fc 05       	[--SP] = (R7:7, P5:4);
 1007996:	20 32       	P4 = R0;
 1007998:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2694 <_sm_cmac_message> */
 100799c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10079a0:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 10079a4:	a0 e4 02 00 	R0 = B[P4 + 0x2] (Z);
 10079a8:	00 0c       	CC = R0 == 0x0;
 10079aa:	08 1c       	IF CC JUMP 0x10079ba <_sm_stk_generation_init+0x26> (BP);
 10079ac:	90 e4 46 00 	R0 = B[P2 + 0x46] (Z);
 10079b0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 10079b4:	0a e1 08 25 	P2.L = 0x2508;		/* (9480)	P2=0x2508 */
 10079b8:	07 20       	JUMP.S 0x10079c6 <_sm_stk_generation_init+0x32>;
 10079ba:	90 e4 4c 00 	R0 = B[P2 + 0x4c] (Z);
 10079be:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2508 */
 10079c2:	0a e1 0f 25 	P2.L = 0x250f;		/* (9487)	P2=0x250f */
 10079c6:	91 e4 04 00 	R1 = B[P2 + 0x4] (Z);
 10079ca:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x250f */
 10079ce:	0a e1 ff 25 	P2.L = 0x25ff;		/* (9727)	P2=0x25ff <_sm_min_encryption_key_size> */
 10079d2:	12 99       	R2 = B[P2] (Z);
 10079d4:	91 08       	CC = R1 < R2;
 10079d6:	09 1c       	IF CC JUMP 0x10079e8 <_sm_stk_generation_init+0x54> (BP);
 10079d8:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x25ff <_sm_min_encryption_key_size> */
 10079dc:	0a e1 fe 25 	P2.L = 0x25fe;		/* (9726)	P2=0x25fe <_sm_max_encryption_key_size> */
 10079e0:	12 99       	R2 = B[P2] (Z);
 10079e2:	07 c4 11 42 	R1 = MIN (R2, R1);
 10079e6:	02 20       	JUMP.S 0x10079ea <_sm_stk_generation_init+0x56>;
 10079e8:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10079ea:	a1 e6 16 00 	B[P4 + 0x16] = R1;
 10079ee:	49 43       	R1 = R1.B (Z);
 10079f0:	01 0c       	CC = R1 == 0x0;
 10079f2:	69 18       	IF CC JUMP 0x1007ac4 <_sm_stk_generation_init+0x130>;
 10079f4:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x2398 <_le_devices> */
 10079f8:	0d e1 c8 24 	P5.L = 0x24c8;		/* (9416)	P5=0x24c8 <_the_setup> */
 10079fc:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 10079fe:	af b1       	[P5 + 0x18] = R7;
 1007a00:	ff e3 54 ff 	CALL 0x10078a8 <_sm_key_distribution_flags_for_set>;
 1007a04:	68 b1       	[P5 + 0x14] = R0;
 1007a06:	a8 e4 42 00 	R0 = B[P5 + 0x42] (Z);
 1007a0a:	ef b1       	[P5 + 0x1c] = R7;
 1007a0c:	00 0c       	CC = R0 == 0x0;
 1007a0e:	10 1c       	IF CC JUMP 0x1007a2e <_sm_stk_generation_init+0x9a> (BP);
 1007a10:	a8 e4 49 00 	R0 = B[P5 + 0x49] (Z);
 1007a14:	00 0c       	CC = R0 == 0x0;
 1007a16:	0c 1c       	IF CC JUMP 0x1007a2e <_sm_stk_generation_init+0x9a> (BP);
 1007a18:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1007a1c:	4d 30       	R1 = P5;
 1007a1e:	00 e1 70 9c 	R0.L = 0x9c70;		/* (-25488)	R0=0x1009c70(16817264) */
 1007a22:	01 65       	R1 += 0x20;		/* ( 32) */
 1007a24:	00 e3 b8 14 	CALL 0x100a394 <_log_key>;
 1007a28:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1007a2a:	e8 b1       	[P5 + 0x1c] = R0;
 1007a2c:	23 20       	JUMP.S 0x1007a72 <_sm_stk_generation_init+0xde>;
 1007a2e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x25fe <_sm_max_encryption_key_size> */
 1007a32:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 1007a36:	90 e4 43 00 	R0 = B[P2 + 0x43] (Z);
 1007a3a:	10 48       	CC = !BITTST (R0, 0x2);		/* bit  2 */
 1007a3c:	05 14       	IF !CC JUMP 0x1007a46 <_sm_stk_generation_init+0xb2> (BP);
 1007a3e:	90 e4 4a 00 	R0 = B[P2 + 0x4a] (Z);
 1007a42:	10 48       	CC = !BITTST (R0, 0x2);		/* bit  2 */
 1007a44:	17 1c       	IF CC JUMP 0x1007a72 <_sm_stk_generation_init+0xde> (BP);
 1007a46:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 1007a4a:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 1007a4e:	91 e4 41 00 	R1 = B[P2 + 0x41] (Z);
 1007a52:	21 0e       	CC = R1 <= 0x4 (IU);
 1007a54:	0f 14       	IF !CC JUMP 0x1007a72 <_sm_stk_generation_init+0xde> (BP);
 1007a56:	90 e4 48 00 	R0 = B[P2 + 0x48] (Z);
 1007a5a:	82 c6 10 84 	R2 = R0 << 0x2;
 1007a5e:	02 50       	R0 = R2 + R0;
 1007a60:	48 41       	R0 = (R0 + R1) << 0x2;
 1007a62:	00 32       	P0 = R0;
 1007a64:	49 e1 00 01 	P1.H = 0x100;		/* (256)	P1=0x10024e8 */
 1007a68:	09 e1 74 a1 	P1.L = 0xa174;		/* (-24204)	P1=0x100a174 <_stk_generation_method> */
 1007a6c:	41 5a       	P1 = P1 + P0;
 1007a6e:	08 91       	R0 = [P1];
 1007a70:	d0 b1       	[P2 + 0x1c] = R0;
 1007a72:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 1007a76:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 1007a7a:	d0 a1       	R0 = [P2 + 0x1c];
 1007a7c:	18 0e       	CC = R0 <= 0x3 (IU);
 1007a7e:	08 14       	IF !CC JUMP 0x1007a8e <_sm_stk_generation_init+0xfa> (BP);
 1007a80:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 1007a84:	00 0c       	CC = R0 == 0x0;
 1007a86:	0a e1 fd 25 	P2.L = 0x25fd;		/* (9725)	P2=0x25fd <_sm_accepted_stk_generation_methods> */
 1007a8a:	0a 14       	IF !CC JUMP 0x1007a9e <_sm_stk_generation_init+0x10a> (BP);
 1007a8c:	05 20       	JUMP.S 0x1007a96 <_sm_stk_generation_init+0x102>;
 1007a8e:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1007a90:	08 08       	CC = R0 == R1;
 1007a92:	1b 14       	IF !CC JUMP 0x1007ac8 <_sm_stk_generation_init+0x134> (BP);
 1007a94:	08 20       	JUMP.S 0x1007aa4 <_sm_stk_generation_init+0x110>;
 1007a96:	12 99       	R2 = B[P2] (Z);
 1007a98:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 1007a9a:	4a 54       	R1 = R2 & R1;
 1007a9c:	0b 20       	JUMP.S 0x1007ab2 <_sm_stk_generation_init+0x11e>;
 1007a9e:	11 99       	R1 = B[P2] (Z);
 1007aa0:	11 49       	CC = BITTST (R1, 0x2);		/* bit  2 */
 1007aa2:	07 20       	JUMP.S 0x1007ab0 <_sm_stk_generation_init+0x11c>;
 1007aa4:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x25fd <_sm_accepted_stk_generation_methods> */
 1007aa8:	0a e1 fd 25 	P2.L = 0x25fd;		/* (9725)	P2=0x25fd <_sm_accepted_stk_generation_methods> */
 1007aac:	11 99       	R1 = B[P2] (Z);
 1007aae:	09 49       	CC = BITTST (R1, 0x1);		/* bit  1 */
 1007ab0:	01 02       	R1 = CC;
 1007ab2:	01 0c       	CC = R1 == 0x0;
 1007ab4:	0a 18       	IF CC JUMP 0x1007ac8 <_sm_stk_generation_init+0x134>;
 1007ab6:	00 0c       	CC = R0 == 0x0;
 1007ab8:	00 02       	R0 = CC;
 1007aba:	00 4b       	BITTGL (R0, 0x0);		/* bit  0 */
 1007abc:	a0 e6 15 00 	B[P4 + 0x15] = R0;
 1007ac0:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007ac2:	04 20       	JUMP.S 0x1007aca <_sm_stk_generation_init+0x136>;
 1007ac4:	30 60       	R0 = 0x6 (X);		/*		R0=0x6(  6) */
 1007ac6:	02 20       	JUMP.S 0x1007aca <_sm_stk_generation_init+0x136>;
 1007ac8:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 1007aca:	01 e8 00 00 	UNLINK;
 1007ace:	bc 05       	(R7:7, P5:4) = [SP++];
 1007ad0:	10 00       	RTS;
	...

01007ad4 <_sm_s1_r_prime>:
 1007ad4:	68 05       	[--SP] = (R7:5);
 1007ad6:	30 30       	R6 = R0;
 1007ad8:	39 30       	R7 = R1;
 1007ada:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000003(16777219) */
 1007ade:	2a 30       	R5 = R2;
 1007ae0:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007ae4:	0e 30       	R1 = R6;
 1007ae6:	00 e1 74 9c 	R0.L = 0x9c74;		/* (-25484)	R0=0x1009c74(16817268) */
 1007aea:	00 e3 55 14 	CALL 0x100a394 <_log_key>;
 1007aee:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1009c74(16817268) */
 1007af2:	0f 30       	R1 = R7;
 1007af4:	00 e1 78 9c 	R0.L = 0x9c78;		/* (-25480)	R0=0x1009c78(16817272) */
 1007af8:	00 e3 4e 14 	CALL 0x100a394 <_log_key>;
 1007afc:	05 30       	R0 = R5;
 1007afe:	0f 30       	R1 = R7;
 1007b00:	41 64       	R1 += 0x8;		/* (  8) */
 1007b02:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 1007b04:	40 64       	R0 += 0x8;		/* (  8) */
 1007b06:	00 e3 ff 40 	CALL 0x100fd04 <_memcpy>;
 1007b0a:	0e 30       	R1 = R6;
 1007b0c:	05 30       	R0 = R5;
 1007b0e:	01 e8 00 00 	UNLINK;
 1007b12:	41 64       	R1 += 0x8;		/* (  8) */
 1007b14:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 1007b16:	28 05       	(R7:5) = [SP++];
 1007b18:	00 e2 f6 40 	JUMP.L 0x100fd04 <_memcpy>;

01007b1c <_sm_ah_r_prime>:
 1007b1c:	c4 04       	[--SP] = (P5:4);
 1007b1e:	20 32       	P4 = R0;
 1007b20:	29 32       	P5 = R1;
 1007b22:	01 30       	R0 = R1;
 1007b24:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007b28:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1007b2a:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1007b2c:	00 e3 3a 41 	CALL 0x100fda0 <_memset>;
 1007b30:	54 32       	P2 = P4;
 1007b32:	50 98       	R0 = B[P2++] (X);
 1007b34:	a8 e6 0d 00 	B[P5 + 0xd] = R0;
 1007b38:	a0 e5 01 00 	R0 = B[P4 + 0x1] (X);
 1007b3c:	a8 e6 0e 00 	B[P5 + 0xe] = R0;
 1007b40:	90 e5 01 00 	R0 = B[P2 + 0x1] (X);
 1007b44:	a8 e6 0f 00 	B[P5 + 0xf] = R0;
 1007b48:	01 e8 00 00 	UNLINK;
 1007b4c:	84 04       	(P5:4) = [SP++];
 1007b4e:	10 00       	RTS;

01007b50 <_sm_dm_r_prime>:
 1007b50:	70 05       	[--SP] = (R7:6);
 1007b52:	30 30       	R6 = R0;
 1007b54:	39 30       	R7 = R1;
 1007b56:	01 30       	R0 = R1;
 1007b58:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007b5c:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1007b5e:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1007b60:	00 e3 20 41 	CALL 0x100fda0 <_memset>;
 1007b64:	07 30       	R0 = R7;
 1007b66:	0e 30       	R1 = R6;
 1007b68:	01 e8 00 00 	UNLINK;
 1007b6c:	40 64       	R0 += 0x8;		/* (  8) */
 1007b6e:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 1007b70:	30 05       	(R7:6) = [SP++];
 1007b72:	00 e2 c9 40 	JUMP.L 0x100fd04 <_memcpy>;
	...

01007b78 <_sm_timeout_stop>:
 1007b78:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1007b7c:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x9c78(40056) */
 1007b80:	00 e1 c8 24 	R0.L = 0x24c8;		/* (9416)	R0=0x24c8 <_the_setup>(9416) */
 1007b84:	01 e8 00 00 	UNLINK;
 1007b88:	00 e2 9e 3a 	JUMP.L 0x100f0c4 <_sys_timer_remove>;

01007b8c <_sm_done_for_handle>:
 1007b8c:	c5 04       	[--SP] = (P5:5);
 1007b8e:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x24c8 <_the_setup> */
 1007b92:	0d e1 1c 26 	P5.L = 0x261c;		/* (9756)	P5=0x261c <_sm_active_connection> */
 1007b96:	29 95       	R1 = W[P5] (Z);
 1007b98:	c0 42       	R0 = R0.L (Z);
 1007b9a:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007b9e:	01 08       	CC = R1 == R0;
 1007ba0:	05 14       	IF !CC JUMP 0x1007baa <_sm_done_for_handle+0x1e> (BP);
 1007ba2:	ff e3 eb ff 	CALL 0x1007b78 <_sm_timeout_stop>;
 1007ba6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007ba8:	28 97       	W[P5] = R0;
 1007baa:	01 e8 00 00 	UNLINK;
 1007bae:	85 04       	(P5:5) = [SP++];
 1007bb0:	10 00       	RTS;
	...

01007bb4 <_sm_pdu_received_in_wrong_state>:
 1007bb4:	10 32       	P2 = R0;
 1007bb6:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0xa174 */
 1007bba:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 1007bbc:	09 e1 c8 24 	P1.L = 0x24c8;		/* (9416)	P1=0x24c8 <_the_setup> */
 1007bc0:	88 e6 10 00 	B[P1 + 0x10] = R0;
 1007bc4:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007bc6:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1007bca:	d0 b0       	[P2 + 0xc] = R0;
 1007bcc:	10 95       	R0 = W[P2] (Z);
 1007bce:	01 e8 00 00 	UNLINK;
 1007bd2:	ff e2 dd ff 	JUMP.L 0x1007b8c <_sm_done_for_handle>;
	...

01007bd8 <_sm_aes128_start>:
 1007bd8:	60 05       	[--SP] = (R7:4);
 1007bda:	00 e8 0b 00 	LINK 0x2c;		/* (44) */
 1007bde:	21 30       	R4 = R1;
 1007be0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x25fd <_sm_accepted_stk_generation_methods> */
 1007be4:	0a e1 0c 26 	P2.L = 0x260c;		/* (9740)	P2=0x260c <_sm_aes128_state> */
 1007be8:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 1007bea:	7f 30       	R7 = FP;
 1007bec:	11 93       	[P2] = R1;
 1007bee:	87 67       	R7 += -0x10;		/* (-16) */
 1007bf0:	2a 30       	R5 = R2;
 1007bf2:	0f 30       	R1 = R7;
 1007bf4:	77 30       	R6 = FP;
 1007bf6:	00 e3 9d 13 	CALL 0x100a330 <_swap128>;
 1007bfa:	06 67       	R6 += -0x20;		/* (-32) */
 1007bfc:	04 30       	R0 = R4;
 1007bfe:	0e 30       	R1 = R6;
 1007c00:	00 e3 98 13 	CALL 0x100a330 <_swap128>;
 1007c04:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x260c <_sm_aes128_state> */
 1007c08:	0a e1 58 26 	P2.L = 0x2658;		/* (9816)	P2=0x2658 <_sm_aes128_connection_source> */
 1007c0c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1007c10:	15 93       	[P2] = R5;
 1007c12:	0f 30       	R1 = R7;
 1007c14:	16 30       	R2 = R6;
 1007c16:	00 e1 bc 6f 	R0.L = 0x6fbc;		/* (28604)	R0=0x1006fbc <_hci_le_encrypt>(16805820) */
 1007c1a:	ff e3 e3 ef 	CALL 0x1005be0 <_le_hci_send_cmd>;
 1007c1e:	01 e8 00 00 	UNLINK;
 1007c22:	20 05       	(R7:4) = [SP++];
 1007c24:	10 00       	RTS;
	...

01007c28 <_sm_init_setup>:
 1007c28:	f4 05       	[--SP] = (R7:6, P5:4);
 1007c2a:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007c2e:	28 32       	P5 = R0;
 1007c30:	ff e3 0c fe 	CALL 0x1007848 <_sm_reset_tk>;
 1007c34:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1006fbc <_hci_le_encrypt>(16805820) */
 1007c38:	00 e1 7c 9c 	R0.L = 0x9c7c;		/* (-25476)	R0=0x1009c7c(16817276) */
 1007c3c:	00 e3 be 39 	CALL 0x100efb8 <_puts>;
 1007c40:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2658 <_sm_aes128_connection_source> */
 1007c44:	0a e1 bc 26 	P2.L = 0x26bc;		/* (9916)	P2=0x26bc <_sm_get_oob_data> */
 1007c48:	52 91       	P2 = [P2];
 1007c4a:	42 0c       	CC = P2 == 0x0;
 1007c4c:	0c 18       	IF CC JUMP 0x1007c64 <_sm_init_setup+0x3c>;
 1007c4e:	4d 30       	R1 = P5;
 1007c50:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x8 <_att_ir_le_device_db_index>(  8) */
 1007c54:	19 64       	R1 += 0x3;		/* (  3) */
 1007c56:	a8 e5 09 00 	R0 = B[P5 + 0x9] (X);
 1007c5a:	02 e1 e8 24 	R2.L = 0x24e8;		/* (9448)	R2=0x24e8(9448) */
 1007c5e:	62 00       	CALL (P2);
 1007c60:	30 30       	R6 = R0;
 1007c62:	02 20       	JUMP.S 0x1007c66 <_sm_init_setup+0x3e>;
 1007c64:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 1007c66:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 1007c6a:	7d 30       	R7 = P5;
 1007c6c:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x2c <_att_client_start_handle> */
 1007c70:	00 0c       	CC = R0 == 0x0;
 1007c72:	1f 64       	R7 += 0x3;		/* (  3) */
 1007c74:	0c e1 c8 24 	P4.L = 0x24c8;		/* (9416)	P4=0x24c8 <_the_setup> */
 1007c78:	23 1c       	IF CC JUMP 0x1007cbe <_sm_init_setup+0x96> (BP);
 1007c7a:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x9c7c(40060) */
 1007c7e:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x1(  1) */
 1007c82:	00 e1 57 25 	R0.L = 0x2557;		/* (9559)	R0=0x2557(9559) */
 1007c86:	01 e1 5e 25 	R1.L = 0x255e;		/* (9566)	R1=0x255e(9566) */
 1007c8a:	ff e3 69 ee 	CALL 0x100595c <_hci_le_advertisement_address>;
 1007c8e:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x2557(9559) */
 1007c92:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 1007c94:	00 e1 5e 25 	R0.L = 0x255e;		/* (9566)	R0=0x255e(9566) */
 1007c98:	00 e3 c2 32 	CALL 0x100e21c <_printf_buf>;
 1007c9c:	a8 e5 09 00 	R0 = B[P5 + 0x9] (X);
 1007ca0:	a0 e6 8e 00 	B[P4 + 0x8e] = R0;
 1007ca4:	2a e1 90 00 	P2 = 0x90 (X);		/*		P2=0x90(144) */
 1007ca8:	14 5b       	P4 = P4 + P2;
 1007caa:	44 30       	R0 = P4;
 1007cac:	0f 30       	R1 = R7;
 1007cae:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 1007cb0:	00 e3 2a 40 	CALL 0x100fd04 <_memcpy>;
 1007cb4:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x90 */
 1007cb8:	0a e1 0f 25 	P2.L = 0x250f;		/* (9487)	P2=0x250f */
 1007cbc:	20 20       	JUMP.S 0x1007cfc <_sm_init_setup+0xd4>;
 1007cbe:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x255e(9566) */
 1007cc2:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x6(  6) */
 1007cc6:	00 e1 56 25 	R0.L = 0x2556;		/* (9558)	R0=0x2556(9558) */
 1007cca:	01 e1 58 25 	R1.L = 0x2558;		/* (9560)	R1=0x2558(9560) */
 1007cce:	ff e3 47 ee 	CALL 0x100595c <_hci_le_advertisement_address>;
 1007cd2:	a8 e5 09 00 	R0 = B[P5 + 0x9] (X);
 1007cd6:	2a e1 96 00 	P2 = 0x96 (X);		/*		P2=0x96(150) */
 1007cda:	94 5a       	P2 = P4 + P2;
 1007cdc:	a0 e6 8f 00 	B[P4 + 0x8f] = R0;
 1007ce0:	42 30       	R0 = P2;
 1007ce2:	0f 30       	R1 = R7;
 1007ce4:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 1007ce6:	00 e3 0f 40 	CALL 0x100fd04 <_memcpy>;
 1007cea:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 1007cec:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x96 */
 1007cf0:	a0 e6 45 00 	B[P4 + 0x45] = R0;
 1007cf4:	a0 e6 46 00 	B[P4 + 0x46] = R0;
 1007cf8:	0a e1 08 25 	P2.L = 0x2508;		/* (9480)	P2=0x2508 */
 1007cfc:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x24c8 <_the_setup> */
 1007d00:	09 e1 30 00 	P1.L = 0x30;		/* ( 48)	P1=0x30 <_sm_io_capabilities> */
 1007d04:	48 99       	R0 = B[P1] (X);
 1007d06:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x30 <_sm_io_capabilities> */
 1007d0a:	90 e6 01 00 	B[P2 + 0x1] = R0;
 1007d0e:	96 e6 02 00 	B[P2 + 0x2] = R6;
 1007d12:	09 e1 c0 26 	P1.L = 0x26c0;		/* (9920)	P1=0x26c0 <_sm_auth_req> */
 1007d16:	48 99       	R0 = B[P1] (X);
 1007d18:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x26c0 <_sm_auth_req> */
 1007d1c:	90 e6 03 00 	B[P2 + 0x3] = R0;
 1007d20:	09 e1 fe 25 	P1.L = 0x25fe;		/* (9726)	P1=0x25fe <_sm_max_encryption_key_size> */
 1007d24:	48 99       	R0 = B[P1] (X);
 1007d26:	90 e6 04 00 	B[P2 + 0x4] = R0;
 1007d2a:	01 e8 00 00 	UNLINK;
 1007d2e:	b4 05       	(R7:6, P5:4) = [SP++];
 1007d30:	10 00       	RTS;
	...

01007d34 <_sm_timeout_start>:
 1007d34:	70 05       	[--SP] = (R7:6);
 1007d36:	47 e1 00 00 	R7.H = 0x0;		/* (  0)	R7=0x0 <data_addr>(  0) */
 1007d3a:	30 30       	R6 = R0;
 1007d3c:	07 e1 c8 24 	R7.L = 0x24c8;		/* (9416)	R7=0x24c8 <_the_setup>(9416) */
 1007d40:	42 e1 00 01 	R2.H = 0x100;		/* (256)	R2=0x1000006(16777222) */
 1007d44:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007d48:	07 30       	R0 = R7;
 1007d4a:	21 e1 30 75 	R1 = 0x7530 (X);		/*		R1=0x7530(30000) */
 1007d4e:	02 e1 1c 8a 	R2.L = 0x8a1c;		/* (-30180)	R2=0x1008a1c <_sm_timeout_handler>(16812572) */
 1007d52:	00 e3 7f 39 	CALL 0x100f050 <_sys_timer_register>;
 1007d56:	07 30       	R0 = R7;
 1007d58:	0e 30       	R1 = R6;
 1007d5a:	01 e8 00 00 	UNLINK;
 1007d5e:	30 05       	(R7:6) = [SP++];
 1007d60:	ff e2 e0 fc 	JUMP.L 0x1007720 <_linked_item_set_user>;

01007d64 <_sm_timeout_reset>:
 1007d64:	78 05       	[--SP] = (R7:7);
 1007d66:	38 30       	R7 = R0;
 1007d68:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007d6c:	ff e3 06 ff 	CALL 0x1007b78 <_sm_timeout_stop>;
 1007d70:	07 30       	R0 = R7;
 1007d72:	01 e8 00 00 	UNLINK;
 1007d76:	38 05       	(R7:7) = [SP++];
 1007d78:	ff e2 de ff 	JUMP.L 0x1007d34 <_sm_timeout_start>;

01007d7c <_sm_d1_d_prime>:
 1007d7c:	68 05       	[--SP] = (R7:5);
 1007d7e:	28 30       	R5 = R0;
 1007d80:	3a 30       	R7 = R2;
 1007d82:	31 30       	R6 = R1;
 1007d84:	02 30       	R0 = R2;
 1007d86:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1007d8a:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1007d8c:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1007d8e:	00 e3 09 40 	CALL 0x100fda0 <_memset>;
 1007d92:	07 30       	R0 = R7;
 1007d94:	16 30       	R2 = R6;
 1007d96:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 1007d98:	00 e3 52 12 	CALL 0x100a23c <_net_store_16>;
 1007d9c:	07 30       	R0 = R7;
 1007d9e:	15 30       	R2 = R5;
 1007da0:	01 e8 00 00 	UNLINK;
 1007da4:	71 60       	R1 = 0xe (X);		/*		R1=0xe( 14) */
 1007da6:	28 05       	(R7:5) = [SP++];
 1007da8:	00 e2 4a 12 	JUMP.L 0x100a23c <_net_store_16>;

01007dac <_sm_c1_t1>:
 1007dac:	e5 05       	[--SP] = (R7:4, P5:5);
 1007dae:	00 e8 07 00 	LINK 0x1c;		/* (28) */
 1007db2:	7f 30       	R7 = FP;
 1007db4:	30 30       	R6 = R0;
 1007db6:	87 67       	R7 += -0x10;		/* (-16) */
 1007db8:	21 30       	R4 = R1;
 1007dba:	02 30       	R0 = R2;
 1007dbc:	3d a3       	R5 = [FP + 0x30];
 1007dbe:	0f 30       	R1 = R7;
 1007dc0:	00 e3 a8 12 	CALL 0x100a310 <_swap56>;
 1007dc4:	4f 30       	R1 = FP;
 1007dc6:	04 30       	R0 = R4;
 1007dc8:	b9 67       	R1 += -0x9;		/* ( -9) */
 1007dca:	00 e3 a3 12 	CALL 0x100a310 <_swap56>;
 1007dce:	b8 e5 2c 00 	R0 = B[FP + 0x2c] (X);
 1007dd2:	b8 e6 fe ff 	B[FP + -0x2] = R0;
 1007dd6:	b8 e5 28 00 	R0 = B[FP + 0x28] (X);
 1007dda:	b8 e6 ff ff 	B[FP + -0x1] = R0;
 1007dde:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000007(16777223) */
 1007de2:	00 e1 8c 9c 	R0.L = 0x9c8c;		/* (-25460)	R0=0x1009c8c(16817292) */
 1007de6:	0f 30       	R1 = R7;
 1007de8:	00 e3 d6 12 	CALL 0x100a394 <_log_key>;
 1007dec:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1009c8c(16817292) */
 1007df0:	00 e1 90 9c 	R0.L = 0x9c90;		/* (-25456)	R0=0x1009c90(16817296) */
 1007df4:	0e 30       	R1 = R6;
 1007df6:	00 e3 cf 12 	CALL 0x100a394 <_log_key>;
 1007dfa:	2e 32       	P5 = R6;
 1007dfc:	07 32       	P0 = R7;
 1007dfe:	0d 32       	P1 = R5;
 1007e00:	82 68       	P2 = 0x10 (X);		/*		P2=0x10( 16) */
 1007e02:	b2 e0 05 20 	LSETUP(0x1007e06 <_sm_c1_t1+0x5a>, 0x1007e0c <_sm_c1_t1+0x60>) LC1 = P2;
 1007e06:	68 98       	R0 = B[P5++] (X);
 1007e08:	41 98       	R1 = B[P0++] (X);
 1007e0a:	01 58       	R0 = R1 ^ R0;
 1007e0c:	08 9a       	B[P1++] = R0;
 1007e0e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1009c90(16817296) */
 1007e12:	0d 30       	R1 = R5;
 1007e14:	00 e1 94 9c 	R0.L = 0x9c94;		/* (-25452)	R0=0x1009c94(16817300) */
 1007e18:	00 e3 be 12 	CALL 0x100a394 <_log_key>;
 1007e1c:	01 e8 00 00 	UNLINK;
 1007e20:	a5 05       	(R7:4, P5:5) = [SP++];
 1007e22:	10 00       	RTS;

01007e24 <_sm_trigger_user_response.clone.2>:
 1007e24:	c4 04       	[--SP] = (P5:4);
 1007e26:	20 32       	P4 = R0;
 1007e28:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x261c <_sm_active_connection> */
 1007e2c:	0d e1 c8 24 	P5.L = 0x24c8;		/* (9416)	P5=0x24c8 <_the_setup> */
 1007e30:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007e32:	a8 e6 11 00 	B[P5 + 0x11] = R0;
 1007e36:	e8 a1       	R0 = [P5 + 0x1c];
 1007e38:	00 e8 05 00 	LINK 0x14;		/* (20) */
 1007e3c:	08 0c       	CC = R0 == 0x1;
 1007e3e:	06 18       	IF CC JUMP 0x1007e4a <_sm_trigger_user_response.clone.2+0x26>;
 1007e40:	00 0c       	CC = R0 == 0x0;
 1007e42:	37 1c       	IF CC JUMP 0x1007eb0 <_sm_trigger_user_response.clone.2+0x8c> (BP);
 1007e44:	10 0c       	CC = R0 == 0x2;
 1007e46:	6d 14       	IF !CC JUMP 0x1007f20 <_sm_trigger_user_response.clone.2+0xfc> (BP);
 1007e48:	0b 20       	JUMP.S 0x1007e5e <_sm_trigger_user_response.clone.2+0x3a>;
 1007e4a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1007e4e:	00 e1 98 9c 	R0.L = 0x9c98;		/* (-25448)	R0=0x1009c98(16817304) */
 1007e52:	00 e3 b3 38 	CALL 0x100efb8 <_puts>;
 1007e56:	20 99       	R0 = B[P4] (Z);
 1007e58:	00 0c       	CC = R0 == 0x0;
 1007e5a:	0b 1c       	IF CC JUMP 0x1007e70 <_sm_trigger_user_response.clone.2+0x4c> (BP);
 1007e5c:	20 20       	JUMP.S 0x1007e9c <_sm_trigger_user_response.clone.2+0x78>;
 1007e5e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1009c98(16817304) */
 1007e62:	00 e1 a4 9c 	R0.L = 0x9ca4;		/* (-25436)	R0=0x1009ca4(16817316) */
 1007e66:	00 e3 a9 38 	CALL 0x100efb8 <_puts>;
 1007e6a:	20 99       	R0 = B[P4] (Z);
 1007e6c:	00 0c       	CC = R0 == 0x0;
 1007e6e:	17 1c       	IF CC JUMP 0x1007e9c <_sm_trigger_user_response.clone.2+0x78> (BP);
 1007e70:	00 00       	NOP;
 1007e72:	aa e4 2e 00 	R2 = B[P5 + 0x2e] (Z);
 1007e76:	a8 e4 2d 00 	R0 = B[P5 + 0x2d] (Z);
 1007e7a:	42 4f       	R2 <<= 0x8;
 1007e7c:	80 4f       	R0 <<= 0x10;
 1007e7e:	02 56       	R0 = R2 | R0;
 1007e80:	aa e4 2f 00 	R2 = B[P5 + 0x2f] (Z);
 1007e84:	10 56       	R0 = R0 | R2;
 1007e86:	aa e4 2c 00 	R2 = B[P5 + 0x2c] (Z);
 1007e8a:	c2 4f       	R2 <<= 0x18;
 1007e8c:	10 56       	R0 = R0 | R2;
 1007e8e:	f0 b0       	[SP + 0xc] = R0;
 1007e90:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007e92:	30 b6       	W[SP + 0x10] = R0;
 1007e94:	a9 e5 8e 00 	R1 = B[P5 + 0x8e] (X);
 1007e98:	90 62       	R0 = -0x2e (X);		/*		R0=0xffffffd2(-46) */
 1007e9a:	33 20       	JUMP.S 0x1007f00 <_sm_trigger_user_response.clone.2+0xdc>;
 1007e9c:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1007e9e:	a8 e6 11 00 	B[P5 + 0x11] = R0;
 1007ea2:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007ea4:	f0 b0       	[SP + 0xc] = R0;
 1007ea6:	30 b6       	W[SP + 0x10] = R0;
 1007ea8:	a9 e5 8e 00 	R1 = B[P5 + 0x8e] (X);
 1007eac:	a0 62       	R0 = -0x2c (X);		/*		R0=0xffffffd4(-44) */
 1007eae:	29 20       	JUMP.S 0x1007f00 <_sm_trigger_user_response.clone.2+0xdc>;
 1007eb0:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100ffd4(16842708) */
 1007eb4:	00 e1 b0 9c 	R0.L = 0x9cb0;		/* (-25424)	R0=0x1009cb0(16817328) */
 1007eb8:	00 e3 80 38 	CALL 0x100efb8 <_puts>;
 1007ebc:	a8 e4 48 00 	R0 = B[P5 + 0x48] (Z);
 1007ec0:	08 0c       	CC = R0 == 0x1;
 1007ec2:	04 18       	IF CC JUMP 0x1007eca <_sm_trigger_user_response.clone.2+0xa6>;
 1007ec4:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1007ec6:	08 08       	CC = R0 == R1;
 1007ec8:	23 14       	IF !CC JUMP 0x1007f0e <_sm_trigger_user_response.clone.2+0xea> (BP);
 1007eca:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x10 */
 1007ece:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 1007ed2:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1007ed4:	90 e6 11 00 	B[P2 + 0x11] = R0;
 1007ed8:	92 e4 2e 00 	R2 = B[P2 + 0x2e] (Z);
 1007edc:	90 e4 2d 00 	R0 = B[P2 + 0x2d] (Z);
 1007ee0:	42 4f       	R2 <<= 0x8;
 1007ee2:	80 4f       	R0 <<= 0x10;
 1007ee4:	02 56       	R0 = R2 | R0;
 1007ee6:	92 e4 2f 00 	R2 = B[P2 + 0x2f] (Z);
 1007eea:	10 56       	R0 = R0 | R2;
 1007eec:	92 e4 2c 00 	R2 = B[P2 + 0x2c] (Z);
 1007ef0:	c2 4f       	R2 <<= 0x18;
 1007ef2:	10 56       	R0 = R0 | R2;
 1007ef4:	f0 b0       	[SP + 0xc] = R0;
 1007ef6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007ef8:	30 b6       	W[SP + 0x10] = R0;
 1007efa:	91 e5 8e 00 	R1 = B[P2 + 0x8e] (X);
 1007efe:	80 62       	R0 = -0x30 (X);		/*		R0=0xffffffd0(-48) */
 1007f00:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x10( 16) */
 1007f04:	02 e1 58 25 	R2.L = 0x2558;		/* (9560)	R2=0x2558(9560) */
 1007f08:	ff e3 ae fc 	CALL 0x1007864 <_sm_notify_client>;
 1007f0c:	0a 20       	JUMP.S 0x1007f20 <_sm_trigger_user_response.clone.2+0xfc>;
 1007f0e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100ffd0(16842704) */
 1007f12:	01 e8 00 00 	UNLINK;
 1007f16:	00 e1 bc 9c 	R0.L = 0x9cbc;		/* (-25412)	R0=0x1009cbc(16817340) */
 1007f1a:	84 04       	(P5:4) = [SP++];
 1007f1c:	00 e2 4e 38 	JUMP.L 0x100efb8 <_puts>;
 1007f20:	01 e8 00 00 	UNLINK;
 1007f24:	84 04       	(P5:4) = [SP++];
 1007f26:	10 00       	RTS;

01007f28 <_sm_run>:
 1007f28:	e3 05       	[--SP] = (R7:4, P5:3);
 1007f2a:	00 e8 17 00 	LINK 0x5c;		/* (92) */
 1007f2e:	ff e3 b7 eb 	CALL 0x100569c <_le_hci_can_send_command_packet_now>;
 1007f32:	00 0c       	CC = R0 == 0x0;
 1007f34:	02 14       	IF !CC JUMP 0x1007f38 <_sm_run+0x10> (BP);
 1007f36:	6f 25       	JUMP.S 0x1008a14 <_sm_run+0xaec>;
 1007f38:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 1007f3c:	0a e1 04 26 	P2.L = 0x2604;		/* (9732)	P2=0x2604 <_dkg_state> */
 1007f40:	10 91       	R0 = [P2];
 1007f42:	08 0c       	CC = R0 == 0x1;
 1007f44:	04 18       	IF CC JUMP 0x1007f4c <_sm_run+0x24>;
 1007f46:	18 0c       	CC = R0 == 0x3;
 1007f48:	43 14       	IF !CC JUMP 0x1007fce <_sm_run+0xa6> (BP);
 1007f4a:	23 20       	JUMP.S 0x1007f90 <_sm_run+0x68>;
 1007f4c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1009cbc(16817340) */
 1007f50:	00 e1 d0 9c 	R0.L = 0x9cd0;		/* (-25392)	R0=0x1009cd0(16817360) */
 1007f54:	00 e3 32 38 	CALL 0x100efb8 <_puts>;
 1007f58:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2604 <_dkg_state> */
 1007f5c:	0a e1 0c 26 	P2.L = 0x260c;		/* (9740)	P2=0x260c <_sm_aes128_state> */
 1007f60:	10 91       	R0 = [P2];
 1007f62:	00 0c       	CC = R0 == 0x0;
 1007f64:	35 14       	IF !CC JUMP 0x1007fce <_sm_run+0xa6> (BP);
 1007f66:	7f 30       	R7 = FP;
 1007f68:	27 66       	R7 += -0x3c;		/* (-60) */
 1007f6a:	17 30       	R2 = R7;
 1007f6c:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1007f6e:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1007f70:	ff e3 06 ff 	CALL 0x1007d7c <_sm_d1_d_prime>;
 1007f74:	ff e3 ac fc 	CALL 0x10078cc <_dkg_next_state>;
 1007f78:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x1(  1) */
 1007f7c:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 1007f7e:	00 e1 9c 26 	R0.L = 0x269c;		/* (9884)	R0=0x269c <_sm_persistent_ir>(9884) */
 1007f82:	00 e3 4d 31 	CALL 0x100e21c <_printf_buf>;
 1007f86:	07 30       	R0 = R7;
 1007f88:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 1007f8a:	00 e3 49 31 	CALL 0x100e21c <_printf_buf>;
 1007f8e:	17 20       	JUMP.S 0x1007fbc <_sm_run+0x94>;
 1007f90:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100269c(16787100) */
 1007f94:	00 e1 d8 9c 	R0.L = 0x9cd8;		/* (-25384)	R0=0x1009cd8(16817368) */
 1007f98:	00 e3 10 38 	CALL 0x100efb8 <_puts>;
 1007f9c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x260c <_sm_aes128_state> */
 1007fa0:	0a e1 0c 26 	P2.L = 0x260c;		/* (9740)	P2=0x260c <_sm_aes128_state> */
 1007fa4:	10 91       	R0 = [P2];
 1007fa6:	00 0c       	CC = R0 == 0x0;
 1007fa8:	13 14       	IF !CC JUMP 0x1007fce <_sm_run+0xa6> (BP);
 1007faa:	7f 30       	R7 = FP;
 1007fac:	27 66       	R7 += -0x3c;		/* (-60) */
 1007fae:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 1007fb0:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1007fb2:	17 30       	R2 = R7;
 1007fb4:	ff e3 e4 fe 	CALL 0x1007d7c <_sm_d1_d_prime>;
 1007fb8:	ff e3 8a fc 	CALL 0x10078cc <_dkg_next_state>;
 1007fbc:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x3(  3) */
 1007fc0:	00 e1 9c 26 	R0.L = 0x269c;		/* (9884)	R0=0x269c <_sm_persistent_ir>(9884) */
 1007fc4:	0f 30       	R1 = R7;
 1007fc6:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1007fc8:	ff e3 08 fe 	CALL 0x1007bd8 <_sm_aes128_start>;
 1007fcc:	24 25       	JUMP.S 0x1008a14 <_sm_run+0xaec>;
 1007fce:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x260c <_sm_aes128_state> */
 1007fd2:	0a e1 08 26 	P2.L = 0x2608;		/* (9736)	P2=0x2608 <_rau_state> */
 1007fd6:	10 91       	R0 = [P2];
 1007fd8:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1007fda:	08 08       	CC = R0 == R1;
 1007fdc:	0f 18       	IF CC JUMP 0x1007ffa <_sm_run+0xd2>;
 1007fde:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 1007fe0:	08 08       	CC = R0 == R1;
 1007fe2:	23 18       	IF CC JUMP 0x1008028 <_sm_run+0x100>;
 1007fe4:	10 0c       	CC = R0 == 0x2;
 1007fe6:	2c 14       	IF !CC JUMP 0x100803e <_sm_run+0x116> (BP);
 1007fe8:	ff e3 7e fc 	CALL 0x10078e4 <_rau_next_state>;
 1007fec:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2608 <_rau_state> */
 1007ff0:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1007ff2:	0a e1 98 26 	P2.L = 0x2698;		/* (9880)	P2=0x2698 <_sm_random_connection_source> */
 1007ff6:	10 93       	[P2] = R0;
 1007ff8:	1d 23       	JUMP.S 0x1008632 <_sm_run+0x70a>;
 1007ffa:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2698 <_sm_random_connection_source> */
 1007ffe:	0a e1 0c 26 	P2.L = 0x260c;		/* (9740)	P2=0x260c <_sm_aes128_state> */
 1008002:	10 91       	R0 = [P2];
 1008004:	00 0c       	CC = R0 == 0x0;
 1008006:	1c 14       	IF !CC JUMP 0x100803e <_sm_run+0x116> (BP);
 1008008:	7f 30       	R7 = FP;
 100800a:	27 66       	R7 += -0x3c;		/* (-60) */
 100800c:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x0 <data_addr>(  0) */
 1008010:	00 e1 51 26 	R0.L = 0x2651;		/* (9809)	R0=0x2651 <_sm_random_address>(9809) */
 1008014:	0f 30       	R1 = R7;
 1008016:	ff e3 83 fd 	CALL 0x1007b1c <_sm_ah_r_prime>;
 100801a:	ff e3 65 fc 	CALL 0x10078e4 <_rau_next_state>;
 100801e:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x2651 <_sm_random_address>(9809) */
 1008022:	00 e1 31 26 	R0.L = 0x2631;		/* (9777)	R0=0x2631 <_sm_persistent_irk>(9777) */
 1008026:	cf 2f       	JUMP.S 0x1007fc4 <_sm_run+0x9c>;
 1008028:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100802a:	10 93       	[P2] = R0;
 100802c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000001(16777217) */
 1008030:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x6(  6) */
 1008034:	00 e1 2c 6f 	R0.L = 0x6f2c;		/* (28460)	R0=0x1006f2c <_hci_le_set_random_address>(16805676) */
 1008038:	01 e1 51 26 	R1.L = 0x2651;		/* (9809)	R1=0x2651 <_sm_random_address>(9809) */
 100803c:	a3 22       	JUMP.S 0x1008582 <_sm_run+0x65a>;
 100803e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x260c <_sm_aes128_state> */
 1008042:	0a e1 00 26 	P2.L = 0x2600;		/* (9728)	P2=0x2600 <_sm_cmac_state> */
 1008046:	10 91       	R0 = [P2];
 1008048:	28 0e       	CC = R0 <= 0x5 (IU);
 100804a:	6d 14       	IF !CC JUMP 0x1008124 <_sm_run+0x1fc> (BP);
 100804c:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100804e:	81 40       	R1 <<= R0;
 1008050:	52 61       	R2 = 0x2a (X);		/*		R2=0x2a( 42) */
 1008052:	51 54       	R1 = R1 & R2;
 1008054:	01 0c       	CC = R1 == 0x0;
 1008056:	67 1c       	IF CC JUMP 0x1008124 <_sm_run+0x1fc> (BP);
 1008058:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2600 <_sm_cmac_state> */
 100805c:	0a e1 0c 26 	P2.L = 0x260c;		/* (9740)	P2=0x260c <_sm_aes128_state> */
 1008060:	11 91       	R1 = [P2];
 1008062:	09 0c       	CC = R1 == 0x1;
 1008064:	60 1c       	IF CC JUMP 0x1008124 <_sm_run+0x1fc> (BP);
 1008066:	18 0c       	CC = R0 == 0x3;
 1008068:	0f 18       	IF CC JUMP 0x1008086 <_sm_run+0x15e>;
 100806a:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 100806c:	08 08       	CC = R0 == R1;
 100806e:	33 18       	IF CC JUMP 0x10080d4 <_sm_run+0x1ac>;
 1008070:	08 0c       	CC = R0 == 0x1;
 1008072:	02 18       	IF CC JUMP 0x1008076 <_sm_run+0x14e>;
 1008074:	d0 24       	JUMP.S 0x1008a14 <_sm_run+0xaec>;
 1008076:	7f 30       	R7 = FP;
 1008078:	27 66       	R7 += -0x3c;		/* (-60) */
 100807a:	07 30       	R0 = R7;
 100807c:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100807e:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1008080:	00 e3 90 3e 	CALL 0x100fda0 <_memset>;
 1008084:	49 20       	JUMP.S 0x1008116 <_sm_run+0x1ee>;
 1008086:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x24c8 <_the_setup> */
 100808a:	67 32       	P4 = FP;
 100808c:	4b e1 00 00 	P3.H = 0x0;		/* (  0)	P3=0x6dd4 */
 1008090:	0d e1 80 26 	P5.L = 0x2680;		/* (9856)	P5=0x2680 <_sm_cmac_x> */
 1008094:	24 6e       	P4 += -0x3c;		/* (-60) */
 1008096:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 1008098:	0b e1 7e 26 	P3.L = 0x267e;		/* (9854)	P3=0x267e <_sm_cmac_block_current> */
 100809c:	5e 99       	R6 = B[P3] (X);
 100809e:	70 43       	R0 = R6.B (Z);
 10080a0:	20 4f       	R0 <<= 0x4;
 10080a2:	07 50       	R0 = R7 + R0;
 10080a4:	ff e3 38 fc 	CALL 0x1007914 <_sm_cmac_message_get_byte>;
 10080a8:	6d 98       	R5 = B[P5++] (X);
 10080aa:	68 59       	R5 = R0 ^ R5;
 10080ac:	0f 64       	R7 += 0x1;		/* (  1) */
 10080ae:	80 60       	R0 = 0x10 (X);		/*		R0=0x10( 16) */
 10080b0:	25 9a       	B[P4++] = R5;
 10080b2:	07 08       	CC = R7 == R0;
 10080b4:	f4 17       	IF !CC JUMP 0x100809c <_sm_run+0x174> (BP);
 10080b6:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x260c <_sm_aes128_state> */
 10080ba:	0a e1 7e 26 	P2.L = 0x267e;		/* (9854)	P2=0x267e <_sm_cmac_block_current> */
 10080be:	0e 64       	R6 += 0x1;		/* (  1) */
 10080c0:	16 9b       	B[P2] = R6;
 10080c2:	ff e3 1d fc 	CALL 0x10078fc <_sm_cmac_next_state>;
 10080c6:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x10( 16) */
 10080ca:	4f 30       	R1 = FP;
 10080cc:	00 e1 5c 26 	R0.L = 0x265c;		/* (9820)	R0=0x265c <_sm_cmac_k>(9820) */
 10080d0:	21 66       	R1 += -0x3c;		/* (-60) */
 10080d2:	7a 2f       	JUMP.S 0x1007fc6 <_sm_run+0x9e>;
 10080d4:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x2680 <_sm_cmac_x> */
 10080d8:	48 e1 00 00 	P0.H = 0x0;		/* (  0)	P0=0x4c <_device_ble> */
 10080dc:	4f 32       	P1 = FP;
 10080de:	0d e1 80 26 	P5.L = 0x2680;		/* (9856)	P5=0x2680 <_sm_cmac_x> */
 10080e2:	08 e1 6e 26 	P0.L = 0x266e;		/* (9838)	P0=0x266e <_sm_cmac_m_last> */
 10080e6:	21 6e       	P1 += -0x3c;		/* (-60) */
 10080e8:	82 68       	P2 = 0x10 (X);		/*		P2=0x10( 16) */
 10080ea:	b2 e0 05 20 	LSETUP(0x10080ee <_sm_run+0x1c6>, 0x10080f4 <_sm_run+0x1cc>) LC1 = P2;
 10080ee:	68 98       	R0 = B[P5++] (X);
 10080f0:	41 98       	R1 = B[P0++] (X);
 10080f2:	01 58       	R0 = R1 ^ R0;
 10080f4:	08 9a       	B[P1++] = R0;
 10080f6:	7f 30       	R7 = FP;
 10080f8:	27 66       	R7 += -0x3c;		/* (-60) */
 10080fa:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100265c(16787036) */
 10080fe:	00 e1 e0 9c 	R0.L = 0x9ce0;		/* (-25376)	R0=0x1009ce0(16817376) */
 1008102:	0f 30       	R1 = R7;
 1008104:	00 e3 48 11 	CALL 0x100a394 <_log_key>;
 1008108:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x10 */
 100810c:	0a e1 7e 26 	P2.L = 0x267e;		/* (9854)	P2=0x267e <_sm_cmac_block_current> */
 1008110:	50 99       	R0 = B[P2] (X);
 1008112:	08 64       	R0 += 0x1;		/* (  1) */
 1008114:	10 9b       	B[P2] = R0;
 1008116:	ff e3 f3 fb 	CALL 0x10078fc <_sm_cmac_next_state>;
 100811a:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x9ce0(40160) */
 100811e:	00 e1 5c 26 	R0.L = 0x265c;		/* (9820)	R0=0x265c <_sm_cmac_k>(9820) */
 1008122:	51 2f       	JUMP.S 0x1007fc4 <_sm_run+0x9c>;
 1008124:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x267e <_sm_cmac_block_current> */
 1008128:	0a e1 10 26 	P2.L = 0x2610;		/* (9744)	P2=0x2610 <_sm_central_device_test> */
 100812c:	10 91       	R0 = [P2];
 100812e:	80 0c       	CC = R0 < 0x0;
 1008130:	45 14       	IF !CC JUMP 0x10081ba <_sm_run+0x292> (BP);
 1008132:	7f 30       	R7 = FP;
 1008134:	47 67       	R7 += -0x18;		/* (-24) */
 1008136:	07 30       	R0 = R7;
 1008138:	ff e3 20 ea 	CALL 0x1005578 <_le_hci_connections_get_iterator>;
 100813c:	2c e1 90 00 	P4 = 0x90 (X);		/*		P4=0x90(144) */
 1008140:	38 20       	JUMP.S 0x10081b0 <_sm_run+0x288>;
 1008142:	07 30       	R0 = R7;
 1008144:	ff e3 24 fb 	CALL 0x100778c <_linked_list_iterator_next>;
 1008148:	28 32       	P5 = R0;
 100814a:	28 e4 28 00 	R0 = [P5 + 0xa0];
 100814e:	e5 5a       	P3 = P5 + P4;
 1008150:	08 0c       	CC = R0 == 0x1;
 1008152:	2f 14       	IF !CC JUMP 0x10081b0 <_sm_run+0x288> (BP);
 1008154:	2c e1 93 00 	P4 = 0x93 (X);		/*		P4=0x93(147) */
 1008158:	25 5b       	P4 = P5 + P4;
 100815a:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x265c <_sm_cmac_k>(9820) */
 100815e:	af e5 99 00 	R7 = B[P5 + 0x99] (X);
 1008162:	4c 30       	R1 = P4;
 1008164:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 1008166:	00 e1 20 26 	R0.L = 0x2620;		/* (9760)	R0=0x2620 <_sm_central_device_address>(9760) */
 100816a:	00 e3 cd 3d 	CALL 0x100fd04 <_memcpy>;
 100816e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2610 <_sm_central_device_test> */
 1008172:	0a e1 30 26 	P2.L = 0x2630;		/* (9776)	P2=0x2630 <_sm_central_device_addr_type> */
 1008176:	17 9b       	B[P2] = R7;
 1008178:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2630 <_sm_central_device_addr_type> */
 100817c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100817e:	0a e1 10 26 	P2.L = 0x2610;		/* (9744)	P2=0x2610 <_sm_central_device_test> */
 1008182:	10 93       	[P2] = R0;
 1008184:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2610 <_sm_central_device_test> */
 1008188:	f9 63       	R1 = -0x1 (X);		/*		R1=0xffffffff( -1) */
 100818a:	0a e1 28 26 	P2.L = 0x2628;		/* (9768)	P2=0x2628 <_sm_central_device_matched> */
 100818e:	11 93       	[P2] = R1;
 1008190:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2628 <_sm_central_device_matched> */
 1008194:	0a e1 2c 26 	P2.L = 0x262c;		/* (9772)	P2=0x262c <_sm_csrk_connection_source> */
 1008198:	53 93       	[P2] = P3;
 100819a:	f0 b0       	[SP + 0xc] = R0;
 100819c:	30 b6       	W[SP + 0x10] = R0;
 100819e:	b0 62       	R0 = -0x2a (X);		/*		R0=0xffffffd6(-42) */
 10081a0:	0f 30       	R1 = R7;
 10081a2:	54 30       	R2 = P4;
 10081a4:	ff e3 60 fb 	CALL 0x1007864 <_sm_notify_client>;
 10081a8:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 10081aa:	28 e6 28 00 	[P5 + 0xa0] = R0;
 10081ae:	06 20       	JUMP.S 0x10081ba <_sm_run+0x292>;
 10081b0:	07 30       	R0 = R7;
 10081b2:	ff e3 d5 fa 	CALL 0x100775c <_linked_list_iterator_has_next>;
 10081b6:	00 0c       	CC = R0 == 0x0;
 10081b8:	c5 17       	IF !CC JUMP 0x1008142 <_sm_run+0x21a> (BP);
 10081ba:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x2680 <_sm_cmac_x> */
 10081be:	0d e1 10 26 	P5.L = 0x2610;		/* (9744)	P5=0x2610 <_sm_central_device_test> */
 10081c2:	28 91       	R0 = [P5];
 10081c4:	80 0c       	CC = R0 < 0x0;
 10081c6:	73 14       	IF !CC JUMP 0x10082ac <_sm_run+0x384> (BP);
 10081c8:	a6 20       	JUMP.S 0x1008314 <_sm_run+0x3ec>;
 10081ca:	f5 b0       	[SP + 0xc] = R5;
 10081cc:	28 91       	R0 = [P5];
 10081ce:	0c 30       	R1 = R4;
 10081d0:	16 30       	R2 = R6;
 10081d2:	ff e3 23 f9 	CALL 0x1007418 <_le_device_db_info>;
 10081d6:	5f 99       	R7 = B[P3] (X);
 10081d8:	79 43       	R1 = R7.B (Z);
 10081da:	f0 b9       	R0 = [FP -0x4];
 10081dc:	01 08       	CC = R1 == R0;
 10081de:	39 14       	IF !CC JUMP 0x1008250 <_sm_run+0x328> (BP);
 10081e0:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0xffff(65535) */
 10081e4:	06 30       	R0 = R6;
 10081e6:	01 e1 20 26 	R1.L = 0x2620;		/* (9760)	R1=0x2620 <_sm_central_device_address>(9760) */
 10081ea:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 10081ec:	00 e3 4e 3d 	CALL 0x100fc88 <_memcmp>;
 10081f0:	00 0c       	CC = R0 == 0x0;
 10081f2:	2f 14       	IF !CC JUMP 0x1008250 <_sm_run+0x328> (BP);
 10081f4:	20 91       	R0 = [P4];
 10081f6:	f9 63       	R1 = -0x1 (X);		/*		R1=0xffffffff( -1) */
 10081f8:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x262c <_sm_csrk_connection_source> */
 10081fc:	21 93       	[P4] = R1;
 10081fe:	0a e1 28 26 	P2.L = 0x2628;		/* (9768)	P2=0x2628 <_sm_central_device_matched> */
 1008202:	10 93       	[P2] = R0;
 1008204:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1008206:	f1 b0       	[SP + 0xc] = R1;
 1008208:	30 b6       	W[SP + 0x10] = R0;
 100820a:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x6(  6) */
 100820e:	c0 62       	R0 = -0x28 (X);		/*		R0=0xffffffd8(-40) */
 1008210:	0f 30       	R1 = R7;
 1008212:	02 e1 20 26 	R2.L = 0x2620;		/* (9760)	R2=0x2620 <_sm_central_device_address>(9760) */
 1008216:	ff e3 27 fb 	CALL 0x1007864 <_sm_notify_client>;
 100821a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2628 <_sm_central_device_matched> */
 100821e:	0a e1 fc 25 	P2.L = 0x25fc;		/* (9724)	P2=0x25fc <_sm_authenticate_outgoing_connections> */
 1008222:	10 99       	R0 = B[P2] (Z);
 1008224:	00 0c       	CC = R0 == 0x0;
 1008226:	0c 1c       	IF CC JUMP 0x100823e <_sm_run+0x316> (BP);
 1008228:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x25fc <_sm_authenticate_outgoing_connections> */
 100822c:	0a e1 2c 26 	P2.L = 0x262c;		/* (9772)	P2=0x262c <_sm_csrk_connection_source> */
 1008230:	52 91       	P2 = [P2];
 1008232:	90 e4 02 00 	R0 = B[P2 + 0x2] (Z);
 1008236:	00 0c       	CC = R0 == 0x0;
 1008238:	03 14       	IF !CC JUMP 0x100823e <_sm_run+0x316> (BP);
 100823a:	98 61       	R0 = 0x33 (X);		/*		R0=0x33( 51) */
 100823c:	d0 b0       	[P2 + 0xc] = R0;
 100823e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x262c <_sm_csrk_connection_source> */
 1008242:	0a e1 2c 26 	P2.L = 0x262c;		/* (9772)	P2=0x262c <_sm_csrk_connection_source> */
 1008246:	51 91       	P1 = [P2];
 1008248:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100824a:	10 93       	[P2] = R0;
 100824c:	08 b1       	[P1 + 0x10] = R0;
 100824e:	42 20       	JUMP.S 0x10082d2 <_sm_run+0x3aa>;
 1008250:	7f 43       	R7 = R7.B (Z);
 1008252:	07 0c       	CC = R7 == 0x0;
 1008254:	05 14       	IF !CC JUMP 0x100825e <_sm_run+0x336> (BP);
 1008256:	28 91       	R0 = [P5];
 1008258:	08 64       	R0 += 0x1;		/* (  1) */
 100825a:	28 93       	[P5] = R0;
 100825c:	32 20       	JUMP.S 0x10082c0 <_sm_run+0x398>;
 100825e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x262c <_sm_csrk_connection_source> */
 1008262:	0a e1 0c 26 	P2.L = 0x260c;		/* (9740)	P2=0x260c <_sm_aes128_state> */
 1008266:	10 91       	R0 = [P2];
 1008268:	08 0c       	CC = R0 == 0x1;
 100826a:	34 1c       	IF CC JUMP 0x10082d2 <_sm_run+0x3aa> (BP);
 100826c:	7f 30       	R7 = FP;
 100826e:	27 66       	R7 += -0x3c;		/* (-60) */
 1008270:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1008274:	00 e1 e4 9c 	R0.L = 0x9ce4;		/* (-25372)	R0=0x1009ce4(16817380) */
 1008278:	0f 30       	R1 = R7;
 100827a:	00 e3 8d 10 	CALL 0x100a394 <_log_key>;
 100827e:	77 30       	R6 = FP;
 1008280:	c6 66       	R6 += -0x28;		/* (-40) */
 1008282:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x9ce4(40164) */
 1008286:	00 e1 20 26 	R0.L = 0x2620;		/* (9760)	R0=0x2620 <_sm_central_device_address>(9760) */
 100828a:	0e 30       	R1 = R6;
 100828c:	ff e3 48 fc 	CALL 0x1007b1c <_sm_ah_r_prime>;
 1008290:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x260c <_sm_aes128_state> */
 1008294:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1008296:	0a e1 14 26 	P2.L = 0x2614;		/* (9748)	P2=0x2614 <_sm_central_ah_calculation_active> */
 100829a:	10 93       	[P2] = R0;
 100829c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2614 <_sm_central_ah_calculation_active> */
 10082a0:	0a e1 2c 26 	P2.L = 0x262c;		/* (9772)	P2=0x262c <_sm_csrk_connection_source> */
 10082a4:	07 30       	R0 = R7;
 10082a6:	0e 30       	R1 = R6;
 10082a8:	12 91       	R2 = [P2];
 10082aa:	8f 2e       	JUMP.S 0x1007fc8 <_sm_run+0xa0>;
 10082ac:	67 30       	R4 = FP;
 10082ae:	77 30       	R6 = FP;
 10082b0:	6f 30       	R5 = FP;
 10082b2:	4b e1 00 00 	P3.H = 0x0;		/* (  0)	P3=0x267e <_sm_cmac_block_current> */
 10082b6:	e4 67       	R4 += -0x4;		/* ( -4) */
 10082b8:	a6 67       	R6 += -0xc;		/* (-12) */
 10082ba:	25 66       	R5 += -0x3c;		/* (-60) */
 10082bc:	0b e1 30 26 	P3.L = 0x2630;		/* (9776)	P3=0x2630 <_sm_central_device_addr_type> */
 10082c0:	2f 91       	R7 = [P5];
 10082c2:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x93 */
 10082c6:	ff e3 3f f8 	CALL 0x1007344 <_le_device_db_count>;
 10082ca:	0c e1 10 26 	P4.L = 0x2610;		/* (9744)	P4=0x2610 <_sm_central_device_test> */
 10082ce:	87 08       	CC = R7 < R0;
 10082d0:	7d 1f       	IF CC JUMP 0x10081ca <_sm_run+0x2a2> (BP);
 10082d2:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x2610 <_sm_central_device_test> */
 10082d6:	0d e1 10 26 	P5.L = 0x2610;		/* (9744)	P5=0x2610 <_sm_central_device_test> */
 10082da:	2f 91       	R7 = [P5];
 10082dc:	ff e3 34 f8 	CALL 0x1007344 <_le_device_db_count>;
 10082e0:	87 08       	CC = R7 < R0;
 10082e2:	19 1c       	IF CC JUMP 0x1008314 <_sm_run+0x3ec> (BP);
 10082e4:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x262c <_sm_csrk_connection_source> */
 10082e8:	0a e1 2c 26 	P2.L = 0x262c;		/* (9772)	P2=0x262c <_sm_csrk_connection_source> */
 10082ec:	51 91       	P1 = [P2];
 10082ee:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 10082f0:	28 93       	[P5] = R0;
 10082f2:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10082f4:	10 93       	[P2] = R0;
 10082f6:	08 b1       	[P1 + 0x10] = R0;
 10082f8:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x262c <_sm_csrk_connection_source> */
 10082fc:	f0 b0       	[SP + 0xc] = R0;
 10082fe:	30 b6       	W[SP + 0x10] = R0;
 1008300:	0a e1 30 26 	P2.L = 0x2630;		/* (9776)	P2=0x2630 <_sm_central_device_addr_type> */
 1008304:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x2620 <_sm_central_device_address>(9760) */
 1008308:	b8 62       	R0 = -0x29 (X);		/*		R0=0xffffffd7(-41) */
 100830a:	51 99       	R1 = B[P2] (X);
 100830c:	02 e1 20 26 	R2.L = 0x2620;		/* (9760)	R2=0x2620 <_sm_central_device_address>(9760) */
 1008310:	ff e3 aa fa 	CALL 0x1007864 <_sm_notify_client>;
 1008314:	45 e1 00 00 	R5.H = 0x0;		/* (  0)	R5=0x4c <_device_ble>( 76) */
 1008318:	05 e1 7a 25 	R5.L = 0x257a;		/* (9594)	R5=0x257a(9594) */
 100831c:	25 30       	R4 = R5;
 100831e:	14 64       	R4 += 0x2;		/* (  2) */
 1008320:	04 34       	I0 = R4;
 1008322:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x2610 <_sm_central_device_test> */
 1008326:	46 e1 00 00 	R6.H = 0x0;		/* (  0)	R6=0x0 <data_addr>(  0) */
 100832a:	0c e1 c8 24 	P4.L = 0x24c8;		/* (9416)	P4=0x24c8 <_the_setup> */
 100832e:	06 e1 c0 25 	R6.L = 0x25c0;		/* (9664)	R6=0x25c0(9664) */
 1008332:	60 9f       	I0 += 0x2;		/* (  2) */
 1008334:	80 30       	R0 = I0;
 1008336:	00 bb       	[FP -0x40] = R0;
 1008338:	60 9f       	I0 += 0x2;		/* (  2) */
 100833a:	80 30       	R0 = I0;
 100833c:	f0 ba       	[FP -0x44] = R0;
 100833e:	47 30       	R0 = FP;
 1008340:	40 67       	R0 += -0x18;		/* (-24) */
 1008342:	ff e3 1b e9 	CALL 0x1005578 <_le_hci_connections_get_iterator>;
 1008346:	a8 20       	JUMP.S 0x1008496 <_sm_run+0x56e>;
 1008348:	07 30       	R0 = R7;
 100834a:	ff e3 21 fa 	CALL 0x100778c <_linked_list_iterator_next>;
 100834e:	28 32       	P5 = R0;
 1008350:	2b e1 90 00 	P3 = 0x90 (X);		/*		P3=0x90(144) */
 1008354:	70 68       	P0 = 0xe (X);		/*		P0=0xe( 14) */
 1008356:	2a e5 27 00 	P2 = [P5 + 0x9c];
 100835a:	dd 5a       	P3 = P5 + P3;
 100835c:	c2 6e       	P2 += -0x28;		/* (-40) */
 100835e:	42 0a       	CC = P2 <= P0 (IU);
 1008360:	9b 14       	IF !CC JUMP 0x1008496 <_sm_run+0x56e> (BP);
 1008362:	49 e1 00 01 	P1.H = 0x100;		/* (256)	P1=0x10025fe */
 1008366:	09 e1 c8 9f 	P1.L = 0x9fc8;		/* (-24632)	P1=0x1009fc8 */
 100836a:	91 5e       	P2 = P1 + (P2 << 0x2);
 100836c:	52 91       	P2 = [P2];
 100836e:	52 00       	JUMP (P2);
 1008370:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100ffd7(16842711) */
 1008374:	00 e1 e8 9c 	R0.L = 0x9ce8;		/* (-25368)	R0=0x1009ce8(16817384) */
 1008378:	00 e3 20 36 	CALL 0x100efb8 <_puts>;
 100837c:	68 e4 48 00 	R0 = W[P5 + 0x90] (Z);
 1008380:	ff e3 1c f7 	CALL 0x10071b8 <_le_l2cap_can_send_fixed_channel_packet_now>;
 1008384:	00 0c       	CC = R0 == 0x0;
 1008386:	88 1c       	IF CC JUMP 0x1008496 <_sm_run+0x56e> (BP);
 1008388:	58 60       	R0 = 0xb (X);		/*		R0=0xb( 11) */
 100838a:	b8 e6 f4 ff 	B[FP + -0xc] = R0;
 100838e:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1008390:	b8 e6 f5 ff 	B[FP + -0xb] = R0;
 1008394:	58 61       	R0 = 0x2b (X);		/*		R0=0x2b( 43) */
 1008396:	28 e6 27 00 	[P5 + 0x9c] = R0;
 100839a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100002b(16777259) */
 100839e:	00 e1 00 9d 	R0.L = 0x9d00;		/* (-25344)	R0=0x1009d00(16817408) */
 10083a2:	00 e3 0b 36 	CALL 0x100efb8 <_puts>;
 10083a6:	68 e4 48 00 	R0 = W[P5 + 0x90] (Z);
 10083aa:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 10083ac:	f1 b0       	[SP + 0xc] = R1;
 10083ae:	57 30       	R2 = FP;
 10083b0:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 10083b2:	a2 67       	R2 += -0xc;		/* (-12) */
 10083b4:	ff e3 60 f7 	CALL 0x1007274 <_le_l2cap_send_connectionless>;
 10083b8:	6f 20       	JUMP.S 0x1008496 <_sm_run+0x56e>;
 10083ba:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1009d00(16817408) */
 10083be:	00 e1 08 9d 	R0.L = 0x9d08;		/* (-25336)	R0=0x1009d08(16817416) */
 10083c2:	00 e3 fb 35 	CALL 0x100efb8 <_puts>;
 10083c6:	43 30       	R0 = P3;
 10083c8:	ff e3 30 fc 	CALL 0x1007c28 <_sm_init_setup>;
 10083cc:	2a e1 a7 00 	P2 = 0xa7 (X);		/*		P2=0xa7(167) */
 10083d0:	95 5a       	P2 = P5 + P2;
 10083d2:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x9d08(40200) */
 10083d6:	4a 30       	R1 = P2;
 10083d8:	3a 60       	R2 = 0x7 (X);		/*		R2=0x7(  7) */
 10083da:	00 e1 08 25 	R0.L = 0x2508;		/* (9480)	R0=0x2508(9480) */
 10083de:	00 e3 93 3c 	CALL 0x100fd04 <_memcpy>;
 10083e2:	43 30       	R0 = P3;
 10083e4:	ff e3 d8 fa 	CALL 0x1007994 <_sm_stk_generation_init>;
 10083e8:	38 30       	R7 = R0;
 10083ea:	00 0c       	CC = R0 == 0x0;
 10083ec:	0b 1c       	IF CC JUMP 0x1008402 <_sm_run+0x4da> (BP);
 10083ee:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1002508(16786696) */
 10083f2:	00 e1 20 9d 	R0.L = 0x9d20;		/* (-25312)	R0=0x1009d20(16817440) */
 10083f6:	00 e3 e1 35 	CALL 0x100efb8 <_puts>;
 10083fa:	a7 e6 10 00 	B[P4 + 0x10] = R7;
 10083fe:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1008400:	42 20       	JUMP.S 0x1008484 <_sm_run+0x55c>;
 1008402:	43 30       	R0 = P3;
 1008404:	ff e3 98 fc 	CALL 0x1007d34 <_sm_timeout_start>;
 1008408:	e0 a1       	R0 = [P4 + 0x1c];
 100840a:	10 0c       	CC = R0 == 0x2;
 100840c:	03 14       	IF !CC JUMP 0x1008412 <_sm_run+0x4ea> (BP);
 100840e:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1008410:	3a 20       	JUMP.S 0x1008484 <_sm_run+0x55c>;
 1008412:	68 61       	R0 = 0x2d (X);		/*		R0=0x2d( 45) */
 1008414:	38 20       	JUMP.S 0x1008484 <_sm_run+0x55c>;
 1008416:	28 e4 30 00 	R0 = [P5 + 0xc0];
 100841a:	0e 30       	R1 = R6;
 100841c:	16 30       	R2 = R6;
 100841e:	f6 b0       	[SP + 0xc] = R6;
 1008420:	b1 67       	R1 += -0xa;		/* (-10) */
 1008422:	c2 67       	R2 += -0x8;		/* ( -8) */
 1008424:	ff e3 58 f8 	CALL 0x10074d4 <_le_device_db_encryption_get>;
 1008428:	a0 61       	R0 = 0x34 (X);		/*		R0=0x34( 52) */
 100842a:	2d 20       	JUMP.S 0x1008484 <_sm_run+0x55c>;
 100842c:	05 34       	I0 = R5;
 100842e:	29 e1 b6 00 	P1 = 0xb6 (X);		/*		P1=0xb6(182) */
 1008432:	4d 5a       	P1 = P5 + P1;
 1008434:	51 32       	P2 = P1;
 1008436:	10 94       	R0 = W[P2++] (Z);
 1008438:	20 9f       	W[I0] = R0.L;
 100843a:	04 32       	P0 = R4;
 100843c:	48 a8       	R0 = W[P1 + 0x2] (X);
 100843e:	01 b9       	R1 = [FP -0x40];
 1008440:	09 32       	P1 = R1;
 1008442:	12 6c       	P2 += 0x2;		/* (  2) */
 1008444:	00 97       	W[P0] = R0;
 1008446:	10 94       	R0 = W[P2++] (Z);
 1008448:	08 97       	W[P1] = R0;
 100844a:	f9 b8       	P1 = [FP -0x44];
 100844c:	10 95       	R0 = W[P2] (Z);
 100844e:	08 97       	W[P1] = R0;
 1008450:	68 e5 5a 00 	R0 = W[P5 + 0xb4] (X);
 1008454:	60 e6 58 00 	W[P4 + 0xb0] = R0;
 1008458:	a1 e5 b9 00 	R1 = B[P4 + 0xb9] (X);
 100845c:	78 60       	R0 = 0xf (X);		/*		R0=0xf( 15) */
 100845e:	01 54       	R0 = R1 & R0;
 1008460:	08 64       	R0 += 0x1;		/* (  1) */
 1008462:	a8 e6 a6 00 	B[P5 + 0xa6] = R0;
 1008466:	a0 e4 b9 00 	R0 = B[P4 + 0xb9] (Z);
 100846a:	20 49       	CC = BITTST (R0, 0x4);		/* bit  4 */
 100846c:	00 02       	R0 = CC;
 100846e:	a8 e6 a5 00 	B[P5 + 0xa5] = R0;
 1008472:	18 61       	R0 = 0x23 (X);		/*		R0=0x23( 35) */
 1008474:	08 20       	JUMP.S 0x1008484 <_sm_run+0x55c>;
 1008476:	43 30       	R0 = P3;
 1008478:	ff e3 d8 fb 	CALL 0x1007c28 <_sm_init_setup>;
 100847c:	43 30       	R0 = P3;
 100847e:	ff e3 5b fc 	CALL 0x1007d34 <_sm_timeout_start>;
 1008482:	b8 61       	R0 = 0x37 (X);		/*		R0=0x37( 55) */
 1008484:	28 e6 27 00 	[P5 + 0x9c] = R0;
 1008488:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0xa7 */
 100848c:	68 e5 48 00 	R0 = W[P5 + 0x90] (X);
 1008490:	0a e1 1c 26 	P2.L = 0x261c;		/* (9756)	P2=0x261c <_sm_active_connection> */
 1008494:	10 97       	W[P2] = R0;
 1008496:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x261c <_sm_active_connection> */
 100849a:	0a e1 1c 26 	P2.L = 0x261c;		/* (9756)	P2=0x261c <_sm_active_connection> */
 100849e:	10 95       	R0 = W[P2] (Z);
 10084a0:	00 0c       	CC = R0 == 0x0;
 10084a2:	08 10       	IF !CC JUMP 0x10084b2 <_sm_run+0x58a>;
 10084a4:	7f 30       	R7 = FP;
 10084a6:	47 67       	R7 += -0x18;		/* (-24) */
 10084a8:	07 30       	R0 = R7;
 10084aa:	ff e3 59 f9 	CALL 0x100775c <_linked_list_iterator_has_next>;
 10084ae:	00 0c       	CC = R0 == 0x0;
 10084b0:	4c 17       	IF !CC JUMP 0x1008348 <_sm_run+0x420> (BP);
 10084b2:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x2610 <_sm_central_device_test> */
 10084b6:	0d e1 1c 26 	P5.L = 0x261c;		/* (9756)	P5=0x261c <_sm_active_connection> */
 10084ba:	28 95       	R0 = W[P5] (Z);
 10084bc:	00 0c       	CC = R0 == 0x0;
 10084be:	02 14       	IF !CC JUMP 0x10084c2 <_sm_run+0x59a> (BP);
 10084c0:	aa 22       	JUMP.S 0x1008a14 <_sm_run+0xaec>;
 10084c2:	ff e3 7b f6 	CALL 0x10071b8 <_le_l2cap_can_send_fixed_channel_packet_now>;
 10084c6:	00 0c       	CC = R0 == 0x0;
 10084c8:	02 14       	IF !CC JUMP 0x10084cc <_sm_run+0x5a4> (BP);
 10084ca:	a5 22       	JUMP.S 0x1008a14 <_sm_run+0xaec>;
 10084cc:	28 95       	R0 = W[P5] (Z);
 10084ce:	ff e3 41 fa 	CALL 0x1007950 <_sm_get_connection_for_handle>;
 10084d2:	28 32       	P5 = R0;
 10084d4:	45 0c       	CC = P5 == 0x0;
 10084d6:	02 14       	IF !CC JUMP 0x10084da <_sm_run+0x5b2> (BP);
 10084d8:	9e 22       	JUMP.S 0x1008a14 <_sm_run+0xaec>;
 10084da:	d0 69       	P0 = 0x3a (X);		/*		P0=0x3a( 58) */
 10084dc:	e8 a0       	R0 = [P5 + 0xc];
 10084de:	10 32       	P2 = R0;
 10084e0:	fa 6f       	P2 += -0x1;		/* ( -1) */
 10084e2:	42 0a       	CC = P2 <= P0 (IU);
 10084e4:	02 18       	IF CC JUMP 0x10084e8 <_sm_run+0x5c0>;
 10084e6:	8f 22       	JUMP.S 0x1008a04 <_sm_run+0xadc>;
 10084e8:	49 e1 00 01 	P1.H = 0x100;		/* (256)	P1=0x10000b6 */
 10084ec:	09 e1 04 a0 	P1.L = 0xa004;		/* (-24572)	P1=0x100a004 */
 10084f0:	91 5e       	P2 = P1 + (P2 << 0x2);
 10084f2:	52 91       	P2 = [P2];
 10084f4:	52 00       	JUMP (P2);
 10084f6:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 10084f8:	b8 e6 f4 ff 	B[FP + -0xc] = R0;
 10084fc:	a0 e5 10 00 	R0 = B[P4 + 0x10] (X);
 1008500:	b8 e6 f5 ff 	B[FP + -0xb] = R0;
 1008504:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1008506:	e8 b0       	[P5 + 0xc] = R0;
 1008508:	28 95       	R0 = W[P5] (Z);
 100850a:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 100850c:	f1 b0       	[SP + 0xc] = R1;
 100850e:	57 30       	R2 = FP;
 1008510:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 1008512:	a2 67       	R2 += -0xc;		/* (-12) */
 1008514:	ff e3 b0 f6 	CALL 0x1007274 <_le_l2cap_send_connectionless>;
 1008518:	73 22       	JUMP.S 0x10089fe <_sm_run+0xad6>;
 100851a:	7f 30       	R7 = FP;
 100851c:	27 66       	R7 += -0x3c;		/* (-60) */
 100851e:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x0 <data_addr>(  0) */
 1008522:	0f 30       	R1 = R7;
 1008524:	00 e1 c0 25 	R0.L = 0x25c0;		/* (9664)	R0=0x25c0(9664) */
 1008528:	00 e3 04 0f 	CALL 0x100a330 <_swap128>;
 100852c:	a8 61       	R0 = 0x35 (X);		/*		R0=0x35( 53) */
 100852e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x261c <_sm_active_connection> */
 1008532:	e8 b0       	[P5 + 0xc] = R0;
 1008534:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 1008538:	50 e4 77 00 	R0 = W[P2 + 0xee] (Z);
 100853c:	29 95       	R1 = W[P5] (Z);
 100853e:	f0 b0       	[SP + 0xc] = R0;
 1008540:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000035(16777269) */
 1008544:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x7(  7) */
 1008548:	37 b1       	[SP + 0x10] = R7;
 100854a:	02 e1 b8 25 	R2.L = 0x25b8;		/* (9656)	R2=0x25b8(9656) */
 100854e:	00 e1 cc 6f 	R0.L = 0x6fcc;		/* (28620)	R0=0x1006fcc <_hci_le_start_encryption>(16805836) */
 1008552:	ff e3 47 eb 	CALL 0x1005be0 <_le_hci_send_cmd>;
 1008556:	5f 22       	JUMP.S 0x1008a14 <_sm_run+0xaec>;
 1008558:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100855a:	a0 e6 40 00 	B[P4 + 0x40] = R0;
 100855e:	c0 61       	R0 = 0x38 (X);		/*		R0=0x38( 56) */
 1008560:	e8 b0       	[P5 + 0xc] = R0;
 1008562:	39 60       	R1 = 0x7 (X);		/*		R1=0x7(  7) */
 1008564:	28 95       	R0 = W[P5] (Z);
 1008566:	f1 b0       	[SP + 0xc] = R1;
 1008568:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x25b8(9656) */
 100856c:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 100856e:	02 e1 08 25 	R2.L = 0x2508;		/* (9480)	R2=0x2508(9480) */
 1008572:	53 20       	JUMP.S 0x1008618 <_sm_run+0x6f0>;
 1008574:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1008576:	e8 b0       	[P5 + 0xc] = R0;
 1008578:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 100857c:	29 95       	R1 = W[P5] (Z);
 100857e:	00 e1 dc 6f 	R0.L = 0x6fdc;		/* (28636)	R0=0x1006fdc <_hci_le_long_term_key_negative_reply>(16805852) */
 1008582:	ff e3 2f eb 	CALL 0x1005be0 <_le_hci_send_cmd>;
 1008586:	47 22       	JUMP.S 0x1008a14 <_sm_run+0xaec>;
 1008588:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1006fdc <_hci_le_long_term_key_negative_reply>(16805852) */
 100858c:	00 e1 2c 9d 	R0.L = 0x9d2c;		/* (-25300)	R0=0x1009d2c(16817452) */
 1008590:	00 e3 14 35 	CALL 0x100efb8 <_puts>;
 1008594:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 1008598:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 100859c:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100859e:	90 e6 47 00 	B[P2 + 0x47] = R0;
 10085a2:	90 e5 45 00 	R0 = B[P2 + 0x45] (X);
 10085a6:	90 e6 4c 00 	B[P2 + 0x4c] = R0;
 10085aa:	90 e5 46 00 	R0 = B[P2 + 0x46] (X);
 10085ae:	90 e6 4d 00 	B[P2 + 0x4d] = R0;
 10085b2:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 10085b4:	e8 b0       	[P5 + 0xc] = R0;
 10085b6:	28 95       	R0 = W[P5] (Z);
 10085b8:	39 60       	R1 = 0x7 (X);		/*		R1=0x7(  7) */
 10085ba:	f1 b0       	[SP + 0xc] = R1;
 10085bc:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x2508(9480) */
 10085c0:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 10085c2:	02 e1 0f 25 	R2.L = 0x250f;		/* (9487)	R2=0x250f(9487) */
 10085c6:	ff e3 57 f6 	CALL 0x1007274 <_le_l2cap_send_connectionless>;
 10085ca:	45 30       	R0 = P5;
 10085cc:	ff e3 cc fb 	CALL 0x1007d64 <_sm_timeout_reset>;
 10085d0:	45 30       	R0 = P5;
 10085d2:	10 64       	R0 += 0x2;		/* (  2) */
 10085d4:	ff e3 28 fc 	CALL 0x1007e24 <_sm_trigger_user_response.clone.2>;
 10085d8:	1e 22       	JUMP.S 0x1008a14 <_sm_run+0xaec>;
 10085da:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100002e(16777262) */
 10085de:	00 e1 44 9d 	R0.L = 0x9d44;		/* (-25276)	R0=0x1009d44(16817476) */
 10085e2:	00 e3 eb 34 	CALL 0x100efb8 <_puts>;
 10085e6:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 10085e8:	b8 e6 c4 ff 	B[FP + -0x3c] = R0;
 10085ec:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x4 <_att_client_handler>(  4) */
 10085f0:	4f 30       	R1 = FP;
 10085f2:	00 e1 16 25 	R0.L = 0x2516;		/* (9494)	R0=0x2516(9494) */
 10085f6:	29 66       	R1 += -0x3b;		/* (-59) */
 10085f8:	00 e3 9c 0e 	CALL 0x100a330 <_swap128>;
 10085fc:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 1008600:	00 0c       	CC = R0 == 0x0;
 1008602:	03 1c       	IF CC JUMP 0x1008608 <_sm_run+0x6e0> (BP);
 1008604:	80 61       	R0 = 0x30 (X);		/*		R0=0x30( 48) */
 1008606:	02 20       	JUMP.S 0x100860a <_sm_run+0x6e2>;
 1008608:	d0 61       	R0 = 0x3a (X);		/*		R0=0x3a( 58) */
 100860a:	e8 b0       	[P5 + 0xc] = R0;
 100860c:	89 60       	R1 = 0x11 (X);		/*		R1=0x11( 17) */
 100860e:	28 95       	R0 = W[P5] (Z);
 1008610:	f1 b0       	[SP + 0xc] = R1;
 1008612:	57 30       	R2 = FP;
 1008614:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 1008616:	22 66       	R2 += -0x3c;		/* (-60) */
 1008618:	ff e3 2e f6 	CALL 0x1007274 <_le_l2cap_send_connectionless>;
 100861c:	45 30       	R0 = P5;
 100861e:	ff e3 a3 fb 	CALL 0x1007d64 <_sm_timeout_reset>;
 1008622:	f1 21       	JUMP.S 0x1008a04 <_sm_run+0xadc>;
 1008624:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 1008628:	08 64       	R0 += 0x1;		/* (  1) */
 100862a:	0a e1 98 26 	P2.L = 0x2698;		/* (9880)	P2=0x2698 <_sm_random_connection_source> */
 100862e:	e8 b0       	[P5 + 0xc] = R0;
 1008630:	55 93       	[P2] = P5;
 1008632:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100003a(16777274) */
 1008636:	00 e1 c4 6f 	R0.L = 0x6fc4;		/* (28612)	R0=0x1006fc4 <_hci_le_rand>(16805828) */
 100863a:	ff e3 d3 ea 	CALL 0x1005be0 <_le_hci_send_cmd>;
 100863e:	eb 21       	JUMP.S 0x1008a14 <_sm_run+0xaec>;
 1008640:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2698 <_sm_random_connection_source> */
 1008644:	0a e1 0c 26 	P2.L = 0x260c;		/* (9740)	P2=0x260c <_sm_aes128_state> */
 1008648:	11 91       	R1 = [P2];
 100864a:	09 0c       	CC = R1 == 0x1;
 100864c:	dc 1d       	IF CC JUMP 0x1008a04 <_sm_run+0xadc> (BP);
 100864e:	08 64       	R0 += 0x1;		/* (  1) */
 1008650:	e8 b0       	[P5 + 0xc] = R0;
 1008652:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x6fc4(28612) */
 1008656:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x6(  6) */
 100865a:	00 e1 e8 24 	R0.L = 0x24e8;		/* (9448)	R0=0x24e8(9448) */
 100865e:	01 e1 f8 24 	R1.L = 0x24f8;		/* (9464)	R1=0x24f8(9464) */
 1008662:	50 21       	JUMP.S 0x1008902 <_sm_run+0x9da>;
 1008664:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x260c <_sm_aes128_state> */
 1008668:	0a e1 0c 26 	P2.L = 0x260c;		/* (9740)	P2=0x260c <_sm_aes128_state> */
 100866c:	10 91       	R0 = [P2];
 100866e:	00 0c       	CC = R0 == 0x0;
 1008670:	ca 15       	IF !CC JUMP 0x1008a04 <_sm_run+0xadc> (BP);
 1008672:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x260c <_sm_aes128_state> */
 1008676:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 100867a:	7f 30       	R7 = FP;
 100867c:	50 e5 57 00 	R0 = W[P2 + 0xae] (X);
 1008680:	27 66       	R7 += -0x3c;		/* (-60) */
 1008682:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1008684:	11 20       	JUMP.S 0x10086a6 <_sm_run+0x77e>;
 1008686:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 100868a:	0a e1 0c 26 	P2.L = 0x260c;		/* (9740)	P2=0x260c <_sm_aes128_state> */
 100868e:	10 91       	R0 = [P2];
 1008690:	00 0c       	CC = R0 == 0x0;
 1008692:	b9 15       	IF !CC JUMP 0x1008a04 <_sm_run+0xadc> (BP);
 1008694:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x260c <_sm_aes128_state> */
 1008698:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 100869c:	7f 30       	R7 = FP;
 100869e:	50 e5 57 00 	R0 = W[P2 + 0xae] (X);
 10086a2:	27 66       	R7 += -0x3c;		/* (-60) */
 10086a4:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 10086a6:	17 30       	R2 = R7;
 10086a8:	ff e3 6a fb 	CALL 0x1007d7c <_sm_d1_d_prime>;
 10086ac:	e8 a0       	R0 = [P5 + 0xc];
 10086ae:	08 64       	R0 += 0x1;		/* (  1) */
 10086b0:	e8 b0       	[P5 + 0xc] = R0;
 10086b2:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x24e8(9448) */
 10086b6:	00 e1 ac 26 	R0.L = 0x26ac;		/* (9900)	R0=0x26ac <_sm_persistent_er>(9900) */
 10086ba:	23 21       	JUMP.S 0x1008900 <_sm_run+0x9d8>;
 10086bc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 10086c0:	0a e1 0c 26 	P2.L = 0x260c;		/* (9740)	P2=0x260c <_sm_aes128_state> */
 10086c4:	10 91       	R0 = [P2];
 10086c6:	08 0c       	CC = R0 == 0x1;
 10086c8:	9e 19       	IF CC JUMP 0x1008a04 <_sm_run+0xadc>;
 10086ca:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10026ac(16787116) */
 10086ce:	00 e1 5c 9d 	R0.L = 0x9d5c;		/* (-25252)	R0=0x1009d5c(16817500) */
 10086d2:	00 e3 73 34 	CALL 0x100efb8 <_puts>;
 10086d6:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x9d5c(40284) */
 10086da:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 10086dc:	00 e1 36 25 	R0.L = 0x2536;		/* (9526)	R0=0x2536(9526) */
 10086e0:	00 e3 9e 2d 	CALL 0x100e21c <_printf_buf>;
 10086e4:	a0 e5 8e 00 	R0 = B[P4 + 0x8e] (X);
 10086e8:	b0 e6 0c 00 	B[SP + 0xc] = R0;
 10086ec:	a0 e5 8f 00 	R0 = B[P4 + 0x8f] (X);
 10086f0:	b0 e6 10 00 	B[SP + 0x10] = R0;
 10086f4:	7f 30       	R7 = FP;
 10086f6:	c7 66       	R7 += -0x28;		/* (-40) */
 10086f8:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x2536(9526) */
 10086fc:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x10( 16) */
 1008700:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x250f(9487) */
 1008704:	00 e1 36 25 	R0.L = 0x2536;		/* (9526)	R0=0x2536(9526) */
 1008708:	77 b1       	[SP + 0x14] = R7;
 100870a:	01 e1 08 25 	R1.L = 0x2508;		/* (9480)	R1=0x2508(9480) */
 100870e:	02 e1 0f 25 	R2.L = 0x250f;		/* (9487)	R2=0x250f(9487) */
 1008712:	ff e3 4d fb 	CALL 0x1007dac <_sm_c1_t1>;
 1008716:	07 30       	R0 = R7;
 1008718:	4e 20       	JUMP.S 0x10087b4 <_sm_run+0x88c>;
 100871a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x260c <_sm_aes128_state> */
 100871e:	0a e1 0c 26 	P2.L = 0x260c;		/* (9740)	P2=0x260c <_sm_aes128_state> */
 1008722:	10 91       	R0 = [P2];
 1008724:	08 0c       	CC = R0 == 0x1;
 1008726:	6f 19       	IF CC JUMP 0x1008a04 <_sm_run+0xadc>;
 1008728:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1002536(16786742) */
 100872c:	00 e1 74 9d 	R0.L = 0x9d74;		/* (-25228)	R0=0x1009d74(16817524) */
 1008730:	00 e3 44 34 	CALL 0x100efb8 <_puts>;
 1008734:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x9d74(40308) */
 1008738:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 100873a:	00 e1 16 25 	R0.L = 0x2516;		/* (9494)	R0=0x2516(9494) */
 100873e:	00 e3 6f 2d 	CALL 0x100e21c <_printf_buf>;
 1008742:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x2516(9494) */
 1008746:	39 60       	R1 = 0x7 (X);		/*		R1=0x7(  7) */
 1008748:	00 e1 08 25 	R0.L = 0x2508;		/* (9480)	R0=0x2508(9480) */
 100874c:	00 e3 68 2d 	CALL 0x100e21c <_printf_buf>;
 1008750:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x2508(9480) */
 1008754:	39 60       	R1 = 0x7 (X);		/*		R1=0x7(  7) */
 1008756:	00 e1 0f 25 	R0.L = 0x250f;		/* (9487)	R0=0x250f(9487) */
 100875a:	00 e3 61 2d 	CALL 0x100e21c <_printf_buf>;
 100875e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100250f(16786703) */
 1008762:	a1 e4 8e 00 	R1 = B[P4 + 0x8e] (Z);
 1008766:	a2 e4 8f 00 	R2 = B[P4 + 0x8f] (Z);
 100876a:	00 e1 90 9d 	R0.L = 0x9d90;		/* (-25200)	R0=0x1009d90(16817552) */
 100876e:	00 e3 09 34 	CALL 0x100ef80 <_printf>;
 1008772:	a0 e5 8e 00 	R0 = B[P4 + 0x8e] (X);
 1008776:	b0 e6 0c 00 	B[SP + 0xc] = R0;
 100877a:	a0 e5 8f 00 	R0 = B[P4 + 0x8f] (X);
 100877e:	b0 e6 10 00 	B[SP + 0x10] = R0;
 1008782:	7f 30       	R7 = FP;
 1008784:	c7 66       	R7 += -0x28;		/* (-40) */
 1008786:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x9d90(40336) */
 100878a:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x7(  7) */
 100878e:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x250f(9487) */
 1008792:	00 e1 16 25 	R0.L = 0x2516;		/* (9494)	R0=0x2516(9494) */
 1008796:	01 e1 08 25 	R1.L = 0x2508;		/* (9480)	R1=0x2508(9480) */
 100879a:	02 e1 0f 25 	R2.L = 0x250f;		/* (9487)	R2=0x250f(9487) */
 100879e:	77 b1       	[SP + 0x14] = R7;
 10087a0:	ff e3 06 fb 	CALL 0x1007dac <_sm_c1_t1>;
 10087a4:	07 30       	R0 = R7;
 10087a6:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 10087a8:	00 e3 3a 2d 	CALL 0x100e21c <_printf_buf>;
 10087ac:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x2516(9494) */
 10087b0:	00 e1 e8 24 	R0.L = 0x24e8;		/* (9448)	R0=0x24e8(9448) */
 10087b4:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 10087b6:	00 e3 33 2d 	CALL 0x100e21c <_printf_buf>;
 10087ba:	e8 a0       	R0 = [P5 + 0xc];
 10087bc:	08 64       	R0 += 0x1;		/* (  1) */
 10087be:	e8 b0       	[P5 + 0xc] = R0;
 10087c0:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x24e8(9448) */
 10087c4:	00 e1 e8 24 	R0.L = 0x24e8;		/* (9448)	R0=0x24e8(9448) */
 10087c8:	0f 30       	R1 = R7;
 10087ca:	2a 20       	JUMP.S 0x100881e <_sm_run+0x8f6>;
 10087cc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x260c <_sm_aes128_state> */
 10087d0:	0a e1 0c 26 	P2.L = 0x260c;		/* (9740)	P2=0x260c <_sm_aes128_state> */
 10087d4:	10 91       	R0 = [P2];
 10087d6:	08 0c       	CC = R0 == 0x1;
 10087d8:	16 1d       	IF CC JUMP 0x1008a04 <_sm_run+0xadc> (BP);
 10087da:	57 30       	R2 = FP;
 10087dc:	c2 66       	R2 += -0x28;		/* (-40) */
 10087de:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 10087e2:	00 0c       	CC = R0 == 0x0;
 10087e4:	0a 1c       	IF CC JUMP 0x10087f8 <_sm_run+0x8d0> (BP);
 10087e6:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x24e8(9448) */
 10087ea:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x10( 16) */
 10087ee:	00 e1 16 25 	R0.L = 0x2516;		/* (9494)	R0=0x2516(9494) */
 10087f2:	01 e1 36 25 	R1.L = 0x2536;		/* (9526)	R1=0x2536(9526) */
 10087f6:	09 20       	JUMP.S 0x1008808 <_sm_run+0x8e0>;
 10087f8:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x2516(9494) */
 10087fc:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x2536(9526) */
 1008800:	00 e1 36 25 	R0.L = 0x2536;		/* (9526)	R0=0x2536(9526) */
 1008804:	01 e1 16 25 	R1.L = 0x2516;		/* (9494)	R1=0x2516(9494) */
 1008808:	ff e3 66 f9 	CALL 0x1007ad4 <_sm_s1_r_prime>;
 100880c:	e8 a0       	R0 = [P5 + 0xc];
 100880e:	08 64       	R0 += 0x1;		/* (  1) */
 1008810:	e8 b0       	[P5 + 0xc] = R0;
 1008812:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x2536(9526) */
 1008816:	4f 30       	R1 = FP;
 1008818:	00 e1 e8 24 	R0.L = 0x24e8;		/* (9448)	R0=0x24e8(9448) */
 100881c:	c1 66       	R1 += -0x28;		/* (-40) */
 100881e:	55 30       	R2 = P5;
 1008820:	ff e3 dc f9 	CALL 0x1007bd8 <_sm_aes128_start>;
 1008824:	f0 20       	JUMP.S 0x1008a04 <_sm_run+0xadc>;
 1008826:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10024e8(16786664) */
 100882a:	00 e1 98 9d 	R0.L = 0x9d98;		/* (-25192)	R0=0x1009d98(16817560) */
 100882e:	00 e3 c5 33 	CALL 0x100efb8 <_puts>;
 1008832:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 1008834:	b8 e6 c4 ff 	B[FP + -0x3c] = R0;
 1008838:	7f 30       	R7 = FP;
 100883a:	2f 66       	R7 += -0x3b;		/* (-59) */
 100883c:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x3(  3) */
 1008840:	00 e1 26 25 	R0.L = 0x2526;		/* (9510)	R0=0x2526(9510) */
 1008844:	0f 30       	R1 = R7;
 1008846:	00 e3 75 0d 	CALL 0x100a330 <_swap128>;
 100884a:	07 30       	R0 = R7;
 100884c:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 100884e:	00 e3 e7 2c 	CALL 0x100e21c <_printf_buf>;
 1008852:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 1008856:	00 0c       	CC = R0 == 0x0;
 1008858:	03 1c       	IF CC JUMP 0x100885e <_sm_run+0x936> (BP);
 100885a:	78 61       	R0 = 0x2f (X);		/*		R0=0x2f( 47) */
 100885c:	02 20       	JUMP.S 0x1008860 <_sm_run+0x938>;
 100885e:	c8 61       	R0 = 0x39 (X);		/*		R0=0x39( 57) */
 1008860:	e8 b0       	[P5 + 0xc] = R0;
 1008862:	b8 20       	JUMP.S 0x10089d2 <_sm_run+0xaaa>;
 1008864:	7f 30       	R7 = FP;
 1008866:	27 66       	R7 += -0x3c;		/* (-60) */
 1008868:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x39( 57) */
 100886c:	00 e1 64 25 	R0.L = 0x2564;		/* (9572)	R0=0x2564(9572) */
 1008870:	0f 30       	R1 = R7;
 1008872:	00 e3 5f 0d 	CALL 0x100a330 <_swap128>;
 1008876:	b0 60       	R0 = 0x16 (X);		/*		R0=0x16( 22) */
 1008878:	23 20       	JUMP.S 0x10088be <_sm_run+0x996>;
 100887a:	7f 30       	R7 = FP;
 100887c:	27 66       	R7 += -0x3c;		/* (-60) */
 100887e:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x16( 22) */
 1008882:	0f 30       	R1 = R7;
 1008884:	00 e1 64 25 	R0.L = 0x2564;		/* (9572)	R0=0x2564(9572) */
 1008888:	00 e3 54 0d 	CALL 0x100a330 <_swap128>;
 100888c:	b0 60       	R0 = 0x16 (X);		/*		R0=0x16( 22) */
 100888e:	e8 b0       	[P5 + 0xc] = R0;
 1008890:	29 95       	R1 = W[P5] (Z);
 1008892:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1008894:	f0 b0       	[SP + 0xc] = R0;
 1008896:	30 b1       	[SP + 0x10] = R0;
 1008898:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 100889c:	77 b1       	[SP + 0x14] = R7;
 100889e:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 10088a0:	00 e1 cc 6f 	R0.L = 0x6fcc;		/* (28620)	R0=0x1006fcc <_hci_le_start_encryption>(16805836) */
 10088a4:	ff e3 9e e9 	CALL 0x1005be0 <_le_hci_send_cmd>;
 10088a8:	b6 20       	JUMP.S 0x1008a14 <_sm_run+0xaec>;
 10088aa:	7f 30       	R7 = FP;
 10088ac:	27 66       	R7 += -0x3c;		/* (-60) */
 10088ae:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x6fcc(28620) */
 10088b2:	00 e1 64 25 	R0.L = 0x2564;		/* (9572)	R0=0x2564(9572) */
 10088b6:	0f 30       	R1 = R7;
 10088b8:	00 e3 3c 0d 	CALL 0x100a330 <_swap128>;
 10088bc:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10088be:	e8 b0       	[P5 + 0xc] = R0;
 10088c0:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 10088c4:	29 95       	R1 = W[P5] (Z);
 10088c6:	17 30       	R2 = R7;
 10088c8:	00 e1 d4 6f 	R0.L = 0x6fd4;		/* (28628)	R0=0x1006fd4 <_hci_le_long_term_key_request_reply>(16805844) */
 10088cc:	ff e3 8a e9 	CALL 0x1005be0 <_le_hci_send_cmd>;
 10088d0:	a2 20       	JUMP.S 0x1008a14 <_sm_run+0xaec>;
 10088d2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x260c <_sm_aes128_state> */
 10088d6:	0a e1 0c 26 	P2.L = 0x260c;		/* (9740)	P2=0x260c <_sm_aes128_state> */
 10088da:	10 91       	R0 = [P2];
 10088dc:	08 0c       	CC = R0 == 0x1;
 10088de:	93 1c       	IF CC JUMP 0x1008a04 <_sm_run+0xadc> (BP);
 10088e0:	7f 30       	R7 = FP;
 10088e2:	c7 66       	R7 += -0x28;		/* (-40) */
 10088e4:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x6fd4(28628) */
 10088e8:	00 e1 7a 25 	R0.L = 0x257a;		/* (9594)	R0=0x257a(9594) */
 10088ec:	0f 30       	R1 = R7;
 10088ee:	ff e3 31 f9 	CALL 0x1007b50 <_sm_dm_r_prime>;
 10088f2:	e8 a0       	R0 = [P5 + 0xc];
 10088f4:	08 64       	R0 += 0x1;		/* (  1) */
 10088f6:	e8 b0       	[P5 + 0xc] = R0;
 10088f8:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x257a(9594) */
 10088fc:	00 e1 41 26 	R0.L = 0x2641;		/* (9793)	R0=0x2641 <_sm_persistent_dhk>(9793) */
 1008900:	0f 30       	R1 = R7;
 1008902:	55 30       	R2 = P5;
 1008904:	62 2b       	JUMP.S 0x1007fc8 <_sm_run+0xa0>;
 1008906:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1002641(16787009) */
 100890a:	61 a1       	R1 = [P4 + 0x14];
 100890c:	00 e1 bc 9d 	R0.L = 0x9dbc;		/* (-25156)	R0=0x1009dbc(16817596) */
 1008910:	00 e3 38 33 	CALL 0x100ef80 <_printf>;
 1008914:	4b e1 00 00 	P3.H = 0x0;		/* (  0)	P3=0x90 */
 1008918:	60 a1       	R0 = [P4 + 0x14];
 100891a:	0b e1 c8 24 	P3.L = 0x24c8;		/* (9416)	P3=0x24c8 <_the_setup> */
 100891e:	00 48       	CC = !BITTST (R0, 0x0);		/* bit  0 */
 1008920:	0b 1c       	IF CC JUMP 0x1008936 <_sm_run+0xa0e> (BP);
 1008922:	00 4c       	BITCLR (R0, 0x0);		/* bit  0 */
 1008924:	58 b1       	[P3 + 0x14] = R0;
 1008926:	30 60       	R0 = 0x6 (X);		/*		R0=0x6(  6) */
 1008928:	b8 e6 c4 ff 	B[FP + -0x3c] = R0;
 100892c:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x6(  6) */
 1008930:	00 e1 64 25 	R0.L = 0x2564;		/* (9572)	R0=0x2564(9572) */
 1008934:	4b 20       	JUMP.S 0x10089ca <_sm_run+0xaa2>;
 1008936:	08 48       	CC = !BITTST (R0, 0x1);		/* bit  1 */
 1008938:	1c 1c       	IF CC JUMP 0x1008970 <_sm_run+0xa48> (BP);
 100893a:	08 4c       	BITCLR (R0, 0x1);		/* bit  1 */
 100893c:	58 b1       	[P3 + 0x14] = R0;
 100893e:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 1008940:	7f 30       	R7 = FP;
 1008942:	b8 e6 c4 ff 	B[FP + -0x3c] = R0;
 1008946:	27 66       	R7 += -0x3c;		/* (-60) */
 1008948:	5a e5 58 00 	R2 = W[P3 + 0xb0] (X);
 100894c:	07 30       	R0 = R7;
 100894e:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 1008950:	00 e3 44 0c 	CALL 0x100a1d8 <_bt_store_16>;
 1008954:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x7(  7) */
 1008958:	4f 30       	R1 = FP;
 100895a:	00 e1 7a 25 	R0.L = 0x257a;		/* (9594)	R0=0x257a(9594) */
 100895e:	39 66       	R1 += -0x39;		/* (-57) */
 1008960:	00 e3 e0 0c 	CALL 0x100a320 <_swap64>;
 1008964:	59 60       	R1 = 0xb (X);		/*		R1=0xb( 11) */
 1008966:	28 95       	R0 = W[P5] (Z);
 1008968:	f1 b0       	[SP + 0xc] = R1;
 100896a:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 100896c:	17 30       	R2 = R7;
 100896e:	38 20       	JUMP.S 0x10089de <_sm_run+0xab6>;
 1008970:	10 48       	CC = !BITTST (R0, 0x2);		/* bit  2 */
 1008972:	0b 1c       	IF CC JUMP 0x1008988 <_sm_run+0xa60> (BP);
 1008974:	10 4c       	BITCLR (R0, 0x2);		/* bit  2 */
 1008976:	58 b1       	[P3 + 0x14] = R0;
 1008978:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 100897a:	b8 e6 c4 ff 	B[FP + -0x3c] = R0;
 100897e:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x8 <_att_ir_le_device_db_index>(  8) */
 1008982:	00 e1 31 26 	R0.L = 0x2631;		/* (9777)	R0=0x2631 <_sm_persistent_irk>(9777) */
 1008986:	22 20       	JUMP.S 0x10089ca <_sm_run+0xaa2>;
 1008988:	18 48       	CC = !BITTST (R0, 0x3);		/* bit  3 */
 100898a:	15 1c       	IF CC JUMP 0x10089b4 <_sm_run+0xa8c> (BP);
 100898c:	18 4c       	BITCLR (R0, 0x3);		/* bit  3 */
 100898e:	58 b1       	[P3 + 0x14] = R0;
 1008990:	48 60       	R0 = 0x9 (X);		/*		R0=0x9(  9) */
 1008992:	b8 e6 c4 ff 	B[FP + -0x3c] = R0;
 1008996:	7f 30       	R7 = FP;
 1008998:	a7 67       	R7 += -0xc;		/* (-12) */
 100899a:	47 30       	R0 = FP;
 100899c:	28 66       	R0 += -0x3b;		/* (-59) */
 100899e:	0f 30       	R1 = R7;
 10089a0:	ff e3 de e7 	CALL 0x100595c <_hci_le_advertisement_address>;
 10089a4:	47 30       	R0 = FP;
 10089a6:	30 66       	R0 += -0x3a;		/* (-58) */
 10089a8:	0f 30       	R1 = R7;
 10089aa:	00 e3 7b 0c 	CALL 0x100a2a0 <_bt_flip_addr>;
 10089ae:	28 95       	R0 = W[P5] (Z);
 10089b0:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 10089b2:	12 20       	JUMP.S 0x10089d6 <_sm_run+0xaae>;
 10089b4:	20 48       	CC = !BITTST (R0, 0x4);		/* bit  4 */
 10089b6:	1a 1c       	IF CC JUMP 0x10089ea <_sm_run+0xac2> (BP);
 10089b8:	20 4c       	BITCLR (R0, 0x4);		/* bit  4 */
 10089ba:	58 b1       	[P3 + 0x14] = R0;
 10089bc:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 10089be:	b8 e6 c4 ff 	B[FP + -0x3c] = R0;
 10089c2:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0xa( 10) */
 10089c6:	00 e1 92 25 	R0.L = 0x2592;		/* (9618)	R0=0x2592(9618) */
 10089ca:	4f 30       	R1 = FP;
 10089cc:	29 66       	R1 += -0x3b;		/* (-59) */
 10089ce:	00 e3 b1 0c 	CALL 0x100a330 <_swap128>;
 10089d2:	28 95       	R0 = W[P5] (Z);
 10089d4:	89 60       	R1 = 0x11 (X);		/*		R1=0x11( 17) */
 10089d6:	f1 b0       	[SP + 0xc] = R1;
 10089d8:	57 30       	R2 = FP;
 10089da:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 10089dc:	22 66       	R2 += -0x3c;		/* (-60) */
 10089de:	ff e3 4b f4 	CALL 0x1007274 <_le_l2cap_send_connectionless>;
 10089e2:	45 30       	R0 = P5;
 10089e4:	ff e3 c0 f9 	CALL 0x1007d64 <_sm_timeout_reset>;
 10089e8:	16 20       	JUMP.S 0x1008a14 <_sm_run+0xaec>;
 10089ea:	00 00       	NOP;
 10089ec:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 10089f0:	00 0c       	CC = R0 == 0x0;
 10089f2:	04 18       	IF CC JUMP 0x10089fa <_sm_run+0xad2>;
 10089f4:	10 61       	R0 = 0x22 (X);		/*		R0=0x22( 34) */
 10089f6:	e8 b0       	[P5 + 0xc] = R0;
 10089f8:	06 20       	JUMP.S 0x1008a04 <_sm_run+0xadc>;
 10089fa:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10089fc:	e8 b0       	[P5 + 0xc] = R0;
 10089fe:	28 95       	R0 = W[P5] (Z);
 1008a00:	ff e3 c6 f8 	CALL 0x1007b8c <_sm_done_for_handle>;
 1008a04:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x260c <_sm_aes128_state> */
 1008a08:	0a e1 1c 26 	P2.L = 0x261c;		/* (9756)	P2=0x261c <_sm_active_connection> */
 1008a0c:	10 95       	R0 = W[P2] (Z);
 1008a0e:	00 0c       	CC = R0 == 0x0;
 1008a10:	02 10       	IF !CC JUMP 0x1008a14 <_sm_run+0xaec>;
 1008a12:	96 2c       	JUMP.S 0x100833e <_sm_run+0x416>;
 1008a14:	01 e8 00 00 	UNLINK;
 1008a18:	a3 05       	(R7:4, P5:3) = [SP++];
 1008a1a:	10 00       	RTS;

01008a1c <_sm_timeout_handler>:
 1008a1c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1008a20:	ff e3 8a f6 	CALL 0x1007734 <_linked_item_get_user>;
 1008a24:	10 32       	P2 = R0;
 1008a26:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 1008a28:	d0 b0       	[P2 + 0xc] = R0;
 1008a2a:	10 95       	R0 = W[P2] (Z);
 1008a2c:	ff e3 b0 f8 	CALL 0x1007b8c <_sm_done_for_handle>;
 1008a30:	01 e8 00 00 	UNLINK;
 1008a34:	ff e2 7a fa 	JUMP.L 0x1007f28 <_sm_run>;

01008a38 <_sm_shift_left_by_one_bit_inplace.clone.4>:
 1008a38:	10 32       	P2 = R0;
 1008a3a:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1008a3e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1008a40:	81 68       	P1 = 0x10 (X);		/*		P1=0x10( 16) */
 1008a42:	7a 6c       	P2 += 0xf;		/* ( 15) */
 1008a44:	b3 e0 09 10 	LSETUP(0x1008a4a <_sm_shift_left_by_one_bit_inplace.clone.4+0x12>, 0x1008a56 <_sm_shift_left_by_one_bit_inplace.clone.4+0x1e>) LC1 = P1;
 1008a48:	02 20       	JUMP.S 0x1008a4c <_sm_shift_left_by_one_bit_inplace.clone.4+0x14>;
 1008a4a:	02 30       	R0 = R2;
 1008a4c:	11 99       	R1 = B[P2] (Z);
 1008a4e:	82 c6 c9 85 	R2 = R1 >> 0x7;
 1008a52:	09 4f       	R1 <<= 0x1;
 1008a54:	08 56       	R0 = R0 | R1;
 1008a56:	90 9a       	B[P2--] = R0;
 1008a58:	01 e8 00 00 	UNLINK;
 1008a5c:	10 00       	RTS;
	...

01008a60 <_sm_packet_handler>:
 1008a60:	e3 05       	[--SP] = (R7:4, P5:3);
 1008a62:	38 30       	R7 = R0;
 1008a64:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1008a68:	00 e8 14 00 	LINK 0x50;		/* (80) */
 1008a6c:	31 30       	R6 = R1;
 1008a6e:	2a 32       	P5 = R2;
 1008a70:	00 e1 d8 9d 	R0.L = 0x9dd8;		/* (-25128)	R0=0x1009dd8(16817624) */
 1008a74:	00 e3 a2 32 	CALL 0x100efb8 <_puts>;
 1008a78:	7f 43       	R7 = R7.B (Z);
 1008a7a:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1008a7c:	07 08       	CC = R7 == R0;
 1008a7e:	02 18       	IF CC JUMP 0x1008a82 <_sm_packet_handler+0x22>;
 1008a80:	1b 25       	JUMP.S 0x10094b6 <_sm_packet_handler+0xa56>;
 1008a82:	28 99       	R0 = B[P5] (Z);
 1008a84:	71 60       	R1 = 0xe (X);		/*		R1=0xe( 14) */
 1008a86:	08 08       	CC = R0 == R1;
 1008a88:	23 19       	IF CC JUMP 0x1008cce <_sm_packet_handler+0x26e>;
 1008a8a:	08 0a       	CC = R0 <= R1 (IU);
 1008a8c:	09 14       	IF !CC JUMP 0x1008a9e <_sm_packet_handler+0x3e> (BP);
 1008a8e:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 1008a90:	10 08       	CC = R0 == R2;
 1008a92:	fa 18       	IF CC JUMP 0x1008c86 <_sm_packet_handler+0x226>;
 1008a94:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 1008a96:	08 08       	CC = R0 == R1;
 1008a98:	02 18       	IF CC JUMP 0x1008a9c <_sm_packet_handler+0x3c>;
 1008a9a:	ff 24       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008a9c:	c4 20       	JUMP.S 0x1008c24 <_sm_packet_handler+0x1c4>;
 1008a9e:	f2 61       	R2 = 0x3e (X);		/*		R2=0x3e( 62) */
 1008aa0:	10 08       	CC = R0 == R2;
 1008aa2:	25 18       	IF CC JUMP 0x1008aec <_sm_packet_handler+0x8c>;
 1008aa4:	21 e1 60 00 	R1 = 0x60 (X);		/*		R1=0x60( 96) */
 1008aa8:	08 08       	CC = R0 == R1;
 1008aaa:	02 18       	IF CC JUMP 0x1008aae <_sm_packet_handler+0x4e>;
 1008aac:	f6 24       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008aae:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 1008ab2:	10 0c       	CC = R0 == 0x2;
 1008ab4:	02 18       	IF CC JUMP 0x1008ab8 <_sm_packet_handler+0x58>;
 1008ab6:	f1 24       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008ab8:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000004(16777220) */
 1008abc:	00 e1 e4 9d 	R0.L = 0x9de4;		/* (-25116)	R0=0x1009de4(16817636) */
 1008ac0:	00 e3 7c 32 	CALL 0x100efb8 <_puts>;
 1008ac4:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x261c <_sm_active_connection> */
 1008ac8:	0a e1 1e 26 	P2.L = 0x261e;		/* (9758)	P2=0x261e <_sm_persistent_irk_ready> */
 1008acc:	10 99       	R0 = B[P2] (Z);
 1008ace:	00 0c       	CC = R0 == 0x0;
 1008ad0:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1008ad2:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 1008ad4:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x261e <_sm_persistent_irk_ready> */
 1008ad8:	0a e1 04 26 	P2.L = 0x2604;		/* (9732)	P2=0x2604 <_dkg_state> */
 1008adc:	08 07       	IF CC R1 = R0;
 1008ade:	11 93       	[P2] = R1;
 1008ae0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2604 <_dkg_state> */
 1008ae4:	0a e1 08 26 	P2.L = 0x2608;		/* (9736)	P2=0x2608 <_rau_state> */
 1008ae8:	10 93       	[P2] = R0;
 1008aea:	8c 26       	JUMP.S 0x1009802 <_sm_packet_handler+0xda2>;
 1008aec:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 1008af0:	08 0c       	CC = R0 == 0x1;
 1008af2:	06 18       	IF CC JUMP 0x1008afe <_sm_packet_handler+0x9e>;
 1008af4:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 1008af6:	10 08       	CC = R0 == R2;
 1008af8:	02 18       	IF CC JUMP 0x1008afc <_sm_packet_handler+0x9c>;
 1008afa:	cf 24       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008afc:	5b 20       	JUMP.S 0x1008bb2 <_sm_packet_handler+0x152>;
 1008afe:	79 e4 18 00 	R1 = W[FP + 0x30] (Z);
 1008b02:	45 30       	R0 = P5;
 1008b04:	00 e3 8c 2b 	CALL 0x100e21c <_printf_buf>;
 1008b08:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000001(16777217) */
 1008b0c:	00 e1 f4 9d 	R0.L = 0x9df4;		/* (-25100)	R0=0x1009df4(16817652) */
 1008b10:	00 e3 54 32 	CALL 0x100efb8 <_puts>;
 1008b14:	a8 e4 03 00 	R0 = B[P5 + 0x3] (Z);
 1008b18:	00 0c       	CC = R0 == 0x0;
 1008b1a:	02 18       	IF CC JUMP 0x1008b1e <_sm_packet_handler+0xbe>;
 1008b1c:	78 26       	JUMP.S 0x100980c <_sm_packet_handler+0xdac>;
 1008b1e:	a8 e4 05 00 	R0 = B[P5 + 0x5] (Z);
 1008b22:	a9 e4 04 00 	R1 = B[P5 + 0x4] (Z);
 1008b26:	40 4f       	R0 <<= 0x8;
 1008b28:	08 56       	R0 = R0 | R1;
 1008b2a:	38 30       	R7 = R0;
 1008b2c:	ff e3 12 f7 	CALL 0x1007950 <_sm_get_connection_for_handle>;
 1008b30:	20 32       	P4 = R0;
 1008b32:	44 0c       	CC = P4 == 0x0;
 1008b34:	02 14       	IF !CC JUMP 0x1008b38 <_sm_packet_handler+0xd8> (BP);
 1008b36:	b1 24       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008b38:	27 97       	W[P4] = R7;
 1008b3a:	4d 30       	R1 = P5;
 1008b3c:	41 64       	R1 += 0x8;		/* (  8) */
 1008b3e:	a8 e5 06 00 	R0 = B[P5 + 0x6] (X);
 1008b42:	a0 e6 02 00 	B[P4 + 0x2] = R0;
 1008b46:	a8 e5 07 00 	R0 = B[P5 + 0x7] (X);
 1008b4a:	a0 e6 09 00 	B[P4 + 0x9] = R0;
 1008b4e:	44 30       	R0 = P4;
 1008b50:	18 64       	R0 += 0x3;		/* (  3) */
 1008b52:	00 e3 a7 0b 	CALL 0x100a2a0 <_bt_flip_addr>;
 1008b56:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1008b58:	a0 e6 14 00 	B[P4 + 0x14] = R0;
 1008b5c:	a0 e6 15 00 	B[P4 + 0x15] = R0;
 1008b60:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1008b62:	20 b2       	[P4 + 0x20] = R0;
 1008b64:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 1008b66:	20 b3       	[P4 + 0x30] = R0;
 1008b68:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1008b6a:	20 b1       	[P4 + 0x10] = R0;
 1008b6c:	a0 e4 02 00 	R0 = B[P4 + 0x2] (Z);
 1008b70:	00 0c       	CC = R0 == 0x0;
 1008b72:	18 1c       	IF CC JUMP 0x1008ba2 <_sm_packet_handler+0x142> (BP);
 1008b74:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000001(16777217) */
 1008b78:	00 e1 04 9e 	R0.L = 0x9e04;		/* (-25084)	R0=0x1009e04(16817668) */
 1008b7c:	00 e3 1e 32 	CALL 0x100efb8 <_puts>;
 1008b80:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2608 <_rau_state> */
 1008b84:	0a e1 1f 26 	P2.L = 0x261f;		/* (9759)	P2=0x261f <_sm_slave_request_security> */
 1008b88:	10 99       	R0 = B[P2] (Z);
 1008b8a:	00 0c       	CC = R0 == 0x0;
 1008b8c:	09 1c       	IF CC JUMP 0x1008b9e <_sm_packet_handler+0x13e> (BP);
 1008b8e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1009e04(16817668) */
 1008b92:	00 e1 0c 9e 	R0.L = 0x9e0c;		/* (-25076)	R0=0x1009e0c(16817676) */
 1008b96:	00 e3 11 32 	CALL 0x100efb8 <_puts>;
 1008b9a:	40 61       	R0 = 0x28 (X);		/*		R0=0x28( 40) */
 1008b9c:	7d 24       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 1008b9e:	58 61       	R0 = 0x2b (X);		/*		R0=0x2b( 43) */
 1008ba0:	7b 24       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 1008ba2:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100002b(16777259) */
 1008ba6:	00 e1 1c 9e 	R0.L = 0x9e1c;		/* (-25060)	R0=0x1009e1c(16817692) */
 1008baa:	00 e3 07 32 	CALL 0x100efb8 <_puts>;
 1008bae:	90 61       	R0 = 0x32 (X);		/*		R0=0x32( 50) */
 1008bb0:	73 24       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 1008bb2:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000032(16777266) */
 1008bb6:	00 e1 24 9e 	R0.L = 0x9e24;		/* (-25052)	R0=0x1009e24(16817700) */
 1008bba:	00 e3 ff 31 	CALL 0x100efb8 <_puts>;
 1008bbe:	a8 e4 04 00 	R0 = B[P5 + 0x4] (Z);
 1008bc2:	a9 e4 03 00 	R1 = B[P5 + 0x3] (Z);
 1008bc6:	40 4f       	R0 <<= 0x8;
 1008bc8:	08 56       	R0 = R0 | R1;
 1008bca:	ff e3 c3 f6 	CALL 0x1007950 <_sm_get_connection_for_handle>;
 1008bce:	20 32       	P4 = R0;
 1008bd0:	44 0c       	CC = P4 == 0x0;
 1008bd2:	02 14       	IF !CC JUMP 0x1008bd6 <_sm_packet_handler+0x176> (BP);
 1008bd4:	62 24       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008bd6:	81 61       	R1 = 0x30 (X);		/*		R1=0x30( 48) */
 1008bd8:	e0 a0       	R0 = [P4 + 0xc];
 1008bda:	08 08       	CC = R0 == R1;
 1008bdc:	02 14       	IF !CC JUMP 0x1008be0 <_sm_packet_handler+0x180> (BP);
 1008bde:	fb 22       	JUMP.S 0x10091d4 <_sm_packet_handler+0x774>;
 1008be0:	a8 e4 0e 00 	R0 = B[P5 + 0xe] (Z);
 1008be4:	40 4f       	R0 <<= 0x8;
 1008be6:	a9 e4 0d 00 	R1 = B[P5 + 0xd] (Z);
 1008bea:	08 56       	R0 = R0 | R1;
 1008bec:	00 0c       	CC = R0 == 0x0;
 1008bee:	0b 10       	IF !CC JUMP 0x1008c04 <_sm_packet_handler+0x1a4>;
 1008bf0:	4d 32       	P1 = P5;
 1008bf2:	29 6c       	P1 += 0x5;		/* (  5) */
 1008bf4:	42 68       	P2 = 0x8 (X);		/*		P2=0x8(  8) */
 1008bf6:	b2 e0 05 20 	LSETUP(0x1008bfa <_sm_packet_handler+0x19a>, 0x1008c00 <_sm_packet_handler+0x1a0>) LC1 = P2;
 1008bfa:	08 98       	R0 = B[P1++] (Z);
 1008bfc:	00 0c       	CC = R0 == 0x0;
 1008bfe:	03 10       	IF !CC JUMP 0x1008c04 <_sm_packet_handler+0x1a4>;
 1008c00:	00 00       	NOP;
 1008c02:	03 26       	JUMP.S 0x1009808 <_sm_packet_handler+0xda8>;
 1008c04:	45 30       	R0 = P5;
 1008c06:	4c 30       	R1 = P4;
 1008c08:	28 64       	R0 += 0x5;		/* (  5) */
 1008c0a:	31 65       	R1 += 0x26;		/* ( 38) */
 1008c0c:	00 e3 8a 0b 	CALL 0x100a320 <_swap64>;
 1008c10:	a8 e4 0e 00 	R0 = B[P5 + 0xe] (Z);
 1008c14:	a9 e4 0d 00 	R1 = B[P5 + 0xd] (Z);
 1008c18:	40 4f       	R0 <<= 0x8;
 1008c1a:	08 56       	R0 = R0 | R1;
 1008c1c:	60 e6 12 00 	W[P4 + 0x24] = R0;
 1008c20:	48 61       	R0 = 0x29 (X);		/*		R0=0x29( 41) */
 1008c22:	3a 24       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 1008c24:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000029(16777257) */
 1008c28:	00 e1 44 9e 	R0.L = 0x9e44;		/* (-25020)	R0=0x1009e44(16817732) */
 1008c2c:	00 e3 c6 31 	CALL 0x100efb8 <_puts>;
 1008c30:	a8 e4 04 00 	R0 = B[P5 + 0x4] (Z);
 1008c34:	a9 e4 03 00 	R1 = B[P5 + 0x3] (Z);
 1008c38:	40 4f       	R0 <<= 0x8;
 1008c3a:	08 56       	R0 = R0 | R1;
 1008c3c:	ff e3 8a f6 	CALL 0x1007950 <_sm_get_connection_for_handle>;
 1008c40:	10 32       	P2 = R0;
 1008c42:	42 0c       	CC = P2 == 0x0;
 1008c44:	02 14       	IF !CC JUMP 0x1008c48 <_sm_packet_handler+0x1e8> (BP);
 1008c46:	29 24       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008c48:	a8 e5 05 00 	R0 = B[P5 + 0x5] (X);
 1008c4c:	90 e6 14 00 	B[P2 + 0x14] = R0;
 1008c50:	40 43       	R0 = R0.B (Z);
 1008c52:	00 0c       	CC = R0 == 0x0;
 1008c54:	02 10       	IF !CC JUMP 0x1008c58 <_sm_packet_handler+0x1f8>;
 1008c56:	21 24       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008c58:	d0 a0       	R0 = [P2 + 0xc];
 1008c5a:	b2 60       	R2 = 0x16 (X);		/*		R2=0x16( 22) */
 1008c5c:	10 08       	CC = R0 == R2;
 1008c5e:	0b 18       	IF CC JUMP 0x1008c74 <_sm_packet_handler+0x214>;
 1008c60:	a9 61       	R1 = 0x35 (X);		/*		R1=0x35( 53) */
 1008c62:	08 08       	CC = R0 == R1;
 1008c64:	02 18       	IF CC JUMP 0x1008c68 <_sm_packet_handler+0x208>;
 1008c66:	19 24       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008c68:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1008c6a:	d0 b0       	[P2 + 0xc] = R0;
 1008c6c:	10 95       	R0 = W[P2] (Z);
 1008c6e:	ff e3 8f f7 	CALL 0x1007b8c <_sm_done_for_handle>;
 1008c72:	13 24       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008c74:	90 e4 02 00 	R0 = B[P2 + 0x2] (Z);
 1008c78:	00 0c       	CC = R0 == 0x0;
 1008c7a:	03 1c       	IF CC JUMP 0x1008c80 <_sm_packet_handler+0x220> (BP);
 1008c7c:	b8 60       	R0 = 0x17 (X);		/*		R0=0x17( 23) */
 1008c7e:	02 20       	JUMP.S 0x1008c82 <_sm_packet_handler+0x222>;
 1008c80:	10 61       	R0 = 0x22 (X);		/*		R0=0x22( 34) */
 1008c82:	d0 b0       	[P2 + 0xc] = R0;
 1008c84:	0a 24       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008c86:	af e4 04 00 	R7 = B[P5 + 0x4] (Z);
 1008c8a:	a8 e4 03 00 	R0 = B[P5 + 0x3] (Z);
 1008c8e:	47 4f       	R7 <<= 0x8;
 1008c90:	c7 57       	R7 = R7 | R0;
 1008c92:	07 30       	R0 = R7;
 1008c94:	ff e3 7c f7 	CALL 0x1007b8c <_sm_done_for_handle>;
 1008c98:	07 30       	R0 = R7;
 1008c9a:	ff e3 5b f6 	CALL 0x1007950 <_sm_get_connection_for_handle>;
 1008c9e:	20 32       	P4 = R0;
 1008ca0:	44 0c       	CC = P4 == 0x0;
 1008ca2:	02 14       	IF !CC JUMP 0x1008ca6 <_sm_packet_handler+0x246> (BP);
 1008ca4:	fa 23       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008ca6:	a0 e4 02 00 	R0 = B[P4 + 0x2] (Z);
 1008caa:	00 0c       	CC = R0 == 0x0;
 1008cac:	0d 14       	IF !CC JUMP 0x1008cc6 <_sm_packet_handler+0x266> (BP);
 1008cae:	e0 a0       	R0 = [P4 + 0xc];
 1008cb0:	aa 61       	R2 = 0x35 (X);		/*		R2=0x35( 53) */
 1008cb2:	10 08       	CC = R0 == R2;
 1008cb4:	09 14       	IF !CC JUMP 0x1008cc6 <_sm_packet_handler+0x266> (BP);
 1008cb6:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 1008cba:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 1008cbc:	08 08       	CC = R0 == R1;
 1008cbe:	04 14       	IF !CC JUMP 0x1008cc6 <_sm_packet_handler+0x266> (BP);
 1008cc0:	20 a3       	R0 = [P4 + 0x30];
 1008cc2:	ff e3 59 f3 	CALL 0x1007374 <_le_device_db_remove>;
 1008cc6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1008cc8:	e0 b0       	[P4 + 0xc] = R0;
 1008cca:	20 97       	W[P4] = R0;
 1008ccc:	e6 23       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008cce:	a8 e4 04 00 	R0 = B[P5 + 0x4] (Z);
 1008cd2:	a9 e4 03 00 	R1 = B[P5 + 0x3] (Z);
 1008cd6:	40 4f       	R0 <<= 0x8;
 1008cd8:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1000008 */
 1008cdc:	08 56       	R0 = R0 | R1;
 1008cde:	0a e1 bc 6f 	P2.L = 0x6fbc;		/* (28604)	P2=0x1006fbc <_hci_le_encrypt> */
 1008ce2:	11 95       	R1 = W[P2] (Z);
 1008ce4:	08 08       	CC = R0 == R1;
 1008ce6:	02 18       	IF CC JUMP 0x1008cea <_sm_packet_handler+0x28a>;
 1008ce8:	2e 23       	JUMP.S 0x1009344 <_sm_packet_handler+0x8e4>;
 1008cea:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x6fbc */
 1008cee:	0a e1 0c 26 	P2.L = 0x260c;		/* (9740)	P2=0x260c <_sm_aes128_state> */
 1008cf2:	04 68       	P4 = 0x0 (X);		/*		P4=0x0(  0) */
 1008cf4:	54 93       	[P2] = P4;
 1008cf6:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x260c <_sm_aes128_state> */
 1008cfa:	0a e1 14 26 	P2.L = 0x2614;		/* (9748)	P2=0x2614 <_sm_central_ah_calculation_active> */
 1008cfe:	75 30       	R6 = P5;
 1008d00:	10 91       	R0 = [P2];
 1008d02:	36 64       	R6 += 0x6;		/* (  6) */
 1008d04:	00 0c       	CC = R0 == 0x0;
 1008d06:	37 1c       	IF CC JUMP 0x1008d74 <_sm_packet_handler+0x314> (BP);
 1008d08:	7f 30       	R7 = FP;
 1008d0a:	87 67       	R7 += -0x10;		/* (-16) */
 1008d0c:	54 93       	[P2] = P4;
 1008d0e:	06 30       	R0 = R6;
 1008d10:	0f 30       	R1 = R7;
 1008d12:	00 e3 f7 0a 	CALL 0x100a300 <_swap24>;
 1008d16:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x0 <data_addr>(  0) */
 1008d1a:	00 e1 23 26 	R0.L = 0x2623;		/* (9763)	R0=0x2623(9763) */
 1008d1e:	0f 30       	R1 = R7;
 1008d20:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 1008d22:	00 e3 b3 37 	CALL 0x100fc88 <_memcmp>;
 1008d26:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2614 <_sm_central_ah_calculation_active> */
 1008d2a:	00 0c       	CC = R0 == 0x0;
 1008d2c:	0a e1 10 26 	P2.L = 0x2610;		/* (9744)	P2=0x2610 <_sm_central_device_test> */
 1008d30:	1f 14       	IF !CC JUMP 0x1008d6e <_sm_packet_handler+0x30e> (BP);
 1008d32:	10 91       	R0 = [P2];
 1008d34:	f9 63       	R1 = -0x1 (X);		/*		R1=0xffffffff( -1) */
 1008d36:	11 93       	[P2] = R1;
 1008d38:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x10 */
 1008d3c:	09 e1 28 26 	P1.L = 0x2628;		/* (9768)	P1=0x2628 <_sm_central_device_matched> */
 1008d40:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2610 <_sm_central_device_test> */
 1008d44:	08 93       	[P1] = R0;
 1008d46:	0a e1 2c 26 	P2.L = 0x262c;		/* (9772)	P2=0x262c <_sm_csrk_connection_source> */
 1008d4a:	51 91       	P1 = [P2];
 1008d4c:	54 93       	[P2] = P4;
 1008d4e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x262c <_sm_csrk_connection_source> */
 1008d52:	0a e1 30 26 	P2.L = 0x2630;		/* (9776)	P2=0x2630 <_sm_central_device_addr_type> */
 1008d56:	0c bd       	[P1 + 0x10] = P4;
 1008d58:	30 b6       	W[SP + 0x10] = R0;
 1008d5a:	f4 bc       	[SP + 0xc] = P4;
 1008d5c:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x3(  3) */
 1008d60:	c0 62       	R0 = -0x28 (X);		/*		R0=0xffffffd8(-40) */
 1008d62:	51 99       	R1 = B[P2] (X);
 1008d64:	02 e1 20 26 	R2.L = 0x2620;		/* (9760)	R2=0x2620 <_sm_central_device_address>(9760) */
 1008d68:	ff e3 7e f5 	CALL 0x1007864 <_sm_notify_client>;
 1008d6c:	96 23       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008d6e:	10 91       	R0 = [P2];
 1008d70:	08 64       	R0 += 0x1;		/* (  1) */
 1008d72:	53 21       	JUMP.S 0x1009018 <_sm_packet_handler+0x5b8>;
 1008d74:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2630 <_sm_central_device_addr_type> */
 1008d78:	0a e1 04 26 	P2.L = 0x2604;		/* (9732)	P2=0x2604 <_dkg_state> */
 1008d7c:	10 91       	R0 = [P2];
 1008d7e:	10 0c       	CC = R0 == 0x2;
 1008d80:	05 18       	IF CC JUMP 0x1008d8a <_sm_packet_handler+0x32a>;
 1008d82:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 1008d84:	10 08       	CC = R0 == R2;
 1008d86:	5d 14       	IF !CC JUMP 0x1008e40 <_sm_packet_handler+0x3e0> (BP);
 1008d88:	22 20       	JUMP.S 0x1008dcc <_sm_packet_handler+0x36c>;
 1008d8a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100ffd8(16842712) */
 1008d8e:	00 e1 5c 9e 	R0.L = 0x9e5c;		/* (-24996)	R0=0x1009e5c(16817756) */
 1008d92:	00 e3 13 31 	CALL 0x100efb8 <_puts>;
 1008d96:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0xffff(65535) */
 1008d9a:	06 30       	R0 = R6;
 1008d9c:	01 e1 31 26 	R1.L = 0x2631;		/* (9777)	R1=0x2631 <_sm_persistent_irk>(9777) */
 1008da0:	00 e3 c8 0a 	CALL 0x100a330 <_swap128>;
 1008da4:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x9e5c(40540) */
 1008da8:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 1008daa:	00 e1 31 26 	R0.L = 0x2631;		/* (9777)	R0=0x2631 <_sm_persistent_irk>(9777) */
 1008dae:	00 e3 37 2a 	CALL 0x100e21c <_printf_buf>;
 1008db2:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1002631(16786993) */
 1008db6:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x10( 16) */
 1008dba:	00 e1 60 76 	R0.L = 0x7660;		/* (30304)	R0=0x1007660(16807520) */
 1008dbe:	01 e1 31 26 	R1.L = 0x2631;		/* (9777)	R1=0x2631 <_sm_persistent_irk>(9777) */
 1008dc2:	00 e3 e9 0a 	CALL 0x100a394 <_log_key>;
 1008dc6:	ff e3 83 f5 	CALL 0x10078cc <_dkg_next_state>;
 1008dca:	67 23       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008dcc:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1007660(16807520) */
 1008dd0:	00 e1 68 9e 	R0.L = 0x9e68;		/* (-24984)	R0=0x1009e68(16817768) */
 1008dd4:	00 e3 f2 30 	CALL 0x100efb8 <_puts>;
 1008dd8:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x2631 <_sm_persistent_irk>(9777) */
 1008ddc:	06 30       	R0 = R6;
 1008dde:	01 e1 41 26 	R1.L = 0x2641;		/* (9793)	R1=0x2641 <_sm_persistent_dhk>(9793) */
 1008de2:	00 e3 a7 0a 	CALL 0x100a330 <_swap128>;
 1008de6:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x9e68(40552) */
 1008dea:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 1008dec:	00 e1 41 26 	R0.L = 0x2641;		/* (9793)	R0=0x2641 <_sm_persistent_dhk>(9793) */
 1008df0:	00 e3 16 2a 	CALL 0x100e21c <_printf_buf>;
 1008df4:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1002641(16787009) */
 1008df8:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x10( 16) */
 1008dfc:	00 e1 74 9e 	R0.L = 0x9e74;		/* (-24972)	R0=0x1009e74(16817780) */
 1008e00:	01 e1 41 26 	R1.L = 0x2641;		/* (9793)	R1=0x2641 <_sm_persistent_dhk>(9793) */
 1008e04:	00 e3 c8 0a 	CALL 0x100a394 <_log_key>;
 1008e08:	ff e3 62 f5 	CALL 0x10078cc <_dkg_next_state>;
 1008e0c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2604 <_dkg_state> */
 1008e10:	0a e1 f8 25 	P2.L = 0x25f8;		/* (9720)	P2=0x25f8 <_sm_client_packet_handler> */
 1008e14:	52 91       	P2 = [P2];
 1008e16:	42 0c       	CC = P2 == 0x0;
 1008e18:	02 14       	IF !CC JUMP 0x1008e1c <_sm_packet_handler+0x3bc> (BP);
 1008e1a:	3f 23       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008e1c:	20 e1 60 00 	R0 = 0x60 (X);		/*		R0=0x60( 96) */
 1008e20:	b8 e6 f0 ff 	B[FP + -0x10] = R0;
 1008e24:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1008e26:	b8 e6 f1 ff 	B[FP + -0xf] = R0;
 1008e2a:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 1008e2c:	b8 e6 f2 ff 	B[FP + -0xe] = R0;
 1008e30:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 1008e32:	b0 b5       	W[SP + 0xc] = R0;
 1008e34:	57 30       	R2 = FP;
 1008e36:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1008e38:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1008e3a:	82 67       	R2 += -0x10;		/* (-16) */
 1008e3c:	62 00       	CALL (P2);
 1008e3e:	2d 23       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008e40:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x25f8 <_sm_client_packet_handler> */
 1008e44:	0a e1 08 26 	P2.L = 0x2608;		/* (9736)	P2=0x2608 <_rau_state> */
 1008e48:	10 91       	R0 = [P2];
 1008e4a:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 1008e4c:	08 08       	CC = R0 == R1;
 1008e4e:	0b 14       	IF !CC JUMP 0x1008e64 <_sm_packet_handler+0x404> (BP);
 1008e50:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x5(  5) */
 1008e54:	06 30       	R0 = R6;
 1008e56:	01 e1 54 26 	R1.L = 0x2654;		/* (9812)	R1=0x2654(9812) */
 1008e5a:	00 e3 53 0a 	CALL 0x100a300 <_swap24>;
 1008e5e:	ff e3 43 f5 	CALL 0x10078e4 <_rau_next_state>;
 1008e62:	1b 23       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008e64:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x0 <data_addr> */
 1008e68:	0c e1 00 26 	P4.L = 0x2600;		/* (9728)	P4=0x2600 <_sm_cmac_state> */
 1008e6c:	21 91       	R1 = [P4];
 1008e6e:	31 0e       	CC = R1 <= 0x6 (IU);
 1008e70:	e7 14       	IF !CC JUMP 0x100903e <_sm_packet_handler+0x5de> (BP);
 1008e72:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1008e74:	88 40       	R0 <<= R1;
 1008e76:	21 e1 54 00 	R1 = 0x54 (X);		/*		R1=0x54( 84) */
 1008e7a:	08 54       	R0 = R0 & R1;
 1008e7c:	00 0c       	CC = R0 == 0x0;
 1008e7e:	e0 1c       	IF CC JUMP 0x100903e <_sm_packet_handler+0x5de> (BP);
 1008e80:	4f 30       	R1 = FP;
 1008e82:	06 30       	R0 = R6;
 1008e84:	81 67       	R1 += -0x10;		/* (-16) */
 1008e86:	00 e3 55 0a 	CALL 0x100a330 <_swap128>;
 1008e8a:	20 91       	R0 = [P4];
 1008e8c:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 1008e8e:	10 08       	CC = R0 == R2;
 1008e90:	a8 18       	IF CC JUMP 0x1008fe0 <_sm_packet_handler+0x580>;
 1008e92:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 1008e94:	08 08       	CC = R0 == R1;
 1008e96:	c3 18       	IF CC JUMP 0x100901c <_sm_packet_handler+0x5bc>;
 1008e98:	10 0c       	CC = R0 == 0x2;
 1008e9a:	02 18       	IF CC JUMP 0x1008e9e <_sm_packet_handler+0x43e>;
 1008e9c:	fe 22       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1008e9e:	c0 b9       	R0 = [FP -0x10];
 1008ea0:	80 bb       	[FP -0x20] = R0;
 1008ea2:	d0 b9       	R0 = [FP -0xc];
 1008ea4:	90 bb       	[FP -0x1c] = R0;
 1008ea6:	e0 b9       	R0 = [FP -0x8];
 1008ea8:	a0 bb       	[FP -0x18] = R0;
 1008eaa:	f0 b9       	R0 = [FP -0x4];
 1008eac:	b0 bb       	[FP -0x14] = R0;
 1008eae:	47 30       	R0 = FP;
 1008eb0:	00 67       	R0 += -0x20;		/* (-32) */
 1008eb2:	ff e3 c3 fd 	CALL 0x1008a38 <_sm_shift_left_by_one_bit_inplace.clone.4>;
 1008eb6:	b8 e5 f0 ff 	R0 = B[FP + -0x10] (X);
 1008eba:	80 0c       	CC = R0 < 0x0;
 1008ebc:	08 14       	IF !CC JUMP 0x1008ecc <_sm_packet_handler+0x46c> (BP);
 1008ebe:	b8 e5 ef ff 	R0 = B[FP + -0x11] (X);
 1008ec2:	21 e1 87 ff 	R1 = -0x79 (X);		/*		R1=0xffffff87(-121) */
 1008ec6:	01 58       	R0 = R1 ^ R0;
 1008ec8:	b8 e6 ef ff 	B[FP + -0x11] = R0;
 1008ecc:	80 b9       	R0 = [FP -0x20];
 1008ece:	40 bb       	[FP -0x30] = R0;
 1008ed0:	90 b9       	R0 = [FP -0x1c];
 1008ed2:	50 bb       	[FP -0x2c] = R0;
 1008ed4:	a0 b9       	R0 = [FP -0x18];
 1008ed6:	60 bb       	[FP -0x28] = R0;
 1008ed8:	b0 b9       	R0 = [FP -0x14];
 1008eda:	70 bb       	[FP -0x24] = R0;
 1008edc:	47 30       	R0 = FP;
 1008ede:	80 66       	R0 += -0x30;		/* (-48) */
 1008ee0:	ff e3 ac fd 	CALL 0x1008a38 <_sm_shift_left_by_one_bit_inplace.clone.4>;
 1008ee4:	b8 e5 e0 ff 	R0 = B[FP + -0x20] (X);
 1008ee8:	80 0c       	CC = R0 < 0x0;
 1008eea:	08 14       	IF !CC JUMP 0x1008efa <_sm_packet_handler+0x49a> (BP);
 1008eec:	b8 e5 df ff 	R0 = B[FP + -0x21] (X);
 1008ef0:	21 e1 87 ff 	R1 = -0x79 (X);		/*		R1=0xffffff87(-121) */
 1008ef4:	01 58       	R0 = R1 ^ R0;
 1008ef6:	b8 e6 df ff 	B[FP + -0x21] = R0;
 1008efa:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000001(16777217) */
 1008efe:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0xff87(65415) */
 1008f02:	00 e1 78 9e 	R0.L = 0x9e78;		/* (-24968)	R0=0x1009e78(16817784) */
 1008f06:	01 e1 5c 26 	R1.L = 0x265c;		/* (9820)	R1=0x265c <_sm_cmac_k>(9820) */
 1008f0a:	00 e3 45 0a 	CALL 0x100a394 <_log_key>;
 1008f0e:	7f 30       	R7 = FP;
 1008f10:	07 67       	R7 += -0x20;		/* (-32) */
 1008f12:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1009e78(16817784) */
 1008f16:	00 e1 7c 9e 	R0.L = 0x9e7c;		/* (-24964)	R0=0x1009e7c(16817788) */
 1008f1a:	0f 30       	R1 = R7;
 1008f1c:	00 e3 3c 0a 	CALL 0x100a394 <_log_key>;
 1008f20:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1009e7c(16817788) */
 1008f24:	4f 30       	R1 = FP;
 1008f26:	00 e1 80 9e 	R0.L = 0x9e80;		/* (-24960)	R0=0x1009e80(16817792) */
 1008f2a:	81 66       	R1 += -0x30;		/* (-48) */
 1008f2c:	00 e3 34 0a 	CALL 0x100a394 <_log_key>;
 1008f30:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2608 <_rau_state> */
 1008f34:	0a e1 6c 26 	P2.L = 0x266c;		/* (9836)	P2=0x266c <_sm_cmac_message_len> */
 1008f38:	11 95       	R1 = W[P2] (Z);
 1008f3a:	c8 42       	R0 = R1.L (Z);
 1008f3c:	00 0c       	CC = R0 == 0x0;
 1008f3e:	19 1c       	IF CC JUMP 0x1008f70 <_sm_packet_handler+0x510> (BP);
 1008f40:	7a 60       	R2 = 0xf (X);		/*		R2=0xf( 15) */
 1008f42:	90 54       	R2 = R0 & R2;
 1008f44:	02 0c       	CC = R2 == 0x0;
 1008f46:	15 14       	IF !CC JUMP 0x1008f70 <_sm_packet_handler+0x510> (BP);
 1008f48:	30 30       	R6 = R0;
 1008f4a:	1f 32       	P3 = R7;
 1008f4c:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x2600 <_sm_cmac_state> */
 1008f50:	86 67       	R6 += -0x10;		/* (-16) */
 1008f52:	0c e1 6e 26 	P4.L = 0x266e;		/* (9838)	P4=0x266e <_sm_cmac_m_last> */
 1008f56:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 1008f58:	06 30       	R0 = R6;
 1008f5a:	ff e3 dd f4 	CALL 0x1007914 <_sm_cmac_message_get_byte>;
 1008f5e:	59 98       	R1 = B[P3++] (X);
 1008f60:	08 58       	R0 = R0 ^ R1;
 1008f62:	0f 64       	R7 += 0x1;		/* (  1) */
 1008f64:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1008f66:	20 9a       	B[P4++] = R0;
 1008f68:	0e 64       	R6 += 0x1;		/* (  1) */
 1008f6a:	17 08       	CC = R7 == R2;
 1008f6c:	f6 17       	IF !CC JUMP 0x1008f58 <_sm_packet_handler+0x4f8> (BP);
 1008f6e:	42 20       	JUMP.S 0x1008ff2 <_sm_packet_handler+0x592>;
 1008f70:	7e 60       	R6 = 0xf (X);		/*		R6=0xf( 15) */
 1008f72:	8e 55       	R6 = R6 & R1;
 1008f74:	06 32       	P0 = R6;
 1008f76:	67 32       	P4 = FP;
 1008f78:	84 6e       	P4 += -0x30;		/* (-48) */
 1008f7a:	4b e1 00 00 	P3.H = 0x0;		/* (  0)	P3=0x24c8 <_the_setup> */
 1008f7e:	0b e1 6e 26 	P3.L = 0x266e;		/* (9838)	P3=0x266e <_sm_cmac_m_last> */
 1008f82:	44 30       	R0 = P4;
 1008f84:	44 e1 00 00 	R4.H = 0x0;		/* (  0)	R4=0xf8(248) */
 1008f88:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 1008f8a:	83 5a       	P2 = P3 + P0;
 1008f8c:	70 51       	R5 = R0 + R6;
 1008f8e:	21 e1 80 ff 	R1 = -0x80 (X);		/*		R1=0xffffff80(-128) */
 1008f92:	04 e1 6c 26 	R4.L = 0x266c;		/* (9836)	R4=0x266c <_sm_cmac_message_len>(9836) */
 1008f96:	82 e1 f0 ff 	R2 = 0xfff0 (Z);		/*		R2=0xfff0(65520) */
 1008f9a:	b7 08       	CC = R7 < R6;
 1008f9c:	11 14       	IF !CC JUMP 0x1008fbe <_sm_packet_handler+0x55e> (BP);
 1008f9e:	04 32       	P0 = R4;
 1008fa0:	00 95       	R0 = W[P0] (Z);
 1008fa2:	10 54       	R0 = R0 & R2;
 1008fa4:	21 bb       	[FP -0x38] = R1;
 1008fa6:	12 bb       	[FP -0x3c] = R2;
 1008fa8:	3a bb       	[FP -0x34] = P2;
 1008faa:	07 50       	R0 = R7 + R0;
 1008fac:	ff e3 b4 f4 	CALL 0x1007914 <_sm_cmac_message_get_byte>;
 1008fb0:	63 99       	R3 = B[P4] (X);
 1008fb2:	18 58       	R0 = R0 ^ R3;
 1008fb4:	18 9b       	B[P3] = R0;
 1008fb6:	21 b9       	R1 = [FP -0x38];
 1008fb8:	12 b9       	R2 = [FP -0x3c];
 1008fba:	3a b9       	P2 = [FP -0x34];
 1008fbc:	0b 20       	JUMP.S 0x1008fd2 <_sm_packet_handler+0x572>;
 1008fbe:	37 08       	CC = R7 == R6;
 1008fc0:	06 14       	IF !CC JUMP 0x1008fcc <_sm_packet_handler+0x56c> (BP);
 1008fc2:	0d 32       	P1 = R5;
 1008fc4:	48 99       	R0 = B[P1] (X);
 1008fc6:	01 58       	R0 = R1 ^ R0;
 1008fc8:	10 9b       	B[P2] = R0;
 1008fca:	04 20       	JUMP.S 0x1008fd2 <_sm_packet_handler+0x572>;
 1008fcc:	00 00       	NOP;
 1008fce:	60 99       	R0 = B[P4] (X);
 1008fd0:	18 9b       	B[P3] = R0;
 1008fd2:	0f 64       	R7 += 0x1;		/* (  1) */
 1008fd4:	80 60       	R0 = 0x10 (X);		/*		R0=0x10( 16) */
 1008fd6:	0c 6c       	P4 += 0x1;		/* (  1) */
 1008fd8:	0b 6c       	P3 += 0x1;		/* (  1) */
 1008fda:	07 08       	CC = R7 == R0;
 1008fdc:	df 17       	IF !CC JUMP 0x1008f9a <_sm_packet_handler+0x53a> (BP);
 1008fde:	0a 20       	JUMP.S 0x1008ff2 <_sm_packet_handler+0x592>;
 1008fe0:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x10( 16) */
 1008fe4:	4f 30       	R1 = FP;
 1008fe6:	00 e1 80 26 	R0.L = 0x2680;		/* (9856)	R0=0x2680 <_sm_cmac_x>(9856) */
 1008fea:	81 67       	R1 += -0x10;		/* (-16) */
 1008fec:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1008fee:	00 e3 8b 36 	CALL 0x100fd04 <_memcpy>;
 1008ff2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x266c <_sm_cmac_message_len> */
 1008ff6:	0a e1 7e 26 	P2.L = 0x267e;		/* (9854)	P2=0x267e <_sm_cmac_block_current> */
 1008ffa:	11 99       	R1 = B[P2] (Z);
 1008ffc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x267e <_sm_cmac_block_current> */
 1009000:	0a e1 7f 26 	P2.L = 0x267f;		/* (9855)	P2=0x267f <_sm_cmac_block_count> */
 1009004:	10 99       	R0 = B[P2] (Z);
 1009006:	f8 67       	R0 += -0x1;		/* ( -1) */
 1009008:	81 08       	CC = R1 < R0;
 100900a:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100900c:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 100900e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x267f <_sm_cmac_block_count> */
 1009012:	01 06       	IF !CC R0 = R1;
 1009014:	0a e1 00 26 	P2.L = 0x2600;		/* (9728)	P2=0x2600 <_sm_cmac_state> */
 1009018:	10 93       	[P2] = R0;
 100901a:	3f 22       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 100901c:	7f 30       	R7 = FP;
 100901e:	87 67       	R7 += -0x10;		/* (-16) */
 1009020:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000003(16777219) */
 1009024:	00 e1 84 9e 	R0.L = 0x9e84;		/* (-24956)	R0=0x1009e84(16817796) */
 1009028:	0f 30       	R1 = R7;
 100902a:	00 e3 b5 09 	CALL 0x100a394 <_log_key>;
 100902e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2600 <_sm_cmac_state> */
 1009032:	0a e1 90 26 	P2.L = 0x2690;		/* (9872)	P2=0x2690 <_sm_cmac_done_handler> */
 1009036:	52 91       	P2 = [P2];
 1009038:	07 30       	R0 = R7;
 100903a:	62 00       	CALL (P2);
 100903c:	2e 22       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 100903e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2690 <_sm_cmac_done_handler> */
 1009042:	0a e1 58 26 	P2.L = 0x2658;		/* (9816)	P2=0x2658 <_sm_aes128_connection_source> */
 1009046:	54 91       	P4 = [P2];
 1009048:	44 0c       	CC = P4 == 0x0;
 100904a:	02 14       	IF !CC JUMP 0x100904e <_sm_packet_handler+0x5ee> (BP);
 100904c:	26 22       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 100904e:	d8 68       	P0 = 0x1b (X);		/*		P0=0x1b( 27) */
 1009050:	e2 ac       	P2 = [P4 + 0xc];
 1009052:	aa 6f       	P2 += -0xb;		/* (-11) */
 1009054:	42 0a       	CC = P2 <= P0 (IU);
 1009056:	02 18       	IF CC JUMP 0x100905a <_sm_packet_handler+0x5fa>;
 1009058:	20 22       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 100905a:	49 e1 00 01 	P1.H = 0x100;		/* (256)	P1=0x1002628 */
 100905e:	09 e1 f0 a0 	P1.L = 0xa0f0;		/* (-24336)	P1=0x100a0f0 */
 1009062:	91 5e       	P2 = P1 + (P2 << 0x2);
 1009064:	52 91       	P2 = [P2];
 1009066:	52 00       	JUMP (P2);
 1009068:	6f 30       	R5 = FP;
 100906a:	85 67       	R5 += -0x10;		/* (-16) */
 100906c:	0d 30       	R1 = R5;
 100906e:	06 30       	R0 = R6;
 1009070:	00 e3 60 09 	CALL 0x100a330 <_swap128>;
 1009074:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1009e84(16817796) */
 1009078:	00 e1 8c 9e 	R0.L = 0x9e8c;		/* (-24948)	R0=0x1009e8c(16817804) */
 100907c:	4b e1 00 00 	P3.H = 0x0;		/* (  0)	P3=0x266e <_sm_cmac_m_last> */
 1009080:	0b e1 58 25 	P3.L = 0x2558;		/* (9560)	P3=0x2558 */
 1009084:	00 e3 9a 2f 	CALL 0x100efb8 <_puts>;
 1009088:	43 30       	R0 = P3;
 100908a:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 100908c:	00 e3 c8 28 	CALL 0x100e21c <_printf_buf>;
 1009090:	43 30       	R0 = P3;
 1009092:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 1009094:	30 64       	R0 += 0x6;		/* (  6) */
 1009096:	00 e3 c3 28 	CALL 0x100e21c <_printf_buf>;
 100909a:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 100909c:	05 30       	R0 = R5;
 100909e:	7f 30       	R7 = FP;
 10090a0:	00 e3 be 28 	CALL 0x100e21c <_printf_buf>;
 10090a4:	07 67       	R7 += -0x20;		/* (-32) */
 10090a6:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10090a8:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 10090aa:	07 30       	R0 = R7;
 10090ac:	00 e3 7a 36 	CALL 0x100fda0 <_memset>;
 10090b0:	18 91       	R0 = [P3];
 10090b2:	90 bb       	[FP -0x1c] = R0;
 10090b4:	98 a8       	R0 = W[P3 + 0x4] (X);
 10090b6:	78 e6 f4 ff 	W[FP + -0x18] = R0;
 10090ba:	d8 a8       	R0 = W[P3 + 0x6] (X);
 10090bc:	78 e6 f5 ff 	W[FP + -0x16] = R0;
 10090c0:	18 a9       	R0 = W[P3 + 0x8] (X);
 10090c2:	78 e6 f6 ff 	W[FP + -0x14] = R0;
 10090c6:	58 a9       	R0 = W[P3 + 0xa] (X);
 10090c8:	78 e6 f7 ff 	W[FP + -0x12] = R0;
 10090cc:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1009e8c(16817804) */
 10090d0:	00 e1 a4 9e 	R0.L = 0x9ea4;		/* (-24924)	R0=0x1009ea4(16817828) */
 10090d4:	0f 30       	R1 = R7;
 10090d6:	00 e3 5f 09 	CALL 0x100a394 <_log_key>;
 10090da:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0xa0f0 */
 10090de:	1d 32       	P3 = R5;
 10090e0:	07 32       	P0 = R7;
 10090e2:	09 e1 f8 24 	P1.L = 0x24f8;		/* (9464)	P1=0x24f8 */
 10090e6:	82 68       	P2 = 0x10 (X);		/*		P2=0x10( 16) */
 10090e8:	b2 e0 05 20 	LSETUP(0x10090ec <_sm_packet_handler+0x68c>, 0x10090f2 <_sm_packet_handler+0x692>) LC1 = P2;
 10090ec:	58 98       	R0 = B[P3++] (X);
 10090ee:	41 98       	R1 = B[P0++] (X);
 10090f0:	01 58       	R0 = R1 ^ R0;
 10090f2:	08 9a       	B[P1++] = R0;
 10090f4:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1009ea4(16817828) */
 10090f8:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x0 <data_addr>(  0) */
 10090fc:	00 e1 a8 9e 	R0.L = 0x9ea8;		/* (-24920)	R0=0x1009ea8(16817832) */
 1009100:	01 e1 f8 24 	R1.L = 0x24f8;		/* (9464)	R1=0x24f8(9464) */
 1009104:	00 e3 48 09 	CALL 0x100a394 <_log_key>;
 1009108:	e0 a0       	R0 = [P4 + 0xc];
 100910a:	08 64       	R0 += 0x1;		/* (  1) */
 100910c:	c5 21       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 100910e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1009ea8(16817832) */
 1009112:	00 e1 ac 9e 	R0.L = 0x9eac;		/* (-24916)	R0=0x1009eac(16817836) */
 1009116:	00 e3 51 2f 	CALL 0x100efb8 <_puts>;
 100911a:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x24f8(9464) */
 100911e:	06 30       	R0 = R6;
 1009120:	01 e1 26 25 	R1.L = 0x2526;		/* (9510)	R1=0x2526(9510) */
 1009124:	00 e3 06 09 	CALL 0x100a330 <_swap128>;
 1009128:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x9eac(40620) */
 100912c:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 100912e:	00 e1 26 25 	R0.L = 0x2526;		/* (9510)	R0=0x2526(9510) */
 1009132:	00 e3 75 28 	CALL 0x100e21c <_printf_buf>;
 1009136:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1002526(16786726) */
 100913a:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x10( 16) */
 100913e:	00 e1 c4 9e 	R0.L = 0x9ec4;		/* (-24892)	R0=0x1009ec4(16817860) */
 1009142:	01 e1 26 25 	R1.L = 0x2526;		/* (9510)	R1=0x2526(9510) */
 1009146:	00 e3 27 09 	CALL 0x100a394 <_log_key>;
 100914a:	90 60       	R0 = 0x12 (X);		/*		R0=0x12( 18) */
 100914c:	a5 21       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 100914e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000012(16777234) */
 1009152:	00 e1 c8 9e 	R0.L = 0x9ec8;		/* (-24888)	R0=0x1009ec8(16817864) */
 1009156:	7f 30       	R7 = FP;
 1009158:	00 e3 30 2f 	CALL 0x100efb8 <_puts>;
 100915c:	07 67       	R7 += -0x20;		/* (-32) */
 100915e:	06 30       	R0 = R6;
 1009160:	0f 30       	R1 = R7;
 1009162:	00 e3 e7 08 	CALL 0x100a330 <_swap128>;
 1009166:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 1009168:	07 30       	R0 = R7;
 100916a:	00 e3 59 28 	CALL 0x100e21c <_printf_buf>;
 100916e:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x9ec8(40648) */
 1009172:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 1009174:	00 e1 46 25 	R0.L = 0x2546;		/* (9542)	R0=0x2546(9542) */
 1009178:	00 e3 52 28 	CALL 0x100e21c <_printf_buf>;
 100917c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1002546(16786758) */
 1009180:	00 e1 c4 9e 	R0.L = 0x9ec4;		/* (-24892)	R0=0x1009ec4(16817860) */
 1009184:	0f 30       	R1 = R7;
 1009186:	00 e3 07 09 	CALL 0x100a394 <_log_key>;
 100918a:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x9ec4(40644) */
 100918e:	00 e1 46 25 	R0.L = 0x2546;		/* (9542)	R0=0x2546(9542) */
 1009192:	0f 30       	R1 = R7;
 1009194:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1009196:	00 e3 79 35 	CALL 0x100fc88 <_memcmp>;
 100919a:	00 0c       	CC = R0 == 0x0;
 100919c:	10 1c       	IF CC JUMP 0x10091bc <_sm_packet_handler+0x75c> (BP);
 100919e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1002546(16786758) */
 10091a2:	00 e1 e0 9e 	R0.L = 0x9ee0;		/* (-24864)	R0=0x1009ee0(16817888) */
 10091a6:	00 e3 09 2f 	CALL 0x100efb8 <_puts>;
 10091aa:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x10 */
 10091ae:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 10091b0:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 10091b4:	90 e6 10 00 	B[P2 + 0x10] = R0;
 10091b8:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 10091ba:	6e 21       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 10091bc:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000001(16777217) */
 10091c0:	00 e1 f4 9e 	R0.L = 0x9ef4;		/* (-24844)	R0=0x1009ef4(16817908) */
 10091c4:	00 e3 fa 2e 	CALL 0x100efb8 <_puts>;
 10091c8:	a0 e4 02 00 	R0 = B[P4 + 0x2] (Z);
 10091cc:	00 0c       	CC = R0 == 0x0;
 10091ce:	03 1c       	IF CC JUMP 0x10091d4 <_sm_packet_handler+0x774> (BP);
 10091d0:	98 60       	R0 = 0x13 (X);		/*		R0=0x13( 19) */
 10091d2:	62 21       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 10091d4:	a0 60       	R0 = 0x14 (X);		/*		R0=0x14( 20) */
 10091d6:	60 21       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 10091d8:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x10( 16) */
 10091dc:	06 30       	R0 = R6;
 10091de:	01 e1 64 25 	R1.L = 0x2564;		/* (9572)	R1=0x2564(9572) */
 10091e2:	00 e3 a7 08 	CALL 0x100a330 <_swap128>;
 10091e6:	a0 e4 16 00 	R0 = B[P4 + 0x16] (Z);
 10091ea:	79 60       	R1 = 0xf (X);		/*		R1=0xf( 15) */
 10091ec:	41 52       	R1 = R1 - R0;
 10091ee:	09 32       	P1 = R1;
 10091f0:	2a e1 9c 00 	P2 = 0x9c (X);		/*		P2=0x9c(156) */
 10091f4:	00 32       	P0 = R0;
 10091f6:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 10091f8:	10 09       	CC = R0 <= R2;
 10091fa:	51 5a       	P1 = P1 + P2;
 10091fc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x9c */
 1009200:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 1009204:	51 5a       	P1 = P1 + P2;
 1009206:	8a 68       	P2 = 0x11 (X);		/*		P2=0x11( 17) */
 1009208:	02 44       	P2 -= P0;
 100920a:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100920c:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100920e:	90 06       	IF !CC P2 = R0;
 1009210:	b3 e0 04 20 	LSETUP(0x1009216 <_sm_packet_handler+0x7b6>, 0x1009218 <_sm_packet_handler+0x7b8>) LC1 = P2;
 1009214:	02 20       	JUMP.S 0x1009218 <_sm_packet_handler+0x7b8>;
 1009216:	89 9a       	B[P1--] = R1;
 1009218:	00 00       	NOP;
 100921a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000001(16777217) */
 100921e:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x0 <data_addr>(  0) */
 1009222:	00 e1 04 9f 	R0.L = 0x9f04;		/* (-24828)	R0=0x1009f04(16817924) */
 1009226:	01 e1 64 25 	R1.L = 0x2564;		/* (9572)	R1=0x2564(9572) */
 100922a:	00 e3 b5 08 	CALL 0x100a394 <_log_key>;
 100922e:	a0 e4 02 00 	R0 = B[P4 + 0x2] (Z);
 1009232:	00 0c       	CC = R0 == 0x0;
 1009234:	03 1c       	IF CC JUMP 0x100923a <_sm_packet_handler+0x7da> (BP);
 1009236:	88 61       	R0 = 0x31 (X);		/*		R0=0x31( 49) */
 1009238:	2f 21       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 100923a:	d8 61       	R0 = 0x3b (X);		/*		R0=0x3b( 59) */
 100923c:	2d 21       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 100923e:	4f 30       	R1 = FP;
 1009240:	06 30       	R0 = R6;
 1009242:	01 67       	R1 += -0x20;		/* (-32) */
 1009244:	00 e3 76 08 	CALL 0x100a330 <_swap128>;
 1009248:	b8 e4 ee ff 	R0 = B[FP + -0x12] (Z);
 100924c:	b9 e4 ef ff 	R1 = B[FP + -0x11] (Z);
 1009250:	40 4f       	R0 <<= 0x8;
 1009252:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x11 */
 1009256:	08 56       	R0 = R0 | R1;
 1009258:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 100925c:	50 e6 56 00 	W[P2 + 0xac] = R0;
 1009260:	51 e5 57 00 	R1 = W[P2 + 0xae] (X);
 1009264:	08 58       	R0 = R0 ^ R1;
 1009266:	50 e6 58 00 	W[P2 + 0xb0] = R0;
 100926a:	e8 60       	R0 = 0x1d (X);		/*		R0=0x1d( 29) */
 100926c:	15 21       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 100926e:	4f 30       	R1 = FP;
 1009270:	06 30       	R0 = R6;
 1009272:	01 67       	R1 += -0x20;		/* (-32) */
 1009274:	00 e3 5e 08 	CALL 0x100a330 <_swap128>;
 1009278:	b8 e4 ee ff 	R0 = B[FP + -0x12] (Z);
 100927c:	b9 e4 ef ff 	R1 = B[FP + -0x11] (Z);
 1009280:	40 4f       	R0 <<= 0x8;
 1009282:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 1009286:	08 56       	R0 = R0 | R1;
 1009288:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 100928c:	50 e6 56 00 	W[P2 + 0xac] = R0;
 1009290:	51 e5 58 00 	R1 = W[P2 + 0xb0] (X);
 1009294:	08 58       	R0 = R0 ^ R1;
 1009296:	50 e6 57 00 	W[P2 + 0xae] = R0;
 100929a:	28 61       	R0 = 0x25 (X);		/*		R0=0x25( 37) */
 100929c:	fd 20       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 100929e:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x2564(9572) */
 10092a2:	06 30       	R0 = R6;
 10092a4:	01 e1 64 25 	R1.L = 0x2564;		/* (9572)	R1=0x2564(9572) */
 10092a8:	00 e3 44 08 	CALL 0x100a330 <_swap128>;
 10092ac:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000025(16777253) */
 10092b0:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x2564(9572) */
 10092b4:	00 e1 08 9f 	R0.L = 0x9f08;		/* (-24824)	R0=0x1009f08(16817928) */
 10092b8:	01 e1 64 25 	R1.L = 0x2564;		/* (9572)	R1=0x2564(9572) */
 10092bc:	00 e3 6c 08 	CALL 0x100a394 <_log_key>;
 10092c0:	f8 60       	R0 = 0x1f (X);		/*		R0=0x1f( 31) */
 10092c2:	ea 20       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 10092c4:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x2564(9572) */
 10092c8:	06 30       	R0 = R6;
 10092ca:	01 e1 92 25 	R1.L = 0x2592;		/* (9618)	R1=0x2592(9618) */
 10092ce:	00 e3 31 08 	CALL 0x100a330 <_swap128>;
 10092d2:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100001f(16777247) */
 10092d6:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x2592(9618) */
 10092da:	00 e1 64 76 	R0.L = 0x7664;		/* (30308)	R0=0x1007664(16807524) */
 10092de:	01 e1 92 25 	R1.L = 0x2592;		/* (9618)	R1=0x2592(9618) */
 10092e2:	00 e3 59 08 	CALL 0x100a394 <_log_key>;
 10092e6:	08 61       	R0 = 0x21 (X);		/*		R0=0x21( 33) */
 10092e8:	d7 20       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 10092ea:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x2592(9618) */
 10092ee:	06 30       	R0 = R6;
 10092f0:	01 e1 64 25 	R1.L = 0x2564;		/* (9572)	R1=0x2564(9572) */
 10092f4:	00 e3 1e 08 	CALL 0x100a330 <_swap128>;
 10092f8:	a0 e4 16 00 	R0 = B[P4 + 0x16] (Z);
 10092fc:	79 60       	R1 = 0xf (X);		/*		R1=0xf( 15) */
 10092fe:	41 52       	R1 = R1 - R0;
 1009300:	09 32       	P1 = R1;
 1009302:	2a e1 9c 00 	P2 = 0x9c (X);		/*		P2=0x9c(156) */
 1009306:	00 32       	P0 = R0;
 1009308:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 100930a:	10 09       	CC = R0 <= R2;
 100930c:	51 5a       	P1 = P1 + P2;
 100930e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x9c */
 1009312:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 1009316:	51 5a       	P1 = P1 + P2;
 1009318:	8a 68       	P2 = 0x11 (X);		/*		P2=0x11( 17) */
 100931a:	02 44       	P2 -= P0;
 100931c:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100931e:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1009320:	90 06       	IF !CC P2 = R0;
 1009322:	b3 e0 04 20 	LSETUP(0x1009328 <_sm_packet_handler+0x8c8>, 0x100932a <_sm_packet_handler+0x8ca>) LC1 = P2;
 1009326:	02 20       	JUMP.S 0x100932a <_sm_packet_handler+0x8ca>;
 1009328:	89 9a       	B[P1--] = R1;
 100932a:	00 00       	NOP;
 100932c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000001(16777217) */
 1009330:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x0 <data_addr>(  0) */
 1009334:	00 e1 08 9f 	R0.L = 0x9f08;		/* (-24824)	R0=0x1009f08(16817928) */
 1009338:	01 e1 64 25 	R1.L = 0x2564;		/* (9572)	R1=0x2564(9572) */
 100933c:	00 e3 2c 08 	CALL 0x100a394 <_log_key>;
 1009340:	38 61       	R0 = 0x27 (X);		/*		R0=0x27( 39) */
 1009342:	aa 20       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 1009344:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1000011 */
 1009348:	0a e1 c4 6f 	P2.L = 0x6fc4;		/* (28612)	P2=0x1006fc4 <_hci_le_rand> */
 100934c:	11 95       	R1 = W[P2] (Z);
 100934e:	08 08       	CC = R0 == R1;
 1009350:	a4 14       	IF !CC JUMP 0x1009498 <_sm_packet_handler+0xa38> (BP);
 1009352:	4b e1 00 00 	P3.H = 0x0;		/* (  0)	P3=0x2558 */
 1009356:	0b e1 08 26 	P3.L = 0x2608;		/* (9736)	P3=0x2608 <_rau_state> */
 100935a:	4d 30       	R1 = P5;
 100935c:	18 91       	R0 = [P3];
 100935e:	31 64       	R1 += 0x6;		/* (  6) */
 1009360:	18 0c       	CC = R0 == 0x3;
 1009362:	10 14       	IF !CC JUMP 0x1009382 <_sm_packet_handler+0x922> (BP);
 1009364:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x266e <_sm_cmac_m_last> */
 1009368:	0c e1 51 26 	P4.L = 0x2651;		/* (9809)	P4=0x2651 <_sm_random_address> */
 100936c:	44 30       	R0 = P4;
 100936e:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 1009370:	00 e3 ca 34 	CALL 0x100fd04 <_memcpy>;
 1009374:	61 99       	R1 = B[P4] (X);
 1009376:	f8 61       	R0 = 0x3f (X);		/*		R0=0x3f( 63) */
 1009378:	01 54       	R0 = R1 & R0;
 100937a:	20 9b       	B[P4] = R0;
 100937c:	30 60       	R0 = 0x6 (X);		/*		R0=0x6(  6) */
 100937e:	18 93       	[P3] = R0;
 1009380:	8c 20       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 1009382:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x6fc4 */
 1009386:	0a e1 98 26 	P2.L = 0x2698;		/* (9880)	P2=0x2698 <_sm_random_connection_source> */
 100938a:	54 91       	P4 = [P2];
 100938c:	44 0c       	CC = P4 == 0x0;
 100938e:	85 1c       	IF CC JUMP 0x1009498 <_sm_packet_handler+0xa38> (BP);
 1009390:	4a 60       	R2 = 0x9 (X);		/*		R2=0x9(  9) */
 1009392:	e0 a0       	R0 = [P4 + 0xc];
 1009394:	10 08       	CC = R0 == R2;
 1009396:	4b 18       	IF CC JUMP 0x100942c <_sm_packet_handler+0x9cc>;
 1009398:	10 0a       	CC = R0 <= R2 (IU);
 100939a:	08 14       	IF !CC JUMP 0x10093aa <_sm_packet_handler+0x94a> (BP);
 100939c:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 100939e:	10 08       	CC = R0 == R2;
 10093a0:	0c 18       	IF CC JUMP 0x10093b8 <_sm_packet_handler+0x958>;
 10093a2:	3a 60       	R2 = 0x7 (X);		/*		R2=0x7(  7) */
 10093a4:	10 08       	CC = R0 == R2;
 10093a6:	79 14       	IF !CC JUMP 0x1009498 <_sm_packet_handler+0xa38> (BP);
 10093a8:	39 20       	JUMP.S 0x100941a <_sm_packet_handler+0x9ba>;
 10093aa:	c2 60       	R2 = 0x18 (X);		/*		R2=0x18( 24) */
 10093ac:	10 08       	CC = R0 == R2;
 10093ae:	48 18       	IF CC JUMP 0x100943e <_sm_packet_handler+0x9de>;
 10093b0:	d2 60       	R2 = 0x1a (X);		/*		R2=0x1a( 26) */
 10093b2:	10 08       	CC = R0 == R2;
 10093b4:	72 14       	IF !CC JUMP 0x1009498 <_sm_packet_handler+0xa38> (BP);
 10093b6:	62 20       	JUMP.S 0x100947a <_sm_packet_handler+0xa1a>;
 10093b8:	01 32       	P0 = R1;
 10093ba:	87 e4 01 00 	R7 = B[P0 + 0x1] (Z);
 10093be:	80 e4 02 00 	R0 = B[P0 + 0x2] (Z);
 10093c2:	80 4f       	R0 <<= 0x10;
 10093c4:	47 4f       	R7 <<= 0x8;
 10093c6:	c7 57       	R7 = R7 | R0;
 10093c8:	a8 e4 06 00 	R0 = B[P5 + 0x6] (Z);
 10093cc:	c7 57       	R7 = R7 | R0;
 10093ce:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 10093d0:	40 e1 0f 00 	R0.H = 0xf;		/* ( 15)	R0=0xfffff(1048575) */
 10093d4:	c7 55       	R7 = R7 & R0;
 10093d6:	40 e1 0f 00 	R0.H = 0xf;		/* ( 15)	R0=0xfffff(1048575) */
 10093da:	00 e1 3e 42 	R0.L = 0x423e;		/* (16958)	R0=0xf423e(999998) */
 10093de:	07 0a       	CC = R7 <= R0 (IU);
 10093e0:	06 1c       	IF CC JUMP 0x10093ec <_sm_packet_handler+0x98c> (BP);
 10093e2:	40 e1 f0 ff 	R0.H = 0xfff0;		/* (-16)	R0=0xfff0423e(-1031618) */
 10093e6:	00 e1 c1 bd 	R0.L = 0xbdc1;		/* (-16959)	R0=0xfff0bdc1(-999999) */
 10093ea:	c7 51       	R7 = R7 + R0;
 10093ec:	ff e3 2e f2 	CALL 0x1007848 <_sm_reset_tk>;
 10093f0:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0xbdc1(48577) */
 10093f4:	00 e1 e8 24 	R0.L = 0x24e8;		/* (9448)	R0=0x24e8(9448) */
 10093f8:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 10093fa:	17 30       	R2 = R7;
 10093fc:	00 e3 32 07 	CALL 0x100a260 <_net_store_32>;
 1009400:	a0 e4 02 00 	R0 = B[P4 + 0x2] (Z);
 1009404:	00 0c       	CC = R0 == 0x0;
 1009406:	03 18       	IF CC JUMP 0x100940c <_sm_packet_handler+0x9ac>;
 1009408:	68 61       	R0 = 0x2d (X);		/*		R0=0x2d( 45) */
 100940a:	46 20       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 100940c:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100940e:	e0 b0       	[P4 + 0xc] = R0;
 1009410:	44 30       	R0 = P4;
 1009412:	10 64       	R0 += 0x2;		/* (  2) */
 1009414:	ff e3 08 f5 	CALL 0x1007e24 <_sm_trigger_user_response.clone.2>;
 1009418:	40 20       	JUMP.S 0x1009498 <_sm_packet_handler+0xa38>;
 100941a:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x3(  3) */
 100941e:	00 e1 16 25 	R0.L = 0x2516;		/* (9494)	R0=0x2516(9494) */
 1009422:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 1009424:	00 e3 70 34 	CALL 0x100fd04 <_memcpy>;
 1009428:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 100942a:	36 20       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 100942c:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x8 <_att_ir_le_device_db_index>(  8) */
 1009430:	00 e1 1e 25 	R0.L = 0x251e;		/* (9502)	R0=0x251e(9502) */
 1009434:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 1009436:	00 e3 67 34 	CALL 0x100fd04 <_memcpy>;
 100943a:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100943c:	2d 20       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 100943e:	01 30       	R0 = R1;
 1009440:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0xc <_test_buf>( 12) */
 1009444:	01 e1 7a 25 	R1.L = 0x257a;		/* (9594)	R1=0x257a(9594) */
 1009448:	00 e3 6c 07 	CALL 0x100a320 <_swap64>;
 100944c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2698 <_sm_random_connection_source> */
 1009450:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 1009454:	a1 e5 16 00 	R1 = B[P4 + 0x16] (X);
 1009458:	92 e5 b9 00 	R2 = B[P2 + 0xb9] (X);
 100945c:	80 63       	R0 = -0x10 (X);		/*		R0=0xfffffff0(-16) */
 100945e:	f9 67       	R1 += -0x1;		/* ( -1) */
 1009460:	02 54       	R0 = R2 & R0;
 1009462:	01 50       	R0 = R1 + R0;
 1009464:	90 e6 b9 00 	B[P2 + 0xb9] = R0;
 1009468:	a1 e5 15 00 	R1 = B[P4 + 0x15] (X);
 100946c:	20 4c       	BITCLR (R0, 0x4);		/* bit  4 */
 100946e:	21 4f       	R1 <<= 0x4;
 1009470:	08 50       	R0 = R0 + R1;
 1009472:	90 e6 b9 00 	B[P2 + 0xb9] = R0;
 1009476:	c8 60       	R0 = 0x19 (X);		/*		R0=0x19( 25) */
 1009478:	0f 20       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 100947a:	01 32       	P0 = R1;
 100947c:	a8 e4 06 00 	R0 = B[P5 + 0x6] (Z);
 1009480:	40 4f       	R0 <<= 0x8;
 1009482:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 1009486:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 100948a:	81 e4 01 00 	R1 = B[P0 + 0x1] (Z);
 100948e:	08 56       	R0 = R0 | R1;
 1009490:	50 e6 57 00 	W[P2 + 0xae] = R0;
 1009494:	d8 60       	R0 = 0x1b (X);		/*		R0=0x1b( 27) */
 1009496:	e0 b0       	[P4 + 0xc] = R0;
 1009498:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 100949c:	0a e1 f8 25 	P2.L = 0x25f8;		/* (9720)	P2=0x25f8 <_sm_client_packet_handler> */
 10094a0:	52 91       	P2 = [P2];
 10094a2:	42 0c       	CC = P2 == 0x0;
 10094a4:	af 19       	IF CC JUMP 0x1009802 <_sm_packet_handler+0xda2>;
 10094a6:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10094a8:	55 30       	R2 = P5;
 10094aa:	78 e5 18 00 	R0 = W[FP + 0x30] (X);
 10094ae:	b0 b5       	W[SP + 0xc] = R0;
 10094b0:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 10094b2:	62 00       	CALL (P2);
 10094b4:	a7 21       	JUMP.S 0x1009802 <_sm_packet_handler+0xda2>;
 10094b6:	49 60       	R1 = 0x9 (X);		/*		R1=0x9(  9) */
 10094b8:	0f 08       	CC = R7 == R1;
 10094ba:	a9 15       	IF !CC JUMP 0x100980c <_sm_packet_handler+0xdac> (BP);
 10094bc:	06 30       	R0 = R6;
 10094be:	ff e3 49 f2 	CALL 0x1007950 <_sm_get_connection_for_handle>;
 10094c2:	20 32       	P4 = R0;
 10094c4:	44 0c       	CC = P4 == 0x0;
 10094c6:	a3 1d       	IF CC JUMP 0x100980c <_sm_packet_handler+0xdac> (BP);
 10094c8:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 10094ca:	69 99       	R1 = B[P5] (X);
 10094cc:	48 43       	R0 = R1.B (Z);
 10094ce:	10 08       	CC = R0 == R2;
 10094d0:	04 14       	IF !CC JUMP 0x10094d8 <_sm_packet_handler+0xa78> (BP);
 10094d2:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10094d4:	e0 b0       	[P4 + 0xc] = R0;
 10094d6:	9b 21       	JUMP.S 0x100980c <_sm_packet_handler+0xdac>;
 10094d8:	5a 61       	R2 = 0x2b (X);		/*		R2=0x2b( 43) */
 10094da:	e0 a0       	R0 = [P4 + 0xc];
 10094dc:	10 08       	CC = R0 == R2;
 10094de:	64 18       	IF CC JUMP 0x10095a6 <_sm_packet_handler+0xb46>;
 10094e0:	10 0a       	CC = R0 <= R2 (IU);
 10094e2:	0e 14       	IF !CC JUMP 0x10094fe <_sm_packet_handler+0xa9e> (BP);
 10094e4:	10 0c       	CC = R0 == 0x2;
 10094e6:	93 19       	IF CC JUMP 0x100980c <_sm_packet_handler+0xdac>;
 10094e8:	10 0e       	CC = R0 <= 0x2 (IU);
 10094ea:	03 14       	IF !CC JUMP 0x10094f0 <_sm_packet_handler+0xa90> (BP);
 10094ec:	00 0c       	CC = R0 == 0x0;
 10094ee:	06 20       	JUMP.S 0x10094fa <_sm_packet_handler+0xa9a>;
 10094f0:	12 61       	R2 = 0x22 (X);		/*		R2=0x22( 34) */
 10094f2:	10 08       	CC = R0 == R2;
 10094f4:	d2 18       	IF CC JUMP 0x1009698 <_sm_packet_handler+0xc38>;
 10094f6:	41 61       	R1 = 0x28 (X);		/*		R1=0x28( 40) */
 10094f8:	08 08       	CC = R0 == R1;
 10094fa:	84 15       	IF !CC JUMP 0x1009802 <_sm_packet_handler+0xda2> (BP);
 10094fc:	55 20       	JUMP.S 0x10095a6 <_sm_packet_handler+0xb46>;
 10094fe:	c2 61       	R2 = 0x38 (X);		/*		R2=0x38( 56) */
 1009500:	10 08       	CC = R0 == R2;
 1009502:	11 18       	IF CC JUMP 0x1009524 <_sm_packet_handler+0xac4>;
 1009504:	10 0a       	CC = R0 <= R2 (IU);
 1009506:	08 14       	IF !CC JUMP 0x1009516 <_sm_packet_handler+0xab6> (BP);
 1009508:	71 61       	R1 = 0x2e (X);		/*		R1=0x2e( 46) */
 100950a:	08 08       	CC = R0 == R1;
 100950c:	5e 18       	IF CC JUMP 0x10095c8 <_sm_packet_handler+0xb68>;
 100950e:	7a 61       	R2 = 0x2f (X);		/*		R2=0x2f( 47) */
 1009510:	10 08       	CC = R0 == R2;
 1009512:	78 15       	IF !CC JUMP 0x1009802 <_sm_packet_handler+0xda2> (BP);
 1009514:	aa 20       	JUMP.S 0x1009668 <_sm_packet_handler+0xc08>;
 1009516:	c9 61       	R1 = 0x39 (X);		/*		R1=0x39( 57) */
 1009518:	08 08       	CC = R0 == R1;
 100951a:	2e 18       	IF CC JUMP 0x1009576 <_sm_packet_handler+0xb16>;
 100951c:	d2 61       	R2 = 0x3a (X);		/*		R2=0x3a( 58) */
 100951e:	10 08       	CC = R0 == R2;
 1009520:	71 15       	IF !CC JUMP 0x1009802 <_sm_packet_handler+0xda2> (BP);
 1009522:	3d 20       	JUMP.S 0x100959c <_sm_packet_handler+0xb3c>;
 1009524:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1009528:	00 e1 0c 9f 	R0.L = 0x9f0c;		/* (-24820)	R0=0x1009f0c(16817932) */
 100952c:	00 e3 46 2d 	CALL 0x100efb8 <_puts>;
 1009530:	28 99       	R0 = B[P5] (Z);
 1009532:	10 0c       	CC = R0 == 0x2;
 1009534:	a4 14       	IF !CC JUMP 0x100967c <_sm_packet_handler+0xc1c> (BP);
 1009536:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x9f0c(40716) */
 100953a:	4d 30       	R1 = P5;
 100953c:	3a 60       	R2 = 0x7 (X);		/*		R2=0x7(  7) */
 100953e:	00 e1 0f 25 	R0.L = 0x250f;		/* (9487)	R0=0x250f(9487) */
 1009542:	00 e3 e1 33 	CALL 0x100fd04 <_memcpy>;
 1009546:	44 30       	R0 = P4;
 1009548:	4b e1 00 00 	P3.H = 0x0;		/* (  0)	P3=0x2608 <_rau_state> */
 100954c:	ff e3 24 f2 	CALL 0x1007994 <_sm_stk_generation_init>;
 1009550:	0b e1 c8 24 	P3.L = 0x24c8;		/* (9416)	P3=0x24c8 <_the_setup> */
 1009554:	00 0c       	CC = R0 == 0x0;
 1009556:	04 1c       	IF CC JUMP 0x100955e <_sm_packet_handler+0xafe> (BP);
 1009558:	98 e6 10 00 	B[P3 + 0x10] = R0;
 100955c:	72 20       	JUMP.S 0x1009640 <_sm_packet_handler+0xbe0>;
 100955e:	d8 a1       	R0 = [P3 + 0x1c];
 1009560:	08 0c       	CC = R0 == 0x1;
 1009562:	03 14       	IF !CC JUMP 0x1009568 <_sm_packet_handler+0xb08> (BP);
 1009564:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 1009566:	4d 21       	JUMP.S 0x1009800 <_sm_packet_handler+0xda0>;
 1009568:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100956a:	e0 b0       	[P4 + 0xc] = R0;
 100956c:	44 30       	R0 = P4;
 100956e:	10 64       	R0 += 0x2;		/* (  2) */
 1009570:	ff e3 5a f4 	CALL 0x1007e24 <_sm_trigger_user_response.clone.2>;
 1009574:	47 21       	JUMP.S 0x1009802 <_sm_packet_handler+0xda2>;
 1009576:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000003(16777219) */
 100957a:	00 e1 20 9f 	R0.L = 0x9f20;		/* (-24800)	R0=0x1009f20(16817952) */
 100957e:	00 e3 1d 2d 	CALL 0x100efb8 <_puts>;
 1009582:	28 99       	R0 = B[P5] (Z);
 1009584:	18 0c       	CC = R0 == 0x3;
 1009586:	7b 14       	IF !CC JUMP 0x100967c <_sm_packet_handler+0xc1c> (BP);
 1009588:	45 30       	R0 = P5;
 100958a:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x39( 57) */
 100958e:	08 64       	R0 += 0x1;		/* (  1) */
 1009590:	01 e1 46 25 	R1.L = 0x2546;		/* (9542)	R1=0x2546(9542) */
 1009594:	00 e3 ce 06 	CALL 0x100a330 <_swap128>;
 1009598:	98 60       	R0 = 0x13 (X);		/*		R0=0x13( 19) */
 100959a:	33 21       	JUMP.S 0x1009800 <_sm_packet_handler+0xda0>;
 100959c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000013(16777235) */
 10095a0:	00 e1 34 9f 	R0.L = 0x9f34;		/* (-24780)	R0=0x1009f34(16817972) */
 10095a4:	66 20       	JUMP.S 0x1009670 <_sm_packet_handler+0xc10>;
 10095a6:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1009f34(16817972) */
 10095aa:	00 e1 44 9f 	R0.L = 0x9f44;		/* (-24764)	R0=0x1009f44(16817988) */
 10095ae:	00 e3 05 2d 	CALL 0x100efb8 <_puts>;
 10095b2:	28 99       	R0 = B[P5] (Z);
 10095b4:	08 0c       	CC = R0 == 0x1;
 10095b6:	63 14       	IF !CC JUMP 0x100967c <_sm_packet_handler+0xc1c> (BP);
 10095b8:	44 30       	R0 = P4;
 10095ba:	b8 64       	R0 += 0x17;		/* ( 23) */
 10095bc:	4d 30       	R1 = P5;
 10095be:	3a 60       	R2 = 0x7 (X);		/*		R2=0x7(  7) */
 10095c0:	00 e3 a2 33 	CALL 0x100fd04 <_memcpy>;
 10095c4:	60 61       	R0 = 0x2c (X);		/*		R0=0x2c( 44) */
 10095c6:	1d 21       	JUMP.S 0x1009800 <_sm_packet_handler+0xda0>;
 10095c8:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100002c(16777260) */
 10095cc:	00 e1 58 9f 	R0.L = 0x9f58;		/* (-24744)	R0=0x1009f58(16818008) */
 10095d0:	00 e3 f4 2c 	CALL 0x100efb8 <_puts>;
 10095d4:	28 99       	R0 = B[P5] (Z);
 10095d6:	18 0c       	CC = R0 == 0x3;
 10095d8:	52 14       	IF !CC JUMP 0x100967c <_sm_packet_handler+0xc1c> (BP);
 10095da:	45 30       	R0 = P5;
 10095dc:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x2546(9542) */
 10095e0:	08 64       	R0 += 0x1;		/* (  1) */
 10095e2:	01 e1 46 25 	R1.L = 0x2546;		/* (9542)	R1=0x2546(9542) */
 10095e6:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x261c <_sm_active_connection> */
 10095ea:	00 e3 a3 06 	CALL 0x100a330 <_swap128>;
 10095ee:	0d e1 c8 24 	P5.L = 0x24c8;		/* (9416)	P5=0x24c8 <_the_setup> */
 10095f2:	e8 a1       	R0 = [P5 + 0x1c];
 10095f4:	10 0c       	CC = R0 == 0x2;
 10095f6:	13 14       	IF !CC JUMP 0x100961c <_sm_packet_handler+0xbbc> (BP);
 10095f8:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1009f58(16818008) */
 10095fc:	00 e1 6c 9f 	R0.L = 0x9f6c;		/* (-24724)	R0=0x1009f6c(16818028) */
 1009600:	00 e3 dc 2c 	CALL 0x100efb8 <_puts>;
 1009604:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1009606:	a9 e5 8e 00 	R1 = B[P5 + 0x8e] (X);
 100960a:	f0 b0       	[SP + 0xc] = R0;
 100960c:	30 b6       	W[SP + 0x10] = R0;
 100960e:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x7(  7) */
 1009612:	98 62       	R0 = -0x2d (X);		/*		R0=0xffffffd3(-45) */
 1009614:	02 e1 58 25 	R2.L = 0x2558;		/* (9560)	R2=0x2558(9560) */
 1009618:	ff e3 26 f1 	CALL 0x1007864 <_sm_notify_client>;
 100961c:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x24c8 <_the_setup> */
 1009620:	0d e1 c8 24 	P5.L = 0x24c8;		/* (9416)	P5=0x24c8 <_the_setup> */
 1009624:	a8 e4 11 00 	R0 = B[P5 + 0x11] (Z);
 1009628:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 100962a:	10 08       	CC = R0 == R2;
 100962c:	0c 14       	IF !CC JUMP 0x1009644 <_sm_packet_handler+0xbe4> (BP);
 100962e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100ffd3(16842707) */
 1009632:	00 e1 74 9f 	R0.L = 0x9f74;		/* (-24716)	R0=0x1009f74(16818036) */
 1009636:	00 e3 c1 2c 	CALL 0x100efb8 <_puts>;
 100963a:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100963c:	a8 e6 10 00 	B[P5 + 0x10] = R0;
 1009640:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1009642:	df 20       	JUMP.S 0x1009800 <_sm_packet_handler+0xda0>;
 1009644:	08 0c       	CC = R0 == 0x1;
 1009646:	09 14       	IF !CC JUMP 0x1009658 <_sm_packet_handler+0xbf8> (BP);
 1009648:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000001(16777217) */
 100964c:	00 e1 84 9f 	R0.L = 0x9f84;		/* (-24700)	R0=0x1009f84(16818052) */
 1009650:	00 e3 b4 2c 	CALL 0x100efb8 <_puts>;
 1009654:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 1009656:	d5 20       	JUMP.S 0x1009800 <_sm_packet_handler+0xda0>;
 1009658:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000003(16777219) */
 100965c:	00 e1 98 9f 	R0.L = 0x9f98;		/* (-24680)	R0=0x1009f98(16818072) */
 1009660:	00 e3 ac 2c 	CALL 0x100efb8 <_puts>;
 1009664:	30 60       	R0 = 0x6 (X);		/*		R0=0x6(  6) */
 1009666:	cd 20       	JUMP.S 0x1009800 <_sm_packet_handler+0xda0>;
 1009668:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000006(16777222) */
 100966c:	00 e1 a8 9f 	R0.L = 0x9fa8;		/* (-24664)	R0=0x1009fa8(16818088) */
 1009670:	00 e3 a4 2c 	CALL 0x100efb8 <_puts>;
 1009674:	28 99       	R0 = B[P5] (Z);
 1009676:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 1009678:	08 08       	CC = R0 == R1;
 100967a:	05 18       	IF CC JUMP 0x1009684 <_sm_packet_handler+0xc24>;
 100967c:	44 30       	R0 = P4;
 100967e:	ff e3 9b f2 	CALL 0x1007bb4 <_sm_pdu_received_in_wrong_state>;
 1009682:	c0 20       	JUMP.S 0x1009802 <_sm_packet_handler+0xda2>;
 1009684:	45 30       	R0 = P5;
 1009686:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x4 <_att_client_handler>(  4) */
 100968a:	08 64       	R0 += 0x1;		/* (  1) */
 100968c:	01 e1 36 25 	R1.L = 0x2536;		/* (9526)	R1=0x2536(9526) */
 1009690:	00 e3 50 06 	CALL 0x100a330 <_swap128>;
 1009694:	70 60       	R0 = 0xe (X);		/*		R0=0xe( 14) */
 1009696:	b5 20       	JUMP.S 0x1009800 <_sm_packet_handler+0xda0>;
 1009698:	01 30       	R0 = R1;
 100969a:	d0 67       	R0 += -0x6;		/* ( -6) */
 100969c:	41 43       	R1 = R0.B (Z);
 100969e:	21 0e       	CC = R1 <= 0x4 (IU);
 10096a0:	51 14       	IF !CC JUMP 0x1009742 <_sm_packet_handler+0xce2> (BP);
 10096a2:	01 32       	P0 = R1;
 10096a4:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x10025f8 */
 10096a8:	0a e1 60 a1 	P2.L = 0xa160;		/* (-24224)	P2=0x100a160 */
 10096ac:	82 5e       	P2 = P2 + (P0 << 0x2);
 10096ae:	51 91       	P1 = [P2];
 10096b0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0xa160 */
 10096b4:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 10096b8:	51 00       	JUMP (P1);
 10096ba:	90 a1       	R0 = [P2 + 0x18];
 10096bc:	00 4a       	BITSET (R0, 0x0);		/* bit  0 */
 10096be:	90 b1       	[P2 + 0x18] = R0;
 10096c0:	45 30       	R0 = P5;
 10096c2:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x2536(9526) */
 10096c6:	08 64       	R0 += 0x1;		/* (  1) */
 10096c8:	01 e1 c0 25 	R1.L = 0x25c0;		/* (9664)	R1=0x25c0(9664) */
 10096cc:	39 20       	JUMP.S 0x100973e <_sm_packet_handler+0xcde>;
 10096ce:	90 a1       	R0 = [P2 + 0x18];
 10096d0:	08 4a       	BITSET (R0, 0x1);		/* bit  1 */
 10096d2:	90 b1       	[P2 + 0x18] = R0;
 10096d4:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 10096d8:	a9 e4 01 00 	R1 = B[P5 + 0x1] (Z);
 10096dc:	40 4f       	R0 <<= 0x8;
 10096de:	08 56       	R0 = R0 | R1;
 10096e0:	50 e6 77 00 	W[P2 + 0xee] = R0;
 10096e4:	45 30       	R0 = P5;
 10096e6:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x25c0(9664) */
 10096ea:	18 64       	R0 += 0x3;		/* (  3) */
 10096ec:	01 e1 b8 25 	R1.L = 0x25b8;		/* (9656)	R1=0x25b8(9656) */
 10096f0:	00 e3 18 06 	CALL 0x100a320 <_swap64>;
 10096f4:	27 20       	JUMP.S 0x1009742 <_sm_packet_handler+0xce2>;
 10096f6:	90 a1       	R0 = [P2 + 0x18];
 10096f8:	10 4a       	BITSET (R0, 0x2);		/* bit  2 */
 10096fa:	90 b1       	[P2 + 0x18] = R0;
 10096fc:	45 30       	R0 = P5;
 10096fe:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x25b8(9656) */
 1009702:	08 64       	R0 += 0x1;		/* (  1) */
 1009704:	01 e1 d0 25 	R1.L = 0x25d0;		/* (9680)	R1=0x25d0(9680) */
 1009708:	1b 20       	JUMP.S 0x100973e <_sm_packet_handler+0xcde>;
 100970a:	90 a1       	R0 = [P2 + 0x18];
 100970c:	18 4a       	BITSET (R0, 0x3);		/* bit  3 */
 100970e:	90 b1       	[P2 + 0x18] = R0;
 1009710:	a8 e5 01 00 	R0 = B[P5 + 0x1] (X);
 1009714:	90 e6 28 01 	B[P2 + 0x128] = R0;
 1009718:	4d 30       	R1 = P5;
 100971a:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0xe( 14) */
 100971e:	11 64       	R1 += 0x2;		/* (  2) */
 1009720:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 1009722:	00 e1 f1 25 	R0.L = 0x25f1;		/* (9713)	R0=0x25f1(9713) */
 1009726:	00 e3 ef 32 	CALL 0x100fd04 <_memcpy>;
 100972a:	0c 20       	JUMP.S 0x1009742 <_sm_packet_handler+0xce2>;
 100972c:	90 a1       	R0 = [P2 + 0x18];
 100972e:	20 4a       	BITSET (R0, 0x4);		/* bit  4 */
 1009730:	90 b1       	[P2 + 0x18] = R0;
 1009732:	45 30       	R0 = P5;
 1009734:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x25d0(9680) */
 1009738:	08 64       	R0 += 0x1;		/* (  1) */
 100973a:	01 e1 e0 25 	R1.L = 0x25e0;		/* (9696)	R1=0x25e0(9696) */
 100973e:	00 e3 f9 05 	CALL 0x100a330 <_swap128>;
 1009742:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x24c8 <_the_setup> */
 1009746:	0d e1 c8 24 	P5.L = 0x24c8;		/* (9416)	P5=0x24c8 <_the_setup> */
 100974a:	a8 e5 45 00 	R0 = B[P5 + 0x45] (X);
 100974e:	ff e3 ad f0 	CALL 0x10078a8 <_sm_key_distribution_flags_for_set>;
 1009752:	a9 a1       	R1 = [P5 + 0x18];
 1009754:	08 08       	CC = R0 == R1;
 1009756:	56 14       	IF !CC JUMP 0x1009802 <_sm_packet_handler+0xda2> (BP);
 1009758:	a9 e5 28 01 	R1 = B[P5 + 0x128] (X);
 100975c:	4a 43       	R2 = R1.B (Z);
 100975e:	02 0c       	CC = R2 == 0x0;
 1009760:	03 18       	IF CC JUMP 0x1009766 <_sm_packet_handler+0xd06>;
 1009762:	10 48       	CC = !BITTST (R0, 0x2);		/* bit  2 */
 1009764:	0d 1c       	IF CC JUMP 0x100977e <_sm_packet_handler+0xd1e> (BP);
 1009766:	48 43       	R0 = R1.B (Z);
 1009768:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x25e0(9696) */
 100976c:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x6(  6) */
 1009770:	01 e1 f1 25 	R1.L = 0x25f1;		/* (9713)	R1=0x25f1(9713) */
 1009774:	02 e1 d0 25 	R2.L = 0x25d0;		/* (9680)	R2=0x25d0(9680) */
 1009778:	ff e3 10 ee 	CALL 0x1007398 <_le_device_db_add>;
 100977c:	20 b3       	[P4 + 0x30] = R0;
 100977e:	00 00       	NOP;
 1009780:	20 a3       	R0 = [P4 + 0x30];
 1009782:	80 0c       	CC = R0 < 0x0;
 1009784:	32 18       	IF CC JUMP 0x10097e8 <_sm_packet_handler+0xd88>;
 1009786:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 1009788:	ff e3 30 ef 	CALL 0x10075e8 <_le_device_db_local_counter_set>;
 100978c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 1009790:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 1009794:	90 a1       	R0 = [P2 + 0x18];
 1009796:	20 48       	CC = !BITTST (R0, 0x4);		/* bit  4 */
 1009798:	0c 1c       	IF CC JUMP 0x10097b0 <_sm_packet_handler+0xd50> (BP);
 100979a:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x0 <data_addr>(  0) */
 100979e:	20 a3       	R0 = [P4 + 0x30];
 10097a0:	01 e1 e0 25 	R1.L = 0x25e0;		/* (9696)	R1=0x25e0(9696) */
 10097a4:	ff e3 e0 ee 	CALL 0x1007564 <_le_device_db_csrk_set>;
 10097a8:	20 a3       	R0 = [P4 + 0x30];
 10097aa:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10097ac:	ff e3 fe ee 	CALL 0x10075a8 <_le_device_db_remote_counter_set>;
 10097b0:	00 00       	NOP;
 10097b2:	a0 e4 02 00 	R0 = B[P4 + 0x2] (Z);
 10097b6:	00 0c       	CC = R0 == 0x0;
 10097b8:	18 14       	IF !CC JUMP 0x10097e8 <_sm_packet_handler+0xd88> (BP);
 10097ba:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 10097be:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 10097c2:	90 a1       	R0 = [P2 + 0x18];
 10097c4:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 10097c6:	01 54       	R0 = R1 & R0;
 10097c8:	18 0c       	CC = R0 == 0x3;
 10097ca:	0f 14       	IF !CC JUMP 0x10097e8 <_sm_packet_handler+0xd88> (BP);
 10097cc:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x25d0(9680) */
 10097d0:	02 e1 c0 25 	R2.L = 0x25c0;		/* (9664)	R2=0x25c0(9664) */
 10097d4:	20 a3       	R0 = [P4 + 0x30];
 10097d6:	51 e5 77 00 	R1 = W[P2 + 0xee] (X);
 10097da:	f2 b0       	[SP + 0xc] = R2;
 10097dc:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x25c0(9664) */
 10097e0:	02 e1 b8 25 	R2.L = 0x25b8;		/* (9656)	R2=0x25b8(9656) */
 10097e4:	ff e3 4e ee 	CALL 0x1007480 <_le_device_db_encryption_set>;
 10097e8:	00 00       	NOP;
 10097ea:	a0 e4 02 00 	R0 = B[P4 + 0x2] (Z);
 10097ee:	00 0c       	CC = R0 == 0x0;
 10097f0:	07 1c       	IF CC JUMP 0x10097fe <_sm_packet_handler+0xd9e> (BP);
 10097f2:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10097f4:	e0 b0       	[P4 + 0xc] = R0;
 10097f6:	20 95       	R0 = W[P4] (Z);
 10097f8:	ff e3 ca f1 	CALL 0x1007b8c <_sm_done_for_handle>;
 10097fc:	03 20       	JUMP.S 0x1009802 <_sm_packet_handler+0xda2>;
 10097fe:	b8 60       	R0 = 0x17 (X);		/*		R0=0x17( 23) */
 1009800:	e0 b0       	[P4 + 0xc] = R0;
 1009802:	ff e3 93 f3 	CALL 0x1007f28 <_sm_run>;
 1009806:	03 20       	JUMP.S 0x100980c <_sm_packet_handler+0xdac>;
 1009808:	50 61       	R0 = 0x2a (X);		/*		R0=0x2a( 42) */
 100980a:	46 2e       	JUMP.S 0x1009496 <_sm_packet_handler+0xa36>;
 100980c:	01 e8 00 00 	UNLINK;
 1009810:	a3 05       	(R7:4, P5:3) = [SP++];
 1009812:	10 00       	RTS;

01009814 <_sm_notify_client_authorization.clone.5>:
 1009814:	78 05       	[--SP] = (R7:7);
 1009816:	00 e8 08 00 	LINK 0x20;		/* (32) */
 100981a:	3a 30       	R7 = R2;
 100981c:	d2 62       	R2 = -0x26 (X);		/*		R2=0xffffffda(-38) */
 100981e:	b8 e6 f1 ff 	B[FP + -0xf] = R0;
 1009822:	ba e6 f0 ff 	B[FP + -0x10] = R2;
 1009826:	47 30       	R0 = FP;
 1009828:	90 67       	R0 += -0xe;		/* (-14) */
 100982a:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 100982c:	00 e3 6c 32 	CALL 0x100fd04 <_memcpy>;
 1009830:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 1009834:	0a e1 f8 25 	P2.L = 0x25f8;		/* (9720)	P2=0x25f8 <_sm_client_packet_handler> */
 1009838:	52 91       	P2 = [P2];
 100983a:	bf e6 fe ff 	B[FP + -0x2] = R7;
 100983e:	42 0c       	CC = P2 == 0x0;
 1009840:	08 18       	IF CC JUMP 0x1009850 <_sm_notify_client_authorization.clone.5+0x3c>;
 1009842:	80 60       	R0 = 0x10 (X);		/*		R0=0x10( 16) */
 1009844:	b0 b5       	W[SP + 0xc] = R0;
 1009846:	57 30       	R2 = FP;
 1009848:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100984a:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100984c:	82 67       	R2 += -0x10;		/* (-16) */
 100984e:	62 00       	CALL (P2);
 1009850:	01 e8 00 00 	UNLINK;
 1009854:	38 05       	(R7:7) = [SP++];
 1009856:	10 00       	RTS;

01009858 <_sm_central_device_lookup_active>:
 1009858:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x25f8 <_sm_client_packet_handler> */
 100985c:	0a e1 10 26 	P2.L = 0x2610;		/* (9744)	P2=0x2610 <_sm_central_device_test> */
 1009860:	10 91       	R0 = [P2];
 1009862:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1009866:	c0 43       	R0 =~ R0;
 1009868:	f8 4e       	R0 >>= 0x1f;
 100986a:	01 e8 00 00 	UNLINK;
 100986e:	10 00       	RTS;

01009870 <_sm_cmac_start>:
 1009870:	e5 05       	[--SP] = (R7:4, P5:5);
 1009872:	18 30       	R3 = R0;
 1009874:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1009878:	31 30       	R6 = R1;
 100987a:	2a 30       	R5 = R2;
 100987c:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x4 <_att_client_handler>(  4) */
 1009880:	0b 30       	R1 = R3;
 1009882:	bc a2       	R4 = [FP + 0x28];
 1009884:	ff a2       	R7 = [FP + 0x2c];
 1009886:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1009888:	00 e1 5c 26 	R0.L = 0x265c;		/* (9820)	R0=0x265c <_sm_cmac_k>(9820) */
 100988c:	00 e3 3c 32 	CALL 0x100fd04 <_memcpy>;
 1009890:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x24c8 <_the_setup> */
 1009894:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2610 <_sm_central_device_test> */
 1009898:	0a e1 94 26 	P2.L = 0x2694;		/* (9876)	P2=0x2694 <_sm_cmac_message> */
 100989c:	0d e1 6c 26 	P5.L = 0x266c;		/* (9836)	P5=0x266c <_sm_cmac_message_len> */
 10098a0:	26 64       	R6 += 0x4;		/* (  4) */
 10098a2:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x265c <_sm_cmac_k>(9820) */
 10098a6:	15 93       	[P2] = R5;
 10098a8:	00 e1 c1 26 	R0.L = 0x26c1;		/* (9921)	R0=0x26c1 <_sm_cmac_sign_counter>(9921) */
 10098ac:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10098ae:	14 30       	R2 = R4;
 10098b0:	2e 97       	W[P5] = R6;
 10098b2:	00 e3 a5 04 	CALL 0x100a1fc <_bt_store_32>;
 10098b6:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2694 <_sm_cmac_message> */
 10098ba:	0a e1 90 26 	P2.L = 0x2690;		/* (9872)	P2=0x2690 <_sm_cmac_done_handler> */
 10098be:	17 93       	[P2] = R7;
 10098c0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2690 <_sm_cmac_done_handler> */
 10098c4:	0a e1 7e 26 	P2.L = 0x267e;		/* (9854)	P2=0x267e <_sm_cmac_block_current> */
 10098c8:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 10098ca:	10 9b       	B[P2] = R0;
 10098cc:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x0 <data_addr>(  0) */
 10098d0:	00 e1 80 26 	R0.L = 0x2680;		/* (9856)	R0=0x2680 <_sm_cmac_x>(9856) */
 10098d4:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 10098d6:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 10098d8:	00 e3 64 32 	CALL 0x100fda0 <_memset>;
 10098dc:	28 95       	R0 = W[P5] (Z);
 10098de:	78 64       	R0 += 0xf;		/* ( 15) */
 10098e0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x267e <_sm_cmac_block_current> */
 10098e4:	20 4e       	R0 >>= 0x4;
 10098e6:	0a e1 7f 26 	P2.L = 0x267f;		/* (9855)	P2=0x267f <_sm_cmac_block_count> */
 10098ea:	10 9b       	B[P2] = R0;
 10098ec:	40 43       	R0 = R0.B (Z);
 10098ee:	00 0c       	CC = R0 == 0x0;
 10098f0:	03 10       	IF !CC JUMP 0x10098f6 <_sm_cmac_start+0x86>;
 10098f2:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 10098f4:	10 9b       	B[P2] = R0;
 10098f6:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x267f <_sm_cmac_block_count> */
 10098fa:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 10098fc:	0a e1 00 26 	P2.L = 0x2600;		/* (9728)	P2=0x2600 <_sm_cmac_state> */
 1009900:	10 93       	[P2] = R0;
 1009902:	01 e8 00 00 	UNLINK;
 1009906:	a5 05       	(R7:4, P5:5) = [SP++];
 1009908:	ff e2 10 f3 	JUMP.L 0x1007f28 <_sm_run>;

0100990c <_sm_cmac_ready>:
 100990c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2600 <_sm_cmac_state> */
 1009910:	0a e1 00 26 	P2.L = 0x2600;		/* (9728)	P2=0x2600 <_sm_cmac_state> */
 1009914:	10 91       	R0 = [P2];
 1009916:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100991a:	00 0c       	CC = R0 == 0x0;
 100991c:	00 02       	R0 = CC;
 100991e:	01 e8 00 00 	UNLINK;
 1009922:	10 00       	RTS;

01009924 <_sm_register_oob_data_callback>:
 1009924:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2600 <_sm_cmac_state> */
 1009928:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100992c:	0a e1 bc 26 	P2.L = 0x26bc;		/* (9916)	P2=0x26bc <_sm_get_oob_data> */
 1009930:	10 93       	[P2] = R0;
 1009932:	01 e8 00 00 	UNLINK;
 1009936:	10 00       	RTS;

01009938 <_sm_register_packet_handler>:
 1009938:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x26bc <_sm_get_oob_data> */
 100993c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1009940:	0a e1 f8 25 	P2.L = 0x25f8;		/* (9720)	P2=0x25f8 <_sm_client_packet_handler> */
 1009944:	10 93       	[P2] = R0;
 1009946:	01 e8 00 00 	UNLINK;
 100994a:	10 00       	RTS;

0100994c <_sm_set_accepted_stk_generation_methods>:
 100994c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x25f8 <_sm_client_packet_handler> */
 1009950:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1009954:	0a e1 fd 25 	P2.L = 0x25fd;		/* (9725)	P2=0x25fd <_sm_accepted_stk_generation_methods> */
 1009958:	10 9b       	B[P2] = R0;
 100995a:	01 e8 00 00 	UNLINK;
 100995e:	10 00       	RTS;

01009960 <_sm_set_encryption_key_size_range>:
 1009960:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x25fd <_sm_accepted_stk_generation_methods> */
 1009964:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1009968:	0a e1 ff 25 	P2.L = 0x25ff;		/* (9727)	P2=0x25ff <_sm_min_encryption_key_size> */
 100996c:	10 9b       	B[P2] = R0;
 100996e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x25ff <_sm_min_encryption_key_size> */
 1009972:	0a e1 fe 25 	P2.L = 0x25fe;		/* (9726)	P2=0x25fe <_sm_max_encryption_key_size> */
 1009976:	11 9b       	B[P2] = R1;
 1009978:	01 e8 00 00 	UNLINK;
 100997c:	10 00       	RTS;
	...

01009980 <_sm_set_authentication_requirements>:
 1009980:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x25fe <_sm_max_encryption_key_size> */
 1009984:	00 e8 00 00 	LINK 0x0;		/* (0) */
 1009988:	0a e1 c0 26 	P2.L = 0x26c0;		/* (9920)	P2=0x26c0 <_sm_auth_req> */
 100998c:	10 9b       	B[P2] = R0;
 100998e:	01 e8 00 00 	UNLINK;
 1009992:	10 00       	RTS;

01009994 <_sm_set_io_capabilities>:
 1009994:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x26c0 <_sm_auth_req> */
 1009998:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100999c:	0a e1 30 00 	P2.L = 0x30;		/* ( 48)	P2=0x30 <_sm_io_capabilities> */
 10099a0:	10 9b       	B[P2] = R0;
 10099a2:	01 e8 00 00 	UNLINK;
 10099a6:	10 00       	RTS;

010099a8 <_sm_set_request_security>:
 10099a8:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x30 <_sm_io_capabilities> */
 10099ac:	00 e8 00 00 	LINK 0x0;		/* (0) */
 10099b0:	0a e1 1f 26 	P2.L = 0x261f;		/* (9759)	P2=0x261f <_sm_slave_request_security> */
 10099b4:	10 9b       	B[P2] = R0;
 10099b6:	01 e8 00 00 	UNLINK;
 10099ba:	10 00       	RTS;

010099bc <_sm_set_er>:
 10099bc:	08 30       	R1 = R0;
 10099be:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x1(  1) */
 10099c2:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10099c6:	00 e1 ac 26 	R0.L = 0x26ac;		/* (9900)	R0=0x26ac <_sm_persistent_er>(9900) */
 10099ca:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 10099cc:	00 e3 9c 31 	CALL 0x100fd04 <_memcpy>;
 10099d0:	01 e8 00 00 	UNLINK;
 10099d4:	10 00       	RTS;
	...

010099d8 <_sm_set_ir>:
 10099d8:	08 30       	R1 = R0;
 10099da:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x26ac <_sm_persistent_er>(9900) */
 10099de:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10099e2:	00 e1 9c 26 	R0.L = 0x269c;		/* (9884)	R0=0x269c <_sm_persistent_ir>(9884) */
 10099e6:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 10099e8:	00 e3 8e 31 	CALL 0x100fd04 <_memcpy>;
 10099ec:	01 e8 00 00 	UNLINK;
 10099f0:	10 00       	RTS;
	...

010099f4 <_sm_test_set_irk>:
 10099f4:	08 30       	R1 = R0;
 10099f6:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x269c <_sm_persistent_ir>(9884) */
 10099fa:	00 e8 03 00 	LINK 0xc;		/* (12) */
 10099fe:	00 e1 31 26 	R0.L = 0x2631;		/* (9777)	R0=0x2631 <_sm_persistent_irk>(9777) */
 1009a02:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 1009a04:	00 e3 80 31 	CALL 0x100fd04 <_memcpy>;
 1009a08:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x261f <_sm_slave_request_security> */
 1009a0c:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1009a0e:	0a e1 1e 26 	P2.L = 0x261e;		/* (9758)	P2=0x261e <_sm_persistent_irk_ready> */
 1009a12:	10 9b       	B[P2] = R0;
 1009a14:	01 e8 00 00 	UNLINK;
 1009a18:	10 00       	RTS;
	...

01009a1c <_sm_send_security_request>:
 1009a1c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1009a20:	ff e3 98 ef 	CALL 0x1007950 <_sm_get_connection_for_handle>;
 1009a24:	10 32       	P2 = R0;
 1009a26:	59 61       	R1 = 0x2b (X);		/*		R1=0x2b( 43) */
 1009a28:	d0 a0       	R0 = [P2 + 0xc];
 1009a2a:	08 08       	CC = R0 == R1;
 1009a2c:	07 14       	IF !CC JUMP 0x1009a3a <_sm_send_security_request+0x1e> (BP);
 1009a2e:	40 61       	R0 = 0x28 (X);		/*		R0=0x28( 40) */
 1009a30:	d0 b0       	[P2 + 0xc] = R0;
 1009a32:	01 e8 00 00 	UNLINK;
 1009a36:	ff e2 79 f2 	JUMP.L 0x1007f28 <_sm_run>;
 1009a3a:	01 e8 00 00 	UNLINK;
 1009a3e:	10 00       	RTS;

01009a40 <_sm_init>:
 1009a40:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000028(16777256) */
 1009a44:	00 e8 0b 00 	LINK 0x2c;		/* (44) */
 1009a48:	00 e1 bc 9f 	R0.L = 0x9fbc;		/* (-24644)	R0=0x1009fbc(16818108) */
 1009a4c:	00 e3 b6 2a 	CALL 0x100efb8 <_puts>;
 1009a50:	4f 32       	P1 = FP;
 1009a52:	57 32       	P2 = FP;
 1009a54:	81 6f       	P1 += -0x10;		/* (-16) */
 1009a56:	02 6f       	P2 += -0x20;		/* (-32) */
 1009a58:	80 61       	R0 = 0x30 (X);		/*		R0=0x30( 48) */
 1009a5a:	21 e1 60 00 	R1 = 0x60 (X);		/*		R1=0x60( 96) */
 1009a5e:	23 e1 40 00 	R3 = 0x40 (X);		/*		R3=0x40( 64) */
 1009a62:	81 50       	R2 = R1 + R0;
 1009a64:	08 9a       	B[P1++] = R0;
 1009a66:	12 9a       	B[P2++] = R2;
 1009a68:	08 64       	R0 += 0x1;		/* (  1) */
 1009a6a:	42 43       	R2 = R0.B (Z);
 1009a6c:	1a 08       	CC = R2 == R3;
 1009a6e:	fa 17       	IF !CC JUMP 0x1009a62 <_sm_init+0x22> (BP);
 1009a70:	47 30       	R0 = FP;
 1009a72:	80 67       	R0 += -0x10;		/* (-16) */
 1009a74:	ff e3 a4 ff 	CALL 0x10099bc <_sm_set_er>;
 1009a78:	47 30       	R0 = FP;
 1009a7a:	00 67       	R0 += -0x20;		/* (-32) */
 1009a7c:	ff e3 ae ff 	CALL 0x10099d8 <_sm_set_ir>;
 1009a80:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x261e <_sm_persistent_irk_ready> */
 1009a84:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 1009a86:	0a e1 fd 25 	P2.L = 0x25fd;		/* (9725)	P2=0x25fd <_sm_accepted_stk_generation_methods> */
 1009a8a:	10 9b       	B[P2] = R0;
 1009a8c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x25fd <_sm_accepted_stk_generation_methods> */
 1009a90:	81 60       	R1 = 0x10 (X);		/*		R1=0x10( 16) */
 1009a92:	0a e1 fe 25 	P2.L = 0x25fe;		/* (9726)	P2=0x25fe <_sm_max_encryption_key_size> */
 1009a96:	11 9b       	B[P2] = R1;
 1009a98:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x25fe <_sm_max_encryption_key_size> */
 1009a9c:	0a e1 ff 25 	P2.L = 0x25ff;		/* (9727)	P2=0x25ff <_sm_min_encryption_key_size> */
 1009aa0:	10 9b       	B[P2] = R0;
 1009aa2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x25ff <_sm_min_encryption_key_size> */
 1009aa6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1009aa8:	0a e1 00 26 	P2.L = 0x2600;		/* (9728)	P2=0x2600 <_sm_cmac_state> */
 1009aac:	10 93       	[P2] = R0;
 1009aae:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2600 <_sm_cmac_state> */
 1009ab2:	0a e1 04 26 	P2.L = 0x2604;		/* (9732)	P2=0x2604 <_dkg_state> */
 1009ab6:	10 93       	[P2] = R0;
 1009ab8:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2604 <_dkg_state> */
 1009abc:	0a e1 08 26 	P2.L = 0x2608;		/* (9736)	P2=0x2608 <_rau_state> */
 1009ac0:	10 93       	[P2] = R0;
 1009ac2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2608 <_rau_state> */
 1009ac6:	0a e1 0c 26 	P2.L = 0x260c;		/* (9740)	P2=0x260c <_sm_aes128_state> */
 1009aca:	10 93       	[P2] = R0;
 1009acc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x260c <_sm_aes128_state> */
 1009ad0:	f9 63       	R1 = -0x1 (X);		/*		R1=0xffffffff( -1) */
 1009ad2:	0a e1 10 26 	P2.L = 0x2610;		/* (9744)	P2=0x2610 <_sm_central_device_test> */
 1009ad6:	11 93       	[P2] = R1;
 1009ad8:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2610 <_sm_central_device_test> */
 1009adc:	0a e1 14 26 	P2.L = 0x2614;		/* (9748)	P2=0x2614 <_sm_central_ah_calculation_active> */
 1009ae0:	10 93       	[P2] = R0;
 1009ae2:	20 e1 dd 6d 	R0 = 0x6ddd (X);		/*		R0=0x6ddd(28125) */
 1009ae6:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2614 <_sm_central_ah_calculation_active> */
 1009aea:	28 4f       	R0 <<= 0x5;
 1009aec:	0a e1 18 26 	P2.L = 0x2618;		/* (9752)	P2=0x2618 <_gap_random_adress_update_period> */
 1009af0:	10 93       	[P2] = R0;
 1009af2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x2618 <_gap_random_adress_update_period> */
 1009af6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1009af8:	0a e1 1c 26 	P2.L = 0x261c;		/* (9756)	P2=0x261c <_sm_active_connection> */
 1009afc:	10 97       	W[P2] = R0;
 1009afe:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 1009b02:	00 e1 60 8a 	R0.L = 0x8a60;		/* (-30112)	R0=0x1008a60 <_sm_packet_handler>(16812640) */
 1009b06:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 1009b08:	ff e3 da eb 	CALL 0x10072bc <_le_l2cap_register_fixed_channel>;
 1009b0c:	01 e8 00 00 	UNLINK;
 1009b10:	10 00       	RTS;
	...

01009b14 <_sm_encryption_key_size>:
 1009b14:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1009b18:	ff e3 2c ef 	CALL 0x1007970 <_sm_get_connection>;
 1009b1c:	10 32       	P2 = R0;
 1009b1e:	42 0c       	CC = P2 == 0x0;
 1009b20:	08 1c       	IF CC JUMP 0x1009b30 <_sm_encryption_key_size+0x1c> (BP);
 1009b22:	90 e4 14 00 	R0 = B[P2 + 0x14] (Z);
 1009b26:	00 0c       	CC = R0 == 0x0;
 1009b28:	04 1c       	IF CC JUMP 0x1009b30 <_sm_encryption_key_size+0x1c> (BP);
 1009b2a:	90 e4 16 00 	R0 = B[P2 + 0x16] (Z);
 1009b2e:	02 20       	JUMP.S 0x1009b32 <_sm_encryption_key_size+0x1e>;
 1009b30:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1009b32:	01 e8 00 00 	UNLINK;
 1009b36:	10 00       	RTS;

01009b38 <_sm_authenticated>:
 1009b38:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1009b3c:	ff e3 1a ef 	CALL 0x1007970 <_sm_get_connection>;
 1009b40:	10 32       	P2 = R0;
 1009b42:	42 0c       	CC = P2 == 0x0;
 1009b44:	08 1c       	IF CC JUMP 0x1009b54 <_sm_authenticated+0x1c> (BP);
 1009b46:	90 e4 14 00 	R0 = B[P2 + 0x14] (Z);
 1009b4a:	00 0c       	CC = R0 == 0x0;
 1009b4c:	04 1c       	IF CC JUMP 0x1009b54 <_sm_authenticated+0x1c> (BP);
 1009b4e:	90 e4 15 00 	R0 = B[P2 + 0x15] (Z);
 1009b52:	02 20       	JUMP.S 0x1009b56 <_sm_authenticated+0x1e>;
 1009b54:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1009b56:	01 e8 00 00 	UNLINK;
 1009b5a:	10 00       	RTS;

01009b5c <_sm_authorization_state>:
 1009b5c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1009b60:	ff e3 08 ef 	CALL 0x1007970 <_sm_get_connection>;
 1009b64:	10 32       	P2 = R0;
 1009b66:	42 0c       	CC = P2 == 0x0;
 1009b68:	0b 1c       	IF CC JUMP 0x1009b7e <_sm_authorization_state+0x22> (BP);
 1009b6a:	90 e4 14 00 	R0 = B[P2 + 0x14] (Z);
 1009b6e:	00 0c       	CC = R0 == 0x0;
 1009b70:	07 1c       	IF CC JUMP 0x1009b7e <_sm_authorization_state+0x22> (BP);
 1009b72:	90 e4 15 00 	R0 = B[P2 + 0x15] (Z);
 1009b76:	00 0c       	CC = R0 == 0x0;
 1009b78:	03 1c       	IF CC JUMP 0x1009b7e <_sm_authorization_state+0x22> (BP);
 1009b7a:	10 a2       	R0 = [P2 + 0x20];
 1009b7c:	02 20       	JUMP.S 0x1009b80 <_sm_authorization_state+0x24>;
 1009b7e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1009b80:	01 e8 00 00 	UNLINK;
 1009b84:	10 00       	RTS;
	...

01009b88 <_sm_request_authorization>:
 1009b88:	00 e8 05 00 	LINK 0x14;		/* (20) */
 1009b8c:	ff e3 f2 ee 	CALL 0x1007970 <_sm_get_connection>;
 1009b90:	10 32       	P2 = R0;
 1009b92:	42 0c       	CC = P2 == 0x0;
 1009b94:	24 1c       	IF CC JUMP 0x1009bdc <_sm_request_authorization+0x54> (BP);
 1009b96:	90 e4 02 00 	R0 = B[P2 + 0x2] (Z);
 1009b9a:	00 0c       	CC = R0 == 0x0;
 1009b9c:	14 1c       	IF CC JUMP 0x1009bc4 <_sm_request_authorization+0x3c> (BP);
 1009b9e:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1009ba0:	10 b2       	[P2 + 0x20] = R0;
 1009ba2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x261c <_sm_active_connection> */
 1009ba6:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 1009baa:	91 e5 8e 00 	R1 = B[P2 + 0x8e] (X);
 1009bae:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1009bb0:	f0 b0       	[SP + 0xc] = R0;
 1009bb2:	30 b6       	W[SP + 0x10] = R0;
 1009bb4:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x10( 16) */
 1009bb8:	c8 62       	R0 = -0x27 (X);		/*		R0=0xffffffd9(-39) */
 1009bba:	02 e1 58 25 	R2.L = 0x2558;		/* (9560)	R2=0x2558(9560) */
 1009bbe:	ff e3 53 ee 	CALL 0x1007864 <_sm_notify_client>;
 1009bc2:	0d 20       	JUMP.S 0x1009bdc <_sm_request_authorization+0x54>;
 1009bc4:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x24f8 */
 1009bc8:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 1009bca:	09 e1 fc 25 	P1.L = 0x25fc;		/* (9724)	P1=0x25fc <_sm_authenticate_outgoing_connections> */
 1009bce:	08 9b       	B[P1] = R0;
 1009bd0:	d0 a0       	R0 = [P2 + 0xc];
 1009bd2:	91 61       	R1 = 0x32 (X);		/*		R1=0x32( 50) */
 1009bd4:	08 08       	CC = R0 == R1;
 1009bd6:	03 14       	IF !CC JUMP 0x1009bdc <_sm_request_authorization+0x54> (BP);
 1009bd8:	b0 61       	R0 = 0x36 (X);		/*		R0=0x36( 54) */
 1009bda:	d0 b0       	[P2 + 0xc] = R0;
 1009bdc:	01 e8 00 00 	UNLINK;
 1009be0:	10 00       	RTS;
	...

01009be4 <_sm_authorization_decline>:
 1009be4:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1009be8:	ff e3 c4 ee 	CALL 0x1007970 <_sm_get_connection>;
 1009bec:	10 32       	P2 = R0;
 1009bee:	42 0c       	CC = P2 == 0x0;
 1009bf0:	12 18       	IF CC JUMP 0x1009c14 <_sm_authorization_decline+0x30>;
 1009bf2:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 1009bf4:	10 b2       	[P2 + 0x20] = R0;
 1009bf6:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 1009bfa:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 1009bfe:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x32( 50) */
 1009c02:	90 e5 8e 00 	R0 = B[P2 + 0x8e] (X);
 1009c06:	01 e1 58 25 	R1.L = 0x2558;		/* (9560)	R1=0x2558(9560) */
 1009c0a:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 1009c0c:	01 e8 00 00 	UNLINK;
 1009c10:	ff e2 02 fe 	JUMP.L 0x1009814 <_sm_notify_client_authorization.clone.5>;
 1009c14:	01 e8 00 00 	UNLINK;
 1009c18:	10 00       	RTS;
	...

01009c1c <_sm_authorization_grant>:
 1009c1c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1009c20:	ff e3 a8 ee 	CALL 0x1007970 <_sm_get_connection>;
 1009c24:	10 32       	P2 = R0;
 1009c26:	42 0c       	CC = P2 == 0x0;
 1009c28:	12 18       	IF CC JUMP 0x1009c4c <_sm_authorization_grant+0x30>;
 1009c2a:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 1009c2c:	10 b2       	[P2 + 0x20] = R0;
 1009c2e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x24c8 <_the_setup> */
 1009c32:	0a e1 c8 24 	P2.L = 0x24c8;		/* (9416)	P2=0x24c8 <_the_setup> */
 1009c36:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x2558(9560) */
 1009c3a:	90 e5 8e 00 	R0 = B[P2 + 0x8e] (X);
 1009c3e:	01 e1 58 25 	R1.L = 0x2558;		/* (9560)	R1=0x2558(9560) */
 1009c42:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 1009c44:	01 e8 00 00 	UNLINK;
 1009c48:	ff e2 e6 fd 	JUMP.L 0x1009814 <_sm_notify_client_authorization.clone.5>;
 1009c4c:	01 e8 00 00 	UNLINK;
 1009c50:	10 00       	RTS;
	...

01009c54 <_sm_le_device_index>:
 1009c54:	00 e8 03 00 	LINK 0xc;		/* (12) */
 1009c58:	ff e3 7c ee 	CALL 0x1007950 <_sm_get_connection_for_handle>;
 1009c5c:	10 32       	P2 = R0;
 1009c5e:	42 0c       	CC = P2 == 0x0;
 1009c60:	03 1c       	IF CC JUMP 0x1009c66 <_sm_le_device_index+0x12> (BP);
 1009c62:	10 a3       	R0 = [P2 + 0x30];
 1009c64:	02 20       	JUMP.S 0x1009c68 <_sm_le_device_index+0x14>;
 1009c66:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 1009c68:	01 e8 00 00 	UNLINK;
 1009c6c:	10 00       	RTS;
 1009c6e:	00 00       	NOP;
 1009c70:	4f 4f       	R7 <<= 0x9;
 1009c72:	42 00       	STI R2;
 1009c74:	72 31       	ILLEGAL;
 1009c76:	00 00       	NOP;
 1009c78:	72 32       	SP = P2;
 1009c7a:	00 00       	NOP;
 1009c7c:	73 6d       	P3 += 0x2e;		/* ( 46) */
 1009c7e:	5f 69       	FP = 0x2b (X);		/*		FP=0x2b( 43) */
 1009c80:	6e 69       	SP = 0x2d (X);		/*		SP=0x2d( 45) */
 1009c82:	74 5f       	P5 = P4 + (SP << 0x2);
 1009c84:	73 65       	R3 += 0x2e;		/* ( 46) */
 1009c86:	74 75       	ILLEGAL;
 1009c88:	70 0a       	CC = P0 <= SP (IU);
 1009c8a:	00 00       	NOP;
 1009c8c:	70 31       	ILLEGAL;
 1009c8e:	00 00       	NOP;
 1009c90:	72 00       	CALL (PC + P2);
 1009c92:	00 00       	NOP;
 1009c94:	74 31       	ILLEGAL;
 1009c96:	00 00       	NOP;
 1009c98:	72 65       	R2 += 0x2e;		/* ( 46) */
 1009c9a:	73 70       	ILLEGAL;
 1009c9c:	5f 69       	FP = 0x2b (X);		/*		FP=0x2b( 43) */
 1009c9e:	6e 70       	ILLEGAL;
 1009ca0:	75 74       	ILLEGAL;
 1009ca2:	0a 00       	ILLEGAL;
 1009ca4:	69 6e       	P1 += -0x33;		/* (-51) */
 1009ca6:	69 74       	ILLEGAL;
 1009ca8:	5f 69       	FP = 0x2b (X);		/*		FP=0x2b( 43) */
 1009caa:	6e 70       	ILLEGAL;
 1009cac:	75 74       	ILLEGAL;
 1009cae:	0a 00       	ILLEGAL;
 1009cb0:	6a 75       	ILLEGAL;
 1009cb2:	73 74       	ILLEGAL;
 1009cb4:	5f 77       	ILLEGAL;
 1009cb6:	6f 72       	ILLEGAL;
 1009cb8:	6b 73       	ILLEGAL;
 1009cba:	0a 00       	ILLEGAL;
 1009cbc:	63 61       	R3 = 0x2c (X);		/*		R3=0x2c( 44) */
 1009cbe:	6e 6e       	SP += -0x33;		/* (-51) */
 1009cc0:	6f 74       	ILLEGAL;
 1009cc2:	20 61       	R0 = 0x24 (X);		/*		R0=0x24( 36) */
 1009cc4:	73 6b       	P3 = -0x12 (X);		/*		P3=0xffffffee(-18) */
 1009cc6:	20 75       	ILLEGAL;
 1009cc8:	73 65       	R3 += 0x2e;		/* ( 46) */
 1009cca:	72 0a       	CC = P2 <= SP (IU);
 1009ccc:	00 00       	NOP;
 1009cce:	00 00       	NOP;
 1009cd0:	69 72       	ILLEGAL;
 1009cd2:	6b 0a       	CC = P3 <= P5 (IU);
 1009cd4:	00 00       	NOP;
 1009cd6:	00 00       	NOP;
 1009cd8:	64 68       	P4 = 0xc (X);		/*		P4=0xc( 12) */
 1009cda:	6b 0a       	CC = P3 <= P5 (IU);
 1009cdc:	00 00       	NOP;
 1009cde:	00 00       	NOP;
 1009ce0:	59 00       	ILLEGAL;
 1009ce2:	00 00       	NOP;
 1009ce4:	49 52       	R1 = R1 - R1;
 1009ce6:	4b 00       	ILLEGAL;
 1009ce8:	73 65       	R3 += 0x2e;		/* ( 46) */
 1009cea:	6e 64       	R6 += 0xd;		/* ( 13) */
 1009cec:	5f 73       	ILLEGAL;
 1009cee:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1009cf0:	75 72       	ILLEGAL;
 1009cf2:	69 74       	ILLEGAL;
 1009cf4:	79 5f       	P5 = P1 + (FP << 0x2);
 1009cf6:	72 65       	R2 += 0x2e;		/* ( 46) */
 1009cf8:	71 75       	ILLEGAL;
 1009cfa:	65 73       	ILLEGAL;
 1009cfc:	74 0a       	CC = P4 <= SP (IU);
 1009cfe:	00 00       	NOP;
 1009d00:	73 65       	R3 += 0x2e;		/* ( 46) */
 1009d02:	6e 64       	R6 += 0xd;		/* ( 13) */
 1009d04:	0a 00       	ILLEGAL;
 1009d06:	00 00       	NOP;
 1009d08:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1009d0a:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 1009d0c:	6e 67       	R6 += -0x13;		/* (-19) */
 1009d0e:	5f 72       	ILLEGAL;
 1009d10:	65 71       	ILLEGAL;
 1009d12:	75 65       	R5 += 0x2e;		/* ( 46) */
 1009d14:	73 74       	ILLEGAL;
 1009d16:	5f 72       	ILLEGAL;
 1009d18:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1009d1a:	65 69       	P5 = 0x2c (X);		/*		P5=0x2c( 44) */
 1009d1c:	76 65       	R6 += 0x2e;		/* ( 46) */
 1009d1e:	0a 00       	ILLEGAL;
 1009d20:	73 6d       	P3 += 0x2e;		/* ( 46) */
 1009d22:	5f 73       	ILLEGAL;
 1009d24:	74 6b       	P4 = -0x12 (X);		/*		P4=0xffffffee(-18) */
 1009d26:	3a 65       	R2 += 0x27;		/* ( 39) */
 1009d28:	72 72       	ILLEGAL;
 1009d2a:	0a 00       	ILLEGAL;
 1009d2c:	73 65       	R3 += 0x2e;		/* ( 46) */
 1009d2e:	6e 64       	R6 += 0xd;		/* ( 13) */
 1009d30:	5f 70       	ILLEGAL;
 1009d32:	61 69       	P1 = 0x2c (X);		/*		P1=0x2c( 44) */
 1009d34:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 1009d36:	6e 67       	R6 += -0x13;		/* (-19) */
 1009d38:	5f 72       	ILLEGAL;
 1009d3a:	65 73       	ILLEGAL;
 1009d3c:	70 6f       	P0 += -0x12;		/* (-18) */
 1009d3e:	6e 73       	ILLEGAL;
 1009d40:	65 0a       	CC = P5 <= P4 (IU);
 1009d42:	00 00       	NOP;
 1009d44:	73 65       	R3 += 0x2e;		/* ( 46) */
 1009d46:	6e 64       	R6 += 0xd;		/* ( 13) */
 1009d48:	5f 70       	ILLEGAL;
 1009d4a:	61 69       	P1 = 0x2c (X);		/*		P1=0x2c( 44) */
 1009d4c:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 1009d4e:	6e 67       	R6 += -0x13;		/* (-19) */
 1009d50:	5f 72       	ILLEGAL;
 1009d52:	61 6e       	P1 += -0x34;		/* (-52) */
 1009d54:	64 6f       	P4 += -0x14;		/* (-20) */
 1009d56:	6d 0a       	CC = P5 <= P5 (IU);
 1009d58:	00 00       	NOP;
 1009d5a:	00 00       	NOP;
 1009d5c:	73 6d       	P3 += 0x2e;		/* ( 46) */
 1009d5e:	5f 70       	ILLEGAL;
 1009d60:	68 32       	P5 = P0;
 1009d62:	5f 63       	R7 = -0x15 (X);		/*		R7=0xffffffeb(-21) */
 1009d64:	31 5f       	P4 = P1 + (SP << 0x2);
 1009d66:	67 65       	R7 += 0x2c;		/* ( 44) */
 1009d68:	74 5f       	P5 = P4 + (SP << 0x2);
 1009d6a:	65 6e       	P5 += -0x34;		/* (-52) */
 1009d6c:	63 5f       	P5 = P3 + (P4 << 0x2);
 1009d6e:	63 0a       	CC = P3 <= P4 (IU);
 1009d70:	00 00       	NOP;
 1009d72:	00 00       	NOP;
 1009d74:	2d 2d       	JUMP.S 0x10097ce <_sm_packet_handler+0xd6e>;
 1009d76:	2d 2d       	JUMP.S 0x10097d0 <_sm_packet_handler+0xd70>;
 1009d78:	53 4d       	R3 >>>= 0xa;
 1009d7a:	5f 50       	R1 = R7 + R3;
 1009d7c:	48 32       	P1 = P0;
 1009d7e:	5f 43       	R7 = R3.B (Z);
 1009d80:	31 5f       	P4 = P1 + (SP << 0x2);
 1009d82:	47 45       	FP += P0 (BREV);
 1009d84:	54 5f       	P5 = P4 + (P2 << 0x2);
 1009d86:	45 4e       	R5 >>= 0x8;
 1009d88:	43 5f       	P5 = P3 + (P0 << 0x2);
 1009d8a:	41 2d       	JUMP.S 0x100980c <_sm_packet_handler+0xdac>;
 1009d8c:	2d 2d       	JUMP.S 0x10097e6 <_sm_packet_handler+0xd86>;
 1009d8e:	0a 00       	ILLEGAL;
 1009d90:	25 64       	R5 += 0x4;		/* (  4) */
 1009d92:	2c 20       	JUMP.S 0x1009dea <_sm_le_device_index+0x196>;
 1009d94:	25 64       	R5 += 0x4;		/* (  4) */
 1009d96:	0a 00       	ILLEGAL;
 1009d98:	53 4d       	R3 >>>= 0xa;
 1009d9a:	5f 50       	R1 = R7 + R3;
 1009d9c:	48 32       	P1 = P0;
 1009d9e:	5f 43       	R7 = R3.B (Z);
 1009da0:	31 5f       	P4 = P1 + (SP << 0x2);
 1009da2:	53 45       	P3 += P2 (BREV);
 1009da4:	4e 44       	SP = P1 << 0x2;
 1009da6:	5f 50       	R1 = R7 + R3;
 1009da8:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 1009daa:	52 49       	CC = BITTST (R2, 0xa);		/* bit 10 */
 1009dac:	4e 47       	ILLEGAL;
 1009dae:	5f 43       	R7 = R3.B (Z);
 1009db0:	4f 4e       	R7 >>= 0x9;
 1009db2:	46 49       	CC = BITTST (R6, 0x8);		/* bit  8 */
 1009db4:	52 4d       	R2 >>>= 0xa;
 1009db6:	3a 0a       	CC = R2 <= R7 (IU);
 1009db8:	00 00       	NOP;
 1009dba:	00 00       	NOP;
 1009dbc:	70 68       	P0 = 0xe (X);		/*		P0=0xe( 14) */
 1009dbe:	33 5f       	P4 = P3 + (SP << 0x2);
 1009dc0:	64 69       	P4 = 0x2c (X);		/*		P4=0x2c( 44) */
 1009dc2:	73 74       	ILLEGAL;
 1009dc4:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 1009dc6:	62 75       	ILLEGAL;
 1009dc8:	74 65       	R4 += 0x2e;		/* ( 46) */
 1009dca:	5f 6b       	FP = -0x15 (X);		/*		FP=0xffffffeb(-21) */
 1009dcc:	65 79       	ILLEGAL;
 1009dce:	73 3a       	ILLEGAL;
 1009dd0:	20 25       	JUMP.S 0x100a810 <_bt_pll_scan+0xf0>;
 1009dd2:	78 0a       	CC = P0 <= FP (IU);
 1009dd4:	00 00       	NOP;
 1009dd6:	00 00       	NOP;
 1009dd8:	2d 2d       	JUMP.S 0x1009832 <_sm_notify_client_authorization.clone.5+0x1e>;
 1009dda:	53 4d       	R3 >>>= 0xa;
 1009ddc:	20 50       	R0 = R0 + R4;
 1009dde:	48 20       	JUMP.S 0x1009e6e <_sm_le_device_index+0x21a>;
 1009de0:	00 00       	NOP;
 1009de2:	00 00       	NOP;
 1009de4:	48 43       	R0 = R1.B (Z);
 1009de6:	49 20       	JUMP.S 0x1009e78 <_sm_le_device_index+0x224>;
 1009de8:	57 6f       	FP += -0x16;		/* (-22) */
 1009dea:	72 6b       	P2 = -0x12 (X);		/*		P2=0xffffffee(-18) */
 1009dec:	69 6e       	P1 += -0x33;		/* (-51) */
 1009dee:	67 21       	JUMP.S 0x100a0bc <_sm_le_device_index+0x468>;
 1009df0:	0a 00       	ILLEGAL;
 1009df2:	00 00       	NOP;
 1009df4:	73 6d       	P3 += 0x2e;		/* ( 46) */
 1009df6:	3a 20       	JUMP.S 0x1009e6a <_sm_le_device_index+0x216>;
 1009df8:	63 6f       	P3 += -0x14;		/* (-20) */
 1009dfa:	6e 6e       	SP += -0x33;		/* (-51) */
 1009dfc:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
 1009dfe:	74 65       	R4 += 0x2e;		/* ( 46) */
 1009e00:	64 0a       	CC = P4 <= P4 (IU);
 1009e02:	00 00       	NOP;
 1009e04:	73 6c       	P3 += 0xe;		/* ( 14) */
 1009e06:	61 76       	ILLEGAL;
 1009e08:	65 0a       	CC = P5 <= P4 (IU);
 1009e0a:	00 00       	NOP;
 1009e0c:	72 73       	ILLEGAL;
 1009e0e:	70 5f       	P5 = P0 + (SP << 0x2);
 1009e10:	73 65       	R3 += 0x2e;		/* ( 46) */
 1009e12:	63 75       	ILLEGAL;
 1009e14:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 1009e16:	74 79       	ILLEGAL;
 1009e18:	0a 00       	ILLEGAL;
 1009e1a:	00 00       	NOP;
 1009e1c:	6d 61       	R5 = 0x2d (X);		/*		R5=0x2d( 45) */
 1009e1e:	73 74       	ILLEGAL;
 1009e20:	65 72       	ILLEGAL;
 1009e22:	0a 00       	ILLEGAL;
 1009e24:	68 63       	R0 = -0x13 (X);		/*		R0=0xffffffed(-19) */
 1009e26:	69 5f       	P5 = P1 + (P5 << 0x2);
 1009e28:	6c 65       	R4 += 0x2d;		/* ( 45) */
 1009e2a:	5f 6c       	FP += 0xb;		/* ( 11) */
 1009e2c:	6f 6e       	FP += -0x33;		/* (-51) */
 1009e2e:	67 5f       	P5 = FP + (P4 << 0x2);
 1009e30:	74 65       	R4 += 0x2e;		/* ( 46) */
 1009e32:	72 6d       	P2 += 0x2e;		/* ( 46) */
 1009e34:	5f 6b       	FP = -0x15 (X);		/*		FP=0xffffffeb(-21) */
 1009e36:	65 79       	ILLEGAL;
 1009e38:	5f 72       	ILLEGAL;
 1009e3a:	65 71       	ILLEGAL;
 1009e3c:	75 65       	R5 += 0x2e;		/* ( 46) */
 1009e3e:	73 74       	ILLEGAL;
 1009e40:	0a 00       	ILLEGAL;
 1009e42:	00 00       	NOP;
 1009e44:	73 6d       	P3 += 0x2e;		/* ( 46) */
 1009e46:	3a 20       	JUMP.S 0x1009eba <_sm_le_device_index+0x266>;
 1009e48:	65 6e       	P5 += -0x34;		/* (-52) */
 1009e4a:	63 72       	ILLEGAL;
 1009e4c:	79 70       	ILLEGAL;
 1009e4e:	74 69       	P4 = 0x2e (X);		/*		P4=0x2e( 46) */
 1009e50:	6f 6e       	FP += -0x33;		/* (-51) */
 1009e52:	5f 63       	R7 = -0x15 (X);		/*		R7=0xffffffeb(-21) */
 1009e54:	68 61       	R0 = 0x2d (X);		/*		R0=0x2d( 45) */
 1009e56:	6e 67       	R6 += -0x13;		/* (-19) */
 1009e58:	65 0a       	CC = P5 <= P4 (IU);
 1009e5a:	00 00       	NOP;
 1009e5c:	64 6b       	P4 = -0x14 (X);		/*		P4=0xffffffec(-20) */
 1009e5e:	67 5f       	P5 = FP + (P4 << 0x2);
 1009e60:	77 34       	M2 = FP;
 1009e62:	5f 69       	FP = 0x2b (X);		/*		FP=0x2b( 43) */
 1009e64:	72 6b       	P2 = -0x12 (X);		/*		P2=0xffffffee(-18) */
 1009e66:	0a 00       	ILLEGAL;
 1009e68:	64 6b       	P4 = -0x14 (X);		/*		P4=0xffffffec(-20) */
 1009e6a:	67 5f       	P5 = FP + (P4 << 0x2);
 1009e6c:	77 34       	M2 = FP;
 1009e6e:	5f 64       	R7 += 0xb;		/* ( 11) */
 1009e70:	68 6b       	P0 = -0x13 (X);		/*		P0=0xffffffed(-19) */
 1009e72:	0a 00       	ILLEGAL;
 1009e74:	64 68       	P4 = 0xc (X);		/*		P4=0xc( 12) */
 1009e76:	6b 00       	ILLEGAL;
 1009e78:	6b 00       	ILLEGAL;
 1009e7a:	00 00       	NOP;
 1009e7c:	6b 31       	ILLEGAL;
 1009e7e:	00 00       	NOP;
 1009e80:	6b 32       	P5 = P3;
 1009e82:	00 00       	NOP;
 1009e84:	43 4d       	R3 >>>= 0x8;
 1009e86:	41 43       	R1 = R0.B (Z);
 1009e88:	00 00       	NOP;
 1009e8a:	00 00       	NOP;
 1009e8c:	53 4d       	R3 >>>= 0xa;
 1009e8e:	5f 50       	R1 = R7 + R3;
 1009e90:	48 32       	P1 = P0;
 1009e92:	5f 43       	R7 = R3.B (Z);
 1009e94:	31 5f       	P4 = P1 + (SP << 0x2);
 1009e96:	57 34       	I2 = FP;
 1009e98:	5f 45       	FP += P3 (BREV);
 1009e9a:	4e 43       	R6 = R1.B (Z);
 1009e9c:	5f 41       	R7 = (R7 + R3) << 0x2;
 1009e9e:	3a 0a       	CC = R2 <= R7 (IU);
 1009ea0:	00 00       	NOP;
 1009ea2:	00 00       	NOP;
 1009ea4:	70 32       	SP = P0;
 1009ea6:	00 00       	NOP;
 1009ea8:	74 33       	ILLEGAL;
 1009eaa:	00 00       	NOP;
 1009eac:	53 4d       	R3 >>>= 0xa;
 1009eae:	5f 50       	R1 = R7 + R3;
 1009eb0:	48 32       	P1 = P0;
 1009eb2:	5f 43       	R7 = R3.B (Z);
 1009eb4:	31 5f       	P4 = P1 + (SP << 0x2);
 1009eb6:	57 34       	I2 = FP;
 1009eb8:	5f 45       	FP += P3 (BREV);
 1009eba:	4e 43       	R6 = R1.B (Z);
 1009ebc:	5f 42       	DIVS (R7, R3);
 1009ebe:	3a 0a       	CC = R2 <= R7 (IU);
 1009ec0:	00 00       	NOP;
 1009ec2:	00 00       	NOP;
 1009ec4:	63 31       	ILLEGAL;
 1009ec6:	21 00       	ILLEGAL;
 1009ec8:	53 4d       	R3 >>>= 0xa;
 1009eca:	5f 50       	R1 = R7 + R3;
 1009ecc:	48 32       	P1 = P0;
 1009ece:	5f 43       	R7 = R3.B (Z);
 1009ed0:	31 5f       	P4 = P1 + (SP << 0x2);
 1009ed2:	57 34       	I2 = FP;
 1009ed4:	5f 45       	FP += P3 (BREV);
 1009ed6:	4e 43       	R6 = R1.B (Z);
 1009ed8:	5f 44       	FP = P3 << 0x2;
 1009eda:	3a 0a       	CC = R2 <= R7 (IU);
 1009edc:	00 00       	NOP;
 1009ede:	00 00       	NOP;
 1009ee0:	73 6d       	P3 += 0x2e;		/* ( 46) */
 1009ee2:	5f 70       	ILLEGAL;
 1009ee4:	61 69       	P1 = 0x2c (X);		/*		P1=0x2c( 44) */
 1009ee6:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 1009ee8:	6e 67       	R6 += -0x13;		/* (-19) */
 1009eea:	5f 66       	R7 += -0x35;		/* (-53) */
 1009eec:	61 69       	P1 = 0x2c (X);		/*		P1=0x2c( 44) */
 1009eee:	6c 65       	R4 += 0x2d;		/* ( 45) */
 1009ef0:	64 0a       	CC = P4 <= P4 (IU);
 1009ef2:	00 00       	NOP;
 1009ef4:	73 6d       	P3 += 0x2e;		/* ( 46) */
 1009ef6:	5f 70       	ILLEGAL;
 1009ef8:	61 69       	P1 = 0x2c (X);		/*		P1=0x2c( 44) */
 1009efa:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 1009efc:	6e 67       	R6 += -0x13;		/* (-19) */
 1009efe:	3a 20       	JUMP.S 0x1009f72 <_sm_le_device_index+0x31e>;
 1009f00:	6f 6b       	FP = -0x13 (X);		/*		FP=0xffffffed(-19) */
 1009f02:	0a 00       	ILLEGAL;
 1009f04:	73 74       	ILLEGAL;
 1009f06:	6b 00       	ILLEGAL;
 1009f08:	6c 74       	ILLEGAL;
 1009f0a:	6b 00       	ILLEGAL;
 1009f0c:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1009f0e:	69 72       	ILLEGAL;
 1009f10:	69 6e       	P1 += -0x33;		/* (-51) */
 1009f12:	67 5f       	P5 = FP + (P4 << 0x2);
 1009f14:	72 65       	R2 += 0x2e;		/* ( 46) */
 1009f16:	73 70       	ILLEGAL;
 1009f18:	6f 6e       	FP += -0x33;		/* (-51) */
 1009f1a:	73 65       	R3 += 0x2e;		/* ( 46) */
 1009f1c:	0a 00       	ILLEGAL;
 1009f1e:	00 00       	NOP;
 1009f20:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1009f22:	69 72       	ILLEGAL;
 1009f24:	69 6e       	P1 += -0x33;		/* (-51) */
 1009f26:	67 5f       	P5 = FP + (P4 << 0x2);
 1009f28:	63 6f       	P3 += -0x14;		/* (-20) */
 1009f2a:	6e 66       	R6 += -0x33;		/* (-51) */
 1009f2c:	69 72       	ILLEGAL;
 1009f2e:	6d 0a       	CC = P5 <= P5 (IU);
 1009f30:	00 00       	NOP;
 1009f32:	00 00       	NOP;
 1009f34:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1009f36:	72 61       	R2 = 0x2e (X);		/*		R2=0x2e( 46) */
 1009f38:	69 6e       	P1 += -0x33;		/* (-51) */
 1009f3a:	67 5f       	P5 = FP + (P4 << 0x2);
 1009f3c:	72 61       	R2 = 0x2e (X);		/*		R2=0x2e( 46) */
 1009f3e:	6e 64       	R6 += 0xd;		/* ( 13) */
 1009f40:	6f 6d       	FP += 0x2d;		/* ( 45) */
 1009f42:	0a 00       	ILLEGAL;
 1009f44:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1009f46:	69 72       	ILLEGAL;
 1009f48:	69 6e       	P1 += -0x33;		/* (-51) */
 1009f4a:	67 5f       	P5 = FP + (P4 << 0x2);
 1009f4c:	72 65       	R2 += 0x2e;		/* ( 46) */
 1009f4e:	71 75       	ILLEGAL;
 1009f50:	65 73       	ILLEGAL;
 1009f52:	74 0a       	CC = P4 <= SP (IU);
 1009f54:	00 00       	NOP;
 1009f56:	00 00       	NOP;
 1009f58:	70 68       	P0 = 0xe (X);		/*		P0=0xe( 14) */
 1009f5a:	31 5f       	P4 = P1 + (SP << 0x2);
 1009f5c:	70 61       	R0 = 0x2e (X);		/*		R0=0x2e( 46) */
 1009f5e:	69 72       	ILLEGAL;
 1009f60:	69 6e       	P1 += -0x33;		/* (-51) */
 1009f62:	67 5f       	P5 = FP + (P4 << 0x2);
 1009f64:	63 6f       	P3 += -0x14;		/* (-20) */
 1009f66:	6e 66       	R6 += -0x33;		/* (-51) */
 1009f68:	69 6d       	P1 += 0x2d;		/* ( 45) */
 1009f6a:	0a 00       	ILLEGAL;
 1009f6c:	69 6e       	P1 += -0x33;		/* (-51) */
 1009f6e:	70 75       	ILLEGAL;
 1009f70:	74 0a       	CC = P4 <= SP (IU);
 1009f72:	00 00       	NOP;
 1009f74:	63 61       	R3 = 0x2c (X);		/*		R3=0x2c( 44) */
 1009f76:	6e 63       	R6 = -0x13 (X);		/*		R6=0xffffffed(-19) */
 1009f78:	65 6c       	P5 += 0xc;		/* ( 12) */
 1009f7a:	5f 70       	ILLEGAL;
 1009f7c:	61 69       	P1 = 0x2c (X);		/*		P1=0x2c( 44) */
 1009f7e:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 1009f80:	6e 67       	R6 += -0x13;		/* (-19) */
 1009f82:	0a 00       	ILLEGAL;
 1009f84:	77 61       	R7 = 0x2e (X);		/*		R7=0x2e( 46) */
 1009f86:	69 74       	ILLEGAL;
 1009f88:	5f 75       	ILLEGAL;
 1009f8a:	73 65       	R3 += 0x2e;		/* ( 46) */
 1009f8c:	72 5f       	P5 = P2 + (SP << 0x2);
 1009f8e:	61 63       	R1 = -0x14 (X);		/*		R1=0xffffffec(-20) */
 1009f90:	74 69       	P4 = 0x2e (X);		/*		P4=0x2e( 46) */
 1009f92:	6f 6e       	FP += -0x33;		/* (-51) */
 1009f94:	0a 00       	ILLEGAL;
 1009f96:	00 00       	NOP;
 1009f98:	67 65       	R7 += 0x2c;		/* ( 44) */
 1009f9a:	74 5f       	P5 = P4 + (SP << 0x2);
 1009f9c:	72 61       	R2 = 0x2e (X);		/*		R2=0x2e( 46) */
 1009f9e:	6e 64       	R6 += 0xd;		/* ( 13) */
 1009fa0:	6f 6d       	FP += 0x2d;		/* ( 45) */
 1009fa2:	5f 61       	R7 = 0x2b (X);		/*		R7=0x2b( 43) */
 1009fa4:	0a 00       	ILLEGAL;
 1009fa6:	00 00       	NOP;
 1009fa8:	77 34       	M2 = FP;
 1009faa:	5f 70       	ILLEGAL;
 1009fac:	61 69       	P1 = 0x2c (X);		/*		P1=0x2c( 44) */
 1009fae:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 1009fb0:	6e 67       	R6 += -0x13;		/* (-19) */
 1009fb2:	5f 72       	ILLEGAL;
 1009fb4:	61 6e       	P1 += -0x34;		/* (-52) */
 1009fb6:	64 6f       	P4 += -0x14;		/* (-20) */
 1009fb8:	6d 0a       	CC = P5 <= P5 (IU);
 1009fba:	00 00       	NOP;
 1009fbc:	73 6d       	P3 += 0x2e;		/* ( 46) */
 1009fbe:	5f 69       	FP = 0x2b (X);		/*		FP=0x2b( 43) */
 1009fc0:	6e 69       	SP = 0x2d (X);		/*		SP=0x2d( 45) */
 1009fc2:	74 0a       	CC = P4 <= SP (IU);
 1009fc4:	00 00       	NOP;
 1009fc6:	00 00       	NOP;
 1009fc8:	70 83       	R5.L = W[P0 ++ SP];
 1009fca:	00 01       	ILLEGAL;
 1009fcc:	2c 84       	R0.H = W[P4 ++ P5];
 1009fce:	00 01       	ILLEGAL;
 1009fd0:	96 84       	R2.H = W[SP ++ P2];
 1009fd2:	00 01       	ILLEGAL;
 1009fd4:	96 84       	R2.H = W[SP ++ P2];
 1009fd6:	00 01       	ILLEGAL;
 1009fd8:	ba 83       	R6.L = W[P2 ++ FP];
 1009fda:	00 01       	ILLEGAL;
 1009fdc:	96 84       	R2.H = W[SP ++ P2];
 1009fde:	00 01       	ILLEGAL;
 1009fe0:	96 84       	R2.H = W[SP ++ P2];
 1009fe2:	00 01       	ILLEGAL;
 1009fe4:	96 84       	R2.H = W[SP ++ P2];
 1009fe6:	00 01       	ILLEGAL;
 1009fe8:	96 84       	R2.H = W[SP ++ P2];
 1009fea:	00 01       	ILLEGAL;
 1009fec:	96 84       	R2.H = W[SP ++ P2];
 1009fee:	00 01       	ILLEGAL;
 1009ff0:	96 84       	R2.H = W[SP ++ P2];
 1009ff2:	00 01       	ILLEGAL;
 1009ff4:	16 84       	R0.H = W[SP ++ P2];
 1009ff6:	00 01       	ILLEGAL;
 1009ff8:	96 84       	R2.H = W[SP ++ P2];
 1009ffa:	00 01       	ILLEGAL;
 1009ffc:	96 84       	R2.H = W[SP ++ P2];
 1009ffe:	00 01       	ILLEGAL;
 100a000:	76 84       	R1.H = W[SP];
 100a002:	00 01       	ILLEGAL;
 100a004:	f6 84       	R3.H = W[SP];
 100a006:	00 01       	ILLEGAL;
 100a008:	04 8a       	W[P4 ++ P0] = R0.L;
 100a00a:	00 01       	ILLEGAL;
 100a00c:	04 8a       	W[P4 ++ P0] = R0.L;
 100a00e:	00 01       	ILLEGAL;
 100a010:	24 86       	R0 = W[P4 ++ P4] (Z);
 100a012:	00 01       	ILLEGAL;
 100a014:	04 8a       	W[P4 ++ P0] = R0.L;
 100a016:	00 01       	ILLEGAL;
 100a018:	24 86       	R0 = W[P4 ++ P4] (Z);
 100a01a:	00 01       	ILLEGAL;
 100a01c:	04 8a       	W[P4 ++ P0] = R0.L;
 100a01e:	00 01       	ILLEGAL;
 100a020:	24 86       	R0 = W[P4 ++ P4] (Z);
 100a022:	00 01       	ILLEGAL;
 100a024:	04 8a       	W[P4 ++ P0] = R0.L;
 100a026:	00 01       	ILLEGAL;
 100a028:	1a 87       	R4 = W[P2 ++ P3] (Z);
 100a02a:	00 01       	ILLEGAL;
 100a02c:	04 8a       	W[P4 ++ P0] = R0.L;
 100a02e:	00 01       	ILLEGAL;
 100a030:	40 86       	R1 = W[P0 ++ P0] (Z);
 100a032:	00 01       	ILLEGAL;
 100a034:	04 8a       	W[P4 ++ P0] = R0.L;
 100a036:	00 01       	ILLEGAL;
 100a038:	bc 86       	R2 = W[P4 ++ FP] (Z);
 100a03a:	00 01       	ILLEGAL;
 100a03c:	04 8a       	W[P4 ++ P0] = R0.L;
 100a03e:	00 01       	ILLEGAL;
 100a040:	40 86       	R1 = W[P0 ++ P0] (Z);
 100a042:	00 01       	ILLEGAL;
 100a044:	04 8a       	W[P4 ++ P0] = R0.L;
 100a046:	00 01       	ILLEGAL;
 100a048:	26 88       	[SP ++ P4] = R0;
 100a04a:	00 01       	ILLEGAL;
 100a04c:	da 85       	R7.H = W[P2 ++ P3];
 100a04e:	00 01       	ILLEGAL;
 100a050:	cc 87       	R7 = W[P4 ++ P1] (Z);
 100a052:	00 01       	ILLEGAL;
 100a054:	04 8a       	W[P4 ++ P0] = R0.L;
 100a056:	00 01       	ILLEGAL;
 100a058:	04 8a       	W[P4 ++ P0] = R0.L;
 100a05a:	00 01       	ILLEGAL;
 100a05c:	24 86       	R0 = W[P4 ++ P4] (Z);
 100a05e:	00 01       	ILLEGAL;
 100a060:	04 8a       	W[P4 ++ P0] = R0.L;
 100a062:	00 01       	ILLEGAL;
 100a064:	24 86       	R0 = W[P4 ++ P4] (Z);
 100a066:	00 01       	ILLEGAL;
 100a068:	04 8a       	W[P4 ++ P0] = R0.L;
 100a06a:	00 01       	ILLEGAL;
 100a06c:	d2 88       	[P2 ++ P2] = R3;
 100a06e:	00 01       	ILLEGAL;
 100a070:	04 8a       	W[P4 ++ P0] = R0.L;
 100a072:	00 01       	ILLEGAL;
 100a074:	64 86       	R1 = W[P4 ++ P4] (Z);
 100a076:	00 01       	ILLEGAL;
 100a078:	04 8a       	W[P4 ++ P0] = R0.L;
 100a07a:	00 01       	ILLEGAL;
 100a07c:	86 86       	R2 = W[SP ++ P0] (Z);
 100a07e:	00 01       	ILLEGAL;
 100a080:	04 8a       	W[P4 ++ P0] = R0.L;
 100a082:	00 01       	ILLEGAL;
 100a084:	06 89       	[SP ++ P0] = R4;
 100a086:	00 01       	ILLEGAL;
 100a088:	04 8a       	W[P4 ++ P0] = R0.L;
 100a08a:	00 01       	ILLEGAL;
 100a08c:	d2 88       	[P2 ++ P2] = R3;
 100a08e:	00 01       	ILLEGAL;
 100a090:	04 8a       	W[P4 ++ P0] = R0.L;
 100a092:	00 01       	ILLEGAL;
 100a094:	64 86       	R1 = W[P4 ++ P4] (Z);
 100a096:	00 01       	ILLEGAL;
 100a098:	04 8a       	W[P4 ++ P0] = R0.L;
 100a09a:	00 01       	ILLEGAL;
 100a09c:	aa 88       	[P2 ++ P5] = R2;
 100a09e:	00 01       	ILLEGAL;
 100a0a0:	04 8a       	W[P4 ++ P0] = R0.L;
 100a0a2:	00 01       	ILLEGAL;
 100a0a4:	04 8a       	W[P4 ++ P0] = R0.L;
 100a0a6:	00 01       	ILLEGAL;
 100a0a8:	74 85       	R5.H = W[P4 ++ SP];
 100a0aa:	00 01       	ILLEGAL;
 100a0ac:	04 8a       	W[P4 ++ P0] = R0.L;
 100a0ae:	00 01       	ILLEGAL;
 100a0b0:	04 8a       	W[P4 ++ P0] = R0.L;
 100a0b2:	00 01       	ILLEGAL;
 100a0b4:	88 85       	R6.H = W[P0 ++ P1];
 100a0b6:	00 01       	ILLEGAL;
 100a0b8:	04 8a       	W[P4 ++ P0] = R0.L;
 100a0ba:	00 01       	ILLEGAL;
 100a0bc:	04 8a       	W[P4 ++ P0] = R0.L;
 100a0be:	00 01       	ILLEGAL;
 100a0c0:	04 8a       	W[P4 ++ P0] = R0.L;
 100a0c2:	00 01       	ILLEGAL;
 100a0c4:	64 88       	[P4 ++ P4] = R1;
 100a0c6:	00 01       	ILLEGAL;
 100a0c8:	04 8a       	W[P4 ++ P0] = R0.L;
 100a0ca:	00 01       	ILLEGAL;
 100a0cc:	04 8a       	W[P4 ++ P0] = R0.L;
 100a0ce:	00 01       	ILLEGAL;
 100a0d0:	1a 85       	R4.H = W[P2 ++ P3];
 100a0d2:	00 01       	ILLEGAL;
 100a0d4:	04 8a       	W[P4 ++ P0] = R0.L;
 100a0d6:	00 01       	ILLEGAL;
 100a0d8:	04 8a       	W[P4 ++ P0] = R0.L;
 100a0da:	00 01       	ILLEGAL;
 100a0dc:	58 85       	R5.H = W[P0 ++ P3];
 100a0de:	00 01       	ILLEGAL;
 100a0e0:	04 8a       	W[P4 ++ P0] = R0.L;
 100a0e2:	00 01       	ILLEGAL;
 100a0e4:	04 8a       	W[P4 ++ P0] = R0.L;
 100a0e6:	00 01       	ILLEGAL;
 100a0e8:	04 8a       	W[P4 ++ P0] = R0.L;
 100a0ea:	00 01       	ILLEGAL;
 100a0ec:	7a 88       	[P2 ++ FP] = R1;
 100a0ee:	00 01       	ILLEGAL;
 100a0f0:	68 90       	P0 = [P5++];
 100a0f2:	00 01       	ILLEGAL;
 100a0f4:	98 94       	R0 = W[P3--] (Z);
 100a0f6:	00 01       	ILLEGAL;
 100a0f8:	0e 91       	R6 = [P1];
 100a0fa:	00 01       	ILLEGAL;
 100a0fc:	98 94       	R0 = W[P3--] (Z);
 100a0fe:	00 01       	ILLEGAL;
 100a100:	68 90       	P0 = [P5++];
 100a102:	00 01       	ILLEGAL;
 100a104:	98 94       	R0 = W[P3--] (Z);
 100a106:	00 01       	ILLEGAL;
 100a108:	4e 91       	SP = [P1];
 100a10a:	00 01       	ILLEGAL;
 100a10c:	98 94       	R0 = W[P3--] (Z);
 100a10e:	00 01       	ILLEGAL;
 100a110:	98 94       	R0 = W[P3--] (Z);
 100a112:	00 01       	ILLEGAL;
 100a114:	98 94       	R0 = W[P3--] (Z);
 100a116:	00 01       	ILLEGAL;
 100a118:	d8 91       	ILLEGAL;
 100a11a:	00 01       	ILLEGAL;
 100a11c:	98 94       	R0 = W[P3--] (Z);
 100a11e:	00 01       	ILLEGAL;
 100a120:	98 94       	R0 = W[P3--] (Z);
 100a122:	00 01       	ILLEGAL;
 100a124:	98 94       	R0 = W[P3--] (Z);
 100a126:	00 01       	ILLEGAL;
 100a128:	98 94       	R0 = W[P3--] (Z);
 100a12a:	00 01       	ILLEGAL;
 100a12c:	98 94       	R0 = W[P3--] (Z);
 100a12e:	00 01       	ILLEGAL;
 100a130:	98 94       	R0 = W[P3--] (Z);
 100a132:	00 01       	ILLEGAL;
 100a134:	3e 92       	[FP++] = R6;
 100a136:	00 01       	ILLEGAL;
 100a138:	98 94       	R0 = W[P3--] (Z);
 100a13a:	00 01       	ILLEGAL;
 100a13c:	9e 92       	[P3--] = R6;
 100a13e:	00 01       	ILLEGAL;
 100a140:	98 94       	R0 = W[P3--] (Z);
 100a142:	00 01       	ILLEGAL;
 100a144:	c4 92       	[P0--] = P4;
 100a146:	00 01       	ILLEGAL;
 100a148:	98 94       	R0 = W[P3--] (Z);
 100a14a:	00 01       	ILLEGAL;
 100a14c:	98 94       	R0 = W[P3--] (Z);
 100a14e:	00 01       	ILLEGAL;
 100a150:	98 94       	R0 = W[P3--] (Z);
 100a152:	00 01       	ILLEGAL;
 100a154:	6e 92       	[P5++] = SP;
 100a156:	00 01       	ILLEGAL;
 100a158:	98 94       	R0 = W[P3--] (Z);
 100a15a:	00 01       	ILLEGAL;
 100a15c:	ea 92       	[P5--] = P2;
 100a15e:	00 01       	ILLEGAL;
 100a160:	ba 96       	W[FP--] = R2;
 100a162:	00 01       	ILLEGAL;
 100a164:	ce 96       	ILLEGAL;
 100a166:	00 01       	ILLEGAL;
 100a168:	f6 96       	ILLEGAL;
 100a16a:	00 01       	ILLEGAL;
 100a16c:	0a 97       	W[P1] = R2;
 100a16e:	00 01       	ILLEGAL;
 100a170:	2c 97       	W[P5] = R4;
 100a172:	00 01       	ILLEGAL;

0100a174 <_stk_generation_method>:
	...
 100a17c:	02 00       	ILLEGAL;
 100a17e:	00 00       	NOP;
 100a180:	00 00       	NOP;
 100a182:	00 00       	NOP;
 100a184:	02 00       	ILLEGAL;
	...
 100a18e:	00 00       	NOP;
 100a190:	02 00       	ILLEGAL;
 100a192:	00 00       	NOP;
 100a194:	00 00       	NOP;
 100a196:	00 00       	NOP;
 100a198:	02 00       	ILLEGAL;
 100a19a:	00 00       	NOP;
 100a19c:	01 00       	ILLEGAL;
 100a19e:	00 00       	NOP;
 100a1a0:	01 00       	ILLEGAL;
 100a1a2:	00 00       	NOP;
 100a1a4:	03 00       	ILLEGAL;
 100a1a6:	00 00       	NOP;
 100a1a8:	00 00       	NOP;
 100a1aa:	00 00       	NOP;
 100a1ac:	01 00       	ILLEGAL;
	...
 100a1c2:	00 00       	NOP;
 100a1c4:	01 00       	ILLEGAL;
 100a1c6:	00 00       	NOP;
 100a1c8:	01 00       	ILLEGAL;
 100a1ca:	00 00       	NOP;
 100a1cc:	02 00       	ILLEGAL;
 100a1ce:	00 00       	NOP;
 100a1d0:	00 00       	NOP;
 100a1d2:	00 00       	NOP;
 100a1d4:	01 00       	ILLEGAL;
	...

0100a1d8 <_bt_store_16>:
 100a1d8:	cb 42       	R3 = R1.L (Z);
 100a1da:	d8 50       	R3 = R0 + R3;
 100a1dc:	13 32       	P2 = R3;
 100a1de:	78 05       	[--SP] = (R7:7);
 100a1e0:	09 64       	R1 += 0x1;		/* (  1) */
 100a1e2:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a1e6:	c9 42       	R1 = R1.L (Z);
 100a1e8:	12 9b       	B[P2] = R2;
 100a1ea:	08 50       	R0 = R0 + R1;
 100a1ec:	10 32       	P2 = R0;
 100a1ee:	d2 42       	R2 = R2.L (Z);
 100a1f0:	42 4e       	R2 >>= 0x8;
 100a1f2:	12 9b       	B[P2] = R2;
 100a1f4:	01 e8 00 00 	UNLINK;
 100a1f8:	38 05       	(R7:7) = [SP++];
 100a1fa:	10 00       	RTS;

0100a1fc <_bt_store_32>:
 100a1fc:	cb 42       	R3 = R1.L (Z);
 100a1fe:	d8 50       	R3 = R0 + R3;
 100a200:	13 32       	P2 = R3;
 100a202:	78 05       	[--SP] = (R7:7);
 100a204:	09 64       	R1 += 0x1;		/* (  1) */
 100a206:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a20a:	cb 42       	R3 = R1.L (Z);
 100a20c:	12 9b       	B[P2] = R2;
 100a20e:	d8 50       	R3 = R0 + R3;
 100a210:	13 32       	P2 = R3;
 100a212:	09 64       	R1 += 0x1;		/* (  1) */
 100a214:	82 c6 c2 8f 	R7 = R2 >> 0x8;
 100a218:	cb 42       	R3 = R1.L (Z);
 100a21a:	d8 50       	R3 = R0 + R3;
 100a21c:	17 9b       	B[P2] = R7;
 100a21e:	13 32       	P2 = R3;
 100a220:	09 64       	R1 += 0x1;		/* (  1) */
 100a222:	82 c6 82 8f 	R7 = R2 >> 0x10;
 100a226:	c9 42       	R1 = R1.L (Z);
 100a228:	08 50       	R0 = R0 + R1;
 100a22a:	17 9b       	B[P2] = R7;
 100a22c:	10 32       	P2 = R0;
 100a22e:	c2 4e       	R2 >>= 0x18;
 100a230:	12 9b       	B[P2] = R2;
 100a232:	01 e8 00 00 	UNLINK;
 100a236:	38 05       	(R7:7) = [SP++];
 100a238:	10 00       	RTS;
	...

0100a23c <_net_store_16>:
 100a23c:	cb 42       	R3 = R1.L (Z);
 100a23e:	d8 50       	R3 = R0 + R3;
 100a240:	13 32       	P2 = R3;
 100a242:	78 05       	[--SP] = (R7:7);
 100a244:	d7 42       	R7 = R2.L (Z);
 100a246:	09 64       	R1 += 0x1;		/* (  1) */
 100a248:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a24c:	47 4e       	R7 >>= 0x8;
 100a24e:	c9 42       	R1 = R1.L (Z);
 100a250:	17 9b       	B[P2] = R7;
 100a252:	08 50       	R0 = R0 + R1;
 100a254:	10 32       	P2 = R0;
 100a256:	12 9b       	B[P2] = R2;
 100a258:	01 e8 00 00 	UNLINK;
 100a25c:	38 05       	(R7:7) = [SP++];
 100a25e:	10 00       	RTS;

0100a260 <_net_store_32>:
 100a260:	cb 42       	R3 = R1.L (Z);
 100a262:	d8 50       	R3 = R0 + R3;
 100a264:	13 32       	P2 = R3;
 100a266:	78 05       	[--SP] = (R7:7);
 100a268:	09 64       	R1 += 0x1;		/* (  1) */
 100a26a:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a26e:	82 c6 42 8f 	R7 = R2 >> 0x18;
 100a272:	cb 42       	R3 = R1.L (Z);
 100a274:	17 9b       	B[P2] = R7;
 100a276:	d8 50       	R3 = R0 + R3;
 100a278:	13 32       	P2 = R3;
 100a27a:	09 64       	R1 += 0x1;		/* (  1) */
 100a27c:	82 c6 82 8f 	R7 = R2 >> 0x10;
 100a280:	cb 42       	R3 = R1.L (Z);
 100a282:	d8 50       	R3 = R0 + R3;
 100a284:	17 9b       	B[P2] = R7;
 100a286:	13 32       	P2 = R3;
 100a288:	09 64       	R1 += 0x1;		/* (  1) */
 100a28a:	82 c6 c2 8f 	R7 = R2 >> 0x8;
 100a28e:	c9 42       	R1 = R1.L (Z);
 100a290:	08 50       	R0 = R0 + R1;
 100a292:	17 9b       	B[P2] = R7;
 100a294:	10 32       	P2 = R0;
 100a296:	12 9b       	B[P2] = R2;
 100a298:	01 e8 00 00 	UNLINK;
 100a29c:	38 05       	(R7:7) = [SP++];
 100a29e:	10 00       	RTS;

0100a2a0 <_bt_flip_addr>:
 100a2a0:	09 32       	P1 = R1;
 100a2a2:	10 32       	P2 = R0;
 100a2a4:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a2a8:	01 e8 00 00 	UNLINK;
 100a2ac:	88 e5 05 00 	R0 = B[P1 + 0x5] (X);
 100a2b0:	10 9b       	B[P2] = R0;
 100a2b2:	88 e5 04 00 	R0 = B[P1 + 0x4] (X);
 100a2b6:	90 e6 01 00 	B[P2 + 0x1] = R0;
 100a2ba:	88 e5 03 00 	R0 = B[P1 + 0x3] (X);
 100a2be:	90 e6 02 00 	B[P2 + 0x2] = R0;
 100a2c2:	88 e5 02 00 	R0 = B[P1 + 0x2] (X);
 100a2c6:	90 e6 03 00 	B[P2 + 0x3] = R0;
 100a2ca:	88 e5 01 00 	R0 = B[P1 + 0x1] (X);
 100a2ce:	90 e6 04 00 	B[P2 + 0x4] = R0;
 100a2d2:	48 99       	R0 = B[P1] (X);
 100a2d4:	90 e6 05 00 	B[P2 + 0x5] = R0;
 100a2d8:	10 00       	RTS;
	...

0100a2dc <_swapX>:
 100a2dc:	12 32       	P2 = R2;
 100a2de:	01 32       	P0 = R1;
 100a2e0:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a2e4:	08 32       	P1 = R0;
 100a2e6:	03 60       	R3 = 0x0 (X);		/*		R3=0x0(  0) */
 100a2e8:	fa 6f       	P2 += -0x1;		/* ( -1) */
 100a2ea:	90 5a       	P2 = P0 + P2;
 100a2ec:	04 20       	JUMP.S 0x100a2f4 <_swapX+0x18>;
 100a2ee:	0b 64       	R3 += 0x1;		/* (  1) */
 100a2f0:	48 98       	R0 = B[P1++] (X);
 100a2f2:	90 9a       	B[P2--] = R0;
 100a2f4:	93 08       	CC = R3 < R2;
 100a2f6:	fc 1f       	IF CC JUMP 0x100a2ee <_swapX+0x12> (BP);
 100a2f8:	01 e8 00 00 	UNLINK;
 100a2fc:	10 00       	RTS;
	...

0100a300 <_swap24>:
 100a300:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a304:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100a306:	01 e8 00 00 	UNLINK;
 100a30a:	ff e2 e9 ff 	JUMP.L 0x100a2dc <_swapX>;
	...

0100a310 <_swap56>:
 100a310:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a314:	3a 60       	R2 = 0x7 (X);		/*		R2=0x7(  7) */
 100a316:	01 e8 00 00 	UNLINK;
 100a31a:	ff e2 e1 ff 	JUMP.L 0x100a2dc <_swapX>;
	...

0100a320 <_swap64>:
 100a320:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a324:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 100a326:	01 e8 00 00 	UNLINK;
 100a32a:	ff e2 d9 ff 	JUMP.L 0x100a2dc <_swapX>;
	...

0100a330 <_swap128>:
 100a330:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a334:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 100a336:	01 e8 00 00 	UNLINK;
 100a33a:	ff e2 d1 ff 	JUMP.L 0x100a2dc <_swapX>;
	...

0100a340 <_char_for_nibble>:
 100a340:	49 60       	R1 = 0x9 (X);		/*		R1=0x9(  9) */
 100a342:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a346:	08 09       	CC = R0 <= R1;
 100a348:	03 14       	IF !CC JUMP 0x100a34e <_char_for_nibble+0xe> (BP);
 100a34a:	80 65       	R0 += 0x30;		/* ( 48) */
 100a34c:	09 20       	JUMP.S 0x100a35e <_char_for_nibble+0x1e>;
 100a34e:	08 30       	R1 = R0;
 100a350:	b1 67       	R1 += -0xa;		/* (-10) */
 100a352:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 100a354:	11 09       	CC = R1 <= R2;
 100a356:	03 10       	IF !CC JUMP 0x100a35c <_char_for_nibble+0x1c>;
 100a358:	b8 65       	R0 += 0x37;		/* ( 55) */
 100a35a:	02 20       	JUMP.S 0x100a35e <_char_for_nibble+0x1e>;
 100a35c:	f8 61       	R0 = 0x3f (X);		/*		R0=0x3f( 63) */
 100a35e:	01 e8 00 00 	UNLINK;
 100a362:	10 00       	RTS;

0100a364 <_printf_hexdump>:
 100a364:	00 00       	NOP;
 100a366:	00 00       	NOP;
 100a368:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a36c:	01 e8 00 00 	UNLINK;
 100a370:	10 00       	RTS;
	...

0100a374 <_hexdump>:
 100a374:	00 00       	NOP;
 100a376:	00 00       	NOP;
 100a378:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a37c:	01 e8 00 00 	UNLINK;
 100a380:	10 00       	RTS;
	...

0100a384 <_hexdumpf>:
 100a384:	00 00       	NOP;
 100a386:	00 00       	NOP;
 100a388:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a38c:	01 e8 00 00 	UNLINK;
 100a390:	10 00       	RTS;
	...

0100a394 <_log_key>:
 100a394:	00 00       	NOP;
 100a396:	00 00       	NOP;
 100a398:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a39c:	01 e8 00 00 	UNLINK;
 100a3a0:	10 00       	RTS;
	...

0100a3a4 <_uuid128_to_str>:
 100a3a4:	10 32       	P2 = R0;
 100a3a6:	78 05       	[--SP] = (R7:7);
 100a3a8:	00 e8 12 00 	LINK 0x48;		/* (72) */
 100a3ac:	47 e1 00 00 	R7.H = 0x0;		/* (  0)	R7=0x2b( 43) */
 100a3b0:	07 e1 fd 26 	R7.L = 0x26fd;		/* (9981)	R7=0x26fd <_uuid128_to_str_buffer>(9981) */
 100a3b4:	90 e4 01 00 	R0 = B[P2 + 0x1] (Z);
 100a3b8:	f0 b0       	[SP + 0xc] = R0;
 100a3ba:	90 e4 02 00 	R0 = B[P2 + 0x2] (Z);
 100a3be:	30 b1       	[SP + 0x10] = R0;
 100a3c0:	90 e4 03 00 	R0 = B[P2 + 0x3] (Z);
 100a3c4:	70 b1       	[SP + 0x14] = R0;
 100a3c6:	90 e4 04 00 	R0 = B[P2 + 0x4] (Z);
 100a3ca:	b0 b1       	[SP + 0x18] = R0;
 100a3cc:	90 e4 05 00 	R0 = B[P2 + 0x5] (Z);
 100a3d0:	f0 b1       	[SP + 0x1c] = R0;
 100a3d2:	90 e4 06 00 	R0 = B[P2 + 0x6] (Z);
 100a3d6:	30 b2       	[SP + 0x20] = R0;
 100a3d8:	90 e4 07 00 	R0 = B[P2 + 0x7] (Z);
 100a3dc:	70 b2       	[SP + 0x24] = R0;
 100a3de:	90 e4 08 00 	R0 = B[P2 + 0x8] (Z);
 100a3e2:	b0 b2       	[SP + 0x28] = R0;
 100a3e4:	90 e4 09 00 	R0 = B[P2 + 0x9] (Z);
 100a3e8:	f0 b2       	[SP + 0x2c] = R0;
 100a3ea:	90 e4 0a 00 	R0 = B[P2 + 0xa] (Z);
 100a3ee:	30 b3       	[SP + 0x30] = R0;
 100a3f0:	90 e4 0b 00 	R0 = B[P2 + 0xb] (Z);
 100a3f4:	70 b3       	[SP + 0x34] = R0;
 100a3f6:	90 e4 0c 00 	R0 = B[P2 + 0xc] (Z);
 100a3fa:	b0 b3       	[SP + 0x38] = R0;
 100a3fc:	90 e4 0d 00 	R0 = B[P2 + 0xd] (Z);
 100a400:	f0 b3       	[SP + 0x3c] = R0;
 100a402:	90 e4 0e 00 	R0 = B[P2 + 0xe] (Z);
 100a406:	30 e6 10 00 	[SP + 0x40] = R0;
 100a40a:	90 e4 0f 00 	R0 = B[P2 + 0xf] (Z);
 100a40e:	12 99       	R2 = B[P2] (Z);
 100a410:	30 e6 11 00 	[SP + 0x44] = R0;
 100a414:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000009(16777225) */
 100a418:	07 30       	R0 = R7;
 100a41a:	01 e1 b0 a5 	R1.L = 0xa5b0;		/* (-23120)	R1=0x100a5b0(16819632) */
 100a41e:	00 e3 bf 25 	CALL 0x100ef9c <_sprintf>;
 100a422:	07 30       	R0 = R7;
 100a424:	01 e8 00 00 	UNLINK;
 100a428:	38 05       	(R7:7) = [SP++];
 100a42a:	10 00       	RTS;

0100a42c <_printUUID128>:
 100a42c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100a430:	ff e3 ba ff 	CALL 0x100a3a4 <_uuid128_to_str>;
 100a434:	08 30       	R1 = R0;
 100a436:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100003f(16777279) */
 100a43a:	00 e1 f8 a5 	R0.L = 0xa5f8;		/* (-23048)	R0=0x100a5f8(16819704) */
 100a43e:	01 e8 00 00 	UNLINK;
 100a442:	00 e2 9f 25 	JUMP.L 0x100ef80 <_printf>;
	...

0100a448 <_bd_addr_to_str>:
 100a448:	eb 05       	[--SP] = (R7:5, P5:3);
 100a44a:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x2c <_att_client_start_handle> */
 100a44e:	0d e1 eb 26 	P5.L = 0x26eb;		/* (9963)	P5=0x26eb <_bd_addr_to_str_buffer> */
 100a452:	75 30       	R6 = P5;
 100a454:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100a458:	20 32       	P4 = R0;
 100a45a:	96 64       	R6 += 0x12;		/* ( 18) */
 100a45c:	18 32       	P3 = R0;
 100a45e:	7f 60       	R7 = 0xf (X);		/*		R7=0xf( 15) */
 100a460:	d5 61       	R5 = 0x3a (X);		/*		R5=0x3a( 58) */
 100a462:	00 00       	NOP;
 100a464:	20 98       	R0 = B[P4++] (Z);
 100a466:	20 4e       	R0 >>= 0x4;
 100a468:	38 54       	R0 = R0 & R7;
 100a46a:	ff e3 6b ff 	CALL 0x100a340 <_char_for_nibble>;
 100a46e:	28 9b       	B[P5] = R0;
 100a470:	18 98       	R0 = B[P3++] (Z);
 100a472:	38 54       	R0 = R0 & R7;
 100a474:	ff e3 66 ff 	CALL 0x100a340 <_char_for_nibble>;
 100a478:	a8 e6 01 00 	B[P5 + 0x1] = R0;
 100a47c:	ad e6 02 00 	B[P5 + 0x2] = R5;
 100a480:	1d 6c       	P5 += 0x3;		/* (  3) */
 100a482:	45 30       	R0 = P5;
 100a484:	30 08       	CC = R0 == R6;
 100a486:	ee 17       	IF !CC JUMP 0x100a462 <_bd_addr_to_str+0x1a> (BP);
 100a488:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0xa5f8(42488) */
 100a48c:	00 e1 eb 26 	R0.L = 0x26eb;		/* (9963)	R0=0x26eb <_bd_addr_to_str_buffer>(9963) */
 100a490:	10 32       	P2 = R0;
 100a492:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100a494:	91 e6 11 00 	B[P2 + 0x11] = R1;
 100a498:	01 e8 00 00 	UNLINK;
 100a49c:	ab 05       	(R7:5, P5:3) = [SP++];
 100a49e:	10 00       	RTS;

0100a4a0 <_link_key_to_str>:
 100a4a0:	f3 05       	[--SP] = (R7:6, P5:3);
 100a4a2:	4b e1 00 00 	P3.H = 0x0;		/* (  0)	P3=0xffee */
 100a4a6:	0b e1 ea 26 	P3.L = 0x26ea;		/* (9962)	P3=0x26ea */
 100a4aa:	6b 32       	P5 = P3;
 100a4ac:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100a4b0:	20 32       	P4 = R0;
 100a4b2:	30 30       	R6 = R0;
 100a4b4:	05 6f       	P5 += -0x20;		/* (-32) */
 100a4b6:	7f 60       	R7 = 0xf (X);		/*		R7=0xf( 15) */
 100a4b8:	00 00       	NOP;
 100a4ba:	20 98       	R0 = B[P4++] (Z);
 100a4bc:	20 4e       	R0 >>= 0x4;
 100a4be:	38 54       	R0 = R0 & R7;
 100a4c0:	ff e3 40 ff 	CALL 0x100a340 <_char_for_nibble>;
 100a4c4:	16 32       	P2 = R6;
 100a4c6:	28 9b       	B[P5] = R0;
 100a4c8:	0e 64       	R6 += 0x1;		/* (  1) */
 100a4ca:	10 98       	R0 = B[P2++] (Z);
 100a4cc:	38 54       	R0 = R0 & R7;
 100a4ce:	ff e3 39 ff 	CALL 0x100a340 <_char_for_nibble>;
 100a4d2:	a8 e6 01 00 	B[P5 + 0x1] = R0;
 100a4d6:	15 6c       	P5 += 0x2;		/* (  2) */
 100a4d8:	5d 08       	CC = P5 == P3;
 100a4da:	ef 17       	IF !CC JUMP 0x100a4b8 <_link_key_to_str+0x18> (BP);
 100a4dc:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x26eb <_bd_addr_to_str_buffer>(9963) */
 100a4e0:	00 e1 ca 26 	R0.L = 0x26ca;		/* (9930)	R0=0x26ca <_link_key_to_str_buffer>(9930) */
 100a4e4:	10 32       	P2 = R0;
 100a4e6:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100a4e8:	91 e6 20 00 	B[P2 + 0x20] = R1;
 100a4ec:	01 e8 00 00 	UNLINK;
 100a4f0:	b3 05       	(R7:6, P5:3) = [SP++];
 100a4f2:	10 00       	RTS;

0100a4f4 <_link_key_type_to_str>:
 100a4f4:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a4f8:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x26ca <_link_key_to_str_buffer>(9930) */
 100a4fc:	00 e1 c8 26 	R0.L = 0x26c8;		/* (9928)	R0=0x26c8 <_link_key_type_to_str_buffer>(9928) */
 100a500:	01 e8 00 00 	UNLINK;
 100a504:	10 00       	RTS;
	...

0100a508 <_print_bd_addr>:
 100a508:	00 00       	NOP;
 100a50a:	00 00       	NOP;
 100a50c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a510:	01 e8 00 00 	UNLINK;
 100a514:	10 00       	RTS;
	...

0100a518 <_is_authenticated_link_key>:
 100a518:	10 32       	P2 = R0;
 100a51a:	41 68       	P1 = 0x8 (X);		/*		P1=0x8(  8) */
 100a51c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a520:	4a 0a       	CC = P2 <= P1 (IU);
 100a522:	08 10       	IF !CC JUMP 0x100a532 <_is_authenticated_link_key+0x1a>;
 100a524:	49 e1 00 01 	P1.H = 0x100;		/* (256)	P1=0x1000008 */
 100a528:	09 e1 fc a6 	P1.L = 0xa6fc;		/* (-22788)	P1=0x100a6fc <_CSWTCH.10> */
 100a52c:	91 5e       	P2 = P1 + (P2 << 0x2);
 100a52e:	10 91       	R0 = [P2];
 100a530:	02 20       	JUMP.S 0x100a534 <_is_authenticated_link_key+0x1c>;
 100a532:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100a534:	01 e8 00 00 	UNLINK;
 100a538:	10 00       	RTS;
	...

0100a53c <_crc8>:
 100a53c:	78 05       	[--SP] = (R7:7);
 100a53e:	10 32       	P2 = R0;
 100a540:	43 e1 00 01 	R3.H = 0x100;		/* (256)	R3=0x1000000 <_START>(16777216) */
 100a544:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a548:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100a54a:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100a54c:	c9 42       	R1 = R1.L (Z);
 100a54e:	03 e1 fc a5 	R3.L = 0xa5fc;		/* (-23044)	R3=0x100a5fc <_crc8table>(16819708) */
 100a552:	08 20       	JUMP.S 0x100a562 <_crc8+0x26>;
 100a554:	0a 64       	R2 += 0x1;		/* (  1) */
 100a556:	57 98       	R7 = B[P2++] (X);
 100a558:	38 58       	R0 = R0 ^ R7;
 100a55a:	40 43       	R0 = R0.B (Z);
 100a55c:	03 50       	R0 = R3 + R0;
 100a55e:	08 32       	P1 = R0;
 100a560:	48 99       	R0 = B[P1] (X);
 100a562:	d7 42       	R7 = R2.L (Z);
 100a564:	8f 09       	CC = R7 < R1 (IU);
 100a566:	f7 1f       	IF CC JUMP 0x100a554 <_crc8+0x18> (BP);
 100a568:	01 e8 00 00 	UNLINK;
 100a56c:	38 05       	(R7:7) = [SP++];
 100a56e:	10 00       	RTS;

0100a570 <_crc8_check>:
 100a570:	78 05       	[--SP] = (R7:7);
 100a572:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100a576:	3a 30       	R7 = R2;
 100a578:	ff e3 e2 ff 	CALL 0x100a53c <_crc8>;
 100a57c:	f8 59       	R7 = R0 ^ R7;
 100a57e:	7f 43       	R7 = R7.B (Z);
 100a580:	0f 32       	P1 = R7;
 100a582:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x100002e */
 100a586:	0a e1 fc a5 	P2.L = 0xa5fc;		/* (-23044)	P2=0x100a5fc <_crc8table> */
 100a58a:	78 62       	R0 = -0x31 (X);		/*		R0=0xffffffcf(-49) */
 100a58c:	01 e8 00 00 	UNLINK;
 100a590:	8a 5a       	P2 = P2 + P1;
 100a592:	51 99       	R1 = B[P2] (X);
 100a594:	01 58       	R0 = R1 ^ R0;
 100a596:	40 43       	R0 = R0.B (Z);
 100a598:	80 43       	R0 = -R0;
 100a59a:	f8 4e       	R0 >>= 0x1f;
 100a59c:	38 05       	(R7:7) = [SP++];
 100a59e:	10 00       	RTS;

0100a5a0 <_crc8_calc>:
 100a5a0:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100a5a4:	ff e3 cc ff 	CALL 0x100a53c <_crc8>;
 100a5a8:	c0 43       	R0 =~ R0;
 100a5aa:	01 e8 00 00 	UNLINK;
 100a5ae:	10 00       	RTS;
 100a5b0:	25 30       	R4 = R5;
 100a5b2:	32 78       	ILLEGAL;
 100a5b4:	25 30       	R4 = R5;
 100a5b6:	32 78       	ILLEGAL;
 100a5b8:	25 30       	R4 = R5;
 100a5ba:	32 78       	ILLEGAL;
 100a5bc:	25 30       	R4 = R5;
 100a5be:	32 78       	ILLEGAL;
 100a5c0:	2d 25       	JUMP.S 0x100b01a <_bt_analog_init+0x3d2>;
 100a5c2:	30 32       	SP = R0;
 100a5c4:	78 25       	JUMP.S 0x100b0b4 <_baseband_analog+0x1c>;
 100a5c6:	30 32       	SP = R0;
 100a5c8:	78 2d       	JUMP.S 0x100a0b8 <_sm_le_device_index+0x464>;
 100a5ca:	25 30       	R4 = R5;
 100a5cc:	32 78       	ILLEGAL;
 100a5ce:	25 30       	R4 = R5;
 100a5d0:	32 78       	ILLEGAL;
 100a5d2:	2d 25       	JUMP.S 0x100b02c <_bt_analog_init+0x3e4>;
 100a5d4:	30 32       	SP = R0;
 100a5d6:	78 25       	JUMP.S 0x100b0c6 <_baseband_analog+0x2e>;
 100a5d8:	30 32       	SP = R0;
 100a5da:	78 2d       	JUMP.S 0x100a0ca <_sm_le_device_index+0x476>;
 100a5dc:	25 30       	R4 = R5;
 100a5de:	32 78       	ILLEGAL;
 100a5e0:	25 30       	R4 = R5;
 100a5e2:	32 78       	ILLEGAL;
 100a5e4:	25 30       	R4 = R5;
 100a5e6:	32 78       	ILLEGAL;
 100a5e8:	25 30       	R4 = R5;
 100a5ea:	32 78       	ILLEGAL;
 100a5ec:	25 30       	R4 = R5;
 100a5ee:	32 78       	ILLEGAL;
 100a5f0:	25 30       	R4 = R5;
 100a5f2:	32 78       	ILLEGAL;
 100a5f4:	00 00       	NOP;
 100a5f6:	00 00       	NOP;
 100a5f8:	25 73       	ILLEGAL;
	...

0100a5fc <_crc8table>:
 100a5fc:	00 91       	R0 = [P0];
 100a5fe:	e3 72       	ILLEGAL;
 100a600:	07 96       	W[P0++] = R7;
 100a602:	e4 75       	ILLEGAL;
 100a604:	0e 9f       	[I1] = R6;
 100a606:	ed 7c       	ILLEGAL;
 100a608:	09 98       	R1 = B[P1++] (Z);
 100a60a:	ea 7b       	ILLEGAL;
 100a60c:	1c 8d       	W[P4 ++ P3] = R4.H;
 100a60e:	ff 6e       	FP += -0x21;		/* (-33) */
 100a610:	1b 8a       	W[P3] = R0.L;
 100a612:	f8 69       	P0 = 0x3f (X);		/*		P0=0x3f( 63) */
 100a614:	12 83       	R4.L = W[P2];
 100a616:	f1 60       	R1 = 0x1e (X);		/*		R1=0x1e( 30) */
 100a618:	15 84       	R0.H = W[P5 ++ P2];
 100a61a:	f6 67       	R6 += -0x2;		/* ( -2) */
 100a61c:	38 a9       	R0 = W[FP + 0x8] (X);
 100a61e:	db 4a       	BITSET (R3, 0x1b);		/* bit 27 */
 100a620:	3f ae       	FP = [FP + 0x20];
 100a622:	dc 4d       	R4 >>>= 0x1b;
 100a624:	36 a7       	R6 = W[SP + 0x18] (Z);
 100a626:	d5 44       	P5 = P2 >> 0x2;
 100a628:	31 a0       	R1 = [SP + 0x0];
 100a62a:	d2 43       	R2 =~ R2;
 100a62c:	24 b5       	W[P4 + 0x8] = R4;
 100a62e:	c7 56       	R3 = R7 | R0;
 100a630:	23 b2       	[P4 + 0x20] = R3;
 100a632:	c0 51       	R7 = R0 + R0;
 100a634:	2a bb       	[FP -0x38] = P2;
 100a636:	c9 58       	R3 = R1 ^ R1;
 100a638:	2d bc       	[P5 + 0x0] = P5;
 100a63a:	ce 5f       	FP = SP + (P1 << 0x2);
 100a63c:	70 e1       	ILLEGAL;
 100a63e:	93 02       	ILLEGAL;
 100a640:	77 e6 94 05 	W[SP + 0xb28] = R7;
 100a644:	7e ef       	ILLEGAL;
 100a646:	9d 0c       	CC = R5 < 0x3;
 100a648:	79 e8       	ILLEGAL;
 100a64a:	9a 0b       	ILLEGAL;
 100a64c:	6c fd       	ILLEGAL;
 100a64e:	8f 1e       	IF CC JUMP 0x100a36c <_printf_hexdump+0x8> (BP);
 100a650:	6b fa       	ILLEGAL;
 100a652:	88 19       	IF CC JUMP 0x100a962 <_bt_pll_scan+0x242>;
 100a654:	62 f3       	ILLEGAL;
 100a656:	81 10       	IF !CC JUMP 0x100a758 <_bt_pll_scan+0x38>;
 100a658:	65 f4       	ILLEGAL;
 100a65a:	86 17       	IF !CC JUMP 0x100a566 <_crc8+0x2a> (BP);
 100a65c:	48 d9       	ILLEGAL;
 100a65e:	ab 3a       	ILLEGAL;
 100a660:	4f de       	ILLEGAL;
 100a662:	ac 3d       	ILLEGAL;
 100a664:	46 d7       	ILLEGAL;
 100a666:	a5 34       	M0 = M1;
 100a668:	41 d0       	ILLEGAL;
 100a66a:	a2 33       	P4 = LB0;
 100a66c:	54 c5       	ILLEGAL;
 100a66e:	b7 26       	JUMP.S 0x100b3dc <_trim_iq_all+0x9c>;
 100a670:	53 c2 b0 21 	R6.L = R6.L * R0.L (M, T);
 100a674:	5a cb       	ILLEGAL;
 100a676:	b9 28       	JUMP.S 0x10097e8 <_sm_packet_handler+0xd88>;
 100a678:	5d cc       	ILLEGAL;
 100a67a:	be 2f       	JUMP.S 0x100a5f6 <_crc8_calc+0x56>;
 100a67c:	e0 71       	ILLEGAL;
 100a67e:	03 92       	[P0++] = R3;
 100a680:	e7 76       	ILLEGAL;
 100a682:	04 95       	R4 = W[P0] (Z);
 100a684:	ee 7f       	ILLEGAL;
 100a686:	0d 9c       	R5 = [I1++];
 100a688:	e9 78       	ILLEGAL;
 100a68a:	0a 9b       	B[P1] = R2;
 100a68c:	fc 6d       	P4 += 0x3f;		/* ( 63) */
 100a68e:	1f 8e       	R0 = W[FP ++ P3] (X);
 100a690:	fb 6a       	P3 = -0x21 (X);		/*		P3=0xffffffdf(-33) */
 100a692:	18 89       	[P0 ++ P3] = R4;
 100a694:	f2 63       	R2 = -0x2 (X);		/*		R2=0xfffffffe( -2) */
 100a696:	11 80       	R0 = [P1 ++ P2];
 100a698:	f5 64       	R5 += 0x1e;		/* ( 30) */
 100a69a:	16 87       	R4 = W[SP ++ P2] (Z);
 100a69c:	d8 49       	CC = BITTST (R0, 0x1b);		/* bit 27 */
 100a69e:	3b aa       	R3 = W[FP + 0x10] (X);
 100a6a0:	df 4e       	R7 >>= 0x1b;
 100a6a2:	3c ad       	P4 = [FP + 0x10];
 100a6a4:	d6 47       	ILLEGAL;
 100a6a6:	35 a4       	R5 = W[SP + 0x0] (Z);
 100a6a8:	d1 40       	R1 *= R2;
 100a6aa:	32 a3       	R2 = [SP + 0x30];
 100a6ac:	c4 55       	R7 = R4 & R0;
 100a6ae:	27 b6       	W[P4 + 0x10] = R7;
 100a6b0:	c3 52       	R3 = R3 - R0;
 100a6b2:	20 b1       	[P4 + 0x10] = R0;
 100a6b4:	ca 5b       	FP = P2 + P1;
 100a6b6:	29 b8       	P1 = [FP -0x78];
 100a6b8:	cd 5c       	P3 = P5 + (P1 << 0x1);
 100a6ba:	2e bf       	[P5 + 0x30] = SP;
 100a6bc:	90 01       	ILLEGAL;
 100a6be:	73 e2 97 06 	JUMP.L 0x1e6b3ec <_text_end+0xe5b3ac>;
 100a6c2:	74 e5 9e 0f 	R4 = W[SP + 0x1f3c] (X);
 100a6c6:	7d ec       	ILLEGAL;
 100a6c8:	99 08       	CC = R1 < R3;
 100a6ca:	7a eb       	ILLEGAL;
 100a6cc:	8c 1d       	IF CC JUMP 0x100a9e4 <_get_pll_param_for_frq+0x8> (BP);
 100a6ce:	6f fe       	ILLEGAL;
 100a6d0:	8b 1a       	IF CC JUMP 0x100a3e6 <_uuid128_to_str+0x42>;
 100a6d2:	68 f9       	OUTC 0x68;
 100a6d4:	82 13       	IF !CC JUMP 0x100a5d8 <_crc8_calc+0x38>;
 100a6d6:	61 f0 85 14 	DBGA (R1.L, 0x1485);
 100a6da:	66 f7       	ILLEGAL;
 100a6dc:	a8 39       	ILLEGAL;
 100a6de:	4b da       	ILLEGAL;
 100a6e0:	af 3e       	ILLEGAL;
 100a6e2:	4c dd       	ILLEGAL;
 100a6e4:	a6 37       	ILLEGAL;
 100a6e6:	45 d4       	ILLEGAL;
 100a6e8:	a1 30       	R4 = I1;
 100a6ea:	42 d3       	ILLEGAL;
 100a6ec:	b4 25       	JUMP.S 0x100b254 <_trim_iq+0x104>;
 100a6ee:	57 c6       	ILLEGAL;
 100a6f0:	b3 22       	JUMP.S 0x100ac56 <_bt_analog_init+0xe>;
 100a6f2:	50 c1       	ILLEGAL;
 100a6f4:	ba 2b       	JUMP.S 0x1009e68 <_sm_le_device_index+0x214>;
 100a6f6:	59 c8       	ILLEGAL;
 100a6f8:	bd 2c       	JUMP.S 0x100a072 <_sm_le_device_index+0x41e>;
 100a6fa:	5e cf       	ILLEGAL;

0100a6fc <_CSWTCH.10>:
 100a6fc:	01 00       	ILLEGAL;
	...
 100a70e:	00 00       	NOP;
 100a710:	01 00       	ILLEGAL;
	...
 100a71a:	00 00       	NOP;
 100a71c:	01 00       	ILLEGAL;
	...

0100a720 <_bt_pll_scan>:
 100a720:	e3 05       	[--SP] = (R7:4, P5:3);
 100a722:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xea5fc */
 100a726:	00 e8 05 00 	LINK 0x14;		/* (20) */
 100a72a:	0a e1 f0 fc 	P2.L = 0xfcf0;		/* (-784)	P2=0xefcf0 */
 100a72e:	10 91       	R0 = [P2];
 100a730:	48 4a       	BITSET (R0, 0x9);		/* bit  9 */
 100a732:	10 93       	[P2] = R0;
 100a734:	10 91       	R0 = [P2];
 100a736:	50 4c       	BITCLR (R0, 0xa);		/* bit 10 */
 100a738:	4c e1 0e 00 	P4.H = 0xe;		/* ( 14)	P4=0xe002e */
 100a73c:	4d e1 0e 00 	P5.H = 0xe;		/* ( 14)	P5=0xe26eb */
 100a740:	10 93       	[P2] = R0;
 100a742:	03 68       	P3 = 0x0 (X);		/*		P3=0x0(  0) */
 100a744:	26 e1 4a 00 	R6 = 0x4a (X);		/*		R6=0x4a( 74) */
 100a748:	0c e1 ec fc 	P4.L = 0xfcec;		/* (-788)	P4=0xefcec */
 100a74c:	0d e1 fc fc 	P5.L = 0xfcfc;		/* (-772)	P5=0xefcfc */
 100a750:	f8 60       	R0 = 0x1f (X);		/*		R0=0x1f( 31) */
 100a752:	10 30       	R2 = R0;
 100a754:	5b 30       	R3 = P3;
 100a756:	1a 40       	R2 >>>= R3;
 100a758:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefcf0 */
 100a75c:	0a e1 e8 fc 	P2.L = 0xfce8;		/* (-792)	P2=0xefce8 */
 100a760:	02 54       	R0 = R2 & R0;
 100a762:	11 91       	R1 = [P2];
 100a764:	22 e1 83 ff 	R2 = -0x7d (X);		/*		R2=0xffffff83(-125) */
 100a768:	10 4f       	R0 <<= 0x2;
 100a76a:	51 54       	R1 = R1 & R2;
 100a76c:	3e 30       	R7 = R6;
 100a76e:	08 56       	R0 = R0 | R1;
 100a770:	a7 64       	R7 += 0x14;		/* ( 20) */
 100a772:	10 93       	[P2] = R0;
 100a774:	20 91       	R0 = [P4];
 100a776:	40 4d       	R0 >>>= 0x8;
 100a778:	7d 43       	R5 = R7.B (Z);
 100a77a:	40 4f       	R0 <<= 0x8;
 100a77c:	05 56       	R0 = R5 | R0;
 100a77e:	20 93       	[P4] = R0;
 100a780:	20 e1 00 32 	R0 = 0x3200 (X);		/*		R0=0x3200(12800) */
 100a784:	00 e3 1c 1f 	CALL 0x100e5bc <_delay>;
 100a788:	2c 91       	R4 = [P5];
 100a78a:	28 91       	R0 = [P5];
 100a78c:	04 57       	R4 = R4 | R0;
 100a78e:	28 91       	R0 = [P5];
 100a790:	20 57       	R4 = R0 | R4;
 100a792:	54 4e       	R4 >>= 0xa;
 100a794:	1b 60       	R3 = 0x3 (X);		/*		R3=0x3(  3) */
 100a796:	1c 55       	R4 = R4 & R3;
 100a798:	60 43       	R0 = R4.B (Z);
 100a79a:	08 0c       	CC = R0 == 0x1;
 100a79c:	08 14       	IF !CC JUMP 0x100a7ac <_bt_pll_scan+0x8c> (BP);
 100a79e:	20 e1 61 00 	R0 = 0x61 (X);		/*		R0=0x61( 97) */
 100a7a2:	00 e3 b7 1c 	CALL 0x100e110 <_putchar>;
 100a7a6:	26 e1 4a 00 	R6 = 0x4a (X);		/*		R6=0x4a( 74) */
 100a7aa:	7f 20       	JUMP.S 0x100a8a8 <_bt_pll_scan+0x188>;
 100a7ac:	00 0c       	CC = R0 == 0x0;
 100a7ae:	6f 14       	IF !CC JUMP 0x100a88c <_bt_pll_scan+0x16c> (BP);
 100a7b0:	1d 60       	R5 = 0x3 (X);		/*		R5=0x3(  3) */
 100a7b2:	0f 64       	R7 += 0x1;		/* (  1) */
 100a7b4:	79 43       	R1 = R7.B (Z);
 100a7b6:	20 e1 a3 00 	R0 = 0xa3 (X);		/*		R0=0xa3(163) */
 100a7ba:	01 0a       	CC = R1 <= R0 (IU);
 100a7bc:	18 14       	IF !CC JUMP 0x100a7ec <_bt_pll_scan+0xcc> (BP);
 100a7be:	20 91       	R0 = [P4];
 100a7c0:	40 4d       	R0 >>>= 0x8;
 100a7c2:	40 4f       	R0 <<= 0x8;
 100a7c4:	01 56       	R0 = R1 | R0;
 100a7c6:	20 93       	[P4] = R0;
 100a7c8:	20 e1 00 32 	R0 = 0x3200 (X);		/*		R0=0x3200(12800) */
 100a7cc:	00 e3 f8 1e 	CALL 0x100e5bc <_delay>;
 100a7d0:	2c 91       	R4 = [P5];
 100a7d2:	28 91       	R0 = [P5];
 100a7d4:	04 57       	R4 = R4 | R0;
 100a7d6:	28 91       	R0 = [P5];
 100a7d8:	20 57       	R4 = R0 | R4;
 100a7da:	54 4e       	R4 >>= 0xa;
 100a7dc:	20 e1 62 00 	R0 = 0x62 (X);		/*		R0=0x62( 98) */
 100a7e0:	00 e3 98 1c 	CALL 0x100e110 <_putchar>;
 100a7e4:	2c 55       	R4 = R4 & R5;
 100a7e6:	60 43       	R0 = R4.B (Z);
 100a7e8:	08 0c       	CC = R0 == 0x1;
 100a7ea:	e4 17       	IF !CC JUMP 0x100a7b2 <_bt_pll_scan+0x92> (BP);
 100a7ec:	2f 30       	R5 = R7;
 100a7ee:	1c 20       	JUMP.S 0x100a826 <_bt_pll_scan+0x106>;
 100a7f0:	fd 67       	R5 += -0x1;		/* ( -1) */
 100a7f2:	69 43       	R1 = R5.B (Z);
 100a7f4:	22 e1 49 00 	R2 = 0x49 (X);		/*		R2=0x49( 73) */
 100a7f8:	11 0a       	CC = R1 <= R2 (IU);
 100a7fa:	19 1c       	IF CC JUMP 0x100a82c <_bt_pll_scan+0x10c> (BP);
 100a7fc:	20 91       	R0 = [P4];
 100a7fe:	40 4d       	R0 >>>= 0x8;
 100a800:	40 4f       	R0 <<= 0x8;
 100a802:	01 56       	R0 = R1 | R0;
 100a804:	20 93       	[P4] = R0;
 100a806:	20 e1 00 32 	R0 = 0x3200 (X);		/*		R0=0x3200(12800) */
 100a80a:	00 e3 d9 1e 	CALL 0x100e5bc <_delay>;
 100a80e:	2c 91       	R4 = [P5];
 100a810:	28 91       	R0 = [P5];
 100a812:	04 57       	R4 = R4 | R0;
 100a814:	28 91       	R0 = [P5];
 100a816:	20 57       	R4 = R0 | R4;
 100a818:	54 4e       	R4 >>= 0xa;
 100a81a:	1b 60       	R3 = 0x3 (X);		/*		R3=0x3(  3) */
 100a81c:	1c 55       	R4 = R4 & R3;
 100a81e:	20 e1 63 00 	R0 = 0x63 (X);		/*		R0=0x63( 99) */
 100a822:	00 e3 77 1c 	CALL 0x100e110 <_putchar>;
 100a826:	64 43       	R4 = R4.B (Z);
 100a828:	14 0c       	CC = R4 == 0x2;
 100a82a:	e3 17       	IF !CC JUMP 0x100a7f0 <_bt_pll_scan+0xd0> (BP);
 100a82c:	4b 30       	R1 = P3;
 100a82e:	48 43       	R0 = R1.B (Z);
 100a830:	08 0c       	CC = R0 == 0x1;
 100a832:	0b 14       	IF !CC JUMP 0x100a848 <_bt_pll_scan+0x128> (BP);
 100a834:	68 43       	R0 = R5.B (Z);
 100a836:	76 43       	R6 = R6.B (Z);
 100a838:	b0 51       	R6 = R0 + R6;
 100a83a:	0e 4d       	R6 >>>= 0x1;
 100a83c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0xfce8 */
 100a840:	16 64       	R6 += 0x2;		/* (  2) */
 100a842:	0a e1 bc 45 	P2.L = 0x45bc;		/* (17852)	P2=0x45bc <_bt_pll_cap0> */
 100a846:	20 20       	JUMP.S 0x100a886 <_bt_pll_scan+0x166>;
 100a848:	10 0c       	CC = R0 == 0x2;
 100a84a:	0b 14       	IF !CC JUMP 0x100a860 <_bt_pll_scan+0x140> (BP);
 100a84c:	68 43       	R0 = R5.B (Z);
 100a84e:	76 43       	R6 = R6.B (Z);
 100a850:	b0 51       	R6 = R0 + R6;
 100a852:	0e 4d       	R6 >>>= 0x1;
 100a854:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45bc <_bt_pll_cap0> */
 100a858:	16 64       	R6 += 0x2;		/* (  2) */
 100a85a:	0a e1 be 45 	P2.L = 0x45be;		/* (17854)	P2=0x45be <_bt_pll_cap1> */
 100a85e:	14 20       	JUMP.S 0x100a886 <_bt_pll_scan+0x166>;
 100a860:	18 0c       	CC = R0 == 0x3;
 100a862:	68 43       	R0 = R5.B (Z);
 100a864:	76 43       	R6 = R6.B (Z);
 100a866:	09 14       	IF !CC JUMP 0x100a878 <_bt_pll_scan+0x158> (BP);
 100a868:	b0 51       	R6 = R0 + R6;
 100a86a:	0e 4d       	R6 >>>= 0x1;
 100a86c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45be <_bt_pll_cap1> */
 100a870:	16 64       	R6 += 0x2;		/* (  2) */
 100a872:	0a e1 bf 45 	P2.L = 0x45bf;		/* (17855)	P2=0x45bf <_bt_pll_cap2> */
 100a876:	08 20       	JUMP.S 0x100a886 <_bt_pll_scan+0x166>;
 100a878:	b0 51       	R6 = R0 + R6;
 100a87a:	0e 4d       	R6 >>>= 0x1;
 100a87c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45bf <_bt_pll_cap2> */
 100a880:	16 64       	R6 += 0x2;		/* (  2) */
 100a882:	0a e1 bd 45 	P2.L = 0x45bd;		/* (17853)	P2=0x45bd <_bt_pll_cap3> */
 100a886:	16 9b       	B[P2] = R6;
 100a888:	37 30       	R6 = R7;
 100a88a:	13 20       	JUMP.S 0x100a8b0 <_bt_pll_scan+0x190>;
 100a88c:	20 e1 64 00 	R0 = 0x64 (X);		/*		R0=0x64 <_bt16_devices>(100) */
 100a890:	00 e3 40 1c 	CALL 0x100e110 <_putchar>;
 100a894:	20 e1 f5 00 	R0 = 0xf5 (X);		/*		R0=0xf5(245) */
 100a898:	05 0a       	CC = R5 <= R0 (IU);
 100a89a:	09 1c       	IF CC JUMP 0x100a8ac <_bt_pll_scan+0x18c> (BP);
 100a89c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10000f5(16777461) */
 100a8a0:	00 e1 1c b4 	R0.L = 0xb41c;		/* (-19428)	R0=0x100b41c(16823324) */
 100a8a4:	00 e3 8a 23 	CALL 0x100efb8 <_puts>;
 100a8a8:	2e 30       	R5 = R6;
 100a8aa:	03 20       	JUMP.S 0x100a8b0 <_bt_pll_scan+0x190>;
 100a8ac:	57 64       	R7 += 0xa;		/* ( 10) */
 100a8ae:	63 2f       	JUMP.S 0x100a774 <_bt_pll_scan+0x54>;
 100a8b0:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100b41c(16823324) */
 100a8b4:	69 43       	R1 = R5.B (Z);
 100a8b6:	72 43       	R2 = R6.B (Z);
 100a8b8:	00 e1 3c b4 	R0.L = 0xb43c;		/* (-19396)	R0=0x100b43c(16823356) */
 100a8bc:	00 e3 62 23 	CALL 0x100ef80 <_printf>;
 100a8c0:	0b 6c       	P3 += 0x1;		/* (  1) */
 100a8c2:	2a 68       	P2 = 0x5 (X);		/*		P2=0x5(  5) */
 100a8c4:	53 08       	CC = P3 == P2;
 100a8c6:	45 17       	IF !CC JUMP 0x100a750 <_bt_pll_scan+0x30> (BP);
 100a8c8:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe0005 */
 100a8cc:	0a e1 f0 fc 	P2.L = 0xfcf0;		/* (-784)	P2=0xefcf0 */
 100a8d0:	10 91       	R0 = [P2];
 100a8d2:	48 4c       	BITCLR (R0, 0x9);		/* bit  9 */
 100a8d4:	10 93       	[P2] = R0;
 100a8d6:	10 91       	R0 = [P2];
 100a8d8:	50 4c       	BITCLR (R0, 0xa);		/* bit 10 */
 100a8da:	10 93       	[P2] = R0;
 100a8dc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0xfcf0 */
 100a8e0:	0a e1 bc 45 	P2.L = 0x45bc;		/* (17852)	P2=0x45bc <_bt_pll_cap0> */
 100a8e4:	10 99       	R0 = B[P2] (Z);
 100a8e6:	21 e1 77 00 	R1 = 0x77 (X);		/*		R1=0x77(119) */
 100a8ea:	08 0a       	CC = R0 <= R1 (IU);
 100a8ec:	09 1c       	IF CC JUMP 0x100a8fe <_bt_pll_scan+0x1de> (BP);
 100a8ee:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe45bc */
 100a8f2:	0a e1 e8 fc 	P2.L = 0xfce8;		/* (-792)	P2=0xefce8 */
 100a8f6:	11 91       	R1 = [P2];
 100a8f8:	20 e1 7c 00 	R0 = 0x7c (X);		/*		R0=0x7c(124) */
 100a8fc:	39 20       	JUMP.S 0x100a96e <_bt_pll_scan+0x24e>;
 100a8fe:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0xfce8 */
 100a902:	0a e1 be 45 	P2.L = 0x45be;		/* (17854)	P2=0x45be <_bt_pll_cap1> */
 100a906:	10 99       	R0 = B[P2] (Z);
 100a908:	22 e1 77 00 	R2 = 0x77 (X);		/*		R2=0x77(119) */
 100a90c:	10 0a       	CC = R0 <= R2 (IU);
 100a90e:	0b 1c       	IF CC JUMP 0x100a924 <_bt_pll_scan+0x204> (BP);
 100a910:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe45be */
 100a914:	0a e1 e8 fc 	P2.L = 0xfce8;		/* (-792)	P2=0xefce8 */
 100a918:	11 91       	R1 = [P2];
 100a91a:	20 e1 83 ff 	R0 = -0x7d (X);		/*		R0=0xffffff83(-125) */
 100a91e:	01 54       	R0 = R1 & R0;
 100a920:	e1 61       	R1 = 0x3c (X);		/*		R1=0x3c( 60) */
 100a922:	26 20       	JUMP.S 0x100a96e <_bt_pll_scan+0x24e>;
 100a924:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0xfce8 */
 100a928:	0a e1 bf 45 	P2.L = 0x45bf;		/* (17855)	P2=0x45bf <_bt_pll_cap2> */
 100a92c:	10 99       	R0 = B[P2] (Z);
 100a92e:	23 e1 77 00 	R3 = 0x77 (X);		/*		R3=0x77(119) */
 100a932:	18 0a       	CC = R0 <= R3 (IU);
 100a934:	0b 1c       	IF CC JUMP 0x100a94a <_bt_pll_scan+0x22a> (BP);
 100a936:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe45bf */
 100a93a:	0a e1 e8 fc 	P2.L = 0xfce8;		/* (-792)	P2=0xefce8 */
 100a93e:	11 91       	R1 = [P2];
 100a940:	20 e1 83 ff 	R0 = -0x7d (X);		/*		R0=0xffffff83(-125) */
 100a944:	01 54       	R0 = R1 & R0;
 100a946:	e1 60       	R1 = 0x1c (X);		/*		R1=0x1c( 28) */
 100a948:	13 20       	JUMP.S 0x100a96e <_bt_pll_scan+0x24e>;
 100a94a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0xfce8 */
 100a94e:	0a e1 bd 45 	P2.L = 0x45bd;		/* (17853)	P2=0x45bd <_bt_pll_cap3> */
 100a952:	10 99       	R0 = B[P2] (Z);
 100a954:	21 e1 77 00 	R1 = 0x77 (X);		/*		R1=0x77(119) */
 100a958:	08 0a       	CC = R0 <= R1 (IU);
 100a95a:	0c 1c       	IF CC JUMP 0x100a972 <_bt_pll_scan+0x252> (BP);
 100a95c:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe45bd */
 100a960:	0a e1 e8 fc 	P2.L = 0xfce8;		/* (-792)	P2=0xefce8 */
 100a964:	11 91       	R1 = [P2];
 100a966:	20 e1 83 ff 	R0 = -0x7d (X);		/*		R0=0xffffff83(-125) */
 100a96a:	01 54       	R0 = R1 & R0;
 100a96c:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 100a96e:	08 56       	R0 = R0 | R1;
 100a970:	0a 20       	JUMP.S 0x100a984 <_bt_pll_scan+0x264>;
 100a972:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefce8 */
 100a976:	0a e1 e8 fc 	P2.L = 0xfce8;		/* (-792)	P2=0xefce8 */
 100a97a:	11 91       	R1 = [P2];
 100a97c:	20 e1 83 ff 	R0 = -0x7d (X);		/*		R0=0xffffff83(-125) */
 100a980:	01 54       	R0 = R1 & R0;
 100a982:	10 4a       	BITSET (R0, 0x2);		/* bit  2 */
 100a984:	10 93       	[P2] = R0;
 100a986:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefce8 */
 100a98a:	0a e1 ec fc 	P2.L = 0xfcec;		/* (-788)	P2=0xefcec */
 100a98e:	10 91       	R0 = [P2];
 100a990:	40 4d       	R0 >>>= 0x8;
 100a992:	21 e1 77 00 	R1 = 0x77 (X);		/*		R1=0x77(119) */
 100a996:	40 4f       	R0 <<= 0x8;
 100a998:	08 56       	R0 = R0 | R1;
 100a99a:	10 93       	[P2] = R0;
 100a99c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0xfcec */
 100a9a0:	0a e1 bc 45 	P2.L = 0x45bc;		/* (17852)	P2=0x45bc <_bt_pll_cap0> */
 100a9a4:	11 99       	R1 = B[P2] (Z);
 100a9a6:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45bc <_bt_pll_cap0> */
 100a9aa:	0a e1 be 45 	P2.L = 0x45be;		/* (17854)	P2=0x45be <_bt_pll_cap1> */
 100a9ae:	12 99       	R2 = B[P2] (Z);
 100a9b0:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45be <_bt_pll_cap1> */
 100a9b4:	0a e1 bf 45 	P2.L = 0x45bf;		/* (17855)	P2=0x45bf <_bt_pll_cap2> */
 100a9b8:	10 99       	R0 = B[P2] (Z);
 100a9ba:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45bf <_bt_pll_cap2> */
 100a9be:	f0 b0       	[SP + 0xc] = R0;
 100a9c0:	0a e1 bd 45 	P2.L = 0x45bd;		/* (17853)	P2=0x45bd <_bt_pll_cap3> */
 100a9c4:	10 99       	R0 = B[P2] (Z);
 100a9c6:	30 b1       	[SP + 0x10] = R0;
 100a9c8:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100ff83(16842627) */
 100a9cc:	00 e1 48 b4 	R0.L = 0xb448;		/* (-19384)	R0=0x100b448(16823368) */
 100a9d0:	00 e3 d8 22 	CALL 0x100ef80 <_printf>;
 100a9d4:	01 e8 00 00 	UNLINK;
 100a9d8:	a3 05       	(R7:4, P5:3) = [SP++];
 100a9da:	10 00       	RTS;

0100a9dc <_get_pll_param_for_frq>:
 100a9dc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45bd <_bt_pll_cap3> */
 100a9e0:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100a9e4:	0a e1 bc 45 	P2.L = 0x45bc;		/* (17852)	P2=0x45bc <_bt_pll_cap0> */
 100a9e8:	11 99       	R1 = B[P2] (Z);
 100a9ea:	88 08       	CC = R0 < R1;
 100a9ec:	19 18       	IF CC JUMP 0x100aa1e <_get_pll_param_for_frq+0x42>;
 100a9ee:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45bc <_bt_pll_cap0> */
 100a9f2:	0a e1 be 45 	P2.L = 0x45be;		/* (17854)	P2=0x45be <_bt_pll_cap1> */
 100a9f6:	11 99       	R1 = B[P2] (Z);
 100a9f8:	88 08       	CC = R0 < R1;
 100a9fa:	14 18       	IF CC JUMP 0x100aa22 <_get_pll_param_for_frq+0x46>;
 100a9fc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45be <_bt_pll_cap1> */
 100aa00:	0a e1 bf 45 	P2.L = 0x45bf;		/* (17855)	P2=0x45bf <_bt_pll_cap2> */
 100aa04:	11 99       	R1 = B[P2] (Z);
 100aa06:	88 08       	CC = R0 < R1;
 100aa08:	0f 18       	IF CC JUMP 0x100aa26 <_get_pll_param_for_frq+0x4a>;
 100aa0a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45bf <_bt_pll_cap2> */
 100aa0e:	0a e1 bd 45 	P2.L = 0x45bd;		/* (17853)	P2=0x45bd <_bt_pll_cap3> */
 100aa12:	11 99       	R1 = B[P2] (Z);
 100aa14:	88 08       	CC = R0 < R1;
 100aa16:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100aa18:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100aa1a:	01 06       	IF !CC R0 = R1;
 100aa1c:	06 20       	JUMP.S 0x100aa28 <_get_pll_param_for_frq+0x4c>;
 100aa1e:	f8 60       	R0 = 0x1f (X);		/*		R0=0x1f( 31) */
 100aa20:	04 20       	JUMP.S 0x100aa28 <_get_pll_param_for_frq+0x4c>;
 100aa22:	78 60       	R0 = 0xf (X);		/*		R0=0xf( 15) */
 100aa24:	02 20       	JUMP.S 0x100aa28 <_get_pll_param_for_frq+0x4c>;
 100aa26:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 100aa28:	01 e8 00 00 	UNLINK;
 100aa2c:	10 00       	RTS;
	...

0100aa30 <_bt_rccl_trim>:
 100aa30:	eb 05       	[--SP] = (R7:5, P5:3);
 100aa32:	4d e1 07 00 	P5.H = 0x7;		/* (  7)	P5=0x7fcfc */
 100aa36:	0d e1 84 02 	P5.L = 0x284;		/* (644)	P5=0x70284 */
 100aa3a:	00 e8 13 00 	LINK 0x4c;		/* (76) */
 100aa3e:	28 95       	R0 = W[P5] (Z);
 100aa40:	40 4c       	BITCLR (R0, 0x8);		/* bit  8 */
 100aa42:	28 97       	W[P5] = R0;
 100aa44:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100aa46:	00 e3 bb 1d 	CALL 0x100e5bc <_delay>;
 100aa4a:	29 95       	R1 = W[P5] (Z);
 100aa4c:	20 e1 3f ff 	R0 = -0xc1 (X);		/*		R0=0xffffff3f(-193) */
 100aa50:	01 54       	R0 = R1 & R0;
 100aa52:	38 4a       	BITSET (R0, 0x7);		/* bit  7 */
 100aa54:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x745bd */
 100aa58:	28 97       	W[P5] = R0;
 100aa5a:	0a e1 8c 02 	P2.L = 0x28c;		/* (652)	P2=0x7028c */
 100aa5e:	11 91       	R1 = [P2];
 100aa60:	e0 63       	R0 = -0x4 (X);		/*		R0=0xfffffffc( -4) */
 100aa62:	01 54       	R0 = R1 & R0;
 100aa64:	00 4a       	BITSET (R0, 0x0);		/* bit  0 */
 100aa66:	10 93       	[P2] = R0;
 100aa68:	11 91       	R1 = [P2];
 100aa6a:	98 63       	R0 = -0xd (X);		/*		R0=0xfffffff3(-13) */
 100aa6c:	01 54       	R0 = R1 & R0;
 100aa6e:	18 4a       	BITSET (R0, 0x3);		/* bit  3 */
 100aa70:	10 93       	[P2] = R0;
 100aa72:	11 91       	R1 = [P2];
 100aa74:	78 62       	R0 = -0x31 (X);		/*		R0=0xffffffcf(-49) */
 100aa76:	01 54       	R0 = R1 & R0;
 100aa78:	28 4a       	BITSET (R0, 0x5);		/* bit  5 */
 100aa7a:	10 93       	[P2] = R0;
 100aa7c:	28 95       	R0 = W[P5] (Z);
 100aa7e:	21 e1 c0 00 	R1 = 0xc0 (X);		/*		R1=0xc0(192) */
 100aa82:	01 56       	R0 = R1 | R0;
 100aa84:	28 97       	W[P5] = R0;
 100aa86:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100aa88:	00 e3 9a 1d 	CALL 0x100e5bc <_delay>;
 100aa8c:	28 95       	R0 = W[P5] (Z);
 100aa8e:	40 4a       	BITSET (R0, 0x8);		/* bit  8 */
 100aa90:	49 e1 0e 00 	P1.H = 0xe;		/* ( 14)	P1=0xea6fc */
 100aa94:	28 97       	W[P5] = R0;
 100aa96:	09 e1 c0 fc 	P1.L = 0xfcc0;		/* (-832)	P1=0xefcc0 */
 100aa9a:	08 91       	R0 = [P1];
 100aa9c:	00 4a       	BITSET (R0, 0x0);		/* bit  0 */
 100aa9e:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe028c */
 100aaa2:	08 93       	[P1] = R0;
 100aaa4:	0a e1 cc fc 	P2.L = 0xfccc;		/* (-820)	P2=0xefccc */
 100aaa8:	10 91       	R0 = [P2];
 100aaaa:	00 4a       	BITSET (R0, 0x0);		/* bit  0 */
 100aaac:	10 93       	[P2] = R0;
 100aaae:	e2 6f       	P2 += -0x4;		/* ( -4) */
 100aab0:	11 91       	R1 = [P2];
 100aab2:	20 e1 83 ff 	R0 = -0x7d (X);		/*		R0=0xffffff83(-125) */
 100aab6:	01 54       	R0 = R1 & R0;
 100aab8:	10 4a       	BITSET (R0, 0x2);		/* bit  2 */
 100aaba:	10 93       	[P2] = R0;
 100aabc:	c2 6c       	P2 += 0x18;		/* ( 24) */
 100aabe:	10 91       	R0 = [P2];
 100aac0:	18 4a       	BITSET (R0, 0x3);		/* bit  3 */
 100aac2:	10 93       	[P2] = R0;
 100aac4:	09 91       	R1 = [P1];
 100aac6:	20 e1 9f ff 	R0 = -0x61 (X);		/*		R0=0xffffff9f(-97) */
 100aaca:	01 54       	R0 = R1 & R0;
 100aacc:	28 4a       	BITSET (R0, 0x5);		/* bit  5 */
 100aace:	08 93       	[P1] = R0;
 100aad0:	10 91       	R0 = [P2];
 100aad2:	00 4a       	BITSET (R0, 0x0);		/* bit  0 */
 100aad4:	10 93       	[P2] = R0;
 100aad6:	22 6f       	P2 += -0x1c;		/* (-28) */
 100aad8:	11 91       	R1 = [P2];
 100aada:	20 e1 ff c1 	R0 = -0x3e01 (X);		/*		R0=0xffffc1ff(-15873) */
 100aade:	01 54       	R0 = R1 & R0;
 100aae0:	68 4a       	BITSET (R0, 0xd);		/* bit 13 */
 100aae2:	10 93       	[P2] = R0;
 100aae4:	42 6d       	P2 += 0x28;		/* ( 40) */
 100aae6:	10 91       	R0 = [P2];
 100aae8:	78 4a       	BITSET (R0, 0xf);		/* bit 15 */
 100aaea:	10 93       	[P2] = R0;
 100aaec:	62 6c       	P2 += 0xc;		/* ( 12) */
 100aaee:	10 91       	R0 = [P2];
 100aaf0:	00 4a       	BITSET (R0, 0x0);		/* bit  0 */
 100aaf2:	10 93       	[P2] = R0;
 100aaf4:	e2 6f       	P2 += -0x4;		/* ( -4) */
 100aaf6:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100aaf8:	11 91       	R1 = [P2];
 100aafa:	00 e1 ff 3f 	R0.L = 0x3fff;		/* (16383)	R0=0xffff3fff(-49153) */
 100aafe:	01 54       	R0 = R1 & R0;
 100ab00:	70 4a       	BITSET (R0, 0xe);		/* bit 14 */
 100ab02:	10 93       	[P2] = R0;
 100ab04:	e2 6f       	P2 += -0x4;		/* ( -4) */
 100ab06:	10 91       	R0 = [P2];
 100ab08:	78 4c       	BITCLR (R0, 0xf);		/* bit 15 */
 100ab0a:	10 93       	[P2] = R0;
 100ab0c:	20 e1 9f 24 	R0 = 0x249f (X);		/*		R0=0x249f(9375) */
 100ab10:	30 4f       	R0 <<= 0x6;
 100ab12:	67 32       	P4 = FP;
 100ab14:	00 e3 54 1d 	CALL 0x100e5bc <_delay>;
 100ab18:	04 6e       	P4 += -0x40;		/* (-64) */
 100ab1a:	4f 32       	P1 = FP;
 100ab1c:	54 32       	P2 = P4;
 100ab1e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100ab20:	10 9a       	B[P2++] = R0;
 100ab22:	4a 08       	CC = P2 == P1;
 100ab24:	fe 17       	IF !CC JUMP 0x100ab20 <_bt_rccl_trim+0xf0> (BP);
 100ab26:	4d e1 0e 00 	P5.H = 0xe;		/* ( 14)	P5=0xe0284 */
 100ab2a:	4b e1 0e 00 	P3.H = 0xe;		/* ( 14)	P3=0xe0000 */
 100ab2e:	6f 30       	R5 = FP;
 100ab30:	27 e1 63 00 	R7 = 0x63 (X);		/*		R7=0x63( 99) */
 100ab34:	0d e1 f0 fc 	P5.L = 0xfcf0;		/* (-784)	P5=0xefcf0 */
 100ab38:	0b e1 fc fc 	P3.L = 0xfcfc;		/* (-772)	P3=0xefcfc */
 100ab3c:	fe 61       	R6 = 0x3f (X);		/*		R6=0x3f( 63) */
 100ab3e:	05 66       	R5 += -0x40;		/* (-64) */
 100ab40:	00 00       	NOP;
 100ab42:	28 91       	R0 = [P5];
 100ab44:	78 4c       	BITCLR (R0, 0xf);		/* bit 15 */
 100ab46:	28 93       	[P5] = R0;
 100ab48:	20 e1 58 02 	R0 = 0x258 (X);		/*		R0=0x258(600) */
 100ab4c:	00 e3 38 1d 	CALL 0x100e5bc <_delay>;
 100ab50:	28 91       	R0 = [P5];
 100ab52:	78 4a       	BITSET (R0, 0xf);		/* bit 15 */
 100ab54:	28 93       	[P5] = R0;
 100ab56:	20 e1 70 17 	R0 = 0x1770 (X);		/*		R0=0x1770(6000) */
 100ab5a:	00 e3 31 1d 	CALL 0x100e5bc <_delay>;
 100ab5e:	18 91       	R0 = [P3];
 100ab60:	40 48       	CC = !BITTST (R0, 0x8);		/* bit  8 */
 100ab62:	10 14       	IF !CC JUMP 0x100ab82 <_bt_rccl_trim+0x152> (BP);
 100ab64:	19 91       	R1 = [P3];
 100ab66:	11 4e       	R1 >>= 0x2;
 100ab68:	71 54       	R1 = R1 & R6;
 100ab6a:	49 43       	R1 = R1.B (Z);
 100ab6c:	0d 50       	R0 = R5 + R1;
 100ab6e:	10 32       	P2 = R0;
 100ab70:	50 99       	R0 = B[P2] (X);
 100ab72:	08 64       	R0 += 0x1;		/* (  1) */
 100ab74:	10 9b       	B[P2] = R0;
 100ab76:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1001770(16783216) */
 100ab7a:	00 e1 68 b4 	R0.L = 0xb468;		/* (-19352)	R0=0x100b468(16823400) */
 100ab7e:	00 e3 01 22 	CALL 0x100ef80 <_printf>;
 100ab82:	ff 67       	R7 += -0x1;		/* ( -1) */
 100ab84:	78 43       	R0 = R7.B (Z);
 100ab86:	00 0c       	CC = R0 == 0x0;
 100ab88:	dc 17       	IF !CC JUMP 0x100ab40 <_bt_rccl_trim+0x110> (BP);
 100ab8a:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100ab8c:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100ab8e:	4e 43       	R6 = R1.B (Z);
 100ab90:	62 98       	R2 = B[P4++] (X);
 100ab92:	53 43       	R3 = R2.B (Z);
 100ab94:	9e 09       	CC = R6 < R3 (IU);
 100ab96:	38 07       	IF CC R7 = R0;
 100ab98:	0a 07       	IF CC R1 = R2;
 100ab9a:	08 64       	R0 += 0x1;		/* (  1) */
 100ab9c:	42 43       	R2 = R0.B (Z);
 100ab9e:	23 e1 40 00 	R3 = 0x40 (X);		/*		R3=0x40( 64) */
 100aba2:	1a 08       	CC = R2 == R3;
 100aba4:	f5 17       	IF !CC JUMP 0x100ab8e <_bt_rccl_trim+0x15e> (BP);
 100aba6:	7f 43       	R7 = R7.B (Z);
 100aba8:	0f 32       	P1 = R7;
 100abaa:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100b468(16823400) */
 100abae:	0f 30       	R1 = R7;
 100abb0:	00 e1 6c b4 	R0.L = 0xb46c;		/* (-19348)	R0=0x100b46c(16823404) */
 100abb4:	4d e1 07 00 	P5.H = 0x7;		/* (  7)	P5=0x7fcf0 */
 100abb8:	8f 5a       	P2 = FP + P1;
 100abba:	92 e4 c0 ff 	R2 = B[P2 + -0x40] (Z);
 100abbe:	00 e3 e1 21 	CALL 0x100ef80 <_printf>;
 100abc2:	f8 61       	R0 = 0x3f (X);		/*		R0=0x3f( 63) */
 100abc4:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefccc */
 100abc8:	0a e1 cc fc 	P2.L = 0xfccc;		/* (-820)	P2=0xefccc */
 100abcc:	c7 55       	R7 = R7 & R0;
 100abce:	11 91       	R1 = [P2];
 100abd0:	20 e1 07 fe 	R0 = -0x1f9 (X);		/*		R0=0xfffffe07(-505) */
 100abd4:	01 54       	R0 = R1 & R0;
 100abd6:	1f 4f       	R7 <<= 0x3;
 100abd8:	c7 57       	R7 = R7 | R0;
 100abda:	17 93       	[P2] = R7;
 100abdc:	02 6d       	P2 += 0x20;		/* ( 32) */
 100abde:	10 91       	R0 = [P2];
 100abe0:	78 4c       	BITCLR (R0, 0xf);		/* bit 15 */
 100abe2:	10 93       	[P2] = R0;
 100abe4:	62 6c       	P2 += 0xc;		/* ( 12) */
 100abe6:	10 91       	R0 = [P2];
 100abe8:	00 4c       	BITCLR (R0, 0x0);		/* bit  0 */
 100abea:	0d e1 84 02 	P5.L = 0x284;		/* (644)	P5=0x70284 */
 100abee:	10 93       	[P2] = R0;
 100abf0:	28 95       	R0 = W[P5] (Z);
 100abf2:	40 4c       	BITCLR (R0, 0x8);		/* bit  8 */
 100abf4:	28 97       	W[P5] = R0;
 100abf6:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100abf8:	00 e3 e2 1c 	CALL 0x100e5bc <_delay>;
 100abfc:	29 95       	R1 = W[P5] (Z);
 100abfe:	20 e1 3f ff 	R0 = -0xc1 (X);		/*		R0=0xffffff3f(-193) */
 100ac02:	01 54       	R0 = R1 & R0;
 100ac04:	38 4a       	BITSET (R0, 0x7);		/* bit  7 */
 100ac06:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x7fccc */
 100ac0a:	28 97       	W[P5] = R0;
 100ac0c:	0a e1 8c 02 	P2.L = 0x28c;		/* (652)	P2=0x7028c */
 100ac10:	11 91       	R1 = [P2];
 100ac12:	e0 63       	R0 = -0x4 (X);		/*		R0=0xfffffffc( -4) */
 100ac14:	01 54       	R0 = R1 & R0;
 100ac16:	10 93       	[P2] = R0;
 100ac18:	11 91       	R1 = [P2];
 100ac1a:	98 63       	R0 = -0xd (X);		/*		R0=0xfffffff3(-13) */
 100ac1c:	01 54       	R0 = R1 & R0;
 100ac1e:	10 4a       	BITSET (R0, 0x2);		/* bit  2 */
 100ac20:	10 93       	[P2] = R0;
 100ac22:	11 91       	R1 = [P2];
 100ac24:	78 62       	R0 = -0x31 (X);		/*		R0=0xffffffcf(-49) */
 100ac26:	01 54       	R0 = R1 & R0;
 100ac28:	10 93       	[P2] = R0;
 100ac2a:	28 95       	R0 = W[P5] (Z);
 100ac2c:	21 e1 c0 00 	R1 = 0xc0 (X);		/*		R1=0xc0(192) */
 100ac30:	01 56       	R0 = R1 | R0;
 100ac32:	28 97       	W[P5] = R0;
 100ac34:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100ac36:	00 e3 c3 1c 	CALL 0x100e5bc <_delay>;
 100ac3a:	28 95       	R0 = W[P5] (Z);
 100ac3c:	40 4a       	BITSET (R0, 0x8);		/* bit  8 */
 100ac3e:	28 97       	W[P5] = R0;
 100ac40:	01 e8 00 00 	UNLINK;
 100ac44:	ab 05       	(R7:5, P5:3) = [SP++];
 100ac46:	10 00       	RTS;

0100ac48 <_bt_analog_init>:
 100ac48:	e3 05       	[--SP] = (R7:4, P5:3);
 100ac4a:	49 e1 0e 00 	P1.H = 0xe;		/* ( 14)	P1=0xefcc0 */
 100ac4e:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100ac52:	09 e1 e0 fc 	P1.L = 0xfce0;		/* (-800)	P1=0xefce0 */
 100ac56:	08 91       	R0 = [P1];
 100ac58:	00 4a       	BITSET (R0, 0x0);		/* bit  0 */
 100ac5a:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe028c */
 100ac5e:	08 93       	[P1] = R0;
 100ac60:	0a e1 c0 fc 	P2.L = 0xfcc0;		/* (-832)	P2=0xefcc0 */
 100ac64:	10 91       	R0 = [P2];
 100ac66:	00 4c       	BITCLR (R0, 0x0);		/* bit  0 */
 100ac68:	10 93       	[P2] = R0;
 100ac6a:	10 91       	R0 = [P2];
 100ac6c:	c9 63       	R1 = -0x7 (X);		/*		R1=0xfffffff9( -7) */
 100ac6e:	08 54       	R0 = R0 & R1;
 100ac70:	10 93       	[P2] = R0;
 100ac72:	10 91       	R0 = [P2];
 100ac74:	18 4c       	BITCLR (R0, 0x3);		/* bit  3 */
 100ac76:	10 93       	[P2] = R0;
 100ac78:	12 91       	R2 = [P2];
 100ac7a:	20 e1 8f ff 	R0 = -0x71 (X);		/*		R0=0xffffff8f(-113) */
 100ac7e:	02 54       	R0 = R2 & R0;
 100ac80:	30 4a       	BITSET (R0, 0x6);		/* bit  6 */
 100ac82:	10 93       	[P2] = R0;
 100ac84:	ff 63       	R7 = -0x1 (X);		/*		R7=0xffffffff( -1) */
 100ac86:	10 91       	R0 = [P2];
 100ac88:	07 e1 ff 3f 	R7.L = 0x3fff;		/* (16383)	R7=0xffff3fff(-49153) */
 100ac8c:	38 54       	R0 = R0 & R7;
 100ac8e:	70 4a       	BITSET (R0, 0xe);		/* bit 14 */
 100ac90:	10 93       	[P2] = R0;
 100ac92:	12 91       	R2 = [P2];
 100ac94:	20 e1 7f f0 	R0 = -0xf81 (X);		/*		R0=0xfffff07f(-3969) */
 100ac98:	02 54       	R0 = R2 & R0;
 100ac9a:	58 4a       	BITSET (R0, 0xb);		/* bit 11 */
 100ac9c:	10 93       	[P2] = R0;
 100ac9e:	10 91       	R0 = [P2];
 100aca0:	60 4a       	BITSET (R0, 0xc);		/* bit 12 */
 100aca2:	10 93       	[P2] = R0;
 100aca4:	10 91       	R0 = [P2];
 100aca6:	68 4a       	BITSET (R0, 0xd);		/* bit 13 */
 100aca8:	10 93       	[P2] = R0;
 100acaa:	22 6c       	P2 += 0x4;		/* (  4) */
 100acac:	31 e1 e0 ff 	I1 = -0x20 (X);		/*		I1=0xffffffe0(-32) */
 100acb0:	10 91       	R0 = [P2];
 100acb2:	91 30       	R2 = I1;
 100acb4:	10 54       	R0 = R0 & R2;
 100acb6:	7d 60       	R5 = 0xf (X);		/*		R5=0xf( 15) */
 100acb8:	28 56       	R0 = R0 | R5;
 100acba:	10 93       	[P2] = R0;
 100acbc:	12 91       	R2 = [P2];
 100acbe:	20 e1 9f ff 	R0 = -0x61 (X);		/*		R0=0xffffff9f(-97) */
 100acc2:	02 54       	R0 = R2 & R0;
 100acc4:	28 4a       	BITSET (R0, 0x5);		/* bit  5 */
 100acc6:	10 93       	[P2] = R0;
 100acc8:	2c e1 7f fe 	P4 = -0x181 (X);		/*		P4=0xfffffe7f(-385) */
 100accc:	10 91       	R0 = [P2];
 100acce:	5c 30       	R3 = P4;
 100acd0:	18 54       	R0 = R0 & R3;
 100acd2:	38 4a       	BITSET (R0, 0x7);		/* bit  7 */
 100acd4:	10 93       	[P2] = R0;
 100acd6:	12 91       	R2 = [P2];
 100acd8:	20 e1 ff c1 	R0 = -0x3e01 (X);		/*		R0=0xffffc1ff(-15873) */
 100acdc:	02 54       	R0 = R2 & R0;
 100acde:	68 4a       	BITSET (R0, 0xd);		/* bit 13 */
 100ace0:	10 93       	[P2] = R0;
 100ace2:	10 91       	R0 = [P2];
 100ace4:	38 54       	R0 = R0 & R7;
 100ace6:	78 4a       	BITSET (R0, 0xf);		/* bit 15 */
 100ace8:	10 93       	[P2] = R0;
 100acea:	22 6c       	P2 += 0x4;		/* (  4) */
 100acec:	12 91       	R2 = [P2];
 100acee:	e0 63       	R0 = -0x4 (X);		/*		R0=0xfffffffc( -4) */
 100acf0:	02 54       	R0 = R2 & R0;
 100acf2:	08 4a       	BITSET (R0, 0x1);		/* bit  1 */
 100acf4:	10 93       	[P2] = R0;
 100acf6:	12 91       	R2 = [P2];
 100acf8:	20 e1 83 ff 	R0 = -0x7d (X);		/*		R0=0xffffff83(-125) */
 100acfc:	82 54       	R2 = R2 & R0;
 100acfe:	12 4a       	BITSET (R2, 0x2);		/* bit  2 */
 100ad00:	12 93       	[P2] = R2;
 100ad02:	12 91       	R2 = [P2];
 100ad04:	3a 4a       	BITSET (R2, 0x7);		/* bit  7 */
 100ad06:	12 93       	[P2] = R2;
 100ad08:	2b e1 ff f8 	P3 = -0x701 (X);		/*		P3=0xfffff8ff(-1793) */
 100ad0c:	16 91       	R6 = [P2];
 100ad0e:	53 30       	R2 = P3;
 100ad10:	96 55       	R6 = R6 & R2;
 100ad12:	22 e1 00 03 	R2 = 0x300 (X);		/*		R2=0x300(768) */
 100ad16:	96 57       	R6 = R6 | R2;
 100ad18:	16 93       	[P2] = R6;
 100ad1a:	16 91       	R6 = [P2];
 100ad1c:	5e 4a       	BITSET (R6, 0xb);		/* bit 11 */
 100ad1e:	16 93       	[P2] = R6;
 100ad20:	16 91       	R6 = [P2];
 100ad22:	66 4c       	BITCLR (R6, 0xc);		/* bit 12 */
 100ad24:	16 93       	[P2] = R6;
 100ad26:	14 91       	R4 = [P2];
 100ad28:	86 e1 00 e0 	R6 = 0xe000 (Z);		/*		R6=0xe000(57344) */
 100ad2c:	b4 57       	R6 = R4 | R6;
 100ad2e:	16 93       	[P2] = R6;
 100ad30:	22 6c       	P2 += 0x4;		/* (  4) */
 100ad32:	16 91       	R6 = [P2];
 100ad34:	06 4a       	BITSET (R6, 0x0);		/* bit  0 */
 100ad36:	16 93       	[P2] = R6;
 100ad38:	16 91       	R6 = [P2];
 100ad3a:	4e 54       	R1 = R6 & R1;
 100ad3c:	09 4a       	BITSET (R1, 0x1);		/* bit  1 */
 100ad3e:	11 93       	[P2] = R1;
 100ad40:	16 91       	R6 = [P2];
 100ad42:	21 e1 07 fe 	R1 = -0x1f9 (X);		/*		R1=0xfffffe07(-505) */
 100ad46:	4e 54       	R1 = R6 & R1;
 100ad48:	26 e1 10 01 	R6 = 0x110 (X);		/*		R6=0x110(272) */
 100ad4c:	71 56       	R1 = R1 | R6;
 100ad4e:	48 e1 0e 00 	P0.H = 0xe;		/* ( 14)	P0=0xe003f */
 100ad52:	11 93       	[P2] = R1;
 100ad54:	08 e1 d0 fc 	P0.L = 0xfcd0;		/* (-816)	P0=0xefcd0 */
 100ad58:	01 91       	R1 = [P0];
 100ad5a:	69 57       	R5 = R1 | R5;
 100ad5c:	05 93       	[P0] = R5;
 100ad5e:	11 91       	R1 = [P2];
 100ad60:	49 4a       	BITSET (R1, 0x9);		/* bit  9 */
 100ad62:	11 93       	[P2] = R1;
 100ad64:	01 91       	R1 = [P0];
 100ad66:	7d 62       	R5 = -0x31 (X);		/*		R5=0xffffffcf(-49) */
 100ad68:	69 54       	R1 = R1 & R5;
 100ad6a:	01 93       	[P0] = R1;
 100ad6c:	11 91       	R1 = [P2];
 100ad6e:	51 4c       	BITCLR (R1, 0xa);		/* bit 10 */
 100ad70:	11 93       	[P2] = R1;
 100ad72:	11 91       	R1 = [P2];
 100ad74:	59 4a       	BITSET (R1, 0xb);		/* bit 11 */
 100ad76:	11 93       	[P2] = R1;
 100ad78:	11 91       	R1 = [P2];
 100ad7a:	24 e1 3f ff 	R4 = -0xc1 (X);		/*		R4=0xffffff3f(-193) */
 100ad7e:	61 54       	R1 = R1 & R4;
 100ad80:	31 4a       	BITSET (R1, 0x6);		/* bit  6 */
 100ad82:	11 93       	[P2] = R1;
 100ad84:	f9 63       	R1 = -0x1 (X);		/*		R1=0xffffffff( -1) */
 100ad86:	16 91       	R6 = [P2];
 100ad88:	01 e1 ff 0f 	R1.L = 0xfff;		/* (4095)	R1=0xffff0fff(-61441) */
 100ad8c:	4e 54       	R1 = R6 & R1;
 100ad8e:	61 4a       	BITSET (R1, 0xc);		/* bit 12 */
 100ad90:	11 93       	[P2] = R1;
 100ad92:	01 91       	R1 = [P0];
 100ad94:	41 4a       	BITSET (R1, 0x8);		/* bit  8 */
 100ad96:	01 93       	[P0] = R1;
 100ad98:	06 91       	R6 = [P0];
 100ad9a:	21 e1 00 06 	R1 = 0x600 (X);		/*		R1=0x600(1536) */
 100ad9e:	4e 56       	R1 = R6 | R1;
 100ada0:	01 93       	[P0] = R1;
 100ada2:	06 91       	R6 = [P0];
 100ada4:	21 e1 00 38 	R1 = 0x3800 (X);		/*		R1=0x3800(14336) */
 100ada8:	4e 56       	R1 = R6 | R1;
 100adaa:	01 93       	[P0] = R1;
 100adac:	42 6c       	P2 += 0x8;		/* (  8) */
 100adae:	16 91       	R6 = [P2];
 100adb0:	c1 63       	R1 = -0x8 (X);		/*		R1=0xfffffff8( -8) */
 100adb2:	4e 54       	R1 = R6 & R1;
 100adb4:	11 93       	[P2] = R1;
 100adb6:	16 91       	R6 = [P2];
 100adb8:	39 62       	R1 = -0x39 (X);		/*		R1=0xffffffc7(-57) */
 100adba:	4e 54       	R1 = R6 & R1;
 100adbc:	46 61       	R6 = 0x28 (X);		/*		R6=0x28( 40) */
 100adbe:	71 56       	R1 = R1 | R6;
 100adc0:	11 93       	[P2] = R1;
 100adc2:	16 91       	R6 = [P2];
 100adc4:	21 e1 3f f8 	R1 = -0x7c1 (X);		/*		R1=0xfffff83f(-1985) */
 100adc8:	4e 54       	R1 = R6 & R1;
 100adca:	51 4a       	BITSET (R1, 0xa);		/* bit 10 */
 100adcc:	11 93       	[P2] = R1;
 100adce:	11 91       	R1 = [P2];
 100add0:	59 4a       	BITSET (R1, 0xb);		/* bit 11 */
 100add2:	11 93       	[P2] = R1;
 100add4:	11 91       	R1 = [P2];
 100add6:	26 e1 ff cf 	R6 = -0x3001 (X);		/*		R6=0xffffcfff(-12289) */
 100adda:	71 54       	R1 = R1 & R6;
 100addc:	69 4a       	BITSET (R1, 0xd);		/* bit 13 */
 100adde:	11 93       	[P2] = R1;
 100ade0:	09 91       	R1 = [P1];
 100ade2:	09 4a       	BITSET (R1, 0x1);		/* bit  1 */
 100ade4:	09 93       	[P1] = R1;
 100ade6:	11 91       	R1 = [P2];
 100ade8:	79 54       	R1 = R1 & R7;
 100adea:	71 4a       	BITSET (R1, 0xe);		/* bit 14 */
 100adec:	11 93       	[P2] = R1;
 100adee:	22 6c       	P2 += 0x4;		/* (  4) */
 100adf0:	11 91       	R1 = [P2];
 100adf2:	71 54       	R1 = R1 & R6;
 100adf4:	61 4a       	BITSET (R1, 0xc);		/* bit 12 */
 100adf6:	11 93       	[P2] = R1;
 100adf8:	11 91       	R1 = [P2];
 100adfa:	71 4a       	BITSET (R1, 0xe);		/* bit 14 */
 100adfc:	11 93       	[P2] = R1;
 100adfe:	22 6c       	P2 += 0x4;		/* (  4) */
 100ae00:	11 91       	R1 = [P2];
 100ae02:	69 4c       	BITCLR (R1, 0xd);		/* bit 13 */
 100ae04:	11 93       	[P2] = R1;
 100ae06:	11 91       	R1 = [P2];
 100ae08:	79 54       	R1 = R1 & R7;
 100ae0a:	11 93       	[P2] = R1;
 100ae0c:	4a 91       	P2 = [P1];
 100ae0e:	98 6b       	P0 = -0xd (X);		/*		P0=0xfffffff3(-13) */
 100ae10:	48 30       	R1 = P0;
 100ae12:	28 e1 0f ff 	P0 = -0xf1 (X);		/*		P0=0xffffff0f(-241) */
 100ae16:	5a 30       	R3 = P2;
 100ae18:	cb 54       	R3 = R3 & R1;
 100ae1a:	0b 93       	[P1] = R3;
 100ae1c:	4a 91       	P2 = [P1];
 100ae1e:	48 30       	R1 = P0;
 100ae20:	28 e1 70 00 	P0 = 0x70 (X);		/*		P0=0x70(112) */
 100ae24:	2d e1 80 07 	P5 = 0x780 (X);		/*		P5=0x780(1920) */
 100ae28:	5a 30       	R3 = P2;
 100ae2a:	cb 54       	R3 = R3 & R1;
 100ae2c:	48 30       	R1 = P0;
 100ae2e:	cb 56       	R3 = R3 | R1;
 100ae30:	0b 93       	[P1] = R3;
 100ae32:	4a 91       	P2 = [P1];
 100ae34:	28 e1 ff fc 	P0 = -0x301 (X);		/*		P0=0xfffffcff(-769) */
 100ae38:	48 30       	R1 = P0;
 100ae3a:	28 e1 ff c3 	P0 = -0x3c01 (X);		/*		P0=0xffffc3ff(-15361) */
 100ae3e:	5a 30       	R3 = P2;
 100ae40:	cb 54       	R3 = R3 & R1;
 100ae42:	0b 93       	[P1] = R3;
 100ae44:	4a 91       	P2 = [P1];
 100ae46:	48 30       	R1 = P0;
 100ae48:	28 e1 00 0c 	P0 = 0xc00 (X);		/*		P0=0xc00(3072) */
 100ae4c:	30 e1 00 50 	I0 = 0x5000 (X);		/*		I0=0x5000(20480) */
 100ae50:	5a 30       	R3 = P2;
 100ae52:	cb 54       	R3 = R3 & R1;
 100ae54:	48 30       	R1 = P0;
 100ae56:	cb 56       	R3 = R3 | R1;
 100ae58:	0b 93       	[P1] = R3;
 100ae5a:	09 91       	R1 = [P1];
 100ae5c:	79 54       	R1 = R1 & R7;
 100ae5e:	71 4a       	BITSET (R1, 0xe);		/* bit 14 */
 100ae60:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefcc0 */
 100ae64:	09 93       	[P1] = R1;
 100ae66:	0a e1 e8 fc 	P2.L = 0xfce8;		/* (-792)	P2=0xefce8 */
 100ae6a:	11 91       	R1 = [P2];
 100ae6c:	01 4a       	BITSET (R1, 0x0);		/* bit  0 */
 100ae6e:	11 93       	[P2] = R1;
 100ae70:	21 6c       	P1 += 0x4;		/* (  4) */
 100ae72:	09 91       	R1 = [P1];
 100ae74:	01 4a       	BITSET (R1, 0x0);		/* bit  0 */
 100ae76:	09 93       	[P1] = R1;
 100ae78:	09 91       	R1 = [P1];
 100ae7a:	09 4a       	BITSET (R1, 0x1);		/* bit  1 */
 100ae7c:	09 93       	[P1] = R1;
 100ae7e:	09 91       	R1 = [P1];
 100ae80:	41 54       	R1 = R1 & R0;
 100ae82:	31 4a       	BITSET (R1, 0x6);		/* bit  6 */
 100ae84:	09 93       	[P1] = R1;
 100ae86:	48 91       	P0 = [P1];
 100ae88:	4d 30       	R1 = P5;
 100ae8a:	58 30       	R3 = P0;
 100ae8c:	cb 56       	R3 = R3 | R1;
 100ae8e:	0b 93       	[P1] = R3;
 100ae90:	4d 91       	P5 = [P1];
 100ae92:	28 e1 ff 87 	P0 = -0x7801 (X);		/*		P0=0xffff87ff(-30721) */
 100ae96:	48 30       	R1 = P0;
 100ae98:	5d 30       	R3 = P5;
 100ae9a:	cb 54       	R3 = R3 & R1;
 100ae9c:	88 30       	R1 = I0;
 100ae9e:	cb 56       	R3 = R3 | R1;
 100aea0:	0b 93       	[P1] = R3;
 100aea2:	09 91       	R1 = [P1];
 100aea4:	79 4a       	BITSET (R1, 0xf);		/* bit 15 */
 100aea6:	09 93       	[P1] = R1;
 100aea8:	81 6c       	P1 += 0x10;		/* ( 16) */
 100aeaa:	4d 91       	P5 = [P1];
 100aeac:	30 e1 e1 ff 	I0 = -0x1f (X);		/*		I0=0xffffffe1(-31) */
 100aeb0:	88 30       	R1 = I0;
 100aeb2:	30 e1 1f fe 	I0 = -0x1e1 (X);		/*		I0=0xfffffe1f(-481) */
 100aeb6:	5d 30       	R3 = P5;
 100aeb8:	cb 54       	R3 = R3 & R1;
 100aeba:	0b 93       	[P1] = R3;
 100aebc:	4d 91       	P5 = [P1];
 100aebe:	88 30       	R1 = I0;
 100aec0:	5d 30       	R3 = P5;
 100aec2:	cb 54       	R3 = R3 & R1;
 100aec4:	0b 93       	[P1] = R3;
 100aec6:	09 91       	R1 = [P1];
 100aec8:	51 4a       	BITSET (R1, 0xa);		/* bit 10 */
 100aeca:	09 93       	[P1] = R1;
 100aecc:	09 91       	R1 = [P1];
 100aece:	01 4c       	BITCLR (R1, 0x0);		/* bit  0 */
 100aed0:	4d e1 0e 00 	P5.H = 0xe;		/* ( 14)	P5=0xe0780 */
 100aed4:	09 93       	[P1] = R1;
 100aed6:	0d e1 f8 fc 	P5.L = 0xfcf8;		/* (-776)	P5=0xefcf8 */
 100aeda:	29 91       	R1 = [P5];
 100aedc:	59 4c       	BITCLR (R1, 0xb);		/* bit 11 */
 100aede:	29 93       	[P5] = R1;
 100aee0:	09 91       	R1 = [P1];
 100aee2:	49 4a       	BITSET (R1, 0x9);		/* bit  9 */
 100aee4:	09 93       	[P1] = R1;
 100aee6:	09 91       	R1 = [P1];
 100aee8:	59 4a       	BITSET (R1, 0xb);		/* bit 11 */
 100aeea:	09 93       	[P1] = R1;
 100aeec:	09 91       	R1 = [P1];
 100aeee:	61 4a       	BITSET (R1, 0xc);		/* bit 12 */
 100aef0:	09 93       	[P1] = R1;
 100aef2:	09 91       	R1 = [P1];
 100aef4:	69 4a       	BITSET (R1, 0xd);		/* bit 13 */
 100aef6:	09 93       	[P1] = R1;
 100aef8:	11 91       	R1 = [P2];
 100aefa:	09 4c       	BITCLR (R1, 0x1);		/* bit  1 */
 100aefc:	11 93       	[P2] = R1;
 100aefe:	c5 6f       	P5 += -0x8;		/* ( -8) */
 100af00:	2b 91       	R3 = [P5];
 100af02:	89 30       	R1 = I1;
 100af04:	cb 54       	R3 = R3 & R1;
 100af06:	51 60       	R1 = 0xa (X);		/*		R1=0xa( 10) */
 100af08:	cb 56       	R3 = R3 | R1;
 100af0a:	2b 93       	[P5] = R3;
 100af0c:	c1 6f       	P1 += -0x8;		/* ( -8) */
 100af0e:	09 91       	R1 = [P1];
 100af10:	91 56       	R2 = R1 | R2;
 100af12:	0a 93       	[P1] = R2;
 100af14:	0a 91       	R2 = [P1];
 100af16:	21 e1 ff 9f 	R1 = -0x6001 (X);		/*		R1=0xffff9fff(-24577) */
 100af1a:	4a 54       	R1 = R2 & R1;
 100af1c:	09 93       	[P1] = R1;
 100af1e:	29 91       	R1 = [P5];
 100af20:	50 30       	R2 = P0;
 100af22:	51 54       	R1 = R1 & R2;
 100af24:	22 e1 00 48 	R2 = 0x4800 (X);		/*		R2=0x4800(18432) */
 100af28:	51 56       	R1 = R1 | R2;
 100af2a:	29 93       	[P5] = R1;
 100af2c:	29 91       	R1 = [P5];
 100af2e:	49 4a       	BITSET (R1, 0x9);		/* bit  9 */
 100af30:	29 93       	[P5] = R1;
 100af32:	29 91       	R1 = [P5];
 100af34:	51 4a       	BITSET (R1, 0xa);		/* bit 10 */
 100af36:	29 93       	[P5] = R1;
 100af38:	12 91       	R2 = [P2];
 100af3a:	21 e1 ff e0 	R1 = -0x1f01 (X);		/*		R1=0xffffe0ff(-7937) */
 100af3e:	4a 54       	R1 = R2 & R1;
 100af40:	22 e1 00 07 	R2 = 0x700 (X);		/*		R2=0x700(1792) */
 100af44:	51 56       	R1 = R1 | R2;
 100af46:	11 93       	[P2] = R1;
 100af48:	11 91       	R1 = [P2];
 100af4a:	69 4c       	BITCLR (R1, 0xd);		/* bit 13 */
 100af4c:	11 93       	[P2] = R1;
 100af4e:	09 91       	R1 = [P1];
 100af50:	41 4d       	R1 >>>= 0x8;
 100af52:	22 e1 9d 00 	R2 = 0x9d (X);		/*		R2=0x9d(157) */
 100af56:	41 4f       	R1 <<= 0x8;
 100af58:	51 56       	R1 = R1 | R2;
 100af5a:	09 93       	[P1] = R1;
 100af5c:	0a 91       	R2 = [P1];
 100af5e:	21 e1 00 1c 	R1 = 0x1c00 (X);		/*		R1=0x1c00(7168) */
 100af62:	4a 56       	R1 = R2 | R1;
 100af64:	09 93       	[P1] = R1;
 100af66:	11 91       	R1 = [P2];
 100af68:	01 54       	R0 = R1 & R0;
 100af6a:	c1 60       	R1 = 0x18 (X);		/*		R1=0x18( 24) */
 100af6c:	08 56       	R0 = R0 | R1;
 100af6e:	10 93       	[P2] = R0;
 100af70:	10 91       	R0 = [P2];
 100af72:	78 4a       	BITSET (R0, 0xf);		/* bit 15 */
 100af74:	10 93       	[P2] = R0;
 100af76:	10 91       	R0 = [P2];
 100af78:	70 4a       	BITSET (R0, 0xe);		/* bit 14 */
 100af7a:	10 93       	[P2] = R0;
 100af7c:	29 91       	R1 = [P5];
 100af7e:	20 e1 c0 00 	R0 = 0xc0 (X);		/*		R0=0xc0(192) */
 100af82:	01 56       	R0 = R1 | R0;
 100af84:	28 93       	[P5] = R0;
 100af86:	28 91       	R0 = [P5];
 100af88:	40 4c       	BITCLR (R0, 0x8);		/* bit  8 */
 100af8a:	28 93       	[P5] = R0;
 100af8c:	10 91       	R0 = [P2];
 100af8e:	38 4a       	BITSET (R0, 0x7);		/* bit  7 */
 100af90:	10 93       	[P2] = R0;
 100af92:	28 91       	R0 = [P5];
 100af94:	28 4c       	BITCLR (R0, 0x5);		/* bit  5 */
 100af96:	28 93       	[P5] = R0;
 100af98:	20 e1 c8 00 	R0 = 0xc8 (X);		/*		R0=0xc8(200) */
 100af9c:	00 e3 10 1b 	CALL 0x100e5bc <_delay>;
 100afa0:	28 91       	R0 = [P5];
 100afa2:	28 4a       	BITSET (R0, 0x5);		/* bit  5 */
 100afa4:	28 93       	[P5] = R0;
 100afa6:	20 e1 c8 00 	R0 = 0xc8 (X);		/*		R0=0xc8(200) */
 100afaa:	00 e3 09 1b 	CALL 0x100e5bc <_delay>;
 100afae:	ff e3 b9 fb 	CALL 0x100a720 <_bt_pll_scan>;
 100afb2:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefce8 */
 100afb6:	0a e1 10 fd 	P2.L = 0xfd10;		/* (-752)	P2=0xefd10 */
 100afba:	10 91       	R0 = [P2];
 100afbc:	40 4d       	R0 >>>= 0x8;
 100afbe:	40 4f       	R0 <<= 0x8;
 100afc0:	10 93       	[P2] = R0;
 100afc2:	f9 63       	R1 = -0x1 (X);		/*		R1=0xffffffff( -1) */
 100afc4:	10 91       	R0 = [P2];
 100afc6:	01 e1 ff 00 	R1.L = 0xff;		/* (255)	R1=0xffff00ff(-65281) */
 100afca:	08 54       	R0 = R0 & R1;
 100afcc:	10 93       	[P2] = R0;
 100afce:	22 6c       	P2 += 0x4;		/* (  4) */
 100afd0:	10 91       	R0 = [P2];
 100afd2:	80 4d       	R0 >>>= 0x10;
 100afd4:	80 4f       	R0 <<= 0x10;
 100afd6:	48 e1 0e 00 	P0.H = 0xe;		/* ( 14)	P0=0xe87ff */
 100afda:	10 93       	[P2] = R0;
 100afdc:	08 e1 18 fd 	P0.L = 0xfd18;		/* (-744)	P0=0xefd18 */
 100afe0:	02 91       	R2 = [P0];
 100afe2:	80 63       	R0 = -0x10 (X);		/*		R0=0xfffffff0(-16) */
 100afe4:	02 54       	R0 = R2 & R0;
 100afe6:	00 93       	[P0] = R0;
 100afe8:	62 6c       	P2 += 0xc;		/* ( 12) */
 100afea:	10 91       	R0 = [P2];
 100afec:	68 4c       	BITCLR (R0, 0xd);		/* bit 13 */
 100afee:	10 93       	[P2] = R0;
 100aff0:	00 91       	R0 = [P0];
 100aff2:	28 54       	R0 = R0 & R5;
 100aff4:	00 93       	[P0] = R0;
 100aff6:	00 91       	R0 = [P0];
 100aff8:	20 55       	R4 = R0 & R4;
 100affa:	49 e1 0e 00 	P1.H = 0xe;		/* ( 14)	P1=0xefce0 */
 100affe:	04 93       	[P0] = R4;
 100b000:	09 e1 1c fd 	P1.L = 0xfd1c;		/* (-740)	P1=0xefd1c */
 100b004:	08 91       	R0 = [P1];
 100b006:	00 4c       	BITCLR (R0, 0x0);		/* bit  0 */
 100b008:	08 93       	[P1] = R0;
 100b00a:	00 91       	R0 = [P0];
 100b00c:	48 54       	R1 = R0 & R1;
 100b00e:	01 93       	[P0] = R1;
 100b010:	08 91       	R0 = [P1];
 100b012:	08 4c       	BITCLR (R0, 0x1);		/* bit  1 */
 100b014:	08 93       	[P1] = R0;
 100b016:	08 91       	R0 = [P1];
 100b018:	10 4c       	BITCLR (R0, 0x2);		/* bit  2 */
 100b01a:	08 93       	[P1] = R0;
 100b01c:	08 91       	R0 = [P1];
 100b01e:	18 4c       	BITCLR (R0, 0x3);		/* bit  3 */
 100b020:	08 93       	[P1] = R0;
 100b022:	08 91       	R0 = [P1];
 100b024:	68 55       	R5 = R0 & R5;
 100b026:	0d 93       	[P1] = R5;
 100b028:	08 91       	R0 = [P1];
 100b02a:	30 4c       	BITCLR (R0, 0x6);		/* bit  6 */
 100b02c:	08 93       	[P1] = R0;
 100b02e:	08 91       	R0 = [P1];
 100b030:	5c 30       	R3 = P4;
 100b032:	18 54       	R0 = R0 & R3;
 100b034:	08 93       	[P1] = R0;
 100b036:	09 91       	R1 = [P1];
 100b038:	20 e1 ff f1 	R0 = -0xe01 (X);		/*		R0=0xfffff1ff(-3585) */
 100b03c:	01 54       	R0 = R1 & R0;
 100b03e:	08 93       	[P1] = R0;
 100b040:	08 91       	R0 = [P1];
 100b042:	b0 55       	R6 = R0 & R6;
 100b044:	0e 93       	[P1] = R6;
 100b046:	08 91       	R0 = [P1];
 100b048:	38 54       	R0 = R0 & R7;
 100b04a:	08 93       	[P1] = R0;
 100b04c:	10 91       	R0 = [P2];
 100b04e:	00 4c       	BITCLR (R0, 0x0);		/* bit  0 */
 100b050:	10 93       	[P2] = R0;
 100b052:	10 91       	R0 = [P2];
 100b054:	08 4c       	BITCLR (R0, 0x1);		/* bit  1 */
 100b056:	10 93       	[P2] = R0;
 100b058:	11 91       	R1 = [P2];
 100b05a:	18 63       	R0 = -0x1d (X);		/*		R0=0xffffffe3(-29) */
 100b05c:	01 54       	R0 = R1 & R0;
 100b05e:	10 93       	[P2] = R0;
 100b060:	10 91       	R0 = [P2];
 100b062:	28 4c       	BITCLR (R0, 0x5);		/* bit  5 */
 100b064:	10 93       	[P2] = R0;
 100b066:	10 91       	R0 = [P2];
 100b068:	30 4c       	BITCLR (R0, 0x6);		/* bit  6 */
 100b06a:	10 93       	[P2] = R0;
 100b06c:	10 91       	R0 = [P2];
 100b06e:	38 4c       	BITCLR (R0, 0x7);		/* bit  7 */
 100b070:	10 93       	[P2] = R0;
 100b072:	10 91       	R0 = [P2];
 100b074:	4b 30       	R1 = P3;
 100b076:	08 54       	R0 = R0 & R1;
 100b078:	10 93       	[P2] = R0;
 100b07a:	10 91       	R0 = [P2];
 100b07c:	58 4c       	BITCLR (R0, 0xb);		/* bit 11 */
 100b07e:	10 93       	[P2] = R0;
 100b080:	10 91       	R0 = [P2];
 100b082:	f8 55       	R7 = R0 & R7;
 100b084:	17 93       	[P2] = R7;
 100b086:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100ffe3(16842723) */
 100b08a:	01 e8 00 00 	UNLINK;
 100b08e:	00 e1 80 b4 	R0.L = 0xb480;		/* (-19328)	R0=0x100b480(16823424) */
 100b092:	a3 05       	(R7:4, P5:3) = [SP++];
 100b094:	00 e2 92 1f 	JUMP.L 0x100efb8 <_puts>;

0100b098 <_baseband_analog>:
 100b098:	00 43       	R0 = R0.B (X);
 100b09a:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100b09e:	00 0c       	CC = R0 == 0x0;
 100b0a0:	23 14       	IF !CC JUMP 0x100b0e6 <_baseband_analog+0x4e> (BP);
 100b0a2:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefd10 */
 100b0a6:	0a e1 f8 fc 	P2.L = 0xfcf8;		/* (-776)	P2=0xefcf8 */
 100b0aa:	10 91       	R0 = [P2];
 100b0ac:	08 4c       	BITCLR (R0, 0x1);		/* bit  1 */
 100b0ae:	10 93       	[P2] = R0;
 100b0b0:	10 91       	R0 = [P2];
 100b0b2:	10 4c       	BITCLR (R0, 0x2);		/* bit  2 */
 100b0b4:	10 93       	[P2] = R0;
 100b0b6:	10 91       	R0 = [P2];
 100b0b8:	18 4c       	BITCLR (R0, 0x3);		/* bit  3 */
 100b0ba:	10 93       	[P2] = R0;
 100b0bc:	10 91       	R0 = [P2];
 100b0be:	20 4c       	BITCLR (R0, 0x4);		/* bit  4 */
 100b0c0:	10 93       	[P2] = R0;
 100b0c2:	10 91       	R0 = [P2];
 100b0c4:	28 4c       	BITCLR (R0, 0x5);		/* bit  5 */
 100b0c6:	10 93       	[P2] = R0;
 100b0c8:	10 91       	R0 = [P2];
 100b0ca:	30 4c       	BITCLR (R0, 0x6);		/* bit  6 */
 100b0cc:	10 93       	[P2] = R0;
 100b0ce:	10 91       	R0 = [P2];
 100b0d0:	38 4c       	BITCLR (R0, 0x7);		/* bit  7 */
 100b0d2:	10 93       	[P2] = R0;
 100b0d4:	10 91       	R0 = [P2];
 100b0d6:	40 4c       	BITCLR (R0, 0x8);		/* bit  8 */
 100b0d8:	10 93       	[P2] = R0;
 100b0da:	10 91       	R0 = [P2];
 100b0dc:	48 4c       	BITCLR (R0, 0x9);		/* bit  9 */
 100b0de:	10 93       	[P2] = R0;
 100b0e0:	10 91       	R0 = [P2];
 100b0e2:	50 4c       	BITCLR (R0, 0xa);		/* bit 10 */
 100b0e4:	22 20       	JUMP.S 0x100b128 <_baseband_analog+0x90>;
 100b0e6:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefcf8 */
 100b0ea:	0a e1 f8 fc 	P2.L = 0xfcf8;		/* (-776)	P2=0xefcf8 */
 100b0ee:	10 91       	R0 = [P2];
 100b0f0:	08 4a       	BITSET (R0, 0x1);		/* bit  1 */
 100b0f2:	10 93       	[P2] = R0;
 100b0f4:	10 91       	R0 = [P2];
 100b0f6:	10 4a       	BITSET (R0, 0x2);		/* bit  2 */
 100b0f8:	10 93       	[P2] = R0;
 100b0fa:	10 91       	R0 = [P2];
 100b0fc:	18 4a       	BITSET (R0, 0x3);		/* bit  3 */
 100b0fe:	10 93       	[P2] = R0;
 100b100:	10 91       	R0 = [P2];
 100b102:	20 4a       	BITSET (R0, 0x4);		/* bit  4 */
 100b104:	10 93       	[P2] = R0;
 100b106:	10 91       	R0 = [P2];
 100b108:	28 4a       	BITSET (R0, 0x5);		/* bit  5 */
 100b10a:	10 93       	[P2] = R0;
 100b10c:	10 91       	R0 = [P2];
 100b10e:	30 4a       	BITSET (R0, 0x6);		/* bit  6 */
 100b110:	10 93       	[P2] = R0;
 100b112:	10 91       	R0 = [P2];
 100b114:	38 4a       	BITSET (R0, 0x7);		/* bit  7 */
 100b116:	10 93       	[P2] = R0;
 100b118:	10 91       	R0 = [P2];
 100b11a:	40 4a       	BITSET (R0, 0x8);		/* bit  8 */
 100b11c:	10 93       	[P2] = R0;
 100b11e:	10 91       	R0 = [P2];
 100b120:	48 4a       	BITSET (R0, 0x9);		/* bit  9 */
 100b122:	10 93       	[P2] = R0;
 100b124:	10 91       	R0 = [P2];
 100b126:	50 4a       	BITSET (R0, 0xa);		/* bit 10 */
 100b128:	10 93       	[P2] = R0;
 100b12a:	10 91       	R0 = [P2];
 100b12c:	58 4c       	BITCLR (R0, 0xb);		/* bit 11 */
 100b12e:	10 93       	[P2] = R0;
 100b130:	10 91       	R0 = [P2];
 100b132:	60 4c       	BITCLR (R0, 0xc);		/* bit 12 */
 100b134:	10 93       	[P2] = R0;
 100b136:	10 91       	R0 = [P2];
 100b138:	68 4c       	BITCLR (R0, 0xd);		/* bit 13 */
 100b13a:	10 93       	[P2] = R0;
 100b13c:	10 91       	R0 = [P2];
 100b13e:	70 4c       	BITCLR (R0, 0xe);		/* bit 14 */
 100b140:	10 93       	[P2] = R0;
 100b142:	10 91       	R0 = [P2];
 100b144:	78 4c       	BITCLR (R0, 0xf);		/* bit 15 */
 100b146:	10 93       	[P2] = R0;
 100b148:	01 e8 00 00 	UNLINK;
 100b14c:	10 00       	RTS;
	...

0100b150 <_trim_iq>:
 100b150:	e3 05       	[--SP] = (R7:4, P5:3);
 100b152:	00 e8 0b 00 	LINK 0x2c;		/* (44) */
 100b156:	49 e1 0e 00 	P1.H = 0xe;		/* ( 14)	P1=0xefd1c */
 100b15a:	78 e6 12 00 	W[FP + 0x24] = R0;
 100b15e:	09 e1 d8 fc 	P1.L = 0xfcd8;		/* (-808)	P1=0xefcd8 */
 100b162:	08 91       	R0 = [P1];
 100b164:	78 4c       	BITCLR (R0, 0xf);		/* bit 15 */
 100b166:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefcf8 */
 100b16a:	08 93       	[P1] = R0;
 100b16c:	0a e1 dc fc 	P2.L = 0xfcdc;		/* (-804)	P2=0xefcdc */
 100b170:	10 91       	R0 = [P2];
 100b172:	60 4c       	BITCLR (R0, 0xc);		/* bit 12 */
 100b174:	10 93       	[P2] = R0;
 100b176:	78 e5 12 00 	R0 = W[FP + 0x24] (X);
 100b17a:	4c e1 0e 00 	P4.H = 0xe;		/* ( 14)	P4=0xefe7f */
 100b17e:	fb 63       	R3 = -0x1 (X);		/*		R3=0xffffffff( -1) */
 100b180:	4d e1 0e 00 	P5.H = 0xe;		/* ( 14)	P5=0xefcf8 */
 100b184:	80 43       	R0 = -R0;
 100b186:	79 e5 12 00 	R1 = W[FP + 0x24] (X);
 100b18a:	03 68       	P3 = 0x0 (X);		/*		P3=0x0(  0) */
 100b18c:	0c e1 10 fc 	P4.L = 0xfc10;		/* (-1008)	P4=0xefc10 */
 100b190:	43 e1 00 c0 	R3.H = 0xc000;		/* (-16384)	R3=0xc000ffff(-1073676289) */
 100b194:	0d e1 14 fc 	P5.L = 0xfc14;		/* (-1004)	P5=0xefc14 */
 100b198:	78 e6 fe ff 	W[FP + -0x4] = R0;
 100b19c:	b1 bb       	[FP -0x14] = R1;
 100b19e:	48 e1 0e 00 	P0.H = 0xe;		/* ( 14)	P0=0xefd18 */
 100b1a2:	20 91       	R0 = [P4];
 100b1a4:	70 4d       	R0 >>>= 0xe;
 100b1a6:	70 4f       	R0 <<= 0xe;
 100b1a8:	20 93       	[P4] = R0;
 100b1aa:	20 91       	R0 = [P4];
 100b1ac:	18 54       	R0 = R0 & R3;
 100b1ae:	20 93       	[P4] = R0;
 100b1b0:	28 91       	R0 = [P5];
 100b1b2:	70 4d       	R0 >>>= 0xe;
 100b1b4:	70 4f       	R0 <<= 0xe;
 100b1b6:	28 93       	[P5] = R0;
 100b1b8:	28 91       	R0 = [P5];
 100b1ba:	18 54       	R0 = R0 & R3;
 100b1bc:	28 93       	[P5] = R0;
 100b1be:	08 e1 d8 fc 	P0.L = 0xfcd8;		/* (-808)	P0=0xefcd8 */
 100b1c2:	00 91       	R0 = [P0];
 100b1c4:	78 4c       	BITCLR (R0, 0xf);		/* bit 15 */
 100b1c6:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefcdc */
 100b1ca:	00 93       	[P0] = R0;
 100b1cc:	0a e1 dc fc 	P2.L = 0xfcdc;		/* (-804)	P2=0xefcdc */
 100b1d0:	10 91       	R0 = [P2];
 100b1d2:	60 4c       	BITCLR (R0, 0xc);		/* bit 12 */
 100b1d4:	10 93       	[P2] = R0;
 100b1d6:	43 30       	R0 = P3;
 100b1d8:	80 42       	R0 = R0.L (X);
 100b1da:	08 32       	P1 = R0;
 100b1dc:	7d e5 fe ff 	R5 = W[FP + -0x4] (X);
 100b1e0:	7c e5 12 00 	R4 = W[FP + 0x24] (X);
 100b1e4:	3d 30       	R7 = R5;
 100b1e6:	0e 60       	R6 = 0x1 (X);		/*		R6=0x1(  1) */
 100b1e8:	41 0c       	CC = P1 == 0x0;
 100b1ea:	00 02       	R0 = CC;
 100b1ec:	b8 e6 f3 ff 	B[FP + -0xd] = R0;
 100b1f0:	4c 20       	JUMP.S 0x100b288 <_trim_iq+0x138>;
 100b1f2:	b9 e4 f3 ff 	R1 = B[FP + -0xd] (Z);
 100b1f6:	09 02       	CC = R1;
 100b1f8:	0a 14       	IF !CC JUMP 0x100b20c <_trim_iq+0xbc> (BP);
 100b1fa:	29 91       	R1 = [P5];
 100b1fc:	22 e1 ff 3f 	R2 = 0x3fff (X);		/*		R2=0x3fff(16383) */
 100b200:	71 4d       	R1 >>>= 0xe;
 100b202:	10 54       	R0 = R0 & R2;
 100b204:	71 4f       	R1 <<= 0xe;
 100b206:	48 56       	R1 = R0 | R1;
 100b208:	29 93       	[P5] = R1;
 100b20a:	09 20       	JUMP.S 0x100b21c <_trim_iq+0xcc>;
 100b20c:	22 e1 ff 3f 	R2 = 0x3fff (X);		/*		R2=0x3fff(16383) */
 100b210:	29 91       	R1 = [P5];
 100b212:	10 54       	R0 = R0 & R2;
 100b214:	80 4f       	R0 <<= 0x10;
 100b216:	59 54       	R1 = R1 & R3;
 100b218:	08 56       	R0 = R0 | R1;
 100b21a:	28 93       	[P5] = R0;
 100b21c:	a3 bb       	[FP -0x18] = R3;
 100b21e:	99 bb       	[FP -0x1c] = P1;
 100b220:	20 e1 00 19 	R0 = 0x1900 (X);		/*		R0=0x1900(6400) */
 100b224:	00 e3 cc 19 	CALL 0x100e5bc <_delay>;
 100b228:	b8 42       	R0 = R7.L (X);
 100b22a:	10 32       	P2 = R0;
 100b22c:	48 e1 0e 00 	P0.H = 0xe;		/* ( 14)	P0=0xefcd8 */
 100b230:	08 e1 fc fc 	P0.L = 0xfcfc;		/* (-772)	P0=0xefcfc */
 100b234:	02 91       	R2 = [P0];
 100b236:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100b238:	8a 54       	R2 = R2 & R1;
 100b23a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1001900(16783616) */
 100b23e:	4a 30       	R1 = P2;
 100b240:	8a bb       	[FP -0x20] = P2;
 100b242:	00 e1 9c b4 	R0.L = 0xb49c;		/* (-19300)	R0=0x100b49c(16823452) */
 100b246:	00 e3 9d 1e 	CALL 0x100ef80 <_printf>;
 100b24a:	48 e1 0e 00 	P0.H = 0xe;		/* ( 14)	P0=0xefcfc */
 100b24e:	08 e1 fc fc 	P0.L = 0xfcfc;		/* (-772)	P0=0xefcfc */
 100b252:	00 91       	R0 = [P0];
 100b254:	00 48       	CC = !BITTST (R0, 0x0);		/* bit  0 */
 100b256:	b6 42       	R6 = R6.L (X);
 100b258:	a3 b9       	R3 = [FP -0x18];
 100b25a:	99 b9       	P1 = [FP -0x1c];
 100b25c:	8a b9       	P2 = [FP -0x20];
 100b25e:	09 1c       	IF CC JUMP 0x100b270 <_trim_iq+0x120> (BP);
 100b260:	06 0c       	CC = R6 == 0x0;
 100b262:	0f 14       	IF !CC JUMP 0x100b280 <_trim_iq+0x130> (BP);
 100b264:	a8 42       	R0 = R5.L (X);
 100b266:	4a 30       	R1 = P2;
 100b268:	01 09       	CC = R1 <= R0;
 100b26a:	0e 60       	R6 = 0x1 (X);		/*		R6=0x1(  1) */
 100b26c:	2f 06       	IF !CC R5 = R7;
 100b26e:	0c 20       	JUMP.S 0x100b286 <_trim_iq+0x136>;
 100b270:	0e 0c       	CC = R6 == 0x1;
 100b272:	09 14       	IF !CC JUMP 0x100b284 <_trim_iq+0x134> (BP);
 100b274:	a0 42       	R0 = R4.L (X);
 100b276:	52 30       	R2 = P2;
 100b278:	82 08       	CC = R2 < R0;
 100b27a:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100b27c:	27 07       	IF CC R4 = R7;
 100b27e:	04 20       	JUMP.S 0x100b286 <_trim_iq+0x136>;
 100b280:	0e 60       	R6 = 0x1 (X);		/*		R6=0x1(  1) */
 100b282:	02 20       	JUMP.S 0x100b286 <_trim_iq+0x136>;
 100b284:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100b286:	0f 64       	R7 += 0x1;		/* (  1) */
 100b288:	b8 42       	R0 = R7.L (X);
 100b28a:	b1 b9       	R1 = [FP -0x14];
 100b28c:	08 09       	CC = R0 <= R1;
 100b28e:	b2 1f       	IF CC JUMP 0x100b1f2 <_trim_iq+0xa2> (BP);
 100b290:	41 0c       	CC = P1 == 0x0;
 100b292:	a8 42       	R0 = R5.L (X);
 100b294:	a7 42       	R7 = R4.L (X);
 100b296:	09 14       	IF !CC JUMP 0x100b2a8 <_trim_iq+0x158> (BP);
 100b298:	07 50       	R0 = R7 + R0;
 100b29a:	82 c6 08 8f 	R7 = R0 >> 0x1f;
 100b29e:	07 50       	R0 = R7 + R0;
 100b2a0:	08 4e       	R0 >>= 0x1;
 100b2a2:	78 e6 fc ff 	W[FP + -0x8] = R0;
 100b2a6:	08 20       	JUMP.S 0x100b2b6 <_trim_iq+0x166>;
 100b2a8:	07 50       	R0 = R7 + R0;
 100b2aa:	82 c6 08 8d 	R6 = R0 >> 0x1f;
 100b2ae:	06 50       	R0 = R6 + R0;
 100b2b0:	08 4e       	R0 >>= 0x1;
 100b2b2:	78 e6 fa ff 	W[FP + -0xc] = R0;
 100b2b6:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100b49c(16823452) */
 100b2ba:	a3 bb       	[FP -0x18] = R3;
 100b2bc:	00 e1 b0 b4 	R0.L = 0xb4b0;		/* (-19280)	R0=0x100b4b0(16823472) */
 100b2c0:	00 e3 60 1e 	CALL 0x100ef80 <_printf>;
 100b2c4:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100b4b0(16823472) */
 100b2c8:	a2 42       	R2 = R4.L (X);
 100b2ca:	a9 42       	R1 = R5.L (X);
 100b2cc:	00 e1 cc b4 	R0.L = 0xb4cc;		/* (-19252)	R0=0x100b4cc(16823500) */
 100b2d0:	00 e3 58 1e 	CALL 0x100ef80 <_printf>;
 100b2d4:	0b 6c       	P3 += 0x1;		/* (  1) */
 100b2d6:	53 30       	R2 = P3;
 100b2d8:	90 42       	R0 = R2.L (X);
 100b2da:	10 0c       	CC = R0 == 0x2;
 100b2dc:	a3 b9       	R3 = [FP -0x18];
 100b2de:	60 17       	IF !CC JUMP 0x100b19e <_trim_iq+0x4e> (BP);
 100b2e0:	7e e5 fa ff 	R6 = W[FP + -0xc] (X);
 100b2e4:	7f e5 fc ff 	R7 = W[FP + -0x8] (X);
 100b2e8:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100b4cc(16823500) */
 100b2ec:	0f 30       	R1 = R7;
 100b2ee:	16 30       	R2 = R6;
 100b2f0:	00 e1 e0 b4 	R0.L = 0xb4e0;		/* (-19232)	R0=0x100b4e0(16823520) */
 100b2f4:	00 e3 46 1e 	CALL 0x100ef80 <_printf>;
 100b2f8:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefcdc */
 100b2fc:	0a e1 10 fc 	P2.L = 0xfc10;		/* (-1008)	P2=0xefc10 */
 100b300:	10 91       	R0 = [P2];
 100b302:	70 4d       	R0 >>>= 0xe;
 100b304:	70 4f       	R0 <<= 0xe;
 100b306:	40 4a       	BITSET (R0, 0x8);		/* bit  8 */
 100b308:	10 93       	[P2] = R0;
 100b30a:	f9 63       	R1 = -0x1 (X);		/*		R1=0xffffffff( -1) */
 100b30c:	10 91       	R0 = [P2];
 100b30e:	41 e1 00 c0 	R1.H = 0xc000;		/* (-16384)	R1=0xc000ffff(-1073676289) */
 100b312:	08 54       	R0 = R0 & R1;
 100b314:	c0 4a       	BITSET (R0, 0x18);		/* bit 24 */
 100b316:	10 93       	[P2] = R0;
 100b318:	22 6c       	P2 += 0x4;		/* (  4) */
 100b31a:	10 91       	R0 = [P2];
 100b31c:	22 e1 ff 3f 	R2 = 0x3fff (X);		/*		R2=0x3fff(16383) */
 100b320:	70 4d       	R0 >>>= 0xe;
 100b322:	d7 55       	R7 = R7 & R2;
 100b324:	70 4f       	R0 <<= 0xe;
 100b326:	07 56       	R0 = R7 | R0;
 100b328:	10 93       	[P2] = R0;
 100b32a:	10 91       	R0 = [P2];
 100b32c:	96 54       	R2 = R6 & R2;
 100b32e:	82 4f       	R2 <<= 0x10;
 100b330:	48 54       	R1 = R0 & R1;
 100b332:	4a 56       	R1 = R2 | R1;
 100b334:	11 93       	[P2] = R1;
 100b336:	01 e8 00 00 	UNLINK;
 100b33a:	a3 05       	(R7:4, P5:3) = [SP++];
 100b33c:	10 00       	RTS;
	...

0100b340 <_trim_iq_all>:
 100b340:	e3 05       	[--SP] = (R7:4, P5:3);
 100b342:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefc10 */
 100b346:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100b34a:	0a e1 c0 fc 	P2.L = 0xfcc0;		/* (-832)	P2=0xefcc0 */
 100b34e:	10 91       	R0 = [P2];
 100b350:	00 4a       	BITSET (R0, 0x0);		/* bit  0 */
 100b352:	10 93       	[P2] = R0;
 100b354:	c2 6c       	P2 += 0x18;		/* ( 24) */
 100b356:	10 91       	R0 = [P2];
 100b358:	70 4a       	BITSET (R0, 0xe);		/* bit 14 */
 100b35a:	4d e1 0e 00 	P5.H = 0xe;		/* ( 14)	P5=0xefc14 */
 100b35e:	10 93       	[P2] = R0;
 100b360:	0d e1 c8 fc 	P5.L = 0xfcc8;		/* (-824)	P5=0xefcc8 */
 100b364:	28 91       	R0 = [P5];
 100b366:	38 4a       	BITSET (R0, 0x7);		/* bit  7 */
 100b368:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefcc0 */
 100b36c:	28 93       	[P5] = R0;
 100b36e:	0a e1 10 fc 	P2.L = 0xfc10;		/* (-1008)	P2=0xefc10 */
 100b372:	10 91       	R0 = [P2];
 100b374:	70 4d       	R0 >>>= 0xe;
 100b376:	70 4f       	R0 <<= 0xe;
 100b378:	10 93       	[P2] = R0;
 100b37a:	f9 63       	R1 = -0x1 (X);		/*		R1=0xffffffff( -1) */
 100b37c:	10 91       	R0 = [P2];
 100b37e:	41 e1 00 c0 	R1.H = 0xc000;		/* (-16384)	R1=0xc000ffff(-1073676289) */
 100b382:	08 54       	R0 = R0 & R1;
 100b384:	10 93       	[P2] = R0;
 100b386:	22 6c       	P2 += 0x4;		/* (  4) */
 100b388:	10 91       	R0 = [P2];
 100b38a:	70 4d       	R0 >>>= 0xe;
 100b38c:	70 4f       	R0 <<= 0xe;
 100b38e:	10 93       	[P2] = R0;
 100b390:	10 91       	R0 = [P2];
 100b392:	48 54       	R1 = R0 & R1;
 100b394:	11 93       	[P2] = R1;
 100b396:	20 e1 88 13 	R0 = 0x1388 (X);		/*		R0=0x1388(5000) */
 100b39a:	5d 32       	P3 = P5;
 100b39c:	00 e3 10 19 	CALL 0x100e5bc <_delay>;
 100b3a0:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100b3a2:	3d 60       	R5 = 0x7 (X);		/*		R5=0x7(  7) */
 100b3a4:	26 e1 ff f8 	R6 = -0x701 (X);		/*		R6=0xfffff8ff(-1793) */
 100b3a8:	a5 6d       	P5 += 0x34;		/* ( 52) */
 100b3aa:	0c 60       	R4 = 0x1 (X);		/*		R4=0x1(  1) */
 100b3ac:	18 91       	R0 = [P3];
 100b3ae:	7d 54       	R1 = R5 & R7;
 100b3b0:	41 4f       	R1 <<= 0x8;
 100b3b2:	30 54       	R0 = R0 & R6;
 100b3b4:	01 56       	R0 = R1 | R0;
 100b3b6:	18 93       	[P3] = R0;
 100b3b8:	20 e1 80 0c 	R0 = 0xc80 (X);		/*		R0=0xc80(3200) */
 100b3bc:	00 e3 00 19 	CALL 0x100e5bc <_delay>;
 100b3c0:	29 91       	R1 = [P5];
 100b3c2:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000c80(16780416) */
 100b3c6:	61 54       	R1 = R1 & R4;
 100b3c8:	00 e1 f4 b4 	R0.L = 0xb4f4;		/* (-19212)	R0=0x100b4f4(16823540) */
 100b3cc:	00 e3 da 1d 	CALL 0x100ef80 <_printf>;
 100b3d0:	4c e1 0e 00 	P4.H = 0xe;		/* ( 14)	P4=0xefc10 */
 100b3d4:	28 91       	R0 = [P5];
 100b3d6:	0c e1 c8 fc 	P4.L = 0xfcc8;		/* (-824)	P4=0xefcc8 */
 100b3da:	00 48       	CC = !BITTST (R0, 0x0);		/* bit  0 */
 100b3dc:	0d 18       	IF CC JUMP 0x100b3f6 <_trim_iq_all+0xb6>;
 100b3de:	0f 64       	R7 += 0x1;		/* (  1) */
 100b3e0:	78 43       	R0 = R7.B (Z);
 100b3e2:	38 0e       	CC = R0 <= 0x7 (IU);
 100b3e4:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100b3e6:	38 06       	IF !CC R7 = R0;
 100b3e8:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 100b3ec:	00 e1 04 b5 	R0.L = 0xb504;		/* (-19196)	R0=0x100b504(16823556) */
 100b3f0:	00 e3 c8 1d 	CALL 0x100ef80 <_printf>;
 100b3f4:	dc 2f       	JUMP.S 0x100b3ac <_trim_iq_all+0x6c>;
 100b3f6:	20 e1 00 01 	R0 = 0x100 (X);		/*		R0=0x100(256) */
 100b3fa:	ff e3 ab fe 	CALL 0x100b150 <_trim_iq>;
 100b3fe:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefc10 */
 100b402:	0a e1 c0 fc 	P2.L = 0xfcc0;		/* (-832)	P2=0xefcc0 */
 100b406:	10 91       	R0 = [P2];
 100b408:	00 4c       	BITCLR (R0, 0x0);		/* bit  0 */
 100b40a:	10 93       	[P2] = R0;
 100b40c:	20 91       	R0 = [P4];
 100b40e:	38 4a       	BITSET (R0, 0x7);		/* bit  7 */
 100b410:	20 93       	[P4] = R0;
 100b412:	01 e8 00 00 	UNLINK;
 100b416:	a3 05       	(R7:4, P5:3) = [SP++];
 100b418:	10 00       	RTS;
 100b41a:	00 00       	NOP;
 100b41c:	0a 0a       	CC = R2 <= R1 (IU);
 100b41e:	0a 2e       	JUMP.S 0x100b032 <_bt_analog_init+0x3ea>;
 100b420:	2e 2e       	JUMP.S 0x100b07c <_bt_analog_init+0x434>;
 100b422:	32 20       	JUMP.S 0x100b486 <_trim_iq_all+0x146>;
 100b424:	62 74       	ILLEGAL;
 100b426:	5f 70       	ILLEGAL;
 100b428:	6c 6c       	P4 += 0xd;		/* ( 13) */
 100b42a:	5f 73       	ILLEGAL;
 100b42c:	63 61       	R3 = 0x2c (X);		/*		R3=0x2c( 44) */
 100b42e:	6e 20       	JUMP.S 0x100b50a <_trim_iq_all+0x1ca>;
 100b430:	65 72       	ILLEGAL;
 100b432:	72 6f       	P2 += -0x12;		/* (-18) */
 100b434:	72 2e       	JUMP.S 0x100b118 <_baseband_analog+0x80>;
 100b436:	2e 2e       	JUMP.S 0x100b092 <_bt_analog_init+0x44a>;
 100b438:	0a 0a       	CC = R2 <= R1 (IU);
 100b43a:	0a 00       	ILLEGAL;
 100b43c:	0a 6c       	P2 += 0x1;		/* (  1) */
 100b43e:	3a 25       	JUMP.S 0x100beb2 <___set_channel_map+0xe>;
 100b440:	64 20       	JUMP.S 0x100b508 <_trim_iq_all+0x1c8>;
 100b442:	68 3a       	ILLEGAL;
 100b444:	25 64       	R5 += 0x4;		/* (  4) */
 100b446:	00 00       	NOP;
 100b448:	0a 63       	R2 = -0x1f (X);		/*		R2=0xffffffe1(-31) */
 100b44a:	70 30       	R6 = P0;
 100b44c:	3a 25       	JUMP.S 0x100bec0 <___set_channel_map+0x1c>;
 100b44e:	64 20       	JUMP.S 0x100b516 <_trim_iq_all+0x1d6>;
 100b450:	63 70       	ILLEGAL;
 100b452:	31 3a       	ILLEGAL;
 100b454:	25 64       	R5 += 0x4;		/* (  4) */
 100b456:	20 63       	R0 = -0x1c (X);		/*		R0=0xffffffe4(-28) */
 100b458:	70 32       	SP = P0;
 100b45a:	3a 25       	JUMP.S 0x100bece <___set_channel_map+0x2a>;
 100b45c:	64 20       	JUMP.S 0x100b524 <_fsk_offset>;
 100b45e:	63 70       	ILLEGAL;
 100b460:	33 3a       	ILLEGAL;
 100b462:	20 25       	JUMP.S 0x100bea2 <_le_hw_close+0x36>;
 100b464:	64 00       	CALL (P4);
 100b466:	00 00       	NOP;
 100b468:	0a 25       	JUMP.S 0x100be7c <_le_hw_close+0x10>;
 100b46a:	78 00       	ILLEGAL;
 100b46c:	0a 62       	R2 = -0x3f (X);		/*		R2=0xffffffc1(-63) */
 100b46e:	77 5f       	P5 = FP + (SP << 0x2);
 100b470:	73 65       	R3 += 0x2e;		/* ( 46) */
 100b472:	74 3a       	ILLEGAL;
 100b474:	20 25       	JUMP.S 0x100beb4 <___set_channel_map+0x10>;
 100b476:	78 20       	JUMP.S 0x100b566 <_fsk_offset+0x42>;
 100b478:	20 25       	JUMP.S 0x100beb8 <___set_channel_map+0x14>;
 100b47a:	64 20       	JUMP.S 0x100b542 <_fsk_offset+0x1e>;
 100b47c:	0a 00       	ILLEGAL;
 100b47e:	00 00       	NOP;
 100b480:	0a 0a       	CC = R2 <= R1 (IU);
 100b482:	20 61       	R0 = 0x24 (X);		/*		R0=0x24( 36) */
 100b484:	6e 61       	R6 = 0x2d (X);		/*		R6=0x2d( 45) */
 100b486:	6c 6f       	P4 += -0x13;		/* (-19) */
 100b488:	67 20       	JUMP.S 0x100b556 <_fsk_offset+0x32>;
 100b48a:	20 74       	ILLEGAL;
 100b48c:	65 73       	ILLEGAL;
 100b48e:	74 20       	JUMP.S 0x100b576 <_fsk_offset+0x52>;
 100b490:	20 2e       	JUMP.S 0x100b0d0 <_baseband_analog+0x38>;
 100b492:	2e 2e       	JUMP.S 0x100b0ee <_baseband_analog+0x56>;
 100b494:	2e 2e       	JUMP.S 0x100b0f0 <_baseband_analog+0x58>;
 100b496:	2e 0a       	CC = R6 <= R5 (IU);
 100b498:	00 00       	NOP;
 100b49a:	00 00       	NOP;
 100b49c:	64 61       	R4 = 0x2c (X);		/*		R4=0x2c( 44) */
 100b49e:	74 61       	R4 = 0x2e (X);		/*		R4=0x2e( 46) */
 100b4a0:	3a 20       	JUMP.S 0x100b514 <_trim_iq_all+0x1d4>;
 100b4a2:	25 64       	R5 += 0x4;		/* (  4) */
 100b4a4:	20 4c       	BITCLR (R0, 0x4);		/* bit  4 */
 100b4a6:	4e 41       	R6 = (R6 + R1) << 0x2;
 100b4a8:	56 3a       	ILLEGAL;
 100b4aa:	20 25       	JUMP.S 0x100beea <___set_channel_map+0x46>;
 100b4ac:	78 0a       	CC = P0 <= FP (IU);
 100b4ae:	00 00       	NOP;
 100b4b0:	0a 3d       	LT0 = A1.X;
 100b4b2:	3d 3d       	ILLEGAL;
 100b4b4:	3d 3d       	ILLEGAL;
 100b4b6:	3d 3d       	ILLEGAL;
 100b4b8:	3d 3d       	ILLEGAL;
 100b4ba:	3d 3d       	ILLEGAL;
 100b4bc:	3d 3d       	ILLEGAL;
 100b4be:	3d 3d       	ILLEGAL;
 100b4c0:	3d 3d       	ILLEGAL;
 100b4c2:	3d 3d       	ILLEGAL;
 100b4c4:	3d 3d       	ILLEGAL;
 100b4c6:	3d 3d       	ILLEGAL;
 100b4c8:	3d 3d       	ILLEGAL;
 100b4ca:	00 00       	NOP;
 100b4cc:	30 3e       	RETE = R0;
 100b4ce:	31 6e       	P1 += -0x3a;		/* (-58) */
 100b4d0:	20 25       	JUMP.S 0x100bf10 <___set_channel_map+0x6c>;
 100b4d2:	64 3a       	ILLEGAL;
 100b4d4:	20 31       	R4 = A0.X;
 100b4d6:	3e 30       	R7 = R6;
 100b4d8:	4d 20       	JUMP.S 0x100b572 <_fsk_offset+0x4e>;
 100b4da:	25 64       	R5 += 0x4;		/* (  4) */
 100b4dc:	00 00       	NOP;
 100b4de:	00 00       	NOP;
 100b4e0:	0a 69       	P2 = 0x21 (X);		/*		P2=0x21( 33) */
 100b4e2:	5f 64       	R7 += 0xb;		/* ( 11) */
 100b4e4:	63 3a       	ILLEGAL;
 100b4e6:	20 25       	JUMP.S 0x100bf26 <___set_channel_map+0x82>;
 100b4e8:	64 20       	JUMP.S 0x100b5b0 <_fsk_offset+0x8c>;
 100b4ea:	71 5f       	P5 = P1 + (SP << 0x2);
 100b4ec:	64 63       	R4 = -0x14 (X);		/*		R4=0xffffffec(-20) */
 100b4ee:	3a 20       	JUMP.S 0x100b562 <_fsk_offset+0x3e>;
 100b4f0:	25 64       	R5 += 0x4;		/* (  4) */
 100b4f2:	00 00       	NOP;
 100b4f4:	2d 2d       	JUMP.S 0x100af4e <_bt_analog_init+0x306>;
 100b4f6:	2d 2d       	JUMP.S 0x100af50 <_bt_analog_init+0x308>;
 100b4f8:	2d 2d       	JUMP.S 0x100af52 <_bt_analog_init+0x30a>;
 100b4fa:	2d 2d       	JUMP.S 0x100af54 <_bt_analog_init+0x30c>;
 100b4fc:	2d 25       	JUMP.S 0x100bf56 <___set_channel_map+0xb2>;
 100b4fe:	64 20       	JUMP.S 0x100b5c6 <_RF_mdm_init+0xe>;
 100b500:	0a 00       	ILLEGAL;
 100b502:	00 00       	NOP;
 100b504:	2d 2d       	JUMP.S 0x100af5e <_bt_analog_init+0x316>;
 100b506:	2d 2d       	JUMP.S 0x100af60 <_bt_analog_init+0x318>;
 100b508:	2d 2d       	JUMP.S 0x100af62 <_bt_analog_init+0x31a>;
 100b50a:	2d 2d       	JUMP.S 0x100af64 <_bt_analog_init+0x31c>;
 100b50c:	2d 2d       	JUMP.S 0x100af66 <_bt_analog_init+0x31e>;
 100b50e:	2d 2d       	JUMP.S 0x100af68 <_bt_analog_init+0x320>;
 100b510:	2d 2d       	JUMP.S 0x100af6a <_bt_analog_init+0x322>;
 100b512:	2d 2d       	JUMP.S 0x100af6c <_bt_analog_init+0x324>;
 100b514:	2d 2d       	JUMP.S 0x100af6e <_bt_analog_init+0x326>;
 100b516:	2d 2d       	JUMP.S 0x100af70 <_bt_analog_init+0x328>;
 100b518:	2d 2d       	JUMP.S 0x100af72 <_bt_analog_init+0x32a>;
 100b51a:	2d 2d       	JUMP.S 0x100af74 <_bt_analog_init+0x32c>;
 100b51c:	2d 2d       	JUMP.S 0x100af76 <_bt_analog_init+0x32e>;
 100b51e:	2d 2d       	JUMP.S 0x100af78 <_bt_analog_init+0x330>;
 100b520:	2d 2d       	JUMP.S 0x100af7a <_bt_analog_init+0x332>;
 100b522:	2d 00       	ILLEGAL;

0100b524 <_fsk_offset>:
 100b524:	48 e1 0e 00 	P0.H = 0xe;		/* ( 14)	P0=0xefcfc */
 100b528:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100b52c:	08 e1 18 fc 	P0.L = 0xfc18;		/* (-1000)	P0=0xefc18 */
 100b530:	00 43       	R0 = R0.B (X);
 100b532:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x21 */
 100b536:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0xfcd8 */
 100b53a:	01 91       	R1 = [P0];
 100b53c:	00 0c       	CC = R0 == 0x0;
 100b53e:	0a e1 c2 45 	P2.L = 0x45c2;		/* (17858)	P2=0x45c2 <_fsk_offset_dly> */
 100b542:	09 e1 c0 45 	P1.L = 0x45c0;		/* (17856)	P1=0x45c0 <_offset_cnt> */
 100b546:	33 1c       	IF CC JUMP 0x100b5ac <_fsk_offset+0x88> (BP);
 100b548:	12 95       	R2 = W[P2] (Z);
 100b54a:	10 95       	R0 = W[P2] (Z);
 100b54c:	89 42       	R1 = R1.L (X);
 100b54e:	29 4f       	R1 <<= 0x5;
 100b550:	80 42       	R0 = R0.L (X);
 100b552:	82 4f       	R2 <<= 0x10;
 100b554:	60 4f       	R0 <<= 0xc;
 100b556:	89 42       	R1 = R1.L (X);
 100b558:	02 52       	R0 = R2 - R0;
 100b55a:	59 4f       	R1 <<= 0xb;
 100b55c:	08 50       	R0 = R0 + R1;
 100b55e:	11 95       	R1 = W[P2] (Z);
 100b560:	80 4e       	R0 >>= 0x10;
 100b562:	10 97       	W[P2] = R0;
 100b564:	0a 95       	R2 = W[P1] (Z);
 100b566:	92 42       	R2 = R2.L (X);
 100b568:	93 61       	R3 = 0x32 (X);		/*		R3=0x32( 50) */
 100b56a:	1a 09       	CC = R2 <= R3;
 100b56c:	16 1c       	IF CC JUMP 0x100b598 <_fsk_offset+0x74> (BP);
 100b56e:	80 42       	R0 = R0.L (X);
 100b570:	89 42       	R1 = R1.L (X);
 100b572:	48 50       	R1 = R0 + R1;
 100b574:	79 4f       	R1 <<= 0xf;
 100b576:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100b578:	02 91       	R2 = [P0];
 100b57a:	a1 4e       	R1 >>= 0x14;
 100b57c:	40 e1 00 f0 	R0.H = 0xf000;		/* (-4096)	R0=0xf000ffff(-268369921) */
 100b580:	81 4f       	R1 <<= 0x10;
 100b582:	02 54       	R0 = R2 & R0;
 100b584:	01 56       	R0 = R1 | R0;
 100b586:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe45c2 */
 100b58a:	00 93       	[P0] = R0;
 100b58c:	0a e1 00 fc 	P2.L = 0xfc00;		/* (-1024)	P2=0xefc00 */
 100b590:	10 91       	R0 = [P2];
 100b592:	f0 4a       	BITSET (R0, 0x1e);		/* bit 30 */
 100b594:	10 93       	[P2] = R0;
 100b596:	0e 20       	JUMP.S 0x100b5b2 <_fsk_offset+0x8e>;
 100b598:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefc00 */
 100b59c:	0a e1 00 fc 	P2.L = 0xfc00;		/* (-1024)	P2=0xefc00 */
 100b5a0:	10 91       	R0 = [P2];
 100b5a2:	f0 4c       	BITCLR (R0, 0x1e);		/* bit 30 */
 100b5a4:	10 93       	[P2] = R0;
 100b5a6:	08 95       	R0 = W[P1] (Z);
 100b5a8:	08 64       	R0 += 0x1;		/* (  1) */
 100b5aa:	03 20       	JUMP.S 0x100b5b0 <_fsk_offset+0x8c>;
 100b5ac:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100b5ae:	10 97       	W[P2] = R0;
 100b5b0:	08 97       	W[P1] = R0;
 100b5b2:	01 e8 00 00 	UNLINK;
 100b5b6:	10 00       	RTS;

0100b5b8 <_RF_mdm_init>:
 100b5b8:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefc00 */
 100b5bc:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100b5c0:	0a e1 00 fc 	P2.L = 0xfc00;		/* (-1024)	P2=0xefc00 */
 100b5c4:	11 91       	R1 = [P2];
 100b5c6:	88 63       	R0 = -0xf (X);		/*		R0=0xfffffff1(-15) */
 100b5c8:	01 54       	R0 = R1 & R0;
 100b5ca:	18 4a       	BITSET (R0, 0x3);		/* bit  3 */
 100b5cc:	10 93       	[P2] = R0;
 100b5ce:	11 91       	R1 = [P2];
 100b5d0:	20 e1 0f ff 	R0 = -0xf1 (X);		/*		R0=0xffffff0f(-241) */
 100b5d4:	41 54       	R1 = R1 & R0;
 100b5d6:	22 e1 90 00 	R2 = 0x90 (X);		/*		R2=0x90(144) */
 100b5da:	51 56       	R1 = R1 | R2;
 100b5dc:	11 93       	[P2] = R1;
 100b5de:	12 91       	R2 = [P2];
 100b5e0:	21 e1 ff f8 	R1 = -0x701 (X);		/*		R1=0xfffff8ff(-1793) */
 100b5e4:	4a 54       	R1 = R2 & R1;
 100b5e6:	11 93       	[P2] = R1;
 100b5e8:	11 91       	R1 = [P2];
 100b5ea:	59 4c       	BITCLR (R1, 0xb);		/* bit 11 */
 100b5ec:	11 93       	[P2] = R1;
 100b5ee:	12 91       	R2 = [P2];
 100b5f0:	21 e1 ff cf 	R1 = -0x3001 (X);		/*		R1=0xffffcfff(-12289) */
 100b5f4:	4a 54       	R1 = R2 & R1;
 100b5f6:	61 4a       	BITSET (R1, 0xc);		/* bit 12 */
 100b5f8:	11 93       	[P2] = R1;
 100b5fa:	f9 63       	R1 = -0x1 (X);		/*		R1=0xffffffff( -1) */
 100b5fc:	12 91       	R2 = [P2];
 100b5fe:	01 e1 ff 3f 	R1.L = 0x3fff;		/* (16383)	R1=0xffff3fff(-49153) */
 100b602:	4a 54       	R1 = R2 & R1;
 100b604:	11 93       	[P2] = R1;
 100b606:	f9 63       	R1 = -0x1 (X);		/*		R1=0xffffffff( -1) */
 100b608:	12 91       	R2 = [P2];
 100b60a:	41 e1 f0 ff 	R1.H = 0xfff0;		/* (-16)	R1=0xfff0ffff(-983041) */
 100b60e:	4a 54       	R1 = R2 & R1;
 100b610:	99 4a       	BITSET (R1, 0x13);		/* bit 19 */
 100b612:	11 93       	[P2] = R1;
 100b614:	11 91       	R1 = [P2];
 100b616:	b1 4a       	BITSET (R1, 0x16);		/* bit 22 */
 100b618:	11 93       	[P2] = R1;
 100b61a:	11 91       	R1 = [P2];
 100b61c:	b9 4c       	BITCLR (R1, 0x17);		/* bit 23 */
 100b61e:	11 93       	[P2] = R1;
 100b620:	11 91       	R1 = [P2];
 100b622:	c1 4a       	BITSET (R1, 0x18);		/* bit 24 */
 100b624:	11 93       	[P2] = R1;
 100b626:	11 91       	R1 = [P2];
 100b628:	c9 4c       	BITCLR (R1, 0x19);		/* bit 25 */
 100b62a:	11 93       	[P2] = R1;
 100b62c:	f9 63       	R1 = -0x1 (X);		/*		R1=0xffffffff( -1) */
 100b62e:	12 91       	R2 = [P2];
 100b630:	41 e1 ff e3 	R1.H = 0xe3ff;		/* (-7169)	R1=0xe3ffffff(-469762049) */
 100b634:	4a 54       	R1 = R2 & R1;
 100b636:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 100b638:	d2 4f       	R2 <<= 0x1a;
 100b63a:	51 56       	R1 = R1 | R2;
 100b63c:	11 93       	[P2] = R1;
 100b63e:	11 91       	R1 = [P2];
 100b640:	e9 4c       	BITCLR (R1, 0x1d);		/* bit 29 */
 100b642:	11 93       	[P2] = R1;
 100b644:	11 91       	R1 = [P2];
 100b646:	f1 4c       	BITCLR (R1, 0x1e);		/* bit 30 */
 100b648:	11 93       	[P2] = R1;
 100b64a:	11 91       	R1 = [P2];
 100b64c:	f9 4c       	BITCLR (R1, 0x1f);		/* bit 31 */
 100b64e:	11 93       	[P2] = R1;
 100b650:	22 6c       	P2 += 0x4;		/* (  4) */
 100b652:	12 91       	R2 = [P2];
 100b654:	81 63       	R1 = -0x10 (X);		/*		R1=0xfffffff0(-16) */
 100b656:	4a 54       	R1 = R2 & R1;
 100b658:	11 93       	[P2] = R1;
 100b65a:	11 91       	R1 = [P2];
 100b65c:	01 54       	R0 = R1 & R0;
 100b65e:	28 4a       	BITSET (R0, 0x5);		/* bit  5 */
 100b660:	10 93       	[P2] = R0;
 100b662:	11 91       	R1 = [P2];
 100b664:	20 e1 ff f0 	R0 = -0xf01 (X);		/*		R0=0xfffff0ff(-3841) */
 100b668:	01 54       	R0 = R1 & R0;
 100b66a:	10 93       	[P2] = R0;
 100b66c:	10 91       	R0 = [P2];
 100b66e:	60 4c       	BITCLR (R0, 0xc);		/* bit 12 */
 100b670:	10 93       	[P2] = R0;
 100b672:	10 91       	R0 = [P2];
 100b674:	68 4a       	BITSET (R0, 0xd);		/* bit 13 */
 100b676:	10 93       	[P2] = R0;
 100b678:	10 91       	R0 = [P2];
 100b67a:	70 4a       	BITSET (R0, 0xe);		/* bit 14 */
 100b67c:	10 93       	[P2] = R0;
 100b67e:	10 91       	R0 = [P2];
 100b680:	78 4a       	BITSET (R0, 0xf);		/* bit 15 */
 100b682:	10 93       	[P2] = R0;
 100b684:	10 91       	R0 = [P2];
 100b686:	80 4c       	BITCLR (R0, 0x10);		/* bit 16 */
 100b688:	10 93       	[P2] = R0;
 100b68a:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100b68c:	11 91       	R1 = [P2];
 100b68e:	40 e1 f1 ff 	R0.H = 0xfff1;		/* (-15)	R0=0xfff1ffff(-917505) */
 100b692:	01 54       	R0 = R1 & R0;
 100b694:	10 93       	[P2] = R0;
 100b696:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100b698:	11 91       	R1 = [P2];
 100b69a:	40 e1 0f ff 	R0.H = 0xff0f;		/* (-241)	R0=0xff0fffff(-15728641) */
 100b69e:	01 54       	R0 = R1 & R0;
 100b6a0:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 100b6a2:	a9 4f       	R1 <<= 0x15;
 100b6a4:	08 56       	R0 = R0 | R1;
 100b6a6:	10 93       	[P2] = R0;
 100b6a8:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100b6aa:	11 91       	R1 = [P2];
 100b6ac:	40 e1 ff f8 	R0.H = 0xf8ff;		/* (-1793)	R0=0xf8ffffff(-117440513) */
 100b6b0:	01 54       	R0 = R1 & R0;
 100b6b2:	d0 4a       	BITSET (R0, 0x1a);		/* bit 26 */
 100b6b4:	10 93       	[P2] = R0;
 100b6b6:	10 91       	R0 = [P2];
 100b6b8:	d8 4c       	BITCLR (R0, 0x1b);		/* bit 27 */
 100b6ba:	10 93       	[P2] = R0;
 100b6bc:	10 91       	R0 = [P2];
 100b6be:	e0 4c       	BITCLR (R0, 0x1c);		/* bit 28 */
 100b6c0:	10 93       	[P2] = R0;
 100b6c2:	10 91       	R0 = [P2];
 100b6c4:	e8 4c       	BITCLR (R0, 0x1d);		/* bit 29 */
 100b6c6:	10 93       	[P2] = R0;
 100b6c8:	10 91       	R0 = [P2];
 100b6ca:	f0 4c       	BITCLR (R0, 0x1e);		/* bit 30 */
 100b6cc:	10 93       	[P2] = R0;
 100b6ce:	10 91       	R0 = [P2];
 100b6d0:	f8 4c       	BITCLR (R0, 0x1f);		/* bit 31 */
 100b6d2:	10 93       	[P2] = R0;
 100b6d4:	42 6c       	P2 += 0x8;		/* (  8) */
 100b6d6:	10 91       	R0 = [P2];
 100b6d8:	50 4d       	R0 >>>= 0xa;
 100b6da:	50 4f       	R0 <<= 0xa;
 100b6dc:	40 4a       	BITSET (R0, 0x8);		/* bit  8 */
 100b6de:	10 93       	[P2] = R0;
 100b6e0:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100b6e2:	40 e1 00 fc 	R0.H = 0xfc00;		/* (-1024)	R0=0xfc00ffff(-67043329) */
 100b6e6:	11 91       	R1 = [P2];
 100b6e8:	41 54       	R1 = R1 & R0;
 100b6ea:	c1 4a       	BITSET (R1, 0x18);		/* bit 24 */
 100b6ec:	11 93       	[P2] = R1;
 100b6ee:	22 6c       	P2 += 0x4;		/* (  4) */
 100b6f0:	11 91       	R1 = [P2];
 100b6f2:	51 4d       	R1 >>>= 0xa;
 100b6f4:	51 4f       	R1 <<= 0xa;
 100b6f6:	41 4a       	BITSET (R1, 0x8);		/* bit  8 */
 100b6f8:	11 93       	[P2] = R1;
 100b6fa:	11 91       	R1 = [P2];
 100b6fc:	41 54       	R1 = R1 & R0;
 100b6fe:	c1 4a       	BITSET (R1, 0x18);		/* bit 24 */
 100b700:	11 93       	[P2] = R1;
 100b702:	22 6c       	P2 += 0x4;		/* (  4) */
 100b704:	11 91       	R1 = [P2];
 100b706:	51 4d       	R1 >>>= 0xa;
 100b708:	51 4f       	R1 <<= 0xa;
 100b70a:	11 93       	[P2] = R1;
 100b70c:	11 91       	R1 = [P2];
 100b70e:	41 54       	R1 = R1 & R0;
 100b710:	11 93       	[P2] = R1;
 100b712:	22 6c       	P2 += 0x4;		/* (  4) */
 100b714:	f9 63       	R1 = -0x1 (X);		/*		R1=0xffffffff( -1) */
 100b716:	12 91       	R2 = [P2];
 100b718:	41 e1 00 f0 	R1.H = 0xf000;		/* (-4096)	R1=0xf000ffff(-268369921) */
 100b71c:	4a 54       	R1 = R2 & R1;
 100b71e:	11 93       	[P2] = R1;
 100b720:	22 6c       	P2 += 0x4;		/* (  4) */
 100b722:	11 91       	R1 = [P2];
 100b724:	01 54       	R0 = R1 & R0;
 100b726:	10 93       	[P2] = R0;
 100b728:	01 e8 00 00 	UNLINK;
 100b72c:	10 00       	RTS;
	...

0100b730 <_RF_rxtx_init>:
 100b730:	e4 05       	[--SP] = (R7:4, P5:4);
 100b732:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100b736:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 100b738:	f7 b0       	[SP + 0xc] = R7;
 100b73a:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100b73c:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b73e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100b740:	00 e3 74 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b744:	14 60       	R4 = 0x2 (X);		/*		R4=0x2(  2) */
 100b746:	f4 b0       	[SP + 0xc] = R4;
 100b748:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 100b74a:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100b74c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100b74e:	00 e3 6d 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b752:	f7 b0       	[SP + 0xc] = R7;
 100b754:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100b756:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b758:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100b75a:	00 e3 67 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b75e:	f7 b0       	[SP + 0xc] = R7;
 100b760:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 100b762:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b764:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100b766:	00 e3 61 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b76a:	f7 b0       	[SP + 0xc] = R7;
 100b76c:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 100b76e:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b770:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100b772:	00 e3 5b 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b776:	f7 b0       	[SP + 0xc] = R7;
 100b778:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 100b77a:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100b77c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100b77e:	00 e3 55 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b782:	85 60       	R5 = 0x10 (X);		/*		R5=0x10( 16) */
 100b784:	f5 b0       	[SP + 0xc] = R5;
 100b786:	51 60       	R1 = 0xa (X);		/*		R1=0xa( 10) */
 100b788:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 100b78a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100b78c:	00 e3 4e 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b790:	f7 b0       	[SP + 0xc] = R7;
 100b792:	79 60       	R1 = 0xf (X);		/*		R1=0xf( 15) */
 100b794:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b796:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100b798:	00 e3 48 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b79c:	f7 b0       	[SP + 0xc] = R7;
 100b79e:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100b7a0:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b7a2:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100b7a4:	00 e3 42 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b7a8:	7c 68       	P4 = 0xf (X);		/*		P4=0xf( 15) */
 100b7aa:	f4 bc       	[SP + 0xc] = P4;
 100b7ac:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100b7ae:	3a 60       	R2 = 0x7 (X);		/*		R2=0x7(  7) */
 100b7b0:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100b7b2:	00 e3 3b 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b7b6:	f7 b0       	[SP + 0xc] = R7;
 100b7b8:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 100b7ba:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100b7bc:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100b7be:	00 e3 35 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b7c2:	f7 b0       	[SP + 0xc] = R7;
 100b7c4:	51 60       	R1 = 0xa (X);		/*		R1=0xa( 10) */
 100b7c6:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100b7c8:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100b7ca:	00 e3 2f 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b7ce:	f7 b0       	[SP + 0xc] = R7;
 100b7d0:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 100b7d2:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100b7d4:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100b7d6:	00 e3 29 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b7da:	f7 b0       	[SP + 0xc] = R7;
 100b7dc:	71 60       	R1 = 0xe (X);		/*		R1=0xe( 14) */
 100b7de:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100b7e0:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100b7e2:	00 e3 23 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b7e6:	f5 b0       	[SP + 0xc] = R5;
 100b7e8:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100b7ea:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 100b7ec:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100b7ee:	00 e3 1d 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b7f2:	f7 b0       	[SP + 0xc] = R7;
 100b7f4:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 100b7f6:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 100b7f8:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100b7fa:	00 e3 17 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b7fe:	f7 b0       	[SP + 0xc] = R7;
 100b800:	51 60       	R1 = 0xa (X);		/*		R1=0xa( 10) */
 100b802:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b804:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100b806:	00 e3 11 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b80a:	f7 b0       	[SP + 0xc] = R7;
 100b80c:	59 60       	R1 = 0xb (X);		/*		R1=0xb( 11) */
 100b80e:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100b810:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100b812:	00 e3 0b 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b816:	f7 b0       	[SP + 0xc] = R7;
 100b818:	71 60       	R1 = 0xe (X);		/*		R1=0xe( 14) */
 100b81a:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100b81c:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100b81e:	00 e3 05 12 	CALL 0x100dc28 <_spi_wr_rg>;
 100b822:	f7 b0       	[SP + 0xc] = R7;
 100b824:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100b826:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100b828:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100b82a:	00 e3 ff 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b82e:	f7 b0       	[SP + 0xc] = R7;
 100b830:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 100b832:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b834:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100b836:	00 e3 f9 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b83a:	f7 b0       	[SP + 0xc] = R7;
 100b83c:	59 60       	R1 = 0xb (X);		/*		R1=0xb( 11) */
 100b83e:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b840:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100b842:	00 e3 f3 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b846:	f7 b0       	[SP + 0xc] = R7;
 100b848:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 100b84a:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b84c:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100b84e:	00 e3 ed 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b852:	f7 b0       	[SP + 0xc] = R7;
 100b854:	69 60       	R1 = 0xd (X);		/*		R1=0xd( 13) */
 100b856:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100b858:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100b85a:	00 e3 e7 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b85e:	f7 b0       	[SP + 0xc] = R7;
 100b860:	49 60       	R1 = 0x9 (X);		/*		R1=0x9(  9) */
 100b862:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b864:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100b866:	00 e3 e1 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b86a:	f7 b0       	[SP + 0xc] = R7;
 100b86c:	51 60       	R1 = 0xa (X);		/*		R1=0xa( 10) */
 100b86e:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100b870:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100b872:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100b874:	00 e3 da 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b878:	f6 b0       	[SP + 0xc] = R6;
 100b87a:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 100b87c:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100b87e:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100b880:	00 e3 d4 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b884:	f7 b0       	[SP + 0xc] = R7;
 100b886:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 100b888:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100b88a:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100b88c:	00 e3 ce 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b890:	88 60       	R0 = 0x11 (X);		/*		R0=0x11( 17) */
 100b892:	f0 b0       	[SP + 0xc] = R0;
 100b894:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 100b896:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 100b898:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100b89a:	00 e3 c7 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b89e:	45 68       	P5 = 0x8 (X);		/*		P5=0x8(  8) */
 100b8a0:	f5 bc       	[SP + 0xc] = P5;
 100b8a2:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100b8a4:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 100b8a6:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100b8a8:	00 e3 c0 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b8ac:	f5 bc       	[SP + 0xc] = P5;
 100b8ae:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 100b8b0:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 100b8b2:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100b8b4:	00 e3 ba 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b8b8:	f7 b0       	[SP + 0xc] = R7;
 100b8ba:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 100b8bc:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b8be:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100b8c0:	00 e3 b4 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b8c4:	f6 b0       	[SP + 0xc] = R6;
 100b8c6:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100b8c8:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100b8ca:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 100b8cc:	00 e3 ae 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b8d0:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100b8d2:	f0 b0       	[SP + 0xc] = R0;
 100b8d4:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 100b8d6:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100b8d8:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 100b8da:	00 e3 a7 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b8de:	f5 b0       	[SP + 0xc] = R5;
 100b8e0:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 100b8e2:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 100b8e4:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 100b8e6:	00 e3 a1 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b8ea:	f4 b0       	[SP + 0xc] = R4;
 100b8ec:	69 60       	R1 = 0xd (X);		/*		R1=0xd( 13) */
 100b8ee:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100b8f0:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 100b8f2:	00 e3 9b 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b8f6:	f7 b0       	[SP + 0xc] = R7;
 100b8f8:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 100b8fa:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b8fc:	30 60       	R0 = 0x6 (X);		/*		R0=0x6(  6) */
 100b8fe:	00 e3 95 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b902:	f4 b0       	[SP + 0xc] = R4;
 100b904:	71 60       	R1 = 0xe (X);		/*		R1=0xe( 14) */
 100b906:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100b908:	30 60       	R0 = 0x6 (X);		/*		R0=0x6(  6) */
 100b90a:	00 e3 8f 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b90e:	f7 b0       	[SP + 0xc] = R7;
 100b910:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100b912:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b914:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 100b916:	00 e3 89 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b91a:	f4 bc       	[SP + 0xc] = P4;
 100b91c:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 100b91e:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 100b920:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 100b922:	00 e3 83 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b926:	f6 b0       	[SP + 0xc] = R6;
 100b928:	41 60       	R1 = 0x8 (X);		/*		R1=0x8(  8) */
 100b92a:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100b92c:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 100b92e:	00 e3 7d 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b932:	f8 60       	R0 = 0x1f (X);		/*		R0=0x1f( 31) */
 100b934:	f0 b0       	[SP + 0xc] = R0;
 100b936:	59 60       	R1 = 0xb (X);		/*		R1=0xb( 11) */
 100b938:	2a 60       	R2 = 0x5 (X);		/*		R2=0x5(  5) */
 100b93a:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 100b93c:	00 e3 76 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b940:	f7 b0       	[SP + 0xc] = R7;
 100b942:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100b944:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 100b946:	48 60       	R0 = 0x9 (X);		/*		R0=0x9(  9) */
 100b948:	00 e3 70 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b94c:	f7 b0       	[SP + 0xc] = R7;
 100b94e:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 100b950:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b952:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 100b954:	00 e3 6a 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b958:	f7 b0       	[SP + 0xc] = R7;
 100b95a:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 100b95c:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b95e:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 100b960:	00 e3 64 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b964:	f6 b0       	[SP + 0xc] = R6;
 100b966:	79 60       	R1 = 0xf (X);		/*		R1=0xf( 15) */
 100b968:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b96a:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 100b96c:	00 e3 5e 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b970:	f6 b0       	[SP + 0xc] = R6;
 100b972:	79 60       	R1 = 0xf (X);		/*		R1=0xf( 15) */
 100b974:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b976:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 100b978:	00 e3 58 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b97c:	f6 b0       	[SP + 0xc] = R6;
 100b97e:	59 60       	R1 = 0xb (X);		/*		R1=0xb( 11) */
 100b980:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b982:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 100b984:	00 e3 52 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b988:	f6 b0       	[SP + 0xc] = R6;
 100b98a:	61 60       	R1 = 0xc (X);		/*		R1=0xc( 12) */
 100b98c:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b98e:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 100b990:	00 e3 4c 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b994:	f7 b0       	[SP + 0xc] = R7;
 100b996:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 100b998:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100b99a:	48 60       	R0 = 0x9 (X);		/*		R0=0x9(  9) */
 100b99c:	00 e3 46 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b9a0:	f6 b0       	[SP + 0xc] = R6;
 100b9a2:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 100b9a4:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b9a6:	48 60       	R0 = 0x9 (X);		/*		R0=0x9(  9) */
 100b9a8:	00 e3 40 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b9ac:	f6 b0       	[SP + 0xc] = R6;
 100b9ae:	48 60       	R0 = 0x9 (X);		/*		R0=0x9(  9) */
 100b9b0:	39 60       	R1 = 0x7 (X);		/*		R1=0x7(  7) */
 100b9b2:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b9b4:	00 e3 3a 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b9b8:	01 e8 00 00 	UNLINK;
 100b9bc:	a4 05       	(R7:4, P5:4) = [SP++];
 100b9be:	10 00       	RTS;

0100b9c0 <_RF_trim_iq_all>:
 100b9c0:	e3 05       	[--SP] = (R7:4, P5:3);
 100b9c2:	00 e8 0a 00 	LINK 0x28;		/* (40) */
 100b9c6:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 100b9c8:	f7 b0       	[SP + 0xc] = R7;
 100b9ca:	79 60       	R1 = 0xf (X);		/*		R1=0xf( 15) */
 100b9cc:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b9ce:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 100b9d0:	00 e3 2c 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b9d4:	f7 b0       	[SP + 0xc] = R7;
 100b9d6:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100b9d8:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b9da:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100b9dc:	00 e3 26 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b9e0:	f7 b0       	[SP + 0xc] = R7;
 100b9e2:	51 60       	R1 = 0xa (X);		/*		R1=0xa( 10) */
 100b9e4:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100b9e6:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100b9e8:	00 e3 20 11 	CALL 0x100dc28 <_spi_wr_rg>;
 100b9ec:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefc00 */
 100b9f0:	0a e1 10 fc 	P2.L = 0xfc10;		/* (-1008)	P2=0xefc10 */
 100b9f4:	10 91       	R0 = [P2];
 100b9f6:	70 4d       	R0 >>>= 0xe;
 100b9f8:	70 4f       	R0 <<= 0xe;
 100b9fa:	10 93       	[P2] = R0;
 100b9fc:	f9 63       	R1 = -0x1 (X);		/*		R1=0xffffffff( -1) */
 100b9fe:	10 91       	R0 = [P2];
 100ba00:	41 e1 00 c0 	R1.H = 0xc000;		/* (-16384)	R1=0xc000ffff(-1073676289) */
 100ba04:	08 54       	R0 = R0 & R1;
 100ba06:	10 93       	[P2] = R0;
 100ba08:	22 6c       	P2 += 0x4;		/* (  4) */
 100ba0a:	10 91       	R0 = [P2];
 100ba0c:	70 4d       	R0 >>>= 0xe;
 100ba0e:	70 4f       	R0 <<= 0xe;
 100ba10:	10 93       	[P2] = R0;
 100ba12:	10 91       	R0 = [P2];
 100ba14:	48 54       	R1 = R0 & R1;
 100ba16:	46 e1 00 01 	R6.H = 0x100;		/* (256)	R6=0x1000000 <_START>(16777216) */
 100ba1a:	11 93       	[P2] = R1;
 100ba1c:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100ba1e:	06 e1 74 bc 	R6.L = 0xbc74;		/* (-17292)	R6=0x100bc74 <_CSWTCH.9>(16825460) */
 100ba22:	02 20       	JUMP.S 0x100ba26 <_RF_trim_iq_all+0x66>;
 100ba24:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100ba26:	7f 43       	R7 = R7.B (Z);
 100ba28:	59 60       	R1 = 0xb (X);		/*		R1=0xb( 11) */
 100ba2a:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100ba2c:	f7 b0       	[SP + 0xc] = R7;
 100ba2e:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100ba30:	00 e3 fc 10 	CALL 0x100dc28 <_spi_wr_rg>;
 100ba34:	20 e1 e8 03 	R0 = 0x3e8 (X);		/*		R0=0x3e8(1000) */
 100ba38:	00 e3 c2 15 	CALL 0x100e5bc <_delay>;
 100ba3c:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100ba3e:	00 e3 9d 10 	CALL 0x100db78 <_spi_rd>;
 100ba42:	78 48       	CC = !BITTST (R0, 0xf);		/* bit 15 */
 100ba44:	07 18       	IF CC JUMP 0x100ba52 <_RF_trim_iq_all+0x92>;
 100ba46:	3f 0e       	CC = R7 <= 0x7 (IU);
 100ba48:	ee 17       	IF !CC JUMP 0x100ba24 <_RF_trim_iq_all+0x64> (BP);
 100ba4a:	fe 51       	R7 = R6 + R7;
 100ba4c:	17 32       	P2 = R7;
 100ba4e:	57 99       	R7 = B[P2] (X);
 100ba50:	eb 2f       	JUMP.S 0x100ba26 <_RF_trim_iq_all+0x66>;
 100ba52:	4c e1 0e 00 	P4.H = 0xe;		/* ( 14)	P4=0xe000f */
 100ba56:	fa 63       	R2 = -0x1 (X);		/*		R2=0xffffffff( -1) */
 100ba58:	4d e1 0e 00 	P5.H = 0xe;		/* ( 14)	P5=0xe0008 */
 100ba5c:	01 68       	P1 = 0x0 (X);		/*		P1=0x0(  0) */
 100ba5e:	02 68       	P2 = 0x0 (X);		/*		P2=0x0(  0) */
 100ba60:	05 60       	R5 = 0x0 (X);		/*		R5=0x0(  0) */
 100ba62:	0c e1 10 fc 	P4.L = 0xfc10;		/* (-1008)	P4=0xefc10 */
 100ba66:	42 e1 00 c0 	R2.H = 0xc000;		/* (-16384)	R2=0xc000ffff(-1073676289) */
 100ba6a:	0d e1 14 fc 	P5.L = 0xfc14;		/* (-1004)	P5=0xefc14 */
 100ba6e:	ab 42       	R3 = R5.L (X);
 100ba70:	20 91       	R0 = [P4];
 100ba72:	70 4d       	R0 >>>= 0xe;
 100ba74:	70 4f       	R0 <<= 0xe;
 100ba76:	20 93       	[P4] = R0;
 100ba78:	20 91       	R0 = [P4];
 100ba7a:	10 54       	R0 = R0 & R2;
 100ba7c:	20 93       	[P4] = R0;
 100ba7e:	28 91       	R0 = [P5];
 100ba80:	70 4d       	R0 >>>= 0xe;
 100ba82:	70 4f       	R0 <<= 0xe;
 100ba84:	28 93       	[P5] = R0;
 100ba86:	28 91       	R0 = [P5];
 100ba88:	10 54       	R0 = R0 & R2;
 100ba8a:	28 93       	[P5] = R0;
 100ba8c:	03 0c       	CC = R3 == 0x0;
 100ba8e:	27 e1 30 f8 	R7 = -0x7d0 (X);		/*		R7=0xfffff830(-2000) */
 100ba92:	00 02       	R0 = CC;
 100ba94:	24 e1 d0 07 	R4 = 0x7d0 (X);		/*		R4=0x7d0(2000) */
 100ba98:	0f 30       	R1 = R7;
 100ba9a:	0e 60       	R6 = 0x1 (X);		/*		R6=0x1(  1) */
 100ba9c:	b8 e6 ff ff 	B[FP + -0x1] = R0;
 100baa0:	1f 32       	P3 = R7;
 100baa2:	b8 e4 ff ff 	R0 = B[FP + -0x1] (Z);
 100baa6:	08 02       	CC = R0;
 100baa8:	0b 14       	IF !CC JUMP 0x100babe <_RF_trim_iq_all+0xfe> (BP);
 100baaa:	20 e1 ff 3f 	R0 = 0x3fff (X);		/*		R0=0x3fff(16383) */
 100baae:	07 54       	R0 = R7 & R0;
 100bab0:	00 32       	P0 = R0;
 100bab2:	2b 91       	R3 = [P5];
 100bab4:	82 c6 93 01 	R0 = R3 >>> 0xe;
 100bab8:	70 4f       	R0 <<= 0xe;
 100baba:	58 30       	R3 = P0;
 100babc:	07 20       	JUMP.S 0x100baca <_RF_trim_iq_all+0x10a>;
 100babe:	23 e1 ff 3f 	R3 = 0x3fff (X);		/*		R3=0x3fff(16383) */
 100bac2:	28 91       	R0 = [P5];
 100bac4:	df 54       	R3 = R7 & R3;
 100bac6:	83 4f       	R3 <<= 0x10;
 100bac8:	10 54       	R0 = R0 & R2;
 100baca:	03 56       	R0 = R3 | R0;
 100bacc:	28 93       	[P5] = R0;
 100bace:	d1 bb       	[FP -0xc] = R1;
 100bad0:	b2 bb       	[FP -0x14] = R2;
 100bad2:	e9 bb       	[FP -0x8] = P1;
 100bad4:	ca bb       	[FP -0x10] = P2;
 100bad6:	20 e1 e8 03 	R0 = 0x3e8 (X);		/*		R0=0x3e8(1000) */
 100bada:	00 e3 71 15 	CALL 0x100e5bc <_delay>;
 100bade:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100bae0:	00 e3 4c 10 	CALL 0x100db78 <_spi_rd>;
 100bae4:	78 48       	CC = !BITTST (R0, 0xf);		/* bit 15 */
 100bae6:	b6 42       	R6 = R6.L (X);
 100bae8:	d1 b9       	R1 = [FP -0xc];
 100baea:	b2 b9       	R2 = [FP -0x14];
 100baec:	e9 b9       	P1 = [FP -0x8];
 100baee:	ca b9       	P2 = [FP -0x10];
 100baf0:	0a 1c       	IF CC JUMP 0x100bb04 <_RF_trim_iq_all+0x144> (BP);
 100baf2:	06 0c       	CC = R6 == 0x0;
 100baf4:	11 14       	IF !CC JUMP 0x100bb16 <_RF_trim_iq_all+0x156> (BP);
 100baf6:	43 30       	R0 = P3;
 100baf8:	86 42       	R6 = R0.L (X);
 100bafa:	88 42       	R0 = R1.L (X);
 100bafc:	06 09       	CC = R6 <= R0;
 100bafe:	0e 60       	R6 = 0x1 (X);		/*		R6=0x1(  1) */
 100bb00:	4b 06       	IF !CC R1 = P3;
 100bb02:	0d 20       	JUMP.S 0x100bb1c <_RF_trim_iq_all+0x15c>;
 100bb04:	0e 0c       	CC = R6 == 0x1;
 100bb06:	0a 14       	IF !CC JUMP 0x100bb1a <_RF_trim_iq_all+0x15a> (BP);
 100bb08:	5b 30       	R3 = P3;
 100bb0a:	9e 42       	R6 = R3.L (X);
 100bb0c:	a0 42       	R0 = R4.L (X);
 100bb0e:	86 08       	CC = R6 < R0;
 100bb10:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100bb12:	63 07       	IF CC R4 = P3;
 100bb14:	04 20       	JUMP.S 0x100bb1c <_RF_trim_iq_all+0x15c>;
 100bb16:	0e 60       	R6 = 0x1 (X);		/*		R6=0x1(  1) */
 100bb18:	02 20       	JUMP.S 0x100bb1c <_RF_trim_iq_all+0x15c>;
 100bb1a:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100bb1c:	57 64       	R7 += 0xa;		/* ( 10) */
 100bb1e:	20 e1 da 07 	R0 = 0x7da (X);		/*		R0=0x7da(2010) */
 100bb22:	07 08       	CC = R7 == R0;
 100bb24:	be 17       	IF !CC JUMP 0x100baa0 <_RF_trim_iq_all+0xe0> (BP);
 100bb26:	a8 42       	R0 = R5.L (X);
 100bb28:	00 0c       	CC = R0 == 0x0;
 100bb2a:	89 42       	R1 = R1.L (X);
 100bb2c:	a4 42       	R4 = R4.L (X);
 100bb2e:	08 14       	IF !CC JUMP 0x100bb3e <_RF_trim_iq_all+0x17e> (BP);
 100bb30:	4c 50       	R1 = R4 + R1;
 100bb32:	82 c6 09 89 	R4 = R1 >> 0x1f;
 100bb36:	4c 50       	R1 = R4 + R1;
 100bb38:	01 32       	P0 = R1;
 100bb3a:	02 45       	P2 = P0 >> 0x1;
 100bb3c:	07 20       	JUMP.S 0x100bb4a <_RF_trim_iq_all+0x18a>;
 100bb3e:	4c 50       	R1 = R4 + R1;
 100bb40:	82 c6 09 89 	R4 = R1 >> 0x1f;
 100bb44:	4c 50       	R1 = R4 + R1;
 100bb46:	01 32       	P0 = R1;
 100bb48:	01 45       	P1 = P0 >> 0x1;
 100bb4a:	0d 64       	R5 += 0x1;		/* (  1) */
 100bb4c:	a8 42       	R0 = R5.L (X);
 100bb4e:	10 0c       	CC = R0 == 0x2;
 100bb50:	8f 17       	IF !CC JUMP 0x100ba6e <_RF_trim_iq_all+0xae> (BP);
 100bb52:	48 e1 0e 00 	P0.H = 0xe;		/* ( 14)	P0=0xefc18 */
 100bb56:	08 e1 10 fc 	P0.L = 0xfc10;		/* (-1008)	P0=0xefc10 */
 100bb5a:	00 91       	R0 = [P0];
 100bb5c:	70 4d       	R0 >>>= 0xe;
 100bb5e:	70 4f       	R0 <<= 0xe;
 100bb60:	60 4a       	BITSET (R0, 0xc);		/* bit 12 */
 100bb62:	00 93       	[P0] = R0;
 100bb64:	f9 63       	R1 = -0x1 (X);		/*		R1=0xffffffff( -1) */
 100bb66:	00 91       	R0 = [P0];
 100bb68:	41 e1 00 c0 	R1.H = 0xc000;		/* (-16384)	R1=0xc000ffff(-1073676289) */
 100bb6c:	08 54       	R0 = R0 & R1;
 100bb6e:	e0 4a       	BITSET (R0, 0x1c);		/* bit 28 */
 100bb70:	00 93       	[P0] = R0;
 100bb72:	20 6c       	P0 += 0x4;		/* (  4) */
 100bb74:	52 30       	R2 = P2;
 100bb76:	00 91       	R0 = [P0];
 100bb78:	93 42       	R3 = R2.L (X);
 100bb7a:	22 e1 ff 3f 	R2 = 0x3fff (X);		/*		R2=0x3fff(16383) */
 100bb7e:	70 4d       	R0 >>>= 0xe;
 100bb80:	d3 54       	R3 = R3 & R2;
 100bb82:	70 4f       	R0 <<= 0xe;
 100bb84:	03 56       	R0 = R3 | R0;
 100bb86:	00 93       	[P0] = R0;
 100bb88:	59 30       	R3 = P1;
 100bb8a:	00 91       	R0 = [P0];
 100bb8c:	9a 54       	R2 = R2 & R3;
 100bb8e:	82 4f       	R2 <<= 0x10;
 100bb90:	48 54       	R1 = R0 & R1;
 100bb92:	4a 56       	R1 = R2 | R1;
 100bb94:	01 93       	[P0] = R1;
 100bb96:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100bb98:	f7 b0       	[SP + 0xc] = R7;
 100bb9a:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100bb9c:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100bb9e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100bba0:	00 e3 44 10 	CALL 0x100dc28 <_spi_wr_rg>;
 100bba4:	f7 b0       	[SP + 0xc] = R7;
 100bba6:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100bba8:	51 60       	R1 = 0xa (X);		/*		R1=0xa( 10) */
 100bbaa:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100bbac:	00 e3 3e 10 	CALL 0x100dc28 <_spi_wr_rg>;
 100bbb0:	01 e8 00 00 	UNLINK;
 100bbb4:	a3 05       	(R7:4, P5:3) = [SP++];
 100bbb6:	10 00       	RTS;

0100bbb8 <_RF_init>:
 100bbb8:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe0000 */
 100bbbc:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100bbc0:	0a e1 68 fc 	P2.L = 0xfc68;		/* (-920)	P2=0xefc68 */
 100bbc4:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100bbc6:	10 93       	[P2] = R0;
 100bbc8:	ff e3 40 f8 	CALL 0x100ac48 <_bt_analog_init>;
 100bbcc:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100bbce:	ff e3 65 fa 	CALL 0x100b098 <_baseband_analog>;
 100bbd2:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x7fc68 */
 100bbd6:	0a e1 40 81 	P2.L = 0x8140;		/* (-32448)	P2=0x78140 */
 100bbda:	50 99       	R0 = B[P2] (X);
 100bbdc:	10 4a       	BITSET (R0, 0x2);		/* bit  2 */
 100bbde:	10 9b       	B[P2] = R0;
 100bbe0:	50 99       	R0 = B[P2] (X);
 100bbe2:	08 4a       	BITSET (R0, 0x1);		/* bit  1 */
 100bbe4:	10 9b       	B[P2] = R0;
 100bbe6:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe8140 */
 100bbea:	20 e1 ff 00 	R0 = 0xff (X);		/*		R0=0xff(255) */
 100bbee:	0a e1 f8 fc 	P2.L = 0xfcf8;		/* (-776)	P2=0xefcf8 */
 100bbf2:	10 93       	[P2] = R0;
 100bbf4:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xefcf8 */
 100bbf8:	0a e1 08 80 	P2.L = 0x8008;		/* (-32760)	P2=0xe8008 */
 100bbfc:	10 91       	R0 = [P2];
 100bbfe:	50 4d       	R0 >>>= 0xa;
 100bc00:	21 e1 96 00 	R1 = 0x96 (X);		/*		R1=0x96(150) */
 100bc04:	50 4f       	R0 <<= 0xa;
 100bc06:	08 56       	R0 = R0 | R1;
 100bc08:	10 93       	[P2] = R0;
 100bc0a:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100bc0c:	11 91       	R1 = [P2];
 100bc0e:	00 e1 ff 0f 	R0.L = 0xfff;		/* (4095)	R0=0xffff0fff(-61441) */
 100bc12:	01 54       	R0 = R1 & R0;
 100bc14:	81 e1 00 c0 	R1 = 0xc000 (Z);		/*		R1=0xc000(49152) */
 100bc18:	08 56       	R0 = R0 | R1;
 100bc1a:	10 93       	[P2] = R0;
 100bc1c:	22 6c       	P2 += 0x4;		/* (  4) */
 100bc1e:	10 91       	R0 = [P2];
 100bc20:	50 4d       	R0 >>>= 0xa;
 100bc22:	21 e1 91 00 	R1 = 0x91 (X);		/*		R1=0x91(145) */
 100bc26:	50 4f       	R0 <<= 0xa;
 100bc28:	08 56       	R0 = R0 | R1;
 100bc2a:	10 93       	[P2] = R0;
 100bc2c:	22 6c       	P2 += 0x4;		/* (  4) */
 100bc2e:	10 91       	R0 = [P2];
 100bc30:	40 4d       	R0 >>>= 0x8;
 100bc32:	91 61       	R1 = 0x32 (X);		/*		R1=0x32( 50) */
 100bc34:	40 4f       	R0 <<= 0x8;
 100bc36:	08 56       	R0 = R0 | R1;
 100bc38:	10 93       	[P2] = R0;
 100bc3a:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100bc3c:	11 91       	R1 = [P2];
 100bc3e:	00 e1 ff 00 	R0.L = 0xff;		/* (255)	R0=0xffff00ff(-65281) */
 100bc42:	01 54       	R0 = R1 & R0;
 100bc44:	21 e1 00 3c 	R1 = 0x3c00 (X);		/*		R1=0x3c00(15360) */
 100bc48:	08 56       	R0 = R0 | R1;
 100bc4a:	10 93       	[P2] = R0;
 100bc4c:	22 6c       	P2 += 0x4;		/* (  4) */
 100bc4e:	10 91       	R0 = [P2];
 100bc50:	40 4d       	R0 >>>= 0x8;
 100bc52:	f1 60       	R1 = 0x1e (X);		/*		R1=0x1e( 30) */
 100bc54:	40 4f       	R0 <<= 0x8;
 100bc56:	08 56       	R0 = R0 | R1;
 100bc58:	10 93       	[P2] = R0;
 100bc5a:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100bc5c:	62 6f       	P2 += -0x14;		/* (-20) */
 100bc5e:	10 93       	[P2] = R0;
 100bc60:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100bc62:	22 6c       	P2 += 0x4;		/* (  4) */
 100bc64:	10 93       	[P2] = R0;
 100bc66:	ff e3 a9 fc 	CALL 0x100b5b8 <_RF_mdm_init>;
 100bc6a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100bc6c:	01 e8 00 00 	UNLINK;
 100bc70:	ff e2 5a fc 	JUMP.L 0x100b524 <_fsk_offset>;

0100bc74 <_CSWTCH.9>:
 100bc74:	04 05       	ILLEGAL;
 100bc76:	06 07       	IF CC R0 = R6;
 100bc78:	02 03       	CC = AC0_COPY;
 100bc7a:	01 00       	ILLEGAL;

0100bc7c <_ble_hw_enable>:
 100bc7c:	42 e1 00 00 	R2.H = 0x0;		/* (  0)	R2=0x1(  1) */
 100bc80:	02 e1 38 27 	R2.L = 0x2738;		/* (10040)	R2=0x2738(10040) */
 100bc84:	10 52       	R0 = R0 - R2;
 100bc86:	42 e1 a8 e1 	R2.H = 0xe1a8;		/* (-7768)	R2=0xe1a82738(-509073608) */
 100bc8a:	02 e1 37 c5 	R2.L = 0xc537;		/* (-15049)	R2=0xe1a8c537(-509033161) */
 100bc8e:	10 4d       	R0 >>>= 0x2;
 100bc90:	d0 40       	R0 *= R2;
 100bc92:	78 05       	[--SP] = (R7:7);
 100bc94:	10 30       	R2 = R0;
 100bc96:	0b 60       	R3 = 0x1 (X);		/*		R3=0x1(  1) */
 100bc98:	42 64       	R2 += 0x8;		/* (  8) */
 100bc9a:	3b 30       	R7 = R3;
 100bc9c:	97 40       	R7 <<= R2;
 100bc9e:	83 40       	R3 <<= R0;
 100bca0:	17 30       	R2 = R7;
 100bca2:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe8008 */
 100bca6:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100bcaa:	df 57       	R7 = R7 | R3;
 100bcac:	0a e1 24 80 	P2.L = 0x8024;		/* (-32732)	P2=0xe8024 */
 100bcb0:	17 93       	[P2] = R7;
 100bcb2:	79 4a       	BITSET (R1, 0xf);		/* bit 15 */
 100bcb4:	c2 6f       	P2 += -0x8;		/* ( -8) */
 100bcb6:	11 93       	[P2] = R1;
 100bcb8:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 100bcba:	40 4f       	R0 <<= 0x8;
 100bcbc:	08 56       	R0 = R0 | R1;
 100bcbe:	e2 6f       	P2 += -0x4;		/* ( -4) */
 100bcc0:	10 93       	[P2] = R0;
 100bcc2:	42 6c       	P2 += 0x8;		/* (  8) */
 100bcc4:	10 91       	R0 = [P2];
 100bcc6:	d9 43       	R1 =~ R3;
 100bcc8:	01 54       	R0 = R1 & R0;
 100bcca:	d8 56       	R3 = R0 | R3;
 100bccc:	13 93       	[P2] = R3;
 100bcce:	10 91       	R0 = [P2];
 100bcd0:	d1 43       	R1 =~ R2;
 100bcd2:	01 54       	R0 = R1 & R0;
 100bcd4:	90 56       	R2 = R0 | R2;
 100bcd6:	12 93       	[P2] = R2;
 100bcd8:	01 e8 00 00 	UNLINK;
 100bcdc:	38 05       	(R7:7) = [SP++];
 100bcde:	10 00       	RTS;

0100bce0 <_ble_hw_disable>:
 100bce0:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x5(  5) */
 100bce4:	01 e1 38 27 	R1.L = 0x2738;		/* (10040)	R1=0x2738(10040) */
 100bce8:	08 52       	R0 = R0 - R1;
 100bcea:	41 e1 a8 e1 	R1.H = 0xe1a8;		/* (-7768)	R1=0xe1a82738(-509073608) */
 100bcee:	01 e1 37 c5 	R1.L = 0xc537;		/* (-15049)	R1=0xe1a8c537(-509033161) */
 100bcf2:	10 4d       	R0 >>>= 0x2;
 100bcf4:	c8 40       	R0 *= R1;
 100bcf6:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe8024 */
 100bcfa:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100bcfe:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100bd00:	0a e1 1c 80 	P2.L = 0x801c;		/* (-32740)	P2=0xe801c */
 100bd04:	11 93       	[P2] = R1;
 100bd06:	82 c6 40 84 	R2 = R0 << 0x8;
 100bd0a:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 100bd0c:	4a 56       	R1 = R2 | R1;
 100bd0e:	e2 6f       	P2 += -0x4;		/* ( -4) */
 100bd10:	11 93       	[P2] = R1;
 100bd12:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100bd14:	11 30       	R2 = R1;
 100bd16:	42 6c       	P2 += 0x8;		/* (  8) */
 100bd18:	82 40       	R2 <<= R0;
 100bd1a:	13 91       	R3 = [P2];
 100bd1c:	d2 43       	R2 =~ R2;
 100bd1e:	9a 54       	R2 = R2 & R3;
 100bd20:	40 64       	R0 += 0x8;		/* (  8) */
 100bd22:	12 93       	[P2] = R2;
 100bd24:	81 40       	R1 <<= R0;
 100bd26:	12 91       	R2 = [P2];
 100bd28:	c9 43       	R1 =~ R1;
 100bd2a:	51 54       	R1 = R1 & R2;
 100bd2c:	11 93       	[P2] = R1;
 100bd2e:	01 e8 00 00 	UNLINK;
 100bd32:	10 00       	RTS;

0100bd34 <___set_interval>:
 100bd34:	70 05       	[--SP] = (R7:6);
 100bd36:	30 30       	R6 = R0;
 100bd38:	01 30       	R0 = R1;
 100bd3a:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100bd3e:	82 c6 7a 8e 	R7 = R2 << 0xf;
 100bd42:	21 e1 71 02 	R1 = 0x271 (X);		/*		R1=0x271(625) */
 100bd46:	ff e3 0a a2 	CALL 0x100015a <___divsi3>;
 100bd4a:	c7 57       	R7 = R7 | R0;
 100bd4c:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x0 <data_addr>(  0) */
 100bd50:	00 e1 38 27 	R0.L = 0x2738;		/* (10040)	R0=0x2738(10040) */
 100bd54:	86 53       	R6 = R6 - R0;
 100bd56:	40 e1 a8 e1 	R0.H = 0xe1a8;		/* (-7768)	R0=0xe1a82738(-509073608) */
 100bd5a:	00 e1 37 c5 	R0.L = 0xc537;		/* (-15049)	R0=0xe1a8c537(-509033161) */
 100bd5e:	16 4d       	R6 >>>= 0x2;
 100bd60:	c6 40       	R6 *= R0;
 100bd62:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe801c */
 100bd66:	0a e1 1c 80 	P2.L = 0x801c;		/* (-32740)	P2=0xe801c */
 100bd6a:	17 93       	[P2] = R7;
 100bd6c:	46 4f       	R6 <<= 0x8;
 100bd6e:	20 e1 05 10 	R0 = 0x1005 (X);		/*		R0=0x1005(4101) */
 100bd72:	86 57       	R6 = R6 | R0;
 100bd74:	e2 6f       	P2 += -0x4;		/* ( -4) */
 100bd76:	16 93       	[P2] = R6;
 100bd78:	01 e8 00 00 	UNLINK;
 100bd7c:	30 05       	(R7:6) = [SP++];
 100bd7e:	10 00       	RTS;

0100bd80 <___set_winoffset>:
 100bd80:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe801c */
 100bd84:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100bd88:	79 4a       	BITSET (R1, 0xf);		/* bit 15 */
 100bd8a:	0a e1 1c 80 	P2.L = 0x801c;		/* (-32740)	P2=0xe801c */
 100bd8e:	11 93       	[P2] = R1;
 100bd90:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0x271(625) */
 100bd94:	01 e1 38 27 	R1.L = 0x2738;		/* (10040)	R1=0x2738(10040) */
 100bd98:	08 52       	R0 = R0 - R1;
 100bd9a:	41 e1 a8 e1 	R1.H = 0xe1a8;		/* (-7768)	R1=0xe1a82738(-509073608) */
 100bd9e:	01 e1 37 c5 	R1.L = 0xc537;		/* (-15049)	R1=0xe1a8c537(-509033161) */
 100bda2:	10 4d       	R0 >>>= 0x2;
 100bda4:	c8 40       	R0 *= R1;
 100bda6:	21 e1 05 40 	R1 = 0x4005 (X);		/*		R1=0x4005(16389) */
 100bdaa:	40 4f       	R0 <<= 0x8;
 100bdac:	08 56       	R0 = R0 | R1;
 100bdae:	e2 6f       	P2 += -0x4;		/* ( -4) */
 100bdb0:	10 93       	[P2] = R0;
 100bdb2:	01 e8 00 00 	UNLINK;
 100bdb6:	10 00       	RTS;

0100bdb8 <___set_hw_state>:
 100bdb8:	10 32       	P2 = R0;
 100bdba:	01 30       	R0 = R1;
 100bdbc:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100bdc0:	5a 4f       	R2 <<= 0xb;
 100bdc2:	49 e1 0e 00 	P1.H = 0xe;		/* ( 14)	P1=0xe0000 */
 100bdc6:	50 e6 17 00 	W[P2 + 0x2e] = R0;
 100bdca:	78 a1       	R0 = [FP + 0x14];
 100bdcc:	91 e6 03 00 	B[P2 + 0x3] = R1;
 100bdd0:	82 56       	R2 = R2 | R0;
 100bdd2:	61 4f       	R1 <<= 0xc;
 100bdd4:	4a 56       	R1 = R2 | R1;
 100bdd6:	09 e1 1c 80 	P1.L = 0x801c;		/* (-32740)	P1=0xe801c */
 100bdda:	09 93       	[P1] = R1;
 100bddc:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x1005(4101) */
 100bde0:	4a 30       	R1 = P2;
 100bde2:	00 e1 38 27 	R0.L = 0x2738;		/* (10040)	R0=0x2738(10040) */
 100bde6:	01 52       	R0 = R1 - R0;
 100bde8:	41 e1 a8 e1 	R1.H = 0xe1a8;		/* (-7768)	R1=0xe1a84005(-509067259) */
 100bdec:	01 e1 37 c5 	R1.L = 0xc537;		/* (-15049)	R1=0xe1a8c537(-509033161) */
 100bdf0:	10 4d       	R0 >>>= 0x2;
 100bdf2:	c8 40       	R0 *= R1;
 100bdf4:	21 e1 05 20 	R1 = 0x2005 (X);		/*		R1=0x2005(8197) */
 100bdf8:	40 4f       	R0 <<= 0x8;
 100bdfa:	08 56       	R0 = R0 | R1;
 100bdfc:	e1 6f       	P1 += -0x4;		/* ( -4) */
 100bdfe:	08 93       	[P1] = R0;
 100be00:	01 e8 00 00 	UNLINK;
 100be04:	10 00       	RTS;
	...

0100be08 <___set_remote_addr>:
 100be08:	09 32       	P1 = R1;
 100be0a:	10 32       	P2 = R0;
 100be0c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100be10:	01 e8 00 00 	UNLINK;
 100be14:	88 e4 01 00 	R0 = B[P1 + 0x1] (Z);
 100be18:	09 99       	R1 = B[P1] (Z);
 100be1a:	40 4f       	R0 <<= 0x8;
 100be1c:	08 56       	R0 = R0 | R1;
 100be1e:	50 e6 41 00 	W[P2 + 0x82] = R0;
 100be22:	88 e4 03 00 	R0 = B[P1 + 0x3] (Z);
 100be26:	89 e4 02 00 	R1 = B[P1 + 0x2] (Z);
 100be2a:	40 4f       	R0 <<= 0x8;
 100be2c:	08 56       	R0 = R0 | R1;
 100be2e:	50 e6 42 00 	W[P2 + 0x84] = R0;
 100be32:	88 e4 05 00 	R0 = B[P1 + 0x5] (Z);
 100be36:	89 e4 04 00 	R1 = B[P1 + 0x4] (Z);
 100be3a:	40 4f       	R0 <<= 0x8;
 100be3c:	08 56       	R0 = R0 | R1;
 100be3e:	50 e6 43 00 	W[P2 + 0x86] = R0;
 100be42:	10 00       	RTS;

0100be44 <_le_hw_handler_register>:
 100be44:	10 32       	P2 = R0;
 100be46:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100be4a:	01 e8 00 00 	UNLINK;
 100be4e:	11 e6 85 00 	[P2 + 0x214] = R1;
 100be52:	12 e6 86 00 	[P2 + 0x218] = R2;
 100be56:	10 00       	RTS;

0100be58 <_le_hw_standby>:
 100be58:	10 32       	P2 = R0;
 100be5a:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100be5e:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100be60:	91 e6 03 00 	B[P2 + 0x3] = R1;
 100be64:	01 e8 00 00 	UNLINK;
 100be68:	ff e2 3c ff 	JUMP.L 0x100bce0 <_ble_hw_disable>;

0100be6c <_le_hw_close>:
 100be6c:	78 05       	[--SP] = (R7:7);
 100be6e:	38 30       	R7 = R0;
 100be70:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100be74:	ff e3 36 ff 	CALL 0x100bce0 <_ble_hw_disable>;
 100be78:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x801c */
 100be7c:	0a e1 28 27 	P2.L = 0x2728;		/* (10024)	P2=0x2728 <_ble_base> */
 100be80:	42 30       	R0 = P2;
 100be82:	80 64       	R0 += 0x10;		/* ( 16) */
 100be84:	c7 53       	R7 = R7 - R0;
 100be86:	40 e1 a8 e1 	R0.H = 0xe1a8;		/* (-7768)	R0=0xe1a82738(-509073608) */
 100be8a:	00 e1 37 c5 	R0.L = 0xc537;		/* (-15049)	R0=0xe1a8c537(-509033161) */
 100be8e:	17 4d       	R7 >>>= 0x2;
 100be90:	c7 40       	R7 *= R0;
 100be92:	0f 32       	P1 = R7;
 100be94:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100be96:	8a 5c       	P2 = P2 + (P1 << 0x1);
 100be98:	10 97       	W[P2] = R0;
 100be9a:	01 e8 00 00 	UNLINK;
 100be9e:	38 05       	(R7:7) = [SP++];
 100bea0:	10 00       	RTS;
	...

0100bea4 <___set_channel_map>:
 100bea4:	e3 05       	[--SP] = (R7:4, P5:3);
 100bea6:	28 32       	P5 = R0;
 100bea8:	00 e8 06 00 	LINK 0x18;		/* (24) */
 100beac:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100beae:	b8 e6 fc ff 	B[FP + -0x4] = R0;
 100beb2:	60 60       	R0 = 0xc (X);		/*		R0=0xc( 12) */
 100beb4:	b8 e6 fd ff 	B[FP + -0x3] = R0;
 100beb8:	21 32       	P4 = R1;
 100beba:	38 61       	R0 = 0x27 (X);		/*		R0=0x27( 39) */
 100bebc:	b8 e6 fe ff 	B[FP + -0x2] = R0;
 100bec0:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100bec2:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100bec4:	2b e1 51 00 	P3 = 0x51 (X);		/*		P3=0x51( 81) */
 100bec8:	3a 60       	R2 = 0x7 (X);		/*		R2=0x7(  7) */
 100beca:	24 e1 50 00 	R4 = 0x50 (X);		/*		R4=0x50( 80) */
 100bece:	21 e1 53 00 	R1 = 0x53 (X);		/*		R1=0x53( 83) */
 100bed2:	04 20       	JUMP.S 0x100beda <___set_channel_map+0x36>;
 100bed4:	58 60       	R0 = 0xb (X);		/*		R0=0xb( 11) */
 100bed6:	07 08       	CC = R7 == R0;
 100bed8:	99 07       	IF CC P3 = R1;
 100beda:	0f 32       	P1 = R7;
 100bedc:	e1 bb       	[FP -0x8] = R1;
 100bede:	d2 bb       	[FP -0xc] = R2;
 100bee0:	4b 5c       	P1 = P3 + (P1 << 0x1);
 100bee2:	69 30       	R5 = P1;
 100bee4:	41 30       	R0 = P1;
 100bee6:	ff e3 7b f5 	CALL 0x100a9dc <_get_pll_param_for_frq>;
 100beea:	40 43       	R0 = R0.B (Z);
 100beec:	82 c6 87 86 	R3 = R7 << 0x10;
 100bef0:	d2 b9       	R2 = [FP -0xc];
 100bef2:	40 4f       	R0 <<= 0x8;
 100bef4:	18 56       	R0 = R0 | R3;
 100bef6:	17 32       	P2 = R7;
 100bef8:	68 57       	R5 = R0 | R5;
 100befa:	82 c6 ef 01 	R0 = R7 >>> 0x3;
 100befe:	e1 b9       	R1 = [FP -0x8];
 100bf00:	08 32       	P1 = R0;
 100bf02:	d7 54       	R3 = R7 & R2;
 100bf04:	42 6d       	P2 += 0x28;		/* ( 40) */
 100bf06:	95 5e       	P2 = P5 + (P2 << 0x2);
 100bf08:	15 93       	[P2] = R5;
 100bf0a:	8c 5a       	P2 = P4 + P1;
 100bf0c:	10 99       	R0 = B[P2] (Z);
 100bf0e:	18 40       	R0 >>>= R3;
 100bf10:	00 48       	CC = !BITTST (R0, 0x0);		/* bit  0 */
 100bf12:	07 1c       	IF CC JUMP 0x100bf20 <___set_channel_map+0x7c> (BP);
 100bf14:	16 32       	P2 = R6;
 100bf16:	0c 32       	P1 = R4;
 100bf18:	0e 64       	R6 += 0x1;		/* (  1) */
 100bf1a:	ca 45       	P2 = (P2 + P1) << 0x2;
 100bf1c:	95 5a       	P2 = P5 + P2;
 100bf1e:	15 93       	[P2] = R5;
 100bf20:	0f 64       	R7 += 0x1;		/* (  1) */
 100bf22:	28 61       	R0 = 0x25 (X);		/*		R0=0x25( 37) */
 100bf24:	07 08       	CC = R7 == R0;
 100bf26:	d7 17       	IF !CC JUMP 0x100bed4 <___set_channel_map+0x30> (BP);
 100bf28:	5f 32       	P3 = FP;
 100bf2a:	e3 6f       	P3 += -0x4;		/* ( -4) */
 100bf2c:	2f 61       	R7 = 0x25 (X);		/*		R7=0x25( 37) */
 100bf2e:	24 e1 4f 00 	R4 = 0x4f (X);		/*		R4=0x4f( 79) */
 100bf32:	21 e1 50 00 	R1 = 0x50 (X);		/*		R1=0x50( 80) */
 100bf36:	14 32       	P2 = R4;
 100bf38:	1d 98       	R5 = B[P3++] (Z);
 100bf3a:	0d 32       	P1 = R5;
 100bf3c:	e1 bb       	[FP -0x8] = R1;
 100bf3e:	4a 5c       	P1 = P2 + (P1 << 0x1);
 100bf40:	69 30       	R5 = P1;
 100bf42:	41 30       	R0 = P1;
 100bf44:	ff e3 4c f5 	CALL 0x100a9dc <_get_pll_param_for_frq>;
 100bf48:	17 32       	P2 = R7;
 100bf4a:	40 43       	R0 = R0.B (Z);
 100bf4c:	82 c6 87 84 	R2 = R7 << 0x10;
 100bf50:	e1 b9       	R1 = [FP -0x8];
 100bf52:	40 4f       	R0 <<= 0x8;
 100bf54:	02 56       	R0 = R2 | R0;
 100bf56:	42 6d       	P2 += 0x28;		/* ( 40) */
 100bf58:	68 57       	R5 = R0 | R5;
 100bf5a:	95 5e       	P2 = P5 + (P2 << 0x2);
 100bf5c:	15 93       	[P2] = R5;
 100bf5e:	17 32       	P2 = R7;
 100bf60:	09 32       	P1 = R1;
 100bf62:	0f 64       	R7 += 0x1;		/* (  1) */
 100bf64:	40 61       	R0 = 0x28 (X);		/*		R0=0x28( 40) */
 100bf66:	07 08       	CC = R7 == R0;
 100bf68:	ca 45       	P2 = (P2 + P1) << 0x2;
 100bf6a:	95 5a       	P2 = P5 + P2;
 100bf6c:	15 93       	[P2] = R5;
 100bf6e:	e4 17       	IF !CC JUMP 0x100bf36 <___set_channel_map+0x92> (BP);
 100bf70:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 100bf74:	21 99       	R1 = B[P4] (Z);
 100bf76:	40 4f       	R0 <<= 0x8;
 100bf78:	08 56       	R0 = R0 | R1;
 100bf7a:	68 e6 2a 00 	W[P5 + 0x54] = R0;
 100bf7e:	a0 e4 03 00 	R0 = B[P4 + 0x3] (Z);
 100bf82:	a1 e4 02 00 	R1 = B[P4 + 0x2] (Z);
 100bf86:	40 4f       	R0 <<= 0x8;
 100bf88:	08 56       	R0 = R0 | R1;
 100bf8a:	68 e6 2b 00 	W[P5 + 0x56] = R0;
 100bf8e:	a1 e4 04 00 	R1 = B[P4 + 0x4] (Z);
 100bf92:	f8 60       	R0 = 0x1f (X);		/*		R0=0x1f( 31) */
 100bf94:	2e 4f       	R6 <<= 0x5;
 100bf96:	01 54       	R0 = R1 & R0;
 100bf98:	86 57       	R6 = R6 | R0;
 100bf9a:	6e e6 2c 00 	W[P5 + 0x58] = R6;
 100bf9e:	01 e8 00 00 	UNLINK;
 100bfa2:	a3 05       	(R7:4, P5:3) = [SP++];
 100bfa4:	10 00       	RTS;
	...

0100bfa8 <_le_hw_ioctrl>:
 100bfa8:	09 32       	P1 = R1;
 100bfaa:	eb 05       	[--SP] = (R7:5, P5:3);
 100bfac:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100bfb0:	57 32       	P2 = FP;
 100bfb2:	28 32       	P5 = R0;
 100bfb4:	ba b2       	[FP + 0x28] = R2;
 100bfb6:	42 6d       	P2 += 0x28;		/* ( 40) */
 100bfb8:	79 0e       	CC = P1 <= 0x7 (IU);
 100bfba:	23 15       	IF !CC JUMP 0x100c200 <_le_hw_ioctrl+0x258> (BP);
 100bfbc:	48 e1 00 01 	P0.H = 0x100;		/* (256)	P0=0x100fc10 */
 100bfc0:	08 e1 24 d0 	P0.L = 0xd024;		/* (-12252)	P0=0x100d024 */
 100bfc4:	48 5e       	P1 = P0 + (P1 << 0x2);
 100bfc6:	49 91       	P1 = [P1];
 100bfc8:	51 00       	JUMP (P1);
 100bfca:	29 e1 e3 01 	P1 = 0x1e3 (X);		/*		P1=0x1e3(483) */
 100bfce:	4d 5a       	P1 = P5 + P1;
 100bfd0:	41 30       	R0 = P1;
 100bfd2:	11 91       	R1 = [P2];
 100bfd4:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 100bfd6:	07 20       	JUMP.S 0x100bfe4 <_le_hw_ioctrl+0x3c>;
 100bfd8:	29 e1 eb 01 	P1 = 0x1eb (X);		/*		P1=0x1eb(491) */
 100bfdc:	4d 5a       	P1 = P5 + P1;
 100bfde:	41 30       	R0 = P1;
 100bfe0:	11 91       	R1 = [P2];
 100bfe2:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 100bfe4:	00 e3 90 1e 	CALL 0x100fd04 <_memcpy>;
 100bfe8:	0c 21       	JUMP.S 0x100c200 <_le_hw_ioctrl+0x258>;
 100bfea:	54 91       	P4 = [P2];
 100bfec:	48 64       	R0 += 0x9;		/* (  9) */
 100bfee:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 100bff0:	4c 30       	R1 = P4;
 100bff2:	00 e3 89 1e 	CALL 0x100fd04 <_memcpy>;
 100bff6:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 100bffa:	21 99       	R1 = B[P4] (Z);
 100bffc:	40 4f       	R0 <<= 0x8;
 100bffe:	08 50       	R0 = R0 + R1;
 100c000:	68 e6 44 00 	W[P5 + 0x88] = R0;
 100c004:	a0 e4 03 00 	R0 = B[P4 + 0x3] (Z);
 100c008:	a1 e4 02 00 	R1 = B[P4 + 0x2] (Z);
 100c00c:	40 4f       	R0 <<= 0x8;
 100c00e:	08 50       	R0 = R0 + R1;
 100c010:	68 e6 45 00 	W[P5 + 0x8a] = R0;
 100c014:	a0 e4 05 00 	R0 = B[P4 + 0x5] (Z);
 100c018:	a1 e4 04 00 	R1 = B[P4 + 0x4] (Z);
 100c01c:	40 4f       	R0 <<= 0x8;
 100c01e:	08 50       	R0 = R0 + R1;
 100c020:	68 e6 46 00 	W[P5 + 0x8c] = R0;
 100c024:	ee 20       	JUMP.S 0x100c200 <_le_hw_ioctrl+0x258>;
 100c026:	10 91       	R0 = [P2];
 100c028:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe2728 */
 100c02c:	0a e1 1c 80 	P2.L = 0x801c;		/* (-32740)	P2=0xe801c */
 100c030:	10 93       	[P2] = R0;
 100c032:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x1f( 31) */
 100c036:	4d 30       	R1 = P5;
 100c038:	00 e1 38 27 	R0.L = 0x2738;		/* (10040)	R0=0x2738(10040) */
 100c03c:	01 52       	R0 = R1 - R0;
 100c03e:	41 e1 a8 e1 	R1.H = 0xe1a8;		/* (-7768)	R1=0xe1a80050(-509083568) */
 100c042:	01 e1 37 c5 	R1.L = 0xc537;		/* (-15049)	R1=0xe1a8c537(-509033161) */
 100c046:	10 4d       	R0 >>>= 0x2;
 100c048:	c8 40       	R0 *= R1;
 100c04a:	21 e1 05 50 	R1 = 0x5005 (X);		/*		R1=0x5005(20485) */
 100c04e:	40 4f       	R0 <<= 0x8;
 100c050:	08 56       	R0 = R0 | R1;
 100c052:	e2 6f       	P2 += -0x4;		/* ( -4) */
 100c054:	10 93       	[P2] = R0;
 100c056:	d5 20       	JUMP.S 0x100c200 <_le_hw_ioctrl+0x258>;
 100c058:	10 91       	R0 = [P2];
 100c05a:	68 e6 24 00 	W[P5 + 0x48] = R0;
 100c05e:	80 4d       	R0 >>>= 0x10;
 100c060:	21 e1 00 32 	R1 = 0x3200 (X);		/*		R1=0x3200(12800) */
 100c064:	08 56       	R0 = R0 | R1;
 100c066:	68 e6 25 00 	W[P5 + 0x4a] = R0;
 100c06a:	cb 20       	JUMP.S 0x100c200 <_le_hw_ioctrl+0x258>;
 100c06c:	11 91       	R1 = [P2];
 100c06e:	ff e3 1b ff 	CALL 0x100bea4 <___set_channel_map>;
 100c072:	c7 20       	JUMP.S 0x100c200 <_le_hw_ioctrl+0x258>;
 100c074:	54 91       	P4 = [P2];
 100c076:	20 e1 00 80 	R0 = -0x8000 (X);		/*		R0=0xffff8000(-32768) */
 100c07a:	68 e6 14 00 	W[P5 + 0x28] = R0;
 100c07e:	68 e5 1a 00 	R0 = W[P5 + 0x34] (X);
 100c082:	08 4c       	BITCLR (R0, 0x1);		/* bit  1 */
 100c084:	68 e6 1a 00 	W[P5 + 0x34] = R0;
 100c088:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100c08a:	68 e6 1b 00 	W[P5 + 0x36] = R0;
 100c08e:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 100c092:	21 99       	R1 = B[P4] (Z);
 100c094:	40 4f       	R0 <<= 0x8;
 100c096:	08 56       	R0 = R0 | R1;
 100c098:	68 e6 18 00 	W[P5 + 0x30] = R0;
 100c09c:	a0 e4 03 00 	R0 = B[P4 + 0x3] (Z);
 100c0a0:	a1 e4 02 00 	R1 = B[P4 + 0x2] (Z);
 100c0a4:	40 4f       	R0 <<= 0x8;
 100c0a6:	08 56       	R0 = R0 | R1;
 100c0a8:	68 e6 19 00 	W[P5 + 0x32] = R0;
 100c0ac:	a0 e4 05 00 	R0 = B[P4 + 0x5] (Z);
 100c0b0:	a1 e4 04 00 	R1 = B[P4 + 0x4] (Z);
 100c0b4:	40 4f       	R0 <<= 0x8;
 100c0b6:	08 56       	R0 = R0 | R1;
 100c0b8:	46 e1 00 00 	R6.H = 0x0;		/* (  0)	R6=0x0 <data_addr>(  0) */
 100c0bc:	4d 30       	R1 = P5;
 100c0be:	06 e1 38 27 	R6.L = 0x2738;		/* (10040)	R6=0x2738(10040) */
 100c0c2:	b1 53       	R6 = R1 - R6;
 100c0c4:	41 e1 a8 e1 	R1.H = 0xe1a8;		/* (-7768)	R1=0xe1a83200(-509070848) */
 100c0c8:	47 e1 0e 00 	R7.H = 0xe;		/* ( 14)	R7=0xe0025(917541) */
 100c0cc:	01 e1 37 c5 	R1.L = 0xc537;		/* (-15049)	R1=0xe1a8c537(-509033161) */
 100c0d0:	16 4d       	R6 >>>= 0x2;
 100c0d2:	07 e1 18 80 	R7.L = 0x8018;		/* (-32744)	R7=0xe8018(950296) */
 100c0d6:	68 e6 35 00 	W[P5 + 0x6a] = R0;
 100c0da:	ce 40       	R6 *= R1;
 100c0dc:	17 32       	P2 = R7;
 100c0de:	a0 e4 06 00 	R0 = B[P4 + 0x6] (Z);
 100c0e2:	68 e6 36 00 	W[P5 + 0x6c] = R0;
 100c0e6:	4b e1 0e 00 	P3.H = 0xe;		/* ( 14)	P3=0xe0051 */
 100c0ea:	0b e1 1c 80 	P3.L = 0x801c;		/* (-32740)	P3=0xe801c */
 100c0ee:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100c0f0:	46 4f       	R6 <<= 0x8;
 100c0f2:	21 e1 05 30 	R1 = 0x3005 (X);		/*		R1=0x3005(12293) */
 100c0f6:	18 93       	[P3] = R0;
 100c0f8:	4e 56       	R1 = R6 | R1;
 100c0fa:	11 93       	[P2] = R1;
 100c0fc:	21 e1 05 50 	R1 = 0x5005 (X);		/*		R1=0x5005(20485) */
 100c100:	18 93       	[P3] = R0;
 100c102:	4e 56       	R1 = R6 | R1;
 100c104:	11 93       	[P2] = R1;
 100c106:	a9 e4 03 00 	R1 = B[P5 + 0x3] (Z);
 100c10a:	19 0c       	CC = R1 == 0x3;
 100c10c:	21 a6       	R1 = W[P4 + 0x10] (Z);
 100c10e:	18 14       	IF !CC JUMP 0x100c13e <_le_hw_ioctrl+0x196> (BP);
 100c110:	22 e1 05 40 	R2 = 0x4005 (X);		/*		R2=0x4005(16389) */
 100c114:	11 64       	R1 += 0x2;		/* (  2) */
 100c116:	18 93       	[P3] = R0;
 100c118:	96 56       	R2 = R6 | R2;
 100c11a:	09 4f       	R1 <<= 0x1;
 100c11c:	12 93       	[P2] = R2;
 100c11e:	79 4a       	BITSET (R1, 0xf);		/* bit 15 */
 100c120:	19 93       	[P3] = R1;
 100c122:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 100c124:	4e 56       	R1 = R6 | R1;
 100c126:	11 93       	[P2] = R1;
 100c128:	f0 b0       	[SP + 0xc] = R0;
 100c12a:	45 30       	R0 = P5;
 100c12c:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 100c12e:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100c130:	ff e3 44 fe 	CALL 0x100bdb8 <___set_hw_state>;
 100c134:	a0 e4 1f 00 	R0 = B[P4 + 0x1f] (Z);
 100c138:	82 c6 40 82 	R1 = R0 << 0x8;
 100c13c:	2e 20       	JUMP.S 0x100c198 <_le_hw_ioctrl+0x1f0>;
 100c13e:	25 e1 e2 04 	R5 = 0x4e2 (X);		/*		R5=0x4e2(1250) */
 100c142:	a0 e4 0e 00 	R0 = B[P4 + 0xe] (Z);
 100c146:	e8 40       	R0 *= R5;
 100c148:	68 e6 24 00 	W[P5 + 0x48] = R0;
 100c14c:	22 e1 00 32 	R2 = 0x3200 (X);		/*		R2=0x3200(12800) */
 100c150:	80 4d       	R0 >>>= 0x10;
 100c152:	10 56       	R0 = R0 | R2;
 100c154:	68 e6 25 00 	W[P5 + 0x4a] = R0;
 100c158:	09 4f       	R1 <<= 0x1;
 100c15a:	f9 67       	R1 += -0x1;		/* ( -1) */
 100c15c:	45 30       	R0 = P5;
 100c15e:	ff e3 11 fe 	CALL 0x100bd80 <___set_winoffset>;
 100c162:	61 a6       	R1 = W[P4 + 0x12] (Z);
 100c164:	e9 40       	R1 *= R5;
 100c166:	45 30       	R0 = P5;
 100c168:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100c16a:	ff e3 e5 fd 	CALL 0x100bd34 <___set_interval>;
 100c16e:	a0 a6       	R0 = W[P4 + 0x14] (Z);
 100c170:	06 c4 00 82 	R1 = ABS R0 (V);
 100c174:	f0 b0       	[SP + 0xc] = R0;
 100c176:	89 43       	R1 = -R1;
 100c178:	79 49       	CC = BITTST (R1, 0xf);		/* bit 15 */
 100c17a:	02 02       	R2 = CC;
 100c17c:	45 30       	R0 = P5;
 100c17e:	39 60       	R1 = 0x7 (X);		/*		R1=0x7(  7) */
 100c180:	ff e3 1c fe 	CALL 0x100bdb8 <___set_hw_state>;
 100c184:	4c 30       	R1 = P4;
 100c186:	d1 64       	R1 += 0x1a;		/* ( 26) */
 100c188:	45 30       	R0 = P5;
 100c18a:	ff e3 8d fe 	CALL 0x100bea4 <___set_channel_map>;
 100c18e:	a0 e4 1f 00 	R0 = B[P4 + 0x1f] (Z);
 100c192:	08 30       	R1 = R0;
 100c194:	79 4a       	BITSET (R1, 0xf);		/* bit 15 */
 100c196:	40 4f       	R0 <<= 0x8;
 100c198:	17 32       	P2 = R7;
 100c19a:	01 56       	R0 = R1 | R0;
 100c19c:	18 93       	[P3] = R0;
 100c19e:	20 e1 05 60 	R0 = 0x6005 (X);		/*		R0=0x6005(24581) */
 100c1a2:	86 57       	R6 = R6 | R0;
 100c1a4:	16 93       	[P2] = R6;
 100c1a6:	2d 20       	JUMP.S 0x100c200 <_le_hw_ioctrl+0x258>;
 100c1a8:	52 91       	P2 = [P2];
 100c1aa:	a8 e4 03 00 	R0 = B[P5 + 0x3] (Z);
 100c1ae:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 100c1b0:	08 08       	CC = R0 == R1;
 100c1b2:	17 a6       	R7 = W[P2 + 0x10] (Z);
 100c1b4:	03 14       	IF !CC JUMP 0x100c1ba <_le_hw_ioctrl+0x212> (BP);
 100c1b6:	0f 4f       	R7 <<= 0x1;
 100c1b8:	1b 20       	JUMP.S 0x100c1ee <_le_hw_ioctrl+0x246>;
 100c1ba:	21 e1 e2 04 	R1 = 0x4e2 (X);		/*		R1=0x4e2(1250) */
 100c1be:	90 e4 0e 00 	R0 = B[P2 + 0xe] (Z);
 100c1c2:	c8 40       	R0 *= R1;
 100c1c4:	68 e6 24 00 	W[P5 + 0x48] = R0;
 100c1c8:	21 e1 00 32 	R1 = 0x3200 (X);		/*		R1=0x3200(12800) */
 100c1cc:	80 4d       	R0 >>>= 0x10;
 100c1ce:	08 56       	R0 = R0 | R1;
 100c1d0:	68 e6 25 00 	W[P5 + 0x4a] = R0;
 100c1d4:	90 a6       	R0 = W[P2 + 0x14] (Z);
 100c1d6:	06 c4 00 82 	R1 = ABS R0 (V);
 100c1da:	f0 b0       	[SP + 0xc] = R0;
 100c1dc:	89 43       	R1 = -R1;
 100c1de:	79 49       	CC = BITTST (R1, 0xf);		/* bit 15 */
 100c1e0:	0f 4f       	R7 <<= 0x1;
 100c1e2:	ff 67       	R7 += -0x1;		/* ( -1) */
 100c1e4:	02 02       	R2 = CC;
 100c1e6:	45 30       	R0 = P5;
 100c1e8:	39 60       	R1 = 0x7 (X);		/*		R1=0x7(  7) */
 100c1ea:	ff e3 e7 fd 	CALL 0x100bdb8 <___set_hw_state>;
 100c1ee:	45 30       	R0 = P5;
 100c1f0:	0f 30       	R1 = R7;
 100c1f2:	ff e3 c7 fd 	CALL 0x100bd80 <___set_winoffset>;
 100c1f6:	45 30       	R0 = P5;
 100c1f8:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100c1fa:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100c1fc:	ff e3 9c fd 	CALL 0x100bd34 <___set_interval>;
 100c200:	01 e8 00 00 	UNLINK;
 100c204:	ab 05       	(R7:5, P5:3) = [SP++];
 100c206:	10 00       	RTS;

0100c208 <___hw_tx>:
 100c208:	09 32       	P1 = R1;
 100c20a:	10 32       	P2 = R0;
 100c20c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100c210:	02 0c       	CC = R2 == 0x0;
 100c212:	88 e4 06 00 	R0 = B[P1 + 0x6] (Z);
 100c216:	32 14       	IF !CC JUMP 0x100c27a <___hw_tx+0x72> (BP);
 100c218:	00 0c       	CC = R0 == 0x0;
 100c21a:	14 18       	IF CC JUMP 0x100c242 <___hw_tx+0x3a>;
 100c21c:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x6005(24581) */
 100c220:	41 64       	R1 += 0x8;		/* (  8) */
 100c222:	00 e1 28 27 	R0.L = 0x2728;		/* (10024)	R0=0x2728 <_ble_base>(10024) */
 100c226:	01 52       	R0 = R1 - R0;
 100c228:	81 e1 fe ff 	R1 = 0xfffe (Z);		/*		R1=0xfffe(65534) */
 100c22c:	08 0a       	CC = R0 <= R1 (IU);
 100c22e:	08 1c       	IF CC JUMP 0x100c23e <___hw_tx+0x36> (BP);
 100c230:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1002728(16787240) */
 100c234:	00 e1 a4 d0 	R0.L = 0xd0a4;		/* (-12124)	R0=0x100d0a4(16830628) */
 100c238:	00 e3 c0 16 	CALL 0x100efb8 <_puts>;
 100c23c:	00 20       	JUMP.S 0x100c23c <___hw_tx+0x34>;
 100c23e:	50 e6 1c 00 	W[P2 + 0x38] = R0;
 100c242:	89 e4 03 00 	R1 = B[P1 + 0x3] (Z);
 100c246:	88 e4 02 00 	R0 = B[P1 + 0x2] (Z);
 100c24a:	29 4f       	R1 <<= 0x5;
 100c24c:	20 4f       	R0 <<= 0x4;
 100c24e:	01 56       	R0 = R1 | R0;
 100c250:	09 99       	R1 = B[P1] (Z);
 100c252:	08 56       	R0 = R0 | R1;
 100c254:	50 e6 1e 00 	W[P2 + 0x3c] = R0;
 100c258:	89 e4 06 00 	R1 = B[P1 + 0x6] (Z);
 100c25c:	88 e4 05 00 	R0 = B[P1 + 0x5] (Z);
 100c260:	41 4f       	R1 <<= 0x8;
 100c262:	18 4f       	R0 <<= 0x3;
 100c264:	01 56       	R0 = R1 | R0;
 100c266:	89 e4 01 00 	R1 = B[P1 + 0x1] (Z);
 100c26a:	08 56       	R0 = R0 | R1;
 100c26c:	89 e4 04 00 	R1 = B[P1 + 0x4] (Z);
 100c270:	11 4f       	R1 <<= 0x2;
 100c272:	08 56       	R0 = R0 | R1;
 100c274:	50 e6 20 00 	W[P2 + 0x40] = R0;
 100c278:	32 20       	JUMP.S 0x100c2dc <___hw_tx+0xd4>;
 100c27a:	00 0c       	CC = R0 == 0x0;
 100c27c:	14 1c       	IF CC JUMP 0x100c2a4 <___hw_tx+0x9c> (BP);
 100c27e:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0xd0a4(53412) */
 100c282:	41 64       	R1 += 0x8;		/* (  8) */
 100c284:	00 e1 28 27 	R0.L = 0x2728;		/* (10024)	R0=0x2728 <_ble_base>(10024) */
 100c288:	01 52       	R0 = R1 - R0;
 100c28a:	81 e1 fe ff 	R1 = 0xfffe (Z);		/*		R1=0xfffe(65534) */
 100c28e:	08 0a       	CC = R0 <= R1 (IU);
 100c290:	08 1c       	IF CC JUMP 0x100c2a0 <___hw_tx+0x98> (BP);
 100c292:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1002728(16787240) */
 100c296:	00 e1 a4 d0 	R0.L = 0xd0a4;		/* (-12124)	R0=0x100d0a4(16830628) */
 100c29a:	00 e3 8f 16 	CALL 0x100efb8 <_puts>;
 100c29e:	00 20       	JUMP.S 0x100c29e <___hw_tx+0x96>;
 100c2a0:	50 e6 1d 00 	W[P2 + 0x3a] = R0;
 100c2a4:	00 00       	NOP;
 100c2a6:	89 e4 03 00 	R1 = B[P1 + 0x3] (Z);
 100c2aa:	88 e4 02 00 	R0 = B[P1 + 0x2] (Z);
 100c2ae:	29 4f       	R1 <<= 0x5;
 100c2b0:	20 4f       	R0 <<= 0x4;
 100c2b2:	01 56       	R0 = R1 | R0;
 100c2b4:	09 99       	R1 = B[P1] (Z);
 100c2b6:	08 56       	R0 = R0 | R1;
 100c2b8:	50 e6 1f 00 	W[P2 + 0x3e] = R0;
 100c2bc:	89 e4 06 00 	R1 = B[P1 + 0x6] (Z);
 100c2c0:	88 e4 05 00 	R0 = B[P1 + 0x5] (Z);
 100c2c4:	41 4f       	R1 <<= 0x8;
 100c2c6:	18 4f       	R0 <<= 0x3;
 100c2c8:	01 56       	R0 = R1 | R0;
 100c2ca:	89 e4 01 00 	R1 = B[P1 + 0x1] (Z);
 100c2ce:	08 56       	R0 = R0 | R1;
 100c2d0:	89 e4 04 00 	R1 = B[P1 + 0x4] (Z);
 100c2d4:	11 4f       	R1 <<= 0x2;
 100c2d6:	08 56       	R0 = R0 | R1;
 100c2d8:	50 e6 21 00 	W[P2 + 0x42] = R0;
 100c2dc:	01 e8 00 00 	UNLINK;
 100c2e0:	10 00       	RTS;
	...

0100c2e4 <_le_hw_alloc_tx>:
 100c2e4:	10 32       	P2 = R0;
 100c2e6:	ed 05       	[--SP] = (R7:5, P5:5);
 100c2e8:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100c2ec:	7f a2       	R7 = [FP + 0x24];
 100c2ee:	31 30       	R6 = R1;
 100c2f0:	0f 30       	R1 = R7;
 100c2f2:	2a 30       	R5 = R2;
 100c2f4:	50 a2       	R0 = [P2 + 0x24];
 100c2f6:	61 64       	R1 += 0xc;		/* ( 12) */
 100c2f8:	00 e3 8c 11 	CALL 0x100e610 <_lbuf_alloc>;
 100c2fc:	28 32       	P5 = R0;
 100c2fe:	45 0c       	CC = P5 == 0x0;
 100c300:	0a 18       	IF CC JUMP 0x100c314 <_le_hw_alloc_tx+0x30>;
 100c302:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100c304:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 100c306:	00 e3 4d 1d 	CALL 0x100fda0 <_memset>;
 100c30a:	2e 9b       	B[P5] = R6;
 100c30c:	ad e6 01 00 	B[P5 + 0x1] = R5;
 100c310:	af e6 06 00 	B[P5 + 0x6] = R7;
 100c314:	45 30       	R0 = P5;
 100c316:	01 e8 00 00 	UNLINK;
 100c31a:	ad 05       	(R7:5, P5:5) = [SP++];
 100c31c:	10 00       	RTS;
	...

0100c320 <_le_hw_send_packet>:
 100c320:	68 05       	[--SP] = (R7:5);
 100c322:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100c326:	2a 30       	R5 = R2;
 100c328:	3e a2       	R6 = [FP + 0x20];
 100c32a:	4a 43       	R2 = R1.B (Z);
 100c32c:	f6 b0       	[SP + 0xc] = R6;
 100c32e:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100c330:	ff e3 da ff 	CALL 0x100c2e4 <_le_hw_alloc_tx>;
 100c334:	38 30       	R7 = R0;
 100c336:	00 0c       	CC = R0 == 0x0;
 100c338:	08 14       	IF !CC JUMP 0x100c348 <_le_hw_send_packet+0x28> (BP);
 100c33a:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100d0a4(16830628) */
 100c33e:	00 e1 dc d0 	R0.L = 0xd0dc;		/* (-12068)	R0=0x100d0dc(16830684) */
 100c342:	00 e3 3b 16 	CALL 0x100efb8 <_puts>;
 100c346:	00 20       	JUMP.S 0x100c346 <_le_hw_send_packet+0x26>;
 100c348:	0d 30       	R1 = R5;
 100c34a:	16 30       	R2 = R6;
 100c34c:	40 64       	R0 += 0x8;		/* (  8) */
 100c34e:	00 e3 db 1c 	CALL 0x100fd04 <_memcpy>;
 100c352:	07 30       	R0 = R7;
 100c354:	01 e8 00 00 	UNLINK;
 100c358:	28 05       	(R7:5) = [SP++];
 100c35a:	00 e2 a7 11 	JUMP.L 0x100e6a8 <_lbuf_push>;
	...

0100c360 <_le_hw_initiating>:
 100c360:	ec 05       	[--SP] = (R7:5, P5:4);
 100c362:	22 32       	P4 = R2;
 100c364:	29 30       	R5 = R1;
 100c366:	28 32       	P5 = R0;
 100c368:	22 e1 e2 04 	R2 = 0x4e2 (X);		/*		R2=0x4e2(1250) */
 100c36c:	23 e1 00 32 	R3 = 0x3200 (X);		/*		R3=0x3200(12800) */
 100c370:	a1 e4 0b 00 	R1 = B[P4 + 0xb] (Z);
 100c374:	a0 e4 0a 00 	R0 = B[P4 + 0xa] (Z);
 100c378:	41 4f       	R1 <<= 0x8;
 100c37a:	41 56       	R1 = R1 | R0;
 100c37c:	a0 e4 07 00 	R0 = B[P4 + 0x7] (Z);
 100c380:	d0 40       	R0 *= R2;
 100c382:	68 e6 24 00 	W[P5 + 0x48] = R0;
 100c386:	80 4d       	R0 >>>= 0x10;
 100c388:	18 56       	R0 = R0 | R3;
 100c38a:	d1 40       	R1 *= R2;
 100c38c:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100c390:	68 e6 25 00 	W[P5 + 0x4a] = R0;
 100c394:	be a2       	R6 = [FP + 0x28];
 100c396:	45 30       	R0 = P5;
 100c398:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100c39a:	ff e3 cd fc 	CALL 0x100bd34 <___set_interval>;
 100c39e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100c3a0:	f0 b0       	[SP + 0xc] = R0;
 100c3a2:	45 30       	R0 = P5;
 100c3a4:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 100c3a6:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100c3a8:	ff e3 08 fd 	CALL 0x100bdb8 <___set_hw_state>;
 100c3ac:	06 30       	R0 = R6;
 100c3ae:	60 64       	R0 += 0xc;		/* ( 12) */
 100c3b0:	f0 b0       	[SP + 0xc] = R0;
 100c3b2:	45 30       	R0 = P5;
 100c3b4:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 100c3b6:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100c3b8:	ff e3 96 ff 	CALL 0x100c2e4 <_le_hw_alloc_tx>;
 100c3bc:	38 30       	R7 = R0;
 100c3be:	4d 30       	R1 = P5;
 100c3c0:	49 64       	R1 += 0x9;		/* (  9) */
 100c3c2:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 100c3c4:	40 64       	R0 += 0x8;		/* (  8) */
 100c3c6:	00 e3 9f 1c 	CALL 0x100fd04 <_memcpy>;
 100c3ca:	07 30       	R0 = R7;
 100c3cc:	0d 30       	R1 = R5;
 100c3ce:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 100c3d0:	70 64       	R0 += 0xe;		/* ( 14) */
 100c3d2:	00 e3 99 1c 	CALL 0x100fd04 <_memcpy>;
 100c3d6:	07 30       	R0 = R7;
 100c3d8:	4c 30       	R1 = P4;
 100c3da:	16 30       	R2 = R6;
 100c3dc:	a0 64       	R0 += 0x14;		/* ( 20) */
 100c3de:	00 e3 93 1c 	CALL 0x100fd04 <_memcpy>;
 100c3e2:	68 e5 1a 00 	R0 = W[P5 + 0x34] (X);
 100c3e6:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100c3e8:	82 54       	R2 = R2 & R0;
 100c3ea:	45 30       	R0 = P5;
 100c3ec:	0f 30       	R1 = R7;
 100c3ee:	01 e8 00 00 	UNLINK;
 100c3f2:	02 4b       	BITTGL (R2, 0x0);		/* bit  0 */
 100c3f4:	ac 05       	(R7:5, P5:4) = [SP++];
 100c3f6:	ff e2 09 ff 	JUMP.L 0x100c208 <___hw_tx>;
	...

0100c3fc <___hw_event_process>:
 100c3fc:	fd 05       	[--SP] = (R7:7, P5:5);
 100c3fe:	28 32       	P5 = R0;
 100c400:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100c404:	a8 e5 03 00 	R0 = B[P5 + 0x3] (X);
 100c408:	f8 67       	R0 += -0x1;		/* ( -1) */
 100c40a:	40 43       	R0 = R0.B (Z);
 100c40c:	30 0e       	CC = R0 <= 0x6 (IU);
 100c40e:	70 14       	IF !CC JUMP 0x100c4ee <___hw_event_process+0xf2> (BP);
 100c410:	08 32       	P1 = R0;
 100c412:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x100801c */
 100c416:	0a e1 44 d0 	P2.L = 0xd044;		/* (-12220)	P2=0x100d044 */
 100c41a:	8a 5e       	P2 = P2 + (P1 << 0x2);
 100c41c:	52 91       	P2 = [P2];
 100c41e:	52 00       	JUMP (P2);
 100c420:	50 61       	R0 = 0x2a (X);		/*		R0=0x2a( 42) */
 100c422:	00 e3 77 0e 	CALL 0x100e110 <_putchar>;
 100c426:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xed044 */
 100c42a:	20 e1 25 41 	R0 = 0x4125 (X);		/*		R0=0x4125(16677) */
 100c42e:	0a e1 1c 80 	P2.L = 0x801c;		/* (-32740)	P2=0xe801c */
 100c432:	10 93       	[P2] = R0;
 100c434:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x4125(16677) */
 100c438:	4d 30       	R1 = P5;
 100c43a:	00 e1 38 27 	R0.L = 0x2738;		/* (10040)	R0=0x2738(10040) */
 100c43e:	01 52       	R0 = R1 - R0;
 100c440:	41 e1 a8 e1 	R1.H = 0xe1a8;		/* (-7768)	R1=0xe1a80005(-509083643) */
 100c444:	01 e1 37 c5 	R1.L = 0xc537;		/* (-15049)	R1=0xe1a8c537(-509033161) */
 100c448:	10 4d       	R0 >>>= 0x2;
 100c44a:	c8 40       	R0 *= R1;
 100c44c:	21 e1 05 60 	R1 = 0x6005 (X);		/*		R1=0x6005(24581) */
 100c450:	40 4f       	R0 <<= 0x8;
 100c452:	08 56       	R0 = R0 | R1;
 100c454:	e2 6f       	P2 += -0x4;		/* ( -4) */
 100c456:	10 93       	[P2] = R0;
 100c458:	68 e5 1a 00 	R0 = W[P5 + 0x34] (X);
 100c45c:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 100c45e:	c7 55       	R7 = R7 & R0;
 100c460:	a9 a1       	R1 = [P5 + 0x18];
 100c462:	45 30       	R0 = P5;
 100c464:	17 30       	R2 = R7;
 100c466:	ff e3 d1 fe 	CALL 0x100c208 <___hw_tx>;
 100c46a:	17 30       	R2 = R7;
 100c46c:	e9 a1       	R1 = [P5 + 0x1c];
 100c46e:	45 30       	R0 = P5;
 100c470:	01 e8 00 00 	UNLINK;
 100c474:	02 4b       	BITTGL (R2, 0x0);		/* bit  0 */
 100c476:	bd 05       	(R7:7, P5:5) = [SP++];
 100c478:	ff e2 c8 fe 	JUMP.L 0x100c208 <___hw_tx>;
 100c47c:	a9 e4 02 00 	R1 = B[P5 + 0x2] (Z);
 100c480:	20 e1 00 21 	R0 = 0x2100 (X);		/*		R0=0x2100(8448) */
 100c484:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe801c */
 100c488:	01 56       	R0 = R1 | R0;
 100c48a:	0a e1 1c 80 	P2.L = 0x801c;		/* (-32740)	P2=0xe801c */
 100c48e:	10 93       	[P2] = R0;
 100c490:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x2100(8448) */
 100c494:	4d 30       	R1 = P5;
 100c496:	00 e1 38 27 	R0.L = 0x2738;		/* (10040)	R0=0x2738(10040) */
 100c49a:	01 52       	R0 = R1 - R0;
 100c49c:	41 e1 a8 e1 	R1.H = 0xe1a8;		/* (-7768)	R1=0xe1a86005(-509059067) */
 100c4a0:	01 e1 37 c5 	R1.L = 0xc537;		/* (-15049)	R1=0xe1a8c537(-509033161) */
 100c4a4:	10 4d       	R0 >>>= 0x2;
 100c4a6:	c8 40       	R0 *= R1;
 100c4a8:	21 e1 05 60 	R1 = 0x6005 (X);		/*		R1=0x6005(24581) */
 100c4ac:	40 4f       	R0 <<= 0x8;
 100c4ae:	08 56       	R0 = R0 | R1;
 100c4b0:	e2 6f       	P2 += -0x4;		/* ( -4) */
 100c4b2:	10 93       	[P2] = R0;
 100c4b4:	a8 e5 02 00 	R0 = B[P5 + 0x2] (X);
 100c4b8:	08 64       	R0 += 0x1;		/* (  1) */
 100c4ba:	a8 e6 02 00 	B[P5 + 0x2] = R0;
 100c4be:	40 43       	R0 = R0.B (Z);
 100c4c0:	39 61       	R1 = 0x27 (X);		/*		R1=0x27( 39) */
 100c4c2:	08 0a       	CC = R0 <= R1 (IU);
 100c4c4:	15 1c       	IF CC JUMP 0x100c4ee <___hw_event_process+0xf2> (BP);
 100c4c6:	28 61       	R0 = 0x25 (X);		/*		R0=0x25( 37) */
 100c4c8:	a8 e6 02 00 	B[P5 + 0x2] = R0;
 100c4cc:	11 20       	JUMP.S 0x100c4ee <___hw_event_process+0xf2>;
 100c4ce:	2a e5 86 00 	P2 = [P5 + 0x218];
 100c4d2:	42 0c       	CC = P2 == 0x0;
 100c4d4:	0d 1c       	IF CC JUMP 0x100c4ee <___hw_event_process+0xf2> (BP);
 100c4d6:	52 91       	P2 = [P2];
 100c4d8:	42 0c       	CC = P2 == 0x0;
 100c4da:	0a 1c       	IF CC JUMP 0x100c4ee <___hw_event_process+0xf2> (BP);
 100c4dc:	01 e8 00 00 	UNLINK;
 100c4e0:	69 e5 47 00 	R1 = W[P5 + 0x8e] (X);
 100c4e4:	28 e4 85 00 	R0 = [P5 + 0x214];
 100c4e8:	c9 42       	R1 = R1.L (Z);
 100c4ea:	bd 05       	(R7:7, P5:5) = [SP++];
 100c4ec:	52 00       	JUMP (P2);
 100c4ee:	01 e8 00 00 	UNLINK;
 100c4f2:	bd 05       	(R7:7, P5:5) = [SP++];
 100c4f4:	10 00       	RTS;
	...

0100c4f8 <_le_hw_scanning>:
 100c4f8:	fd 05       	[--SP] = (R7:7, P5:5);
 100c4fa:	28 32       	P5 = R0;
 100c4fc:	20 e1 00 32 	R0 = 0x3200 (X);		/*		R0=0x3200(12800) */
 100c500:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100c504:	69 e6 24 00 	W[P5 + 0x48] = R1;
 100c508:	81 4d       	R1 >>>= 0x10;
 100c50a:	41 56       	R1 = R1 | R0;
 100c50c:	69 e6 25 00 	W[P5 + 0x4a] = R1;
 100c510:	0a 30       	R1 = R2;
 100c512:	45 30       	R0 = P5;
 100c514:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100c516:	ff e3 0f fc 	CALL 0x100bd34 <___set_interval>;
 100c51a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100c51c:	f0 b0       	[SP + 0xc] = R0;
 100c51e:	45 30       	R0 = P5;
 100c520:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100c522:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100c524:	ff e3 4a fc 	CALL 0x100bdb8 <___set_hw_state>;
 100c528:	28 61       	R0 = 0x25 (X);		/*		R0=0x25( 37) */
 100c52a:	a8 e6 02 00 	B[P5 + 0x2] = R0;
 100c52e:	45 30       	R0 = P5;
 100c530:	ff e3 66 ff 	CALL 0x100c3fc <___hw_event_process>;
 100c534:	60 60       	R0 = 0xc (X);		/*		R0=0xc( 12) */
 100c536:	f0 b0       	[SP + 0xc] = R0;
 100c538:	45 30       	R0 = P5;
 100c53a:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 100c53c:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100c53e:	ff e3 d3 fe 	CALL 0x100c2e4 <_le_hw_alloc_tx>;
 100c542:	38 30       	R7 = R0;
 100c544:	4d 30       	R1 = P5;
 100c546:	49 64       	R1 += 0x9;		/* (  9) */
 100c548:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 100c54a:	40 64       	R0 += 0x8;		/* (  8) */
 100c54c:	00 e3 dc 1b 	CALL 0x100fd04 <_memcpy>;
 100c550:	07 30       	R0 = R7;
 100c552:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100c554:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 100c556:	70 64       	R0 += 0xe;		/* ( 14) */
 100c558:	00 e3 24 1c 	CALL 0x100fda0 <_memset>;
 100c55c:	45 30       	R0 = P5;
 100c55e:	0f 30       	R1 = R7;
 100c560:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100c562:	ff e3 53 fe 	CALL 0x100c208 <___hw_tx>;
 100c566:	45 30       	R0 = P5;
 100c568:	0f 30       	R1 = R7;
 100c56a:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100c56c:	ff e3 4e fe 	CALL 0x100c208 <___hw_tx>;
 100c570:	45 30       	R0 = P5;
 100c572:	01 e8 00 00 	UNLINK;
 100c576:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100c578:	bd 05       	(R7:7, P5:5) = [SP++];
 100c57a:	ff e2 81 fb 	JUMP.L 0x100bc7c <_ble_hw_enable>;
	...

0100c580 <_le_hw_advertising>:
 100c580:	ec 05       	[--SP] = (R7:5, P5:4);
 100c582:	28 32       	P5 = R0;
 100c584:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100000c(16777228) */
 100c588:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100c58c:	21 32       	P4 = R1;
 100c58e:	00 e1 f8 d0 	R0.L = 0xd0f8;		/* (-12040)	R0=0x100d0f8(16830712) */
 100c592:	00 e3 13 15 	CALL 0x100efb8 <_puts>;
 100c596:	90 61       	R0 = 0x32 (X);		/*		R0=0x32( 50) */
 100c598:	68 e6 24 00 	W[P5 + 0x48] = R0;
 100c59c:	20 e1 00 32 	R0 = 0x3200 (X);		/*		R0=0x3200(12800) */
 100c5a0:	68 e6 25 00 	W[P5 + 0x4a] = R0;
 100c5a4:	21 95       	R1 = W[P4] (Z);
 100c5a6:	20 e1 e8 03 	R0 = 0x3e8 (X);		/*		R0=0x3e8(1000) */
 100c5aa:	8c c2 08 00 	R1 = R1.L * R0.L (FU);
 100c5ae:	45 30       	R0 = P5;
 100c5b0:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100c5b2:	ff e3 c1 fb 	CALL 0x100bd34 <___set_interval>;
 100c5b6:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100c5b8:	f0 b0       	[SP + 0xc] = R0;
 100c5ba:	45 30       	R0 = P5;
 100c5bc:	11 60       	R1 = 0x2 (X);		/*		R1=0x2(  2) */
 100c5be:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100c5c0:	ff e3 fc fb 	CALL 0x100bdb8 <___set_hw_state>;
 100c5c4:	20 e1 b8 cb 	R0 = -0x3448 (X);		/*		R0=0xffffcbb8(-13384) */
 100c5c8:	68 e6 16 00 	W[P5 + 0x2c] = R0;
 100c5cc:	a6 e4 03 00 	R6 = B[P4 + 0x3] (Z);
 100c5d0:	06 30       	R0 = R6;
 100c5d2:	30 64       	R0 += 0x6;		/* (  6) */
 100c5d4:	f0 b0       	[SP + 0xc] = R0;
 100c5d6:	45 30       	R0 = P5;
 100c5d8:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100c5da:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100c5dc:	ff e3 84 fe 	CALL 0x100c2e4 <_le_hw_alloc_tx>;
 100c5e0:	6d 30       	R5 = P5;
 100c5e2:	38 30       	R7 = R0;
 100c5e4:	4d 64       	R5 += 0x9;		/* (  9) */
 100c5e6:	0d 30       	R1 = R5;
 100c5e8:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 100c5ea:	40 64       	R0 += 0x8;		/* (  8) */
 100c5ec:	00 e3 8c 1b 	CALL 0x100fd04 <_memcpy>;
 100c5f0:	07 30       	R0 = R7;
 100c5f2:	4c 30       	R1 = P4;
 100c5f4:	16 30       	R2 = R6;
 100c5f6:	29 64       	R1 += 0x5;		/* (  5) */
 100c5f8:	70 64       	R0 += 0xe;		/* ( 14) */
 100c5fa:	00 e3 85 1b 	CALL 0x100fd04 <_memcpy>;
 100c5fe:	af b1       	[P5 + 0x18] = R7;
 100c600:	a6 e4 04 00 	R6 = B[P4 + 0x4] (Z);
 100c604:	06 30       	R0 = R6;
 100c606:	30 64       	R0 += 0x6;		/* (  6) */
 100c608:	f0 b0       	[SP + 0xc] = R0;
 100c60a:	45 30       	R0 = P5;
 100c60c:	21 60       	R1 = 0x4 (X);		/*		R1=0x4(  4) */
 100c60e:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100c610:	ff e3 6a fe 	CALL 0x100c2e4 <_le_hw_alloc_tx>;
 100c614:	38 30       	R7 = R0;
 100c616:	0d 30       	R1 = R5;
 100c618:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 100c61a:	40 64       	R0 += 0x8;		/* (  8) */
 100c61c:	00 e3 74 1b 	CALL 0x100fd04 <_memcpy>;
 100c620:	07 30       	R0 = R7;
 100c622:	4c 30       	R1 = P4;
 100c624:	21 65       	R1 += 0x24;		/* ( 36) */
 100c626:	16 30       	R2 = R6;
 100c628:	70 64       	R0 += 0xe;		/* ( 14) */
 100c62a:	00 e3 6d 1b 	CALL 0x100fd04 <_memcpy>;
 100c62e:	45 30       	R0 = P5;
 100c630:	ef b1       	[P5 + 0x1c] = R7;
 100c632:	ff e3 e5 fe 	CALL 0x100c3fc <___hw_event_process>;
 100c636:	45 30       	R0 = P5;
 100c638:	01 e8 00 00 	UNLINK;
 100c63c:	51 60       	R1 = 0xa (X);		/*		R1=0xa( 10) */
 100c63e:	ac 05       	(R7:5, P5:4) = [SP++];
 100c640:	ff e2 1e fb 	JUMP.L 0x100bc7c <_ble_hw_enable>;

0100c644 <_ble_tx_init>:
 100c644:	c5 04       	[--SP] = (P5:5);
 100c646:	28 32       	P5 = R0;
 100c648:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100c64a:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100c64e:	a8 b1       	[P5 + 0x18] = R0;
 100c650:	e8 b1       	[P5 + 0x1c] = R0;
 100c652:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x0 <data_addr>(  0) */
 100c656:	4d 30       	R1 = P5;
 100c658:	00 e1 38 27 	R0.L = 0x2738;		/* (10040)	R0=0x2738(10040) */
 100c65c:	01 52       	R0 = R1 - R0;
 100c65e:	41 e1 a8 e1 	R1.H = 0xe1a8;		/* (-7768)	R1=0xe1a8000a(-509083638) */
 100c662:	01 e1 37 c5 	R1.L = 0xc537;		/* (-15049)	R1=0xe1a8c537(-509033161) */
 100c666:	10 4d       	R0 >>>= 0x2;
 100c668:	c8 40       	R0 *= R1;
 100c66a:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0xc537(50487) */
 100c66e:	01 e1 18 3a 	R1.L = 0x3a18;		/* (14872)	R1=0x3a18(14872) */
 100c672:	48 4f       	R0 <<= 0x9;
 100c674:	08 50       	R0 = R0 + R1;
 100c676:	21 e1 00 02 	R1 = 0x200 (X);		/*		R1=0x200(512) */
 100c67a:	00 e3 ab 0f 	CALL 0x100e5d0 <_lbuf_init>;
 100c67e:	68 b2       	[P5 + 0x24] = R0;
 100c680:	01 e8 00 00 	UNLINK;
 100c684:	85 04       	(P5:5) = [SP++];
 100c686:	10 00       	RTS;

0100c688 <_ble_hw_init>:
 100c688:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1002738(16787256) */
 100c68c:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100c690:	00 e1 08 d1 	R0.L = 0xd108;		/* (-12024)	R0=0x100d108(16830728) */
 100c694:	00 e3 92 14 	CALL 0x100efb8 <_puts>;
 100c698:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0xd108(53512) */
 100c69c:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe801c */
 100c6a0:	00 e1 28 27 	R0.L = 0x2728;		/* (10024)	R0=0x2728 <_ble_base>(10024) */
 100c6a4:	0a e1 84 fc 	P2.L = 0xfc84;		/* (-892)	P2=0xefc84 */
 100c6a8:	10 93       	[P2] = R0;
 100c6aa:	21 e1 f0 14 	R1 = 0x14f0 (X);		/*		R1=0x14f0(5360) */
 100c6ae:	48 50       	R1 = R0 + R1;
 100c6b0:	c2 6d       	P2 += 0x38;		/* ( 56) */
 100c6b2:	11 93       	[P2] = R1;
 100c6b4:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100c6b6:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 100c6b8:	00 e3 74 1b 	CALL 0x100fda0 <_memset>;
 100c6bc:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100c6be:	f0 b0       	[SP + 0xc] = R0;
 100c6c0:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000000 <_START>(16777216) */
 100c6c4:	d0 60       	R0 = 0x1a (X);		/*		R0=0x1a( 26) */
 100c6c6:	01 e1 78 c9 	R1.L = 0xc978;		/* (-13960)	R1=0x100c978 <_ble_irq_handler>(16828792) */
 100c6ca:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100c6cc:	00 e3 2c 0e 	CALL 0x100e324 <_request_irq>;
 100c6d0:	01 e8 00 00 	UNLINK;
 100c6d4:	10 00       	RTS;
	...

0100c6d8 <_ble_hw_alloc_rx>:
 100c6d8:	10 32       	P2 = R0;
 100c6da:	78 05       	[--SP] = (R7:7);
 100c6dc:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100c6e0:	71 64       	R1 += 0xe;		/* ( 14) */
 100c6e2:	10 a2       	R0 = [P2 + 0x20];
 100c6e4:	00 e3 96 0f 	CALL 0x100e610 <_lbuf_alloc>;
 100c6e8:	38 30       	R7 = R0;
 100c6ea:	00 0c       	CC = R0 == 0x0;
 100c6ec:	05 18       	IF CC JUMP 0x100c6f6 <_ble_hw_alloc_rx+0x1e>;
 100c6ee:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100c6f0:	72 60       	R2 = 0xe (X);		/*		R2=0xe( 14) */
 100c6f2:	00 e3 57 1b 	CALL 0x100fda0 <_memset>;
 100c6f6:	07 30       	R0 = R7;
 100c6f8:	01 e8 00 00 	UNLINK;
 100c6fc:	38 05       	(R7:7) = [SP++];
 100c6fe:	10 00       	RTS;

0100c700 <_le_hw_open>:
 100c700:	f3 05       	[--SP] = (R7:6, P5:3);
 100c702:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x1eb */
 100c706:	00 e8 05 00 	LINK 0x14;		/* (20) */
 100c70a:	09 e1 28 27 	P1.L = 0x2728;		/* (10024)	P1=0x2728 <_ble_base> */
 100c70e:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100c710:	42 68       	P2 = 0x8 (X);		/*		P2=0x8(  8) */
 100c712:	b2 e0 d6 20 	LSETUP(0x100c716 <_le_hw_open+0x16>, 0x100c8be <_le_hw_open+0x1be>) LC1 = P2;
 100c716:	08 94       	R0 = W[P1++] (Z);
 100c718:	00 0c       	CC = R0 == 0x0;
 100c71a:	d2 14       	IF !CC JUMP 0x100c8be <_le_hw_open+0x1be> (BP);
 100c71c:	22 e1 1c 02 	R2 = 0x21c (X);		/*		R2=0x21c(540) */
 100c720:	37 30       	R6 = R7;
 100c722:	d6 40       	R6 *= R2;
 100c724:	2e 32       	P5 = R6;
 100c726:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0xfc10 */
 100c72a:	0c e1 28 27 	P4.L = 0x2728;		/* (10024)	P4=0x2728 <_ble_base> */
 100c72e:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100c730:	85 6c       	P5 += 0x10;		/* ( 16) */
 100c732:	65 5b       	P5 = P5 + P4;
 100c734:	45 30       	R0 = P5;
 100c736:	00 e3 35 1b 	CALL 0x100fda0 <_memset>;
 100c73a:	06 30       	R0 = R6;
 100c73c:	c0 65       	R0 += 0x38;		/* ( 56) */
 100c73e:	81 e1 fe ff 	R1 = 0xfffe (Z);		/*		R1=0xfffe(65534) */
 100c742:	08 0a       	CC = R0 <= R1 (IU);
 100c744:	08 18       	IF CC JUMP 0x100c754 <_le_hw_open+0x54>;
 100c746:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100001a(16777242) */
 100c74a:	00 e1 18 d1 	R0.L = 0xd118;		/* (-12008)	R0=0x100d118(16830744) */
 100c74e:	00 e3 35 14 	CALL 0x100efb8 <_puts>;
 100c752:	00 20       	JUMP.S 0x100c752 <_le_hw_open+0x52>;
 100c754:	0f 32       	P1 = R7;
 100c756:	60 4a       	BITSET (R0, 0xc);		/* bit 12 */
 100c758:	21 e1 88 d3 	R1 = -0x2c78 (X);		/*		R1=0xffffd388(-11384) */
 100c75c:	28 e1 40 00 	P0 = 0x40 (X);		/*		P0=0x40( 64) */
 100c760:	23 e1 d0 00 	R3 = 0xd0 (X);		/*		R3=0xd0(208) */
 100c764:	8c 5c       	P2 = P4 + (P1 << 0x1);
 100c766:	10 97       	W[P2] = R0;
 100c768:	16 32       	P2 = R6;
 100c76a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100c76c:	29 e1 80 00 	P1 = 0x80 (X);		/*		P1=0x80(128) */
 100c770:	2b e1 88 00 	P3 = 0x88 (X);		/*		P3=0x88(136) */
 100c774:	30 e1 44 00 	I0 = 0x44 (X);		/*		I0=0x44( 68) */
 100c778:	14 5b       	P4 = P4 + P2;
 100c77a:	54 32       	P2 = P4;
 100c77c:	60 e6 1c 00 	W[P4 + 0x38] = R0;
 100c780:	c2 6d       	P2 += 0x38;		/* ( 56) */
 100c782:	50 b4       	W[P2 + 0x2] = R0;
 100c784:	2a e1 7c 00 	P2 = 0x7c (X);		/*		P2=0x7c(124) */
 100c788:	61 e6 1e 00 	W[P4 + 0x3c] = R1;
 100c78c:	94 5a       	P2 = P4 + P2;
 100c78e:	50 b4       	W[P2 + 0x2] = R0;
 100c790:	4c 5a       	P1 = P4 + P1;
 100c792:	21 e1 c8 50 	R1 = 0x50c8 (X);		/*		R1=0x50c8(20680) */
 100c796:	09 97       	W[P1] = R1;
 100c798:	04 5a       	P0 = P4 + P0;
 100c79a:	21 e1 d6 be 	R1 = -0x412a (X);		/*		R1=0xffffbed6(-16682) */
 100c79e:	01 97       	W[P0] = R1;
 100c7a0:	21 e1 89 8e 	R1 = -0x7177 (X);		/*		R1=0xffff8e89(-29047) */
 100c7a4:	41 b4       	W[P0 + 0x2] = R1;
 100c7a6:	28 e1 78 00 	P0 = 0x78 (X);		/*		P0=0x78(120) */
 100c7aa:	04 5a       	P0 = P4 + P0;
 100c7ac:	21 e1 55 55 	R1 = 0x5555 (X);		/*		R1=0x5555(21845) */
 100c7b0:	41 b4       	W[P0 + 0x2] = R1;
 100c7b2:	21 e1 55 00 	R1 = 0x55 (X);		/*		R1=0x55( 85) */
 100c7b6:	11 97       	W[P2] = R1;
 100c7b8:	2a e1 84 00 	P2 = 0x84 (X);		/*		P2=0x84(132) */
 100c7bc:	48 b4       	W[P1 + 0x2] = R0;
 100c7be:	94 5a       	P2 = P4 + P2;
 100c7c0:	10 97       	W[P2] = R0;
 100c7c2:	4a a8       	R2 = W[P1 + 0x2] (X);
 100c7c4:	79 60       	R1 = 0xf (X);		/*		R1=0xf( 15) */
 100c7c6:	8a 56       	R2 = R2 | R1;
 100c7c8:	4a b4       	W[P1 + 0x2] = R2;
 100c7ca:	4a a8       	R2 = W[P1 + 0x2] (X);
 100c7cc:	93 56       	R2 = R3 | R2;
 100c7ce:	4a b4       	W[P1 + 0x2] = R2;
 100c7d0:	4a a8       	R2 = W[P1 + 0x2] (X);
 100c7d2:	42 4a       	BITSET (R2, 0x8);		/* bit  8 */
 100c7d4:	4a b4       	W[P1 + 0x2] = R2;
 100c7d6:	4a a8       	R2 = W[P1 + 0x2] (X);
 100c7d8:	4a b4       	W[P1 + 0x2] = R2;
 100c7da:	4a a8       	R2 = W[P1 + 0x2] (X);
 100c7dc:	23 e1 00 80 	R3 = -0x8000 (X);		/*		R3=0xffff8000(-32768) */
 100c7e0:	93 56       	R2 = R3 | R2;
 100c7e2:	4a b4       	W[P1 + 0x2] = R2;
 100c7e4:	13 95       	R3 = W[P2] (Z);
 100c7e6:	b2 60       	R2 = 0x16 (X);		/*		R2=0x16( 22) */
 100c7e8:	93 56       	R2 = R3 | R2;
 100c7ea:	12 97       	W[P2] = R2;
 100c7ec:	12 95       	R2 = W[P2] (Z);
 100c7ee:	12 97       	W[P2] = R2;
 100c7f0:	50 b4       	W[P2 + 0x2] = R0;
 100c7f2:	dc 5a       	P3 = P4 + P3;
 100c7f4:	18 97       	W[P3] = R0;
 100c7f6:	52 a8       	R2 = W[P2 + 0x2] (X);
 100c7f8:	4a 56       	R1 = R2 | R1;
 100c7fa:	51 b4       	W[P2 + 0x2] = R1;
 100c7fc:	51 a8       	R1 = W[P2 + 0x2] (X);
 100c7fe:	41 4a       	BITSET (R1, 0x8);		/* bit  8 */
 100c800:	51 b4       	W[P2 + 0x2] = R1;
 100c802:	51 a8       	R1 = W[P2 + 0x2] (X);
 100c804:	22 e1 00 06 	R2 = 0x600 (X);		/*		R2=0x600(1536) */
 100c808:	4a 56       	R1 = R2 | R1;
 100c80a:	51 b4       	W[P2 + 0x2] = R1;
 100c80c:	51 a8       	R1 = W[P2 + 0x2] (X);
 100c80e:	22 e1 00 60 	R2 = 0x6000 (X);		/*		R2=0x6000(24576) */
 100c812:	4a 56       	R1 = R2 | R1;
 100c814:	51 b4       	W[P2 + 0x2] = R1;
 100c816:	19 95       	R1 = W[P3] (Z);
 100c818:	21 4a       	BITSET (R1, 0x4);		/* bit  4 */
 100c81a:	19 97       	W[P3] = R1;
 100c81c:	19 95       	R1 = W[P3] (Z);
 100c81e:	28 e1 90 00 	P0 = 0x90 (X);		/*		P0=0x90(144) */
 100c822:	19 97       	W[P3] = R1;
 100c824:	04 5a       	P0 = P4 + P0;
 100c826:	00 97       	W[P0] = R0;
 100c828:	01 95       	R1 = W[P0] (Z);
 100c82a:	01 4a       	BITSET (R1, 0x0);		/* bit  0 */
 100c82c:	01 97       	W[P0] = R1;
 100c82e:	01 95       	R1 = W[P0] (Z);
 100c830:	29 4a       	BITSET (R1, 0x5);		/* bit  5 */
 100c832:	01 97       	W[P0] = R1;
 100c834:	21 e1 1e 02 	R1 = 0x21e (X);		/*		R1=0x21e(542) */
 100c838:	59 b4       	W[P3 + 0x2] = R1;
 100c83a:	2b e1 8c 00 	P3 = 0x8c (X);		/*		P3=0x8c(140) */
 100c83e:	64 34       	M0 = P4;
 100c840:	dc 5a       	P3 = P4 + P3;
 100c842:	f1 60       	R1 = 0x1e (X);		/*		R1=0x1e( 30) */
 100c844:	19 97       	W[P3] = R1;
 100c846:	60 9e       	I0 += M0;
 100c848:	53 34       	I2 = P3;
 100c84a:	20 9f       	W[I0] = R0.L;
 100c84c:	98 32       	P3 = I0;
 100c84e:	31 e1 4c 00 	I1 = 0x4c (X);		/*		I1=0x4c <_device_ble>( 76) */
 100c852:	58 b4       	W[P3 + 0x2] = R0;
 100c854:	61 9e       	I1 += M0;
 100c856:	30 e1 50 00 	I0 = 0x50 (X);		/*		I0=0x50( 80) */
 100c85a:	28 9f       	W[I1] = R0.L;
 100c85c:	60 9e       	I0 += M0;
 100c85e:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100c860:	21 9f       	W[I0] = R1.L;
 100c862:	99 32       	P3 = I1;
 100c864:	58 b4       	W[P3 + 0x2] = R0;
 100c866:	98 32       	P3 = I0;
 100c868:	59 b4       	W[P3 + 0x2] = R1;
 100c86a:	30 e1 6c 00 	I0 = 0x6c (X);		/*		I0=0x6c(108) */
 100c86e:	60 9e       	I0 += M0;
 100c870:	31 61       	R1 = 0x26 (X);		/*		R1=0x26( 38) */
 100c872:	21 9f       	W[I0] = R1.L;
 100c874:	9a 32       	P3 = I2;
 100c876:	21 e1 96 82 	R1 = -0x7d6a (X);		/*		R1=0xffff8296(-32106) */
 100c87a:	59 b4       	W[P3 + 0x2] = R1;
 100c87c:	2b e1 70 00 	P3 = 0x70 (X);		/*		P3=0x70(112) */
 100c880:	dc 5a       	P3 = P4 + P3;
 100c882:	58 b4       	W[P3 + 0x2] = R0;
 100c884:	40 b4       	W[P0 + 0x2] = R0;
 100c886:	28 e1 94 00 	P0 = 0x94 (X);		/*		P0=0x94(148) */
 100c88a:	04 5a       	P0 = P4 + P0;
 100c88c:	00 97       	W[P0] = R0;
 100c88e:	40 b4       	W[P0 + 0x2] = R0;
 100c890:	60 60       	R0 = 0xc (X);		/*		R0=0xc( 12) */
 100c892:	a0 e6 14 00 	B[P4 + 0x14] = R0;
 100c896:	20 e1 0d 03 	R0 = 0x30d (X);		/*		R0=0x30d(781) */
 100c89a:	50 b4       	W[P2 + 0x2] = R0;
 100c89c:	78 60       	R0 = 0xf (X);		/*		R0=0xf( 15) */
 100c89e:	a0 e6 15 00 	B[P4 + 0x15] = R0;
 100c8a2:	20 e1 ff 01 	R0 = 0x1ff (X);		/*		R0=0x1ff(511) */
 100c8a6:	4f 30       	R1 = FP;
 100c8a8:	48 b4       	W[P1 + 0x2] = R0;
 100c8aa:	c1 67       	R1 += -0x8;		/* ( -8) */
 100c8ac:	09 32       	P1 = R1;
 100c8ae:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100c8b0:	e0 bb       	[FP -0x8] = R0;
 100c8b2:	88 e6 04 00 	B[P1 + 0x4] = R0;
 100c8b6:	45 30       	R0 = P5;
 100c8b8:	ff e3 f6 fa 	CALL 0x100bea4 <___set_channel_map>;
 100c8bc:	03 20       	JUMP.S 0x100c8c2 <_le_hw_open+0x1c2>;
 100c8be:	0f 64       	R7 += 0x1;		/* (  1) */
 100c8c0:	05 68       	P5 = 0x0 (X);		/*		P5=0x0(  0) */
 100c8c2:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100ffff(16842751) */
 100c8c6:	00 e1 54 d1 	R0.L = 0xd154;		/* (-11948)	R0=0x100d154(16830804) */
 100c8ca:	0f 30       	R1 = R7;
 100c8cc:	00 e3 5a 13 	CALL 0x100ef80 <_printf>;
 100c8d0:	45 0c       	CC = P5 == 0x0;
 100c8d2:	4d 18       	IF CC JUMP 0x100c96c <_le_hw_open+0x26c>;
 100c8d4:	47 e1 00 00 	R7.H = 0x0;		/* (  0)	R7=0x0 <data_addr>(  0) */
 100c8d8:	07 e1 38 27 	R7.L = 0x2738;		/* (10040)	R7=0x2738(10040) */
 100c8dc:	4d 30       	R1 = P5;
 100c8de:	39 52       	R0 = R1 - R7;
 100c8e0:	41 e1 a8 e1 	R1.H = 0xe1a8;		/* (-7768)	R1=0xe1a88296(-509050218) */
 100c8e4:	01 e1 37 c5 	R1.L = 0xc537;		/* (-15049)	R1=0xe1a8c537(-509033161) */
 100c8e8:	10 4d       	R0 >>>= 0x2;
 100c8ea:	c8 40       	R0 *= R1;
 100c8ec:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0xc537(50487) */
 100c8f0:	01 e1 18 38 	R1.L = 0x3818;		/* (14360)	R1=0x3818(14360) */
 100c8f4:	48 4f       	R0 <<= 0x9;
 100c8f6:	08 50       	R0 = R0 + R1;
 100c8f8:	21 e1 00 02 	R1 = 0x200 (X);		/*		R1=0x200(512) */
 100c8fc:	00 e3 6a 0e 	CALL 0x100e5d0 <_lbuf_init>;
 100c900:	28 b2       	[P5 + 0x20] = R0;
 100c902:	41 61       	R1 = 0x28 (X);		/*		R1=0x28( 40) */
 100c904:	45 30       	R0 = P5;
 100c906:	ff e3 e9 fe 	CALL 0x100c6d8 <_ble_hw_alloc_rx>;
 100c90a:	28 b1       	[P5 + 0x10] = R0;
 100c90c:	41 61       	R1 = 0x28 (X);		/*		R1=0x28( 40) */
 100c90e:	45 30       	R0 = P5;
 100c910:	ff e3 e4 fe 	CALL 0x100c6d8 <_ble_hw_alloc_rx>;
 100c914:	29 a1       	R1 = [P5 + 0x10];
 100c916:	87 67       	R7 += -0x10;		/* (-16) */
 100c918:	69 64       	R1 += 0xd;		/* ( 13) */
 100c91a:	79 52       	R1 = R1 - R7;
 100c91c:	82 e1 fe ff 	R2 = 0xfffe (Z);		/*		R2=0xfffe(65534) */
 100c920:	68 b1       	[P5 + 0x14] = R0;
 100c922:	11 0a       	CC = R1 <= R2 (IU);
 100c924:	08 1c       	IF CC JUMP 0x100c934 <_le_hw_open+0x234> (BP);
 100c926:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100d154(16830804) */
 100c92a:	00 e1 60 d1 	R0.L = 0xd160;		/* (-11936)	R0=0x100d160(16830816) */
 100c92e:	00 e3 45 13 	CALL 0x100efb8 <_puts>;
 100c932:	00 20       	JUMP.S 0x100c932 <_le_hw_open+0x232>;
 100c934:	68 64       	R0 += 0xd;		/* ( 13) */
 100c936:	f8 53       	R7 = R0 - R7;
 100c938:	80 e1 fe ff 	R0 = 0xfffe (Z);		/*		R0=0xfffe(65534) */
 100c93c:	69 e6 22 00 	W[P5 + 0x44] = R1;
 100c940:	07 0a       	CC = R7 <= R0 (IU);
 100c942:	08 1c       	IF CC JUMP 0x100c952 <_le_hw_open+0x252> (BP);
 100c944:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100fffe(16842750) */
 100c948:	00 e1 a0 d1 	R0.L = 0xd1a0;		/* (-11872)	R0=0x100d1a0(16830880) */
 100c94c:	00 e3 36 13 	CALL 0x100efb8 <_puts>;
 100c950:	00 20       	JUMP.S 0x100c950 <_le_hw_open+0x250>;
 100c952:	45 30       	R0 = P5;
 100c954:	6f e6 23 00 	W[P5 + 0x46] = R7;
 100c958:	ff e3 76 fe 	CALL 0x100c644 <_ble_tx_init>;
 100c95c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100c95e:	a8 e6 03 00 	B[P5 + 0x3] = R0;
 100c962:	45 30       	R0 = P5;
 100c964:	ff e3 be f9 	CALL 0x100bce0 <_ble_hw_disable>;
 100c968:	45 30       	R0 = P5;
 100c96a:	02 20       	JUMP.S 0x100c96e <_le_hw_open+0x26e>;
 100c96c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100c96e:	01 e8 00 00 	UNLINK;
 100c972:	b3 05       	(R7:6, P5:3) = [SP++];
 100c974:	10 00       	RTS;
	...

0100c978 <_ble_irq_handler>:
 100c978:	e3 05       	[--SP] = (R7:4, P5:3);
 100c97a:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x0 <data_addr> */
 100c97e:	0d e1 3b 27 	P5.L = 0x273b;		/* (10043)	P5=0x273b */
 100c982:	5d 32       	P3 = P5;
 100c984:	44 e1 0e 00 	R4.H = 0xe;		/* ( 14)	R4=0xe004f(917583) */
 100c988:	00 e8 2a 00 	LINK 0xa8;		/* (168) */
 100c98c:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100c98e:	25 e1 1c 02 	R5 = 0x21c (X);		/*		R5=0x21c(540) */
 100c992:	6b 6f       	P3 += -0x13;		/* (-19) */
 100c994:	04 e1 24 80 	R4.L = 0x8024;		/* (-32732)	R4=0xe8024(950308) */
 100c998:	48 e1 0e 00 	P0.H = 0xe;		/* ( 14)	P0=0xe0094 */
 100c99c:	08 e1 28 80 	P0.L = 0x8028;		/* (-32728)	P0=0xe8028 */
 100c9a0:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 100c9a2:	00 91       	R0 = [P0];
 100c9a4:	b7 40       	R7 <<= R6;
 100c9a6:	07 54       	R0 = R7 & R0;
 100c9a8:	00 0c       	CC = R0 == 0x0;
 100c9aa:	19 1c       	IF CC JUMP 0x100c9dc <_ble_irq_handler+0x64> (BP);
 100c9ac:	49 e1 07 00 	P1.H = 0x7;		/* (  7)	P1=0x70080 */
 100c9b0:	09 e1 08 00 	P1.L = 0x8;		/* (  8)	P1=0x70008 */
 100c9b4:	08 95       	R0 = W[P1] (Z);
 100c9b6:	00 4c       	BITCLR (R0, 0x0);		/* bit  0 */
 100c9b8:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70084 */
 100c9bc:	08 97       	W[P1] = R0;
 100c9be:	0a e1 00 00 	P2.L = 0x0;		/* (  0)	P2=0x70000 */
 100c9c2:	10 95       	R0 = W[P2] (Z);
 100c9c4:	00 4b       	BITTGL (R0, 0x0);		/* bit  0 */
 100c9c6:	10 97       	W[P2] = R0;
 100c9c8:	06 30       	R0 = R6;
 100c9ca:	e8 40       	R0 *= R5;
 100c9cc:	4b 30       	R1 = P3;
 100c9ce:	80 64       	R0 += 0x10;		/* ( 16) */
 100c9d0:	08 50       	R0 = R0 + R1;
 100c9d2:	ff e3 15 fd 	CALL 0x100c3fc <___hw_event_process>;
 100c9d6:	04 32       	P0 = R4;
 100c9d8:	07 93       	[P0] = R7;
 100c9da:	07 93       	[P0] = R7;
 100c9dc:	49 e1 0e 00 	P1.H = 0xe;		/* ( 14)	P1=0xe0008 */
 100c9e0:	0e 30       	R1 = R6;
 100c9e2:	09 e1 28 80 	P1.L = 0x8028;		/* (-32728)	P1=0xe8028 */
 100c9e6:	41 64       	R1 += 0x8;		/* (  8) */
 100c9e8:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100c9ea:	08 91       	R0 = [P1];
 100c9ec:	8a 40       	R2 <<= R1;
 100c9ee:	02 54       	R0 = R2 & R0;
 100c9f0:	42 ba       	[FP -0x70] = R2;
 100c9f2:	00 0c       	CC = R0 == 0x0;
 100c9f4:	02 10       	IF !CC JUMP 0x100c9f8 <_ble_irq_handler+0x80>;
 100c9f6:	0c 23       	JUMP.S 0x100d00e <_ble_irq_handler+0x696>;
 100c9f8:	48 e1 07 00 	P0.H = 0x7;		/* (  7)	P0=0x78028 */
 100c9fc:	08 e1 08 00 	P0.L = 0x8;		/* (  8)	P0=0x70008 */
 100ca00:	00 95       	R0 = W[P0] (Z);
 100ca02:	08 4c       	BITCLR (R0, 0x1);		/* bit  1 */
 100ca04:	49 e1 07 00 	P1.H = 0x7;		/* (  7)	P1=0x78028 */
 100ca08:	00 97       	W[P0] = R0;
 100ca0a:	09 e1 00 00 	P1.L = 0x0;		/* (  0)	P1=0x70000 */
 100ca0e:	08 95       	R0 = W[P1] (Z);
 100ca10:	08 4b       	BITTGL (R0, 0x1);		/* bit  1 */
 100ca12:	08 97       	W[P1] = R0;
 100ca14:	06 30       	R0 = R6;
 100ca16:	e8 40       	R0 *= R5;
 100ca18:	00 32       	P0 = R0;
 100ca1a:	2a e1 44 00 	P2 = 0x44 (X);		/*		P2=0x44( 68) */
 100ca1e:	2c e1 5c 00 	P4 = 0x5c (X);		/*		P4=0x5c( 92) */
 100ca22:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100ca24:	32 e1 03 00 	I2 = 0x3 (X);		/*		I2=0x3(  3) */
 100ca28:	43 5a       	P1 = P3 + P0;
 100ca2a:	59 34       	I3 = P1;
 100ca2c:	51 5a       	P1 = P1 + P2;
 100ca2e:	4a a8       	R2 = W[P1 + 0x2] (X);
 100ca30:	20 5b       	P4 = P0 + P4;
 100ca32:	90 54       	R2 = R0 & R2;
 100ca34:	1c 5b       	P4 = P4 + P3;
 100ca36:	44 30       	R0 = P4;
 100ca38:	02 4b       	BITTGL (R2, 0x0);		/* bit  0 */
 100ca3a:	22 32       	P4 = R2;
 100ca3c:	00 34       	I0 = R0;
 100ca3e:	a4 5a       	P2 = P4 << 0x1;
 100ca40:	62 34       	M0 = P2;
 100ca42:	60 9e       	I0 += M0;
 100ca44:	2c e1 60 00 	P4 = 0x60 (X);		/*		P4=0x60( 96) */
 100ca48:	20 9d       	R0.L = W[I0];
 100ca4a:	20 5b       	P4 = P0 + P4;
 100ca4c:	c0 42       	R0 = R0.L (Z);
 100ca4e:	1c 5b       	P4 = P4 + P3;
 100ca50:	00 34       	I0 = R0;
 100ca52:	14 5b       	P4 = P4 + P2;
 100ca54:	20 95       	R0 = W[P4] (Z);
 100ca56:	2c e1 6c 00 	P4 = 0x6c (X);		/*		P4=0x6c(108) */
 100ca5a:	20 5b       	P4 = P0 + P4;
 100ca5c:	1c 5b       	P4 = P4 + P3;
 100ca5e:	22 5b       	P4 = P2 + P4;
 100ca60:	61 a4       	R1 = W[P4 + 0x2] (Z);
 100ca62:	09 34       	I1 = R1;
 100ca64:	21 e1 87 00 	R1 = 0x87 (X);		/*		R1=0x87(135) */
 100ca68:	2c e1 54 00 	P4 = 0x54 (X);		/*		P4=0x54( 84) */
 100ca6c:	f1 40       	R1 *= R6;
 100ca6e:	20 5a       	P0 = P0 + P4;
 100ca70:	18 5a       	P0 = P0 + P3;
 100ca72:	d1 50       	R3 = R1 + R2;
 100ca74:	38 ba       	[FP -0x74] = P0;
 100ca76:	03 32       	P0 = R3;
 100ca78:	b8 30       	R7 = I0;
 100ca7a:	18 49       	CC = BITTST (R0, 0x3);		/* bit  3 */
 100ca7c:	03 5e       	P0 = P3 + (P0 << 0x2);
 100ca7e:	04 ae       	P4 = [P0 + 0x20];
 100ca80:	78 68       	P0 = 0xf (X);		/*		P0=0xf( 15) */
 100ca82:	58 30       	R3 = P0;
 100ca84:	df 55       	R7 = R7 & R3;
 100ca86:	82 c6 c0 87 	R3 = R0 >> 0x8;
 100ca8a:	a3 e6 06 00 	B[P4 + 0x6] = R3;
 100ca8e:	9a 30       	R3 = I2;
 100ca90:	d8 54       	R3 = R0 & R3;
 100ca92:	a3 e6 02 00 	B[P4 + 0x2] = R3;
 100ca96:	03 02       	R3 = CC;
 100ca98:	10 49       	CC = BITTST (R0, 0x2);		/* bit  2 */
 100ca9a:	a7 e6 01 00 	B[P4 + 0x1] = R7;
 100ca9e:	a3 e6 04 00 	B[P4 + 0x4] = R3;
 100caa2:	00 02       	R0 = CC;
 100caa4:	a0 e6 03 00 	B[P4 + 0x3] = R0;
 100caa8:	99 30       	R3 = I1;
 100caaa:	78 30       	R7 = P0;
 100caac:	3b 54       	R0 = R3 & R7;
 100caae:	43 49       	CC = BITTST (R3, 0x8);		/* bit  8 */
 100cab0:	03 02       	R3 = CC;
 100cab2:	ab e6 fd ff 	B[P5 + -0x3] = R3;
 100cab6:	98 30       	R3 = I0;
 100cab8:	3b 49       	CC = BITTST (R3, 0x7);		/* bit  7 */
 100caba:	23 e1 9c 00 	R3 = 0x9c (X);		/*		R3=0x9c(156) */
 100cabe:	23 34       	M0 = R3;
 100cac0:	07 02       	R7 = CC;
 100cac2:	a7 e6 07 00 	B[P4 + 0x7] = R7;
 100cac6:	63 9e       	I3 += M0;
 100cac8:	83 32       	P0 = I3;
 100caca:	47 a8       	R7 = W[P0 + 0x2] (X);
 100cacc:	67 b5       	W[P4 + 0xa] = R7;
 100cace:	47 43       	R7 = R0.B (Z);
 100cad0:	0f 0c       	CC = R7 == 0x1;
 100cad2:	0a 18       	IF CC JUMP 0x100cae6 <_ble_irq_handler+0x16e>;
 100cad4:	20 e1 45 00 	R0 = 0x45 (X);		/*		R0=0x45( 69) */
 100cad8:	00 e3 1c 0b 	CALL 0x100e110 <_putchar>;
 100cadc:	07 30       	R0 = R7;
 100cade:	00 e3 91 0b 	CALL 0x100e200 <_put_u8hex>;
 100cae2:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100cae4:	c0 21       	JUMP.S 0x100ce64 <_ble_irq_handler+0x4ec>;
 100cae6:	39 e6 df ff 	[FP + -0x84] = R1;
 100caea:	12 ba       	[FP -0x7c] = R2;
 100caec:	09 ba       	[FP -0x80] = P1;
 100caee:	2a ba       	[FP -0x78] = P2;
 100caf0:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100caf2:	ff e3 19 f5 	CALL 0x100b524 <_fsk_offset>;
 100caf6:	a8 e4 dd 01 	R0 = B[P5 + 0x1dd] (Z);
 100cafa:	00 0c       	CC = R0 == 0x0;
 100cafc:	39 e4 df ff 	R1 = [FP + -0x84];
 100cb00:	12 b8       	R2 = [FP -0x7c];
 100cb02:	09 b8       	P1 = [FP -0x80];
 100cb04:	2a b8       	P2 = [FP -0x78];
 100cb06:	1e 14       	IF !CC JUMP 0x100cb42 <_ble_irq_handler+0x1ca> (BP);
 100cb08:	28 99       	R0 = B[P5] (Z);
 100cb0a:	3b 60       	R3 = 0x7 (X);		/*		R3=0x7(  7) */
 100cb0c:	18 08       	CC = R0 == R3;
 100cb0e:	1a 14       	IF !CC JUMP 0x100cb42 <_ble_irq_handler+0x1ca> (BP);
 100cb10:	a8 e4 fd ff 	R0 = B[P5 + -0x3] (Z);
 100cb14:	00 0c       	CC = R0 == 0x0;
 100cb16:	16 1c       	IF CC JUMP 0x100cb42 <_ble_irq_handler+0x1ca> (BP);
 100cb18:	08 95       	R0 = W[P1] (Z);
 100cb1a:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 100cb1c:	c7 54       	R3 = R7 & R0;
 100cb1e:	59 50       	R1 = R1 + R3;
 100cb20:	01 32       	P0 = R1;
 100cb22:	43 5e       	P1 = P3 + (P0 << 0x2);
 100cb24:	89 ae       	P1 = [P1 + 0x28];
 100cb26:	41 0c       	CC = P1 == 0x0;
 100cb28:	0d 1c       	IF CC JUMP 0x100cb42 <_ble_irq_handler+0x1ca> (BP);
 100cb2a:	88 e4 01 00 	R0 = B[P1 + 0x1] (Z);
 100cb2e:	18 0c       	CC = R0 == 0x3;
 100cb30:	09 14       	IF !CC JUMP 0x100cb42 <_ble_irq_handler+0x1ca> (BP);
 100cb32:	88 e4 08 00 	R0 = B[P1 + 0x8] (Z);
 100cb36:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 100cb38:	08 08       	CC = R0 == R1;
 100cb3a:	04 14       	IF !CC JUMP 0x100cb42 <_ble_irq_handler+0x1ca> (BP);
 100cb3c:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100cb3e:	a8 e6 dd 01 	B[P5 + 0x1dd] = R0;
 100cb42:	06 30       	R0 = R6;
 100cb44:	e8 40       	R0 *= R5;
 100cb46:	80 64       	R0 += 0x10;		/* ( 16) */
 100cb48:	00 32       	P0 = R0;
 100cb4a:	a0 e4 02 00 	R0 = B[P4 + 0x2] (Z);
 100cb4e:	08 0c       	CC = R0 == 0x1;
 100cb50:	18 5a       	P0 = P0 + P3;
 100cb52:	58 ba       	[FP -0x6c] = P0;
 100cb54:	05 14       	IF !CC JUMP 0x100cb5e <_ble_irq_handler+0x1e6> (BP);
 100cb56:	a0 e4 06 00 	R0 = B[P4 + 0x6] (Z);
 100cb5a:	00 0c       	CC = R0 == 0x0;
 100cb5c:	78 1d       	IF CC JUMP 0x100ce4c <_ble_irq_handler+0x4d4> (BP);
 100cb5e:	12 ba       	[FP -0x7c] = R2;
 100cb60:	2a ba       	[FP -0x78] = P2;
 100cb62:	20 e1 52 00 	R0 = 0x52 (X);		/*		R0=0x52( 82) */
 100cb66:	00 e3 d5 0a 	CALL 0x100e110 <_putchar>;
 100cb6a:	41 61       	R1 = 0x28 (X);		/*		R1=0x28( 40) */
 100cb6c:	50 b8       	R0 = [FP -0x6c];
 100cb6e:	ff e3 b5 fd 	CALL 0x100c6d8 <_ble_hw_alloc_rx>;
 100cb72:	21 e1 87 00 	R1 = 0x87 (X);		/*		R1=0x87(135) */
 100cb76:	f1 40       	R1 *= R6;
 100cb78:	12 b8       	R2 = [FP -0x7c];
 100cb7a:	91 50       	R2 = R1 + R2;
 100cb7c:	02 32       	P0 = R2;
 100cb7e:	2a b8       	P2 = [FP -0x78];
 100cb80:	43 5e       	P1 = P3 + (P0 << 0x2);
 100cb82:	08 b2       	[P1 + 0x20] = R0;
 100cb84:	08 32       	P1 = R0;
 100cb86:	28 e1 ff 7f 	P0 = 0x7fff (X);		/*		P0=0x7fff(32767) */
 100cb8a:	00 5a       	P0 = P0 << 0x1;
 100cb8c:	69 6c       	P1 += 0xd;		/* ( 13) */
 100cb8e:	19 44       	P1 -= P3;
 100cb90:	41 0a       	CC = P1 <= P0 (IU);
 100cb92:	08 1c       	IF CC JUMP 0x100cba2 <_ble_irq_handler+0x22a> (BP);
 100cb94:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000052(16777298) */
 100cb98:	00 e1 e0 d1 	R0.L = 0xd1e0;		/* (-11808)	R0=0x100d1e0(16830944) */
 100cb9c:	00 e3 0e 12 	CALL 0x100efb8 <_puts>;
 100cba0:	00 20       	JUMP.S 0x100cba0 <_ble_irq_handler+0x228>;
 100cba2:	38 b8       	P0 = [FP -0x74];
 100cba4:	41 30       	R0 = P1;
 100cba6:	90 5a       	P2 = P0 + P2;
 100cba8:	10 97       	W[P2] = R0;
 100cbaa:	68 99       	R0 = B[P5] (X);
 100cbac:	f8 67       	R0 += -0x1;		/* ( -1) */
 100cbae:	40 43       	R0 = R0.B (Z);
 100cbb0:	30 0e       	CC = R0 <= 0x6 (IU);
 100cbb2:	3a 15       	IF !CC JUMP 0x100ce26 <_ble_irq_handler+0x4ae> (BP);
 100cbb4:	08 32       	P1 = R0;
 100cbb6:	48 e1 00 01 	P0.H = 0x100;		/* (256)	P0=0x1007fff */
 100cbba:	08 e1 60 d0 	P0.L = 0xd060;		/* (-12192)	P0=0x100d060 */
 100cbbe:	88 5e       	P2 = P0 + (P1 << 0x2);
 100cbc0:	52 91       	P2 = [P2];
 100cbc2:	52 00       	JUMP (P2);
 100cbc4:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 100cbc8:	18 0c       	CC = R0 == 0x3;
 100cbca:	06 14       	IF !CC JUMP 0x100cbd6 <_ble_irq_handler+0x25e> (BP);
 100cbcc:	20 e1 53 00 	R0 = 0x53 (X);		/*		R0=0x53( 83) */
 100cbd0:	00 e3 a0 0a 	CALL 0x100e110 <_putchar>;
 100cbd4:	6a 20       	JUMP.S 0x100cca8 <_ble_irq_handler+0x330>;
 100cbd6:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 100cbd8:	08 08       	CC = R0 == R1;
 100cbda:	26 15       	IF !CC JUMP 0x100ce26 <_ble_irq_handler+0x4ae> (BP);
 100cbdc:	3e 30       	R7 = R6;
 100cbde:	ef 40       	R7 *= R5;
 100cbe0:	53 30       	R2 = P3;
 100cbe2:	fa 51       	R7 = R2 + R7;
 100cbe4:	07 32       	P0 = R7;
 100cbe6:	29 e1 44 00 	P1 = 0x44 (X);		/*		P1=0x44( 68) */
 100cbea:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100cbec:	88 5a       	P2 = P0 + P1;
 100cbee:	10 95       	R0 = W[P2] (Z);
 100cbf0:	41 54       	R1 = R1 & R0;
 100cbf2:	39 e6 df ff 	[FP + -0x84] = R1;
 100cbf6:	20 e1 43 00 	R0 = 0x43 (X);		/*		R0=0x43( 67) */
 100cbfa:	00 e3 8b 0a 	CALL 0x100e110 <_putchar>;
 100cbfe:	17 32       	P2 = R7;
 100cc00:	07 32       	P0 = R7;
 100cc02:	29 e1 4c 00 	P1 = 0x4c (X);		/*		P1=0x4c <_device_ble>( 76) */
 100cc06:	a0 e4 07 00 	R0 = B[P4 + 0x7] (Z);
 100cc0a:	39 e4 df ff 	R1 = [FP + -0x84];
 100cc0e:	4a 5a       	P1 = P2 + P1;
 100cc10:	20 4f       	R0 <<= 0x4;
 100cc12:	82 c6 11 84 	R2 = R1 << 0x2;
 100cc16:	08 97       	W[P1] = R0;
 100cc18:	2a e1 50 00 	P2 = 0x50 (X);		/*		P2=0x50( 80) */
 100cc1c:	90 5a       	P2 = P0 + P2;
 100cc1e:	02 4a       	BITSET (R2, 0x0);		/* bit  0 */
 100cc20:	12 97       	W[P2] = R2;
 100cc22:	48 b4       	W[P1 + 0x2] = R0;
 100cc24:	01 0c       	CC = R1 == 0x0;
 100cc26:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100cc28:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 100cc2a:	01 06       	IF !CC R0 = R1;
 100cc2c:	50 b4       	W[P2 + 0x2] = R0;
 100cc2e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100cc30:	a8 e6 fe ff 	B[P5 + -0x2] = R0;
 100cc34:	50 b8       	R0 = [FP -0x6c];
 100cc36:	ff e3 07 fd 	CALL 0x100c644 <_ble_tx_init>;
 100cc3a:	f6 20       	JUMP.S 0x100ce26 <_ble_irq_handler+0x4ae>;
 100cc3c:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 100cc40:	00 0c       	CC = R0 == 0x0;
 100cc42:	04 1c       	IF CC JUMP 0x100cc4a <_ble_irq_handler+0x2d2> (BP);
 100cc44:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 100cc46:	08 08       	CC = R0 == R1;
 100cc48:	ef 14       	IF !CC JUMP 0x100ce26 <_ble_irq_handler+0x4ae> (BP);
 100cc4a:	16 30       	R2 = R6;
 100cc4c:	ea 40       	R2 *= R5;
 100cc4e:	12 32       	P2 = R2;
 100cc50:	93 5a       	P2 = P3 + P2;
 100cc52:	e2 6d       	P2 += 0x3c;		/* ( 60) */
 100cc54:	50 a8       	R0 = W[P2 + 0x2] (X);
 100cc56:	40 48       	CC = !BITTST (R0, 0x8);		/* bit  8 */
 100cc58:	12 14       	IF !CC JUMP 0x100cc7c <_ble_irq_handler+0x304> (BP);
 100cc5a:	a8 e5 03 00 	R0 = B[P5 + 0x3] (X);
 100cc5e:	08 64       	R0 += 0x1;		/* (  1) */
 100cc60:	a8 e6 03 00 	B[P5 + 0x3] = R0;
 100cc64:	40 43       	R0 = R0.B (Z);
 100cc66:	10 0e       	CC = R0 <= 0x2 (IU);
 100cc68:	0a 1c       	IF CC JUMP 0x100cc7c <_ble_irq_handler+0x304> (BP);
 100cc6a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100cc6c:	a8 e6 03 00 	B[P5 + 0x3] = R0;
 100cc70:	30 60       	R0 = 0x6 (X);		/*		R0=0x6(  6) */
 100cc72:	a8 e6 04 00 	B[P5 + 0x4] = R0;
 100cc76:	20 e1 00 01 	R0 = 0x100 (X);		/*		R0=0x100(256) */
 100cc7a:	50 b4       	W[P2 + 0x2] = R0;
 100cc7c:	00 00       	NOP;
 100cc7e:	a8 e5 04 00 	R0 = B[P5 + 0x4] (X);
 100cc82:	f8 67       	R0 += -0x1;		/* ( -1) */
 100cc84:	a8 e6 04 00 	B[P5 + 0x4] = R0;
 100cc88:	40 43       	R0 = R0.B (Z);
 100cc8a:	00 0c       	CC = R0 == 0x0;
 100cc8c:	0e 14       	IF !CC JUMP 0x100cca8 <_ble_irq_handler+0x330> (BP);
 100cc8e:	1e 30       	R3 = R6;
 100cc90:	eb 40       	R3 *= R5;
 100cc92:	13 32       	P2 = R3;
 100cc94:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 100cc96:	a8 e6 04 00 	B[P5 + 0x4] = R0;
 100cc9a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100cc9c:	a8 e6 03 00 	B[P5 + 0x3] = R0;
 100cca0:	93 5a       	P2 = P3 + P2;
 100cca2:	e2 6d       	P2 += 0x3c;		/* ( 60) */
 100cca4:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100cca6:	50 b4       	W[P2 + 0x2] = R0;
 100cca8:	4c 30       	R1 = P4;
 100ccaa:	69 64       	R1 += 0xd;		/* ( 13) */
 100ccac:	50 b8       	R0 = [FP -0x6c];
 100ccae:	ff e3 ad f8 	CALL 0x100be08 <___set_remote_addr>;
 100ccb2:	ba 20       	JUMP.S 0x100ce26 <_ble_irq_handler+0x4ae>;
 100ccb4:	a0 e4 01 00 	R0 = B[P4 + 0x1] (Z);
 100ccb8:	00 0c       	CC = R0 == 0x0;
 100ccba:	04 18       	IF CC JUMP 0x100ccc2 <_ble_irq_handler+0x34a>;
 100ccbc:	37 60       	R7 = 0x6 (X);		/*		R7=0x6(  6) */
 100ccbe:	38 08       	CC = R0 == R7;
 100ccc0:	b3 14       	IF !CC JUMP 0x100ce26 <_ble_irq_handler+0x4ae> (BP);
 100ccc2:	50 b8       	R0 = [FP -0x6c];
 100ccc4:	ff e3 c0 fc 	CALL 0x100c644 <_ble_tx_init>;
 100ccc8:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100ccca:	a8 e6 fe ff 	B[P5 + -0x2] = R0;
 100ccce:	06 30       	R0 = R6;
 100ccd0:	e8 40       	R0 *= R5;
 100ccd2:	00 32       	P0 = R0;
 100ccd4:	83 5a       	P2 = P3 + P0;
 100ccd6:	28 e1 44 00 	P0 = 0x44 (X);		/*		P0=0x44( 68) */
 100ccda:	42 5a       	P1 = P2 + P0;
 100ccdc:	08 95       	R0 = W[P1] (Z);
 100ccde:	00 48       	CC = !BITTST (R0, 0x0);		/* bit  0 */
 100cce0:	a0 e4 07 00 	R0 = B[P4 + 0x7] (Z);
 100cce4:	0d 14       	IF !CC JUMP 0x100ccfe <_ble_irq_handler+0x386> (BP);
 100cce6:	29 e1 4c 00 	P1 = 0x4c (X);		/*		P1=0x4c <_device_ble>( 76) */
 100ccea:	20 4f       	R0 <<= 0x4;
 100ccec:	4a 5a       	P1 = P2 + P1;
 100ccee:	60 6c       	P0 += 0xc;		/* ( 12) */
 100ccf0:	08 97       	W[P1] = R0;
 100ccf2:	82 5a       	P2 = P2 + P0;
 100ccf4:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100ccf6:	11 97       	W[P2] = R1;
 100ccf8:	48 b4       	W[P1 + 0x2] = R0;
 100ccfa:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 100ccfc:	0d 20       	JUMP.S 0x100cd16 <_ble_irq_handler+0x39e>;
 100ccfe:	29 e1 4c 00 	P1 = 0x4c (X);		/*		P1=0x4c <_device_ble>( 76) */
 100cd02:	20 4f       	R0 <<= 0x4;
 100cd04:	4a 5a       	P1 = P2 + P1;
 100cd06:	28 e1 50 00 	P0 = 0x50 (X);		/*		P0=0x50( 80) */
 100cd0a:	08 97       	W[P1] = R0;
 100cd0c:	82 5a       	P2 = P2 + P0;
 100cd0e:	29 60       	R1 = 0x5 (X);		/*		R1=0x5(  5) */
 100cd10:	11 97       	W[P2] = R1;
 100cd12:	48 b4       	W[P1 + 0x2] = R0;
 100cd14:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100cd16:	50 b4       	W[P2 + 0x2] = R0;
 100cd18:	87 20       	JUMP.S 0x100ce26 <_ble_irq_handler+0x4ae>;
 100cd1a:	a8 e4 dd 01 	R0 = B[P5 + 0x1dd] (Z);
 100cd1e:	00 0c       	CC = R0 == 0x0;
 100cd20:	83 1c       	IF CC JUMP 0x100ce26 <_ble_irq_handler+0x4ae> (BP);
 100cd22:	a0 e4 06 00 	R0 = B[P4 + 0x6] (Z);
 100cd26:	00 0c       	CC = R0 == 0x0;
 100cd28:	7f 1c       	IF CC JUMP 0x100ce26 <_ble_irq_handler+0x4ae> (BP);
 100cd2a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100cd2c:	e0 bb       	[FP -0x8] = R0;
 100cd2e:	47 30       	R0 = FP;
 100cd30:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100cd32:	42 61       	R2 = 0x28 (X);		/*		R2=0x28( 40) */
 100cd34:	00 66       	R0 += -0x40;		/* (-64) */
 100cd36:	00 e3 35 18 	CALL 0x100fda0 <_memset>;
 100cd3a:	a0 e5 02 00 	R0 = B[P4 + 0x2] (X);
 100cd3e:	2a e1 fd 01 	P2 = 0x1fd (X);		/*		P2=0x1fd(509) */
 100cd42:	95 5a       	P2 = P5 + P2;
 100cd44:	b8 e6 ff ff 	B[FP + -0x1] = R0;
 100cd48:	17 91       	R7 = [P2];
 100cd4a:	82 c6 c7 81 	R0 = R7 >> 0x8;
 100cd4e:	b8 e6 e9 ff 	B[FP + -0x17] = R0;
 100cd52:	82 c6 87 81 	R0 = R7 >> 0x10;
 100cd56:	b8 e6 ea ff 	B[FP + -0x16] = R0;
 100cd5a:	82 c6 47 81 	R0 = R7 >> 0x18;
 100cd5e:	b8 e6 eb ff 	B[FP + -0x15] = R0;
 100cd62:	a8 e5 df 01 	R0 = B[P5 + 0x1df] (X);
 100cd66:	21 e1 80 ff 	R1 = -0x80 (X);		/*		R1=0xffffff80(-128) */
 100cd6a:	01 56       	R0 = R1 | R0;
 100cd6c:	0e 30       	R1 = R6;
 100cd6e:	e9 40       	R1 *= R5;
 100cd70:	01 32       	P0 = R1;
 100cd72:	29 e1 f0 01 	P1 = 0x1f0 (X);		/*		P1=0x1f0(496) */
 100cd76:	b8 e6 ec ff 	B[FP + -0x14] = R0;
 100cd7a:	47 30       	R0 = FP;
 100cd7c:	2a ba       	[FP -0x78] = P2;
 100cd7e:	48 5a       	P1 = P0 + P1;
 100cd80:	59 5a       	P1 = P1 + P3;
 100cd82:	49 30       	R1 = P1;
 100cd84:	bf e6 e8 ff 	B[FP + -0x18] = R7;
 100cd88:	19 64       	R1 += 0x3;		/* (  3) */
 100cd8a:	68 67       	R0 += -0x13;		/* (-19) */
 100cd8c:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 100cd8e:	00 e3 bb 17 	CALL 0x100fd04 <_memcpy>;
 100cd92:	a0 e4 02 00 	R0 = B[P4 + 0x2] (Z);
 100cd96:	08 0c       	CC = R0 == 0x1;
 100cd98:	2a b8       	P2 = [FP -0x78];
 100cd9a:	03 1c       	IF CC JUMP 0x100cda0 <_ble_irq_handler+0x428> (BP);
 100cd9c:	0f 64       	R7 += 0x1;		/* (  1) */
 100cd9e:	17 93       	[P2] = R7;
 100cda0:	00 00       	NOP;
 100cda2:	a0 e5 06 00 	R0 = B[P4 + 0x6] (X);
 100cda6:	e0 67       	R0 += -0x4;		/* ( -4) */
 100cda8:	a0 e6 06 00 	B[P4 + 0x6] = R0;
 100cdac:	06 30       	R0 = R6;
 100cdae:	e8 40       	R0 *= R5;
 100cdb0:	08 32       	P1 = R0;
 100cdb2:	2a e1 f8 01 	P2 = 0x1f8 (X);		/*		P2=0x1f8(504) */
 100cdb6:	7c 30       	R7 = P4;
 100cdb8:	6f 64       	R7 += 0xd;		/* ( 13) */
 100cdba:	91 5a       	P2 = P1 + P2;
 100cdbc:	9a 5a       	P2 = P2 + P3;
 100cdbe:	42 30       	R0 = P2;
 100cdc0:	18 64       	R0 += 0x3;		/* (  3) */
 100cdc2:	00 e3 97 16 	CALL 0x100faf0 <_rijndael_setup>;
 100cdc6:	5f 30       	R3 = FP;
 100cdc8:	03 66       	R3 += -0x40;		/* (-64) */
 100cdca:	f3 b0       	[SP + 0xc] = R3;
 100cdcc:	a0 e4 06 00 	R0 = B[P4 + 0x6] (Z);
 100cdd0:	30 b1       	[SP + 0x10] = R0;
 100cdd2:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100cdd4:	f0 b1       	[SP + 0x1c] = R0;
 100cdd6:	57 32       	P2 = FP;
 100cdd8:	c2 6f       	P2 += -0x8;		/* ( -8) */
 100cdda:	47 30       	R0 = FP;
 100cddc:	4f 30       	R1 = FP;
 100cdde:	b2 bd       	[SP + 0x18] = P2;
 100cde0:	2a ba       	[FP -0x78] = P2;
 100cde2:	f9 67       	R1 += -0x1;		/* ( -1) */
 100cde4:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100cde6:	13 ba       	[FP -0x7c] = R3;
 100cde8:	77 b1       	[SP + 0x14] = R7;
 100cdea:	40 67       	R0 += -0x18;		/* (-24) */
 100cdec:	00 e3 08 13 	CALL 0x100f3fc <_ccm_memory>;
 100cdf0:	13 b8       	R3 = [FP -0x7c];
 100cdf2:	0b 30       	R1 = R3;
 100cdf4:	a2 e4 06 00 	R2 = B[P4 + 0x6] (Z);
 100cdf8:	07 30       	R0 = R7;
 100cdfa:	00 e3 85 17 	CALL 0x100fd04 <_memcpy>;
 100cdfe:	2a b8       	P2 = [FP -0x78];
 100ce00:	44 30       	R0 = P4;
 100ce02:	a1 e4 06 00 	R1 = B[P4 + 0x6] (Z);
 100ce06:	48 50       	R1 = R0 + R1;
 100ce08:	69 64       	R1 += 0xd;		/* ( 13) */
 100ce0a:	42 30       	R0 = P2;
 100ce0c:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 100ce0e:	00 e3 3d 17 	CALL 0x100fc88 <_memcmp>;
 100ce12:	00 0c       	CC = R0 == 0x0;
 100ce14:	09 1c       	IF CC JUMP 0x100ce26 <_ble_irq_handler+0x4ae> (BP);
 100ce16:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000001(16777217) */
 100ce1a:	a1 e4 02 00 	R1 = B[P4 + 0x2] (Z);
 100ce1e:	00 e1 20 d2 	R0.L = 0xd220;		/* (-11744)	R0=0x100d220(16831008) */
 100ce22:	00 e3 af 10 	CALL 0x100ef80 <_printf>;
 100ce26:	44 30       	R0 = P4;
 100ce28:	00 e3 40 0c 	CALL 0x100e6a8 <_lbuf_push>;
 100ce2c:	2a e1 15 02 	P2 = 0x215 (X);		/*		P2=0x215(533) */
 100ce30:	95 5a       	P2 = P5 + P2;
 100ce32:	52 91       	P2 = [P2];
 100ce34:	42 0c       	CC = P2 == 0x0;
 100ce36:	08 18       	IF CC JUMP 0x100ce46 <_ble_irq_handler+0x4ce>;
 100ce38:	29 e1 11 02 	P1 = 0x211 (X);		/*		P1=0x211(529) */
 100ce3c:	4d 5a       	P1 = P5 + P1;
 100ce3e:	4c 30       	R1 = P4;
 100ce40:	52 ac       	P2 = [P2 + 0x4];
 100ce42:	08 91       	R0 = [P1];
 100ce44:	62 00       	CALL (P2);
 100ce46:	44 30       	R0 = P4;
 100ce48:	00 e3 6a 0c 	CALL 0x100e71c <_lbuf_free>;
 100ce4c:	00 00       	NOP;
 100ce4e:	68 99       	R0 = B[P5] (X);
 100ce50:	d0 67       	R0 += -0x6;		/* ( -6) */
 100ce52:	40 43       	R0 = R0.B (Z);
 100ce54:	08 0e       	CC = R0 <= 0x1 (IU);
 100ce56:	d4 14       	IF !CC JUMP 0x100cffe <_ble_irq_handler+0x686> (BP);
 100ce58:	a8 e4 fd ff 	R0 = B[P5 + -0x3] (Z);
 100ce5c:	00 0c       	CC = R0 == 0x0;
 100ce5e:	06 14       	IF !CC JUMP 0x100ce6a <_ble_irq_handler+0x4f2> (BP);
 100ce60:	20 e1 4e 00 	R0 = 0x4e (X);		/*		R0=0x4e( 78) */
 100ce64:	00 e3 56 09 	CALL 0x100e110 <_putchar>;
 100ce68:	cb 20       	JUMP.S 0x100cffe <_ble_irq_handler+0x686>;
 100ce6a:	0e 30       	R1 = R6;
 100ce6c:	e9 40       	R1 *= R5;
 100ce6e:	11 32       	P2 = R1;
 100ce70:	28 e1 44 00 	P0 = 0x44 (X);		/*		P0=0x44( 68) */
 100ce74:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 100ce76:	93 5a       	P2 = P3 + P2;
 100ce78:	82 5a       	P2 = P2 + P0;
 100ce7a:	10 95       	R0 = W[P2] (Z);
 100ce7c:	c7 55       	R7 = R7 & R0;
 100ce7e:	20 e1 87 00 	R0 = 0x87 (X);		/*		R0=0x87(135) */
 100ce82:	f0 40       	R0 *= R6;
 100ce84:	07 4b       	BITTGL (R7, 0x0);		/* bit  0 */
 100ce86:	38 50       	R0 = R0 + R7;
 100ce88:	08 32       	P1 = R0;
 100ce8a:	8b 5e       	P2 = P3 + (P1 << 0x2);
 100ce8c:	90 a2       	R0 = [P2 + 0x28];
 100ce8e:	00 0c       	CC = R0 == 0x0;
 100ce90:	03 18       	IF CC JUMP 0x100ce96 <_ble_irq_handler+0x51e>;
 100ce92:	00 e3 45 0c 	CALL 0x100e71c <_lbuf_free>;
 100ce96:	55 32       	P2 = P5;
 100ce98:	0a 6d       	P2 += 0x21;		/* ( 33) */
 100ce9a:	10 91       	R0 = [P2];
 100ce9c:	00 e3 24 0c 	CALL 0x100e6e4 <_lbuf_pop>;
 100cea0:	20 32       	P4 = R0;
 100cea2:	44 0c       	CC = P4 == 0x0;
 100cea4:	12 14       	IF !CC JUMP 0x100cec8 <_ble_irq_handler+0x550> (BP);
 100cea6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100cea8:	a0 bb       	[FP -0x18] = R0;
 100ceaa:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100ceac:	b9 e6 e9 ff 	B[FP + -0x17] = R1;
 100ceb0:	21 e1 87 00 	R1 = 0x87 (X);		/*		R1=0x87(135) */
 100ceb4:	f1 40       	R1 *= R6;
 100ceb6:	79 50       	R1 = R1 + R7;
 100ceb8:	51 64       	R1 += 0xa;		/* ( 10) */
 100ceba:	01 32       	P0 = R1;
 100cebc:	67 32       	P4 = FP;
 100cebe:	44 6f       	P4 += -0x18;		/* (-24) */
 100cec0:	60 b0       	[P4 + 0x4] = R0;
 100cec2:	83 5e       	P2 = P3 + (P0 << 0x2);
 100cec4:	10 93       	[P2] = R0;
 100cec6:	8d 20       	JUMP.S 0x100cfe0 <_ble_irq_handler+0x668>;
 100cec8:	20 e1 47 00 	R0 = 0x47 (X);		/*		R0=0x47( 71) */
 100cecc:	00 e3 22 09 	CALL 0x100e110 <_putchar>;
 100ced0:	a0 e4 08 00 	R0 = B[P4 + 0x8] (Z);
 100ced4:	00 e3 96 09 	CALL 0x100e200 <_put_u8hex>;
 100ced8:	20 e1 87 00 	R0 = 0x87 (X);		/*		R0=0x87(135) */
 100cedc:	f0 40       	R0 *= R6;
 100cede:	38 50       	R0 = R0 + R7;
 100cee0:	08 32       	P1 = R0;
 100cee2:	28 e1 98 ff 	P0 = -0x68 (X);		/*		P0=0xffffff98(-104) */
 100cee6:	38 5a       	P0 = P0 + FP;
 100cee8:	40 30       	R0 = P0;
 100ceea:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100ceec:	8b 5e       	P2 = P3 + (P1 << 0x2);
 100ceee:	94 be       	[P2 + 0x28] = P4;
 100cef0:	02 68       	P2 = 0x0 (X);		/*		P2=0x0(  0) */
 100cef2:	ea bb       	[FP -0x8] = P2;
 100cef4:	42 61       	R2 = 0x28 (X);		/*		R2=0x28( 40) */
 100cef6:	00 e3 55 17 	CALL 0x100fda0 <_memset>;
 100cefa:	a0 e5 01 00 	R0 = B[P4 + 0x1] (X);
 100cefe:	b8 e6 ff ff 	B[FP + -0x1] = R0;
 100cf02:	a8 e4 dd 01 	R0 = B[P5 + 0x1dd] (Z);
 100cf06:	00 0c       	CC = R0 == 0x0;
 100cf08:	6c 1c       	IF CC JUMP 0x100cfe0 <_ble_irq_handler+0x668> (BP);
 100cf0a:	2a e1 f9 01 	P2 = 0x1f9 (X);		/*		P2=0x1f9(505) */
 100cf0e:	95 5a       	P2 = P5 + P2;
 100cf10:	10 91       	R0 = [P2];
 100cf12:	82 c6 c0 83 	R1 = R0 >> 0x8;
 100cf16:	b9 e6 c1 ff 	B[FP + -0x3f] = R1;
 100cf1a:	82 c6 80 83 	R1 = R0 >> 0x10;
 100cf1e:	b8 e6 c0 ff 	B[FP + -0x40] = R0;
 100cf22:	c0 4e       	R0 >>= 0x18;
 100cf24:	b8 e6 c3 ff 	B[FP + -0x3d] = R0;
 100cf28:	a8 e5 de 01 	R0 = B[P5 + 0x1de] (X);
 100cf2c:	b8 e6 c4 ff 	B[FP + -0x3c] = R0;
 100cf30:	06 30       	R0 = R6;
 100cf32:	e8 40       	R0 *= R5;
 100cf34:	08 32       	P1 = R0;
 100cf36:	28 e1 f0 01 	P0 = 0x1f0 (X);		/*		P0=0x1f0(496) */
 100cf3a:	b9 e6 c2 ff 	B[FP + -0x3e] = R1;
 100cf3e:	47 30       	R0 = FP;
 100cf40:	2a ba       	[FP -0x78] = P2;
 100cf42:	01 5a       	P0 = P1 + P0;
 100cf44:	18 5a       	P0 = P0 + P3;
 100cf46:	48 30       	R1 = P0;
 100cf48:	19 64       	R1 += 0x3;		/* (  3) */
 100cf4a:	42 60       	R2 = 0x8 (X);		/*		R2=0x8(  8) */
 100cf4c:	09 ba       	[FP -0x80] = P1;
 100cf4e:	28 66       	R0 += -0x3b;		/* (-59) */
 100cf50:	00 e3 da 16 	CALL 0x100fd04 <_memcpy>;
 100cf54:	09 b8       	P1 = [FP -0x80];
 100cf56:	28 e1 f8 01 	P0 = 0x1f8 (X);		/*		P0=0x1f8(504) */
 100cf5a:	41 5a       	P1 = P1 + P0;
 100cf5c:	59 5a       	P1 = P1 + P3;
 100cf5e:	41 30       	R0 = P1;
 100cf60:	18 64       	R0 += 0x3;		/* (  3) */
 100cf62:	00 e3 c7 15 	CALL 0x100faf0 <_rijndael_setup>;
 100cf66:	5c 30       	R3 = P4;
 100cf68:	43 64       	R3 += 0x8;		/* (  8) */
 100cf6a:	f3 b0       	[SP + 0xc] = R3;
 100cf6c:	a0 e4 06 00 	R0 = B[P4 + 0x6] (Z);
 100cf70:	30 b1       	[SP + 0x10] = R0;
 100cf72:	47 30       	R0 = FP;
 100cf74:	c0 67       	R0 += -0x8;		/* ( -8) */
 100cf76:	28 e1 98 ff 	P0 = -0x68 (X);		/*		P0=0xffffff98(-104) */
 100cf7a:	38 5a       	P0 = P0 + FP;
 100cf7c:	01 68       	P1 = 0x0 (X);		/*		P1=0x0(  0) */
 100cf7e:	b0 b1       	[SP + 0x18] = R0;
 100cf80:	4f 30       	R1 = FP;
 100cf82:	70 bd       	[SP + 0x14] = P0;
 100cf84:	f1 bd       	[SP + 0x1c] = P1;
 100cf86:	f9 67       	R1 += -0x1;		/* ( -1) */
 100cf88:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100cf8a:	13 ba       	[FP -0x7c] = R3;
 100cf8c:	40 66       	R0 += -0x38;		/* (-56) */
 100cf8e:	00 e3 37 12 	CALL 0x100f3fc <_ccm_memory>;
 100cf92:	2a b8       	P2 = [FP -0x78];
 100cf94:	13 b8       	R3 = [FP -0x7c];
 100cf96:	a2 e4 06 00 	R2 = B[P4 + 0x6] (Z);
 100cf9a:	10 91       	R0 = [P2];
 100cf9c:	08 64       	R0 += 0x1;		/* (  1) */
 100cf9e:	10 93       	[P2] = R0;
 100cfa0:	2a e1 98 ff 	P2 = -0x68 (X);		/*		P2=0xffffff98(-104) */
 100cfa4:	ba 5a       	P2 = P2 + FP;
 100cfa6:	4a 30       	R1 = P2;
 100cfa8:	03 30       	R0 = R3;
 100cfaa:	00 e3 ad 16 	CALL 0x100fd04 <_memcpy>;
 100cfae:	a0 e4 06 00 	R0 = B[P4 + 0x6] (Z);
 100cfb2:	40 64       	R0 += 0x8;		/* (  8) */
 100cfb4:	00 32       	P0 = R0;
 100cfb6:	b8 e5 f8 ff 	R0 = B[FP + -0x8] (X);
 100cfba:	44 5a       	P1 = P4 + P0;
 100cfbc:	51 32       	P2 = P1;
 100cfbe:	10 9a       	B[P2++] = R0;
 100cfc0:	b8 e5 f9 ff 	R0 = B[FP + -0x7] (X);
 100cfc4:	88 e6 01 00 	B[P1 + 0x1] = R0;
 100cfc8:	b8 e5 fa ff 	R0 = B[FP + -0x6] (X);
 100cfcc:	0a 6c       	P2 += 0x1;		/* (  1) */
 100cfce:	10 9a       	B[P2++] = R0;
 100cfd0:	b8 e5 fb ff 	R0 = B[FP + -0x5] (X);
 100cfd4:	10 9b       	B[P2] = R0;
 100cfd6:	a0 e5 06 00 	R0 = B[P4 + 0x6] (X);
 100cfda:	20 64       	R0 += 0x4;		/* (  4) */
 100cfdc:	a0 e6 06 00 	B[P4 + 0x6] = R0;
 100cfe0:	4c 30       	R1 = P4;
 100cfe2:	a8 e5 fe ff 	R0 = B[P5 + -0x2] (X);
 100cfe6:	a0 e6 04 00 	B[P4 + 0x4] = R0;
 100cfea:	a8 e4 fe ff 	R0 = B[P5 + -0x2] (Z);
 100cfee:	00 0c       	CC = R0 == 0x0;
 100cff0:	00 02       	R0 = CC;
 100cff2:	a8 e6 fe ff 	B[P5 + -0x2] = R0;
 100cff6:	50 b8       	R0 = [FP -0x6c];
 100cff8:	17 30       	R2 = R7;
 100cffa:	ff e3 07 f9 	CALL 0x100c208 <___hw_tx>;
 100cffe:	0c 32       	P1 = R4;
 100d000:	41 b8       	R1 = [FP -0x70];
 100d002:	08 91       	R0 = [P1];
 100d004:	01 56       	R0 = R1 | R0;
 100d006:	08 93       	[P1] = R0;
 100d008:	08 91       	R0 = [P1];
 100d00a:	01 56       	R0 = R1 | R0;
 100d00c:	08 93       	[P1] = R0;
 100d00e:	05 32       	P0 = R5;
 100d010:	0e 64       	R6 += 0x1;		/* (  1) */
 100d012:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 100d014:	06 08       	CC = R6 == R0;
 100d016:	45 5b       	P5 = P5 + P0;
 100d018:	02 18       	IF CC JUMP 0x100d01c <_ble_irq_handler+0x6a4>;
 100d01a:	bf 2c       	JUMP.S 0x100c998 <_ble_irq_handler+0x20>;
 100d01c:	01 e8 00 00 	UNLINK;
 100d020:	a3 05       	(R7:4, P5:3) = [SP++];
 100d022:	10 00       	RTS;
 100d024:	ca bf       	[P1 + 0x3c] = P2;
 100d026:	00 01       	ILLEGAL;
 100d028:	d8 bf       	[P3 + 0x3c] = P0;
 100d02a:	00 01       	ILLEGAL;
 100d02c:	ea bf       	[P5 + 0x3c] = P2;
 100d02e:	00 01       	ILLEGAL;
 100d030:	26 c0 00 01 	R4.H = (A1 -= R0.L * R0.L), A0 = R0.L * R0.L (S2RND);
 100d034:	58 c0       	ILLEGAL;
 100d036:	00 01       	ILLEGAL;
 100d038:	74 c0       	ILLEGAL;
 100d03a:	00 01       	ILLEGAL;
 100d03c:	a8 c1       	ILLEGAL;
 100d03e:	00 01       	ILLEGAL;
 100d040:	6c c0       	ILLEGAL;
 100d042:	00 01       	ILLEGAL;
 100d044:	7c c4       	ILLEGAL;
 100d046:	00 01       	ILLEGAL;
 100d048:	20 c4 00 01 	R0 = R0 +|+ R0;
 100d04c:	7c c4       	ILLEGAL;
 100d04e:	00 01       	ILLEGAL;
 100d050:	ee c4       	ILLEGAL;
 100d052:	00 01       	ILLEGAL;
 100d054:	ee c4       	ILLEGAL;
 100d056:	00 01       	ILLEGAL;
 100d058:	ce c4       	ILLEGAL;
 100d05a:	00 01       	ILLEGAL;
 100d05c:	ce c4       	ILLEGAL;
 100d05e:	00 01       	ILLEGAL;
 100d060:	3c cc       	ILLEGAL;
 100d062:	00 01       	ILLEGAL;
 100d064:	c4 cb       	ILLEGAL;
 100d066:	00 01       	ILLEGAL;
 100d068:	b4 cc       	ILLEGAL;
 100d06a:	00 01       	ILLEGAL;
 100d06c:	26 ce       	ILLEGAL;
 100d06e:	00 01       	ILLEGAL;
 100d070:	26 ce       	ILLEGAL;
 100d072:	00 01       	ILLEGAL;
 100d074:	1a cd       	ILLEGAL;
 100d076:	00 01       	ILLEGAL;
 100d078:	1a cd       	ILLEGAL;
 100d07a:	00 01       	ILLEGAL;

0100d07c <_ble_ops>:
 100d07c:	88 c6       	ILLEGAL;
 100d07e:	00 01       	ILLEGAL;
 100d080:	00 c7       	ILLEGAL;
 100d082:	00 01       	ILLEGAL;
 100d084:	58 be       	[P3 + 0x24] = P0;
 100d086:	00 01       	ILLEGAL;
 100d088:	80 c5       	ILLEGAL;
 100d08a:	00 01       	ILLEGAL;
 100d08c:	f8 c4       	ILLEGAL;
 100d08e:	00 01       	ILLEGAL;
 100d090:	60 c3       	ILLEGAL;
 100d092:	00 01       	ILLEGAL;
 100d094:	44 be       	[P0 + 0x24] = P4;
 100d096:	00 01       	ILLEGAL;
 100d098:	20 c3       	ILLEGAL;
 100d09a:	00 01       	ILLEGAL;
 100d09c:	a8 bf       	[P5 + 0x38] = P0;
 100d09e:	00 01       	ILLEGAL;
 100d0a0:	6c be       	[P5 + 0x24] = P4;
 100d0a2:	00 01       	ILLEGAL;
 100d0a4:	41 53       	R5 = R1 - R0;
 100d0a6:	53 45       	P3 += P2 (BREV);
 100d0a8:	52 54       	R1 = R2 & R2;
 100d0aa:	2d 46       	ILLEGAL;
 100d0ac:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 100d0ae:	4c 44       	P4 = P1 << 0x2;
 100d0b0:	3a 20       	JUMP.S 0x100d124 <_ble_ops+0xa8>;
 100d0b2:	28 75       	ILLEGAL;
 100d0b4:	33 32       	SP = R3;
 100d0b6:	29 28       	JUMP.S 0x100c108 <_le_hw_ioctrl+0x160>;
 100d0b8:	74 78       	ILLEGAL;
 100d0ba:	2d 3e       	RETN = R5;
 100d0bc:	64 61       	R4 = 0x2c (X);		/*		R4=0x2c( 44) */
 100d0be:	74 61       	R4 = 0x2e (X);		/*		R4=0x2e( 46) */
 100d0c0:	29 2d       	JUMP.S 0x100cb12 <_ble_irq_handler+0x19a>;
 100d0c2:	28 75       	ILLEGAL;
 100d0c4:	33 32       	SP = R3;
 100d0c6:	29 26       	JUMP.S 0x100dd18 <_spi_agc_inc+0xb8>;
 100d0c8:	62 6c       	P2 += 0xc;		/* ( 12) */
 100d0ca:	65 5f       	P5 = P5 + (P4 << 0x2);
 100d0cc:	62 61       	R2 = 0x2c (X);		/*		R2=0x2c( 44) */
 100d0ce:	73 65       	R3 += 0x2e;		/* ( 46) */
 100d0d0:	20 3c       	LT1 = R0;
 100d0d2:	20 30       	R4 = R0;
 100d0d4:	78 66       	R0 += -0x31;		/* (-49) */
 100d0d6:	66 66       	R6 += -0x34;		/* (-52) */
 100d0d8:	66 00       	CALL (SP);
 100d0da:	00 00       	NOP;
 100d0dc:	41 53       	R5 = R1 - R0;
 100d0de:	53 45       	P3 += P2 (BREV);
 100d0e0:	52 54       	R1 = R2 & R2;
 100d0e2:	2d 46       	ILLEGAL;
 100d0e4:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 100d0e6:	4c 44       	P4 = P1 << 0x2;
 100d0e8:	3a 20       	JUMP.S 0x100d15c <_ble_ops+0xe0>;
 100d0ea:	74 78       	ILLEGAL;
 100d0ec:	20 21       	JUMP.S 0x100d32c <_bt16_pll_init+0x1c>;
 100d0ee:	3d 20       	JUMP.S 0x100d168 <_ble_ops+0xec>;
 100d0f0:	4e 55       	R5 = R6 & R1;
 100d0f2:	4c 4c       	BITCLR (R4, 0x9);		/* bit  9 */
 100d0f4:	00 00       	NOP;
 100d0f6:	00 00       	NOP;
 100d0f8:	68 77       	ILLEGAL;
 100d0fa:	5f 61       	R7 = 0x2b (X);		/*		R7=0x2b( 43) */
 100d0fc:	64 76       	ILLEGAL;
 100d0fe:	65 72       	ILLEGAL;
 100d100:	74 69       	P4 = 0x2e (X);		/*		P4=0x2e( 46) */
 100d102:	73 69       	P3 = 0x2e (X);		/*		P3=0x2e( 46) */
 100d104:	6e 67       	R6 += -0x13;		/* (-19) */
 100d106:	0a 00       	ILLEGAL;
 100d108:	62 6c       	P2 += 0xc;		/* ( 12) */
 100d10a:	65 5f       	P5 = P5 + (P4 << 0x2);
 100d10c:	68 77       	ILLEGAL;
 100d10e:	5f 69       	FP = 0x2b (X);		/*		FP=0x2b( 43) */
 100d110:	6e 69       	SP = 0x2d (X);		/*		SP=0x2d( 45) */
 100d112:	74 0a       	CC = P4 <= SP (IU);
 100d114:	00 00       	NOP;
 100d116:	00 00       	NOP;
 100d118:	41 53       	R5 = R1 - R0;
 100d11a:	53 45       	P3 += P2 (BREV);
 100d11c:	52 54       	R1 = R2 & R2;
 100d11e:	2d 46       	ILLEGAL;
 100d120:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 100d122:	4c 44       	P4 = P1 << 0x2;
 100d124:	3a 20       	JUMP.S 0x100d198 <_ble_ops+0x11c>;
 100d126:	28 75       	ILLEGAL;
 100d128:	33 32       	SP = R3;
 100d12a:	29 28       	JUMP.S 0x100c17c <_le_hw_ioctrl+0x1d4>;
 100d12c:	26 68       	SP = 0x4 (X);		/*		SP=0x4(  4) */
 100d12e:	77 2d       	JUMP.S 0x100cc1c <_ble_irq_handler+0x2a4>;
 100d130:	3e 62       	R6 = -0x39 (X);		/*		R6=0xffffffc7(-57) */
 100d132:	6c 65       	R4 += 0x2d;		/* ( 45) */
 100d134:	5f 66       	R7 += -0x35;		/* (-53) */
 100d136:	70 29       	JUMP.S 0x100c416 <___hw_event_process+0x1a>;
 100d138:	2d 28       	JUMP.S 0x100c192 <_le_hw_ioctrl+0x1ea>;
 100d13a:	75 33       	ILLEGAL;
 100d13c:	32 29       	JUMP.S 0x100c3a0 <_le_hw_initiating+0x40>;
 100d13e:	26 62       	R6 = -0x3c (X);		/*		R6=0xffffffc4(-60) */
 100d140:	6c 65       	R4 += 0x2d;		/* ( 45) */
 100d142:	5f 62       	R7 = -0x35 (X);		/*		R7=0xffffffcb(-53) */
 100d144:	61 73       	ILLEGAL;
 100d146:	65 20       	JUMP.S 0x100d210 <_ble_ops+0x194>;
 100d148:	3c 20       	JUMP.S 0x100d1c0 <_ble_ops+0x144>;
 100d14a:	30 78       	ILLEGAL;
 100d14c:	66 66       	R6 += -0x34;		/* (-52) */
 100d14e:	66 66       	R6 += -0x34;		/* (-52) */
 100d150:	00 00       	NOP;
 100d152:	00 00       	NOP;
 100d154:	68 77       	ILLEGAL;
 100d156:	3a 20       	JUMP.S 0x100d1ca <_ble_ops+0x14e>;
 100d158:	69 64       	R1 += 0xd;		/* ( 13) */
 100d15a:	3d 25       	JUMP.S 0x100dbd4 <_spi_rd+0x5c>;
 100d15c:	64 0a       	CC = P4 <= P4 (IU);
 100d15e:	00 00       	NOP;
 100d160:	41 53       	R5 = R1 - R0;
 100d162:	53 45       	P3 += P2 (BREV);
 100d164:	52 54       	R1 = R2 & R2;
 100d166:	2d 46       	ILLEGAL;
 100d168:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 100d16a:	4c 44       	P4 = P1 << 0x2;
 100d16c:	3a 20       	JUMP.S 0x100d1e0 <_ble_ops+0x164>;
 100d16e:	28 75       	ILLEGAL;
 100d170:	33 32       	SP = R3;
 100d172:	29 28       	JUMP.S 0x100c1c4 <_le_hw_ioctrl+0x21c>;
 100d174:	68 77       	ILLEGAL;
 100d176:	2d 3e       	RETN = R5;
 100d178:	72 78       	ILLEGAL;
 100d17a:	5b 30       	R3 = P3;
 100d17c:	5d 2d       	JUMP.S 0x100cc36 <_ble_irq_handler+0x2be>;
 100d17e:	3e 64       	R6 += 0x7;		/* (  7) */
 100d180:	61 74       	ILLEGAL;
 100d182:	61 29       	JUMP.S 0x100c444 <___hw_event_process+0x48>;
 100d184:	2d 28       	JUMP.S 0x100c1de <_le_hw_ioctrl+0x236>;
 100d186:	75 33       	ILLEGAL;
 100d188:	32 29       	JUMP.S 0x100c3ec <_le_hw_initiating+0x8c>;
 100d18a:	26 62       	R6 = -0x3c (X);		/*		R6=0xffffffc4(-60) */
 100d18c:	6c 65       	R4 += 0x2d;		/* ( 45) */
 100d18e:	5f 62       	R7 = -0x35 (X);		/*		R7=0xffffffcb(-53) */
 100d190:	61 73       	ILLEGAL;
 100d192:	65 20       	JUMP.S 0x100d25c <_osc_clk_init+0x2c>;
 100d194:	3c 20       	JUMP.S 0x100d20c <_ble_ops+0x190>;
 100d196:	30 78       	ILLEGAL;
 100d198:	66 66       	R6 += -0x34;		/* (-52) */
 100d19a:	66 66       	R6 += -0x34;		/* (-52) */
 100d19c:	00 00       	NOP;
 100d19e:	00 00       	NOP;
 100d1a0:	41 53       	R5 = R1 - R0;
 100d1a2:	53 45       	P3 += P2 (BREV);
 100d1a4:	52 54       	R1 = R2 & R2;
 100d1a6:	2d 46       	ILLEGAL;
 100d1a8:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 100d1aa:	4c 44       	P4 = P1 << 0x2;
 100d1ac:	3a 20       	JUMP.S 0x100d220 <_ble_ops+0x1a4>;
 100d1ae:	28 75       	ILLEGAL;
 100d1b0:	33 32       	SP = R3;
 100d1b2:	29 28       	JUMP.S 0x100c204 <_le_hw_ioctrl+0x25c>;
 100d1b4:	68 77       	ILLEGAL;
 100d1b6:	2d 3e       	RETN = R5;
 100d1b8:	72 78       	ILLEGAL;
 100d1ba:	5b 31       	ILLEGAL;
 100d1bc:	5d 2d       	JUMP.S 0x100cc76 <_ble_irq_handler+0x2fe>;
 100d1be:	3e 64       	R6 += 0x7;		/* (  7) */
 100d1c0:	61 74       	ILLEGAL;
 100d1c2:	61 29       	JUMP.S 0x100c484 <___hw_event_process+0x88>;
 100d1c4:	2d 28       	JUMP.S 0x100c21e <___hw_tx+0x16>;
 100d1c6:	75 33       	ILLEGAL;
 100d1c8:	32 29       	JUMP.S 0x100c42c <___hw_event_process+0x30>;
 100d1ca:	26 62       	R6 = -0x3c (X);		/*		R6=0xffffffc4(-60) */
 100d1cc:	6c 65       	R4 += 0x2d;		/* ( 45) */
 100d1ce:	5f 62       	R7 = -0x35 (X);		/*		R7=0xffffffcb(-53) */
 100d1d0:	61 73       	ILLEGAL;
 100d1d2:	65 20       	JUMP.S 0x100d29c <_osc_clk_init+0x6c>;
 100d1d4:	3c 20       	JUMP.S 0x100d24c <_osc_clk_init+0x1c>;
 100d1d6:	30 78       	ILLEGAL;
 100d1d8:	66 66       	R6 += -0x34;		/* (-52) */
 100d1da:	66 66       	R6 += -0x34;		/* (-52) */
 100d1dc:	00 00       	NOP;
 100d1de:	00 00       	NOP;
 100d1e0:	41 53       	R5 = R1 - R0;
 100d1e2:	53 45       	P3 += P2 (BREV);
 100d1e4:	52 54       	R1 = R2 & R2;
 100d1e6:	2d 46       	ILLEGAL;
 100d1e8:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 100d1ea:	4c 44       	P4 = P1 << 0x2;
 100d1ec:	3a 20       	JUMP.S 0x100d260 <_osc_clk_init+0x30>;
 100d1ee:	28 75       	ILLEGAL;
 100d1f0:	33 32       	SP = R3;
 100d1f2:	29 28       	JUMP.S 0x100c244 <___hw_tx+0x3c>;
 100d1f4:	68 77       	ILLEGAL;
 100d1f6:	2d 3e       	RETN = R5;
 100d1f8:	72 78       	ILLEGAL;
 100d1fa:	5b 69       	P3 = 0x2b (X);		/*		P3=0x2b( 43) */
 100d1fc:	6e 64       	R6 += 0xd;		/* ( 13) */
 100d1fe:	5d 2d       	JUMP.S 0x100ccb8 <_ble_irq_handler+0x340>;
 100d200:	3e 64       	R6 += 0x7;		/* (  7) */
 100d202:	61 74       	ILLEGAL;
 100d204:	61 29       	JUMP.S 0x100c4c6 <___hw_event_process+0xca>;
 100d206:	2d 28       	JUMP.S 0x100c260 <___hw_tx+0x58>;
 100d208:	75 33       	ILLEGAL;
 100d20a:	32 29       	JUMP.S 0x100c46e <___hw_event_process+0x72>;
 100d20c:	26 62       	R6 = -0x3c (X);		/*		R6=0xffffffc4(-60) */
 100d20e:	6c 65       	R4 += 0x2d;		/* ( 45) */
 100d210:	5f 62       	R7 = -0x35 (X);		/*		R7=0xffffffcb(-53) */
 100d212:	61 73       	ILLEGAL;
 100d214:	65 20       	JUMP.S 0x100d2de <_clk_out+0xe>;
 100d216:	3c 20       	JUMP.S 0x100d28e <_osc_clk_init+0x5e>;
 100d218:	30 78       	ILLEGAL;
 100d21a:	66 66       	R6 += -0x34;		/* (-52) */
 100d21c:	66 66       	R6 += -0x34;		/* (-52) */
 100d21e:	00 00       	NOP;
 100d220:	6e 6f       	SP += -0x13;		/* (-19) */
 100d222:	5f 6d       	FP += 0x2b;		/* ( 43) */
 100d224:	61 74       	ILLEGAL;
 100d226:	63 68       	P3 = 0xc (X);		/*		P3=0xc( 12) */
 100d228:	3a 20       	JUMP.S 0x100d29c <_osc_clk_init+0x6c>;
 100d22a:	25 64       	R5 += 0x4;		/* (  4) */
 100d22c:	0a 00       	ILLEGAL;
	...

0100d230 <_osc_clk_init>:
 100d230:	49 e1 07 00 	P1.H = 0x7;		/* (  7)	P1=0x70000 */
 100d234:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d238:	09 e1 88 02 	P1.L = 0x288;		/* (648)	P1=0x70288 */
 100d23c:	f9 63       	R1 = -0x1 (X);		/*		R1=0xffffffff( -1) */
 100d23e:	08 91       	R0 = [P1];
 100d240:	01 e1 ff 3f 	R1.L = 0x3fff;		/* (16383)	R1=0xffff3fff(-49153) */
 100d244:	08 54       	R0 = R0 & R1;
 100d246:	78 4a       	BITSET (R0, 0xf);		/* bit 15 */
 100d248:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x7ff98 */
 100d24c:	08 93       	[P1] = R0;
 100d24e:	0a e1 40 81 	P2.L = 0x8140;		/* (-32448)	P2=0x78140 */
 100d252:	52 99       	R2 = B[P2] (X);
 100d254:	30 60       	R0 = 0x6 (X);		/*		R0=0x6(  6) */
 100d256:	02 56       	R0 = R2 | R0;
 100d258:	10 9b       	B[P2] = R0;
 100d25a:	4a e1 0e 00 	P2.H = 0xe;		/* ( 14)	P2=0xe8140 */
 100d25e:	0a e1 f4 fc 	P2.L = 0xfcf4;		/* (-780)	P2=0xefcf4 */
 100d262:	12 91       	R2 = [P2];
 100d264:	08 63       	R0 = -0x1f (X);		/*		R0=0xffffffe1(-31) */
 100d266:	02 54       	R0 = R2 & R0;
 100d268:	10 93       	[P2] = R0;
 100d26a:	12 91       	R2 = [P2];
 100d26c:	20 e1 1f fe 	R0 = -0x1e1 (X);		/*		R0=0xfffffe1f(-481) */
 100d270:	02 54       	R0 = R2 & R0;
 100d272:	10 93       	[P2] = R0;
 100d274:	10 91       	R0 = [P2];
 100d276:	50 4a       	BITSET (R0, 0xa);		/* bit 10 */
 100d278:	10 93       	[P2] = R0;
 100d27a:	10 91       	R0 = [P2];
 100d27c:	00 4c       	BITCLR (R0, 0x0);		/* bit  0 */
 100d27e:	48 e1 0e 00 	P0.H = 0xe;		/* ( 14)	P0=0xeff98 */
 100d282:	10 93       	[P2] = R0;
 100d284:	08 e1 f8 fc 	P0.L = 0xfcf8;		/* (-776)	P0=0xefcf8 */
 100d288:	00 91       	R0 = [P0];
 100d28a:	58 4c       	BITCLR (R0, 0xb);		/* bit 11 */
 100d28c:	00 93       	[P0] = R0;
 100d28e:	10 91       	R0 = [P2];
 100d290:	48 4a       	BITSET (R0, 0x9);		/* bit  9 */
 100d292:	10 93       	[P2] = R0;
 100d294:	10 91       	R0 = [P2];
 100d296:	58 4a       	BITSET (R0, 0xb);		/* bit 11 */
 100d298:	10 93       	[P2] = R0;
 100d29a:	10 91       	R0 = [P2];
 100d29c:	60 4a       	BITSET (R0, 0xc);		/* bit 12 */
 100d29e:	10 93       	[P2] = R0;
 100d2a0:	10 91       	R0 = [P2];
 100d2a2:	68 4a       	BITSET (R0, 0xd);		/* bit 13 */
 100d2a4:	10 93       	[P2] = R0;
 100d2a6:	0a 91       	R2 = [P1];
 100d2a8:	80 e1 00 c0 	R0 = 0xc000 (Z);		/*		R0=0xc000(49152) */
 100d2ac:	02 56       	R0 = R2 | R0;
 100d2ae:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x7fcf4 */
 100d2b2:	08 93       	[P1] = R0;
 100d2b4:	0a e1 84 02 	P2.L = 0x284;		/* (644)	P2=0x70284 */
 100d2b8:	12 95       	R2 = W[P2] (Z);
 100d2ba:	78 62       	R0 = -0x31 (X);		/*		R0=0xffffffcf(-49) */
 100d2bc:	02 54       	R0 = R2 & R0;
 100d2be:	20 4a       	BITSET (R0, 0x4);		/* bit  4 */
 100d2c0:	10 97       	W[P2] = R0;
 100d2c2:	08 91       	R0 = [P1];
 100d2c4:	48 54       	R1 = R0 & R1;
 100d2c6:	09 93       	[P1] = R1;
 100d2c8:	01 e8 00 00 	UNLINK;
 100d2cc:	10 00       	RTS;
	...

0100d2d0 <_clk_out>:
 100d2d0:	49 e1 07 00 	P1.H = 0x7;		/* (  7)	P1=0x70288 */
 100d2d4:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d2d8:	09 e1 08 00 	P1.L = 0x8;		/* (  8)	P1=0x70008 */
 100d2dc:	08 95       	R0 = W[P1] (Z);
 100d2de:	20 4c       	BITCLR (R0, 0x4);		/* bit  4 */
 100d2e0:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70284 */
 100d2e4:	08 97       	W[P1] = R0;
 100d2e6:	0a e1 84 02 	P2.L = 0x284;		/* (644)	P2=0x70284 */
 100d2ea:	10 95       	R0 = W[P2] (Z);
 100d2ec:	21 e1 00 1c 	R1 = 0x1c00 (X);		/*		R1=0x1c00(7168) */
 100d2f0:	01 56       	R0 = R1 | R0;
 100d2f2:	10 97       	W[P2] = R0;
 100d2f4:	08 95       	R0 = W[P1] (Z);
 100d2f6:	28 4c       	BITCLR (R0, 0x5);		/* bit  5 */
 100d2f8:	08 97       	W[P1] = R0;
 100d2fa:	11 95       	R1 = W[P2] (Z);
 100d2fc:	20 e1 ff 1f 	R0 = 0x1fff (X);		/*		R0=0x1fff(8191) */
 100d300:	01 54       	R0 = R1 & R0;
 100d302:	21 e1 00 a0 	R1 = -0x6000 (X);		/*		R1=0xffffa000(-24576) */
 100d306:	08 56       	R0 = R0 | R1;
 100d308:	10 97       	W[P2] = R0;
 100d30a:	01 e8 00 00 	UNLINK;
 100d30e:	10 00       	RTS;

0100d310 <_bt16_pll_init>:
 100d310:	fc 05       	[--SP] = (R7:7, P5:4);
 100d312:	4c e1 07 00 	P4.H = 0x7;		/* (  7)	P4=0x7002e */
 100d316:	0c e1 84 02 	P4.L = 0x284;		/* (644)	P4=0x70284 */
 100d31a:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100d31e:	20 95       	R0 = W[P4] (Z);
 100d320:	00 4a       	BITSET (R0, 0x0);		/* bit  0 */
 100d322:	20 97       	W[P4] = R0;
 100d324:	20 e1 64 00 	R0 = 0x64 (X);		/*		R0=0x64 <_bt16_devices>(100) */
 100d328:	00 e3 4a 09 	CALL 0x100e5bc <_delay>;
 100d32c:	20 95       	R0 = W[P4] (Z);
 100d32e:	40 4c       	BITCLR (R0, 0x8);		/* bit  8 */
 100d330:	20 97       	W[P4] = R0;
 100d332:	ff e3 7f ff 	CALL 0x100d230 <_osc_clk_init>;
 100d336:	4d e1 07 00 	P5.H = 0x7;		/* (  7)	P5=0x7273b */
 100d33a:	0d e1 9c 02 	P5.L = 0x29c;		/* (668)	P5=0x7029c */
 100d33e:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100d340:	29 91       	R1 = [P5];
 100d342:	40 e1 f9 ff 	R0.H = 0xfff9;		/* ( -7)	R0=0xfff9ffff(-393217) */
 100d346:	01 54       	R0 = R1 & R0;
 100d348:	90 4a       	BITSET (R0, 0x12);		/* bit 18 */
 100d34a:	28 93       	[P5] = R0;
 100d34c:	28 91       	R0 = [P5];
 100d34e:	40 4a       	BITSET (R0, 0x8);		/* bit  8 */
 100d350:	28 93       	[P5] = R0;
 100d352:	29 91       	R1 = [P5];
 100d354:	20 e1 83 ff 	R0 = -0x7d (X);		/*		R0=0xffffff83(-125) */
 100d358:	01 54       	R0 = R1 & R0;
 100d35a:	41 61       	R1 = 0x28 (X);		/*		R1=0x28( 40) */
 100d35c:	08 56       	R0 = R0 | R1;
 100d35e:	28 93       	[P5] = R0;
 100d360:	28 91       	R0 = [P5];
 100d362:	38 4a       	BITSET (R0, 0x7);		/* bit  7 */
 100d364:	28 93       	[P5] = R0;
 100d366:	28 91       	R0 = [P5];
 100d368:	80 4c       	BITCLR (R0, 0x10);		/* bit 16 */
 100d36a:	28 93       	[P5] = R0;
 100d36c:	28 91       	R0 = [P5];
 100d36e:	08 4c       	BITCLR (R0, 0x1);		/* bit  1 */
 100d370:	28 93       	[P5] = R0;
 100d372:	28 91       	R0 = [P5];
 100d374:	00 4a       	BITSET (R0, 0x0);		/* bit  0 */
 100d376:	28 93       	[P5] = R0;
 100d378:	20 e1 64 00 	R0 = 0x64 (X);		/*		R0=0x64 <_bt16_devices>(100) */
 100d37c:	00 e3 20 09 	CALL 0x100e5bc <_delay>;
 100d380:	28 91       	R0 = [P5];
 100d382:	08 4a       	BITSET (R0, 0x1);		/* bit  1 */
 100d384:	28 93       	[P5] = R0;
 100d386:	20 e1 f4 01 	R0 = 0x1f4 (X);		/*		R0=0x1f4(500) */
 100d38a:	00 e3 19 09 	CALL 0x100e5bc <_delay>;
 100d38e:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70284 */
 100d392:	0a e1 8c 02 	P2.L = 0x28c;		/* (652)	P2=0x7028c */
 100d396:	11 91       	R1 = [P2];
 100d398:	e0 63       	R0 = -0x4 (X);		/*		R0=0xfffffffc( -4) */
 100d39a:	01 54       	R0 = R1 & R0;
 100d39c:	10 93       	[P2] = R0;
 100d39e:	11 91       	R1 = [P2];
 100d3a0:	98 63       	R0 = -0xd (X);		/*		R0=0xfffffff3(-13) */
 100d3a2:	01 54       	R0 = R1 & R0;
 100d3a4:	10 93       	[P2] = R0;
 100d3a6:	11 91       	R1 = [P2];
 100d3a8:	78 62       	R0 = -0x31 (X);		/*		R0=0xffffffcf(-49) */
 100d3aa:	01 54       	R0 = R1 & R0;
 100d3ac:	20 4a       	BITSET (R0, 0x4);		/* bit  4 */
 100d3ae:	10 93       	[P2] = R0;
 100d3b0:	11 91       	R1 = [P2];
 100d3b2:	20 e1 3f ff 	R0 = -0xc1 (X);		/*		R0=0xffffff3f(-193) */
 100d3b6:	01 54       	R0 = R1 & R0;
 100d3b8:	10 93       	[P2] = R0;
 100d3ba:	10 91       	R0 = [P2];
 100d3bc:	27 e1 ff fc 	R7 = -0x301 (X);		/*		R7=0xfffffcff(-769) */
 100d3c0:	38 54       	R0 = R0 & R7;
 100d3c2:	10 93       	[P2] = R0;
 100d3c4:	11 91       	R1 = [P2];
 100d3c6:	20 e1 ff f3 	R0 = -0xc01 (X);		/*		R0=0xfffff3ff(-3073) */
 100d3ca:	01 54       	R0 = R1 & R0;
 100d3cc:	50 4a       	BITSET (R0, 0xa);		/* bit 10 */
 100d3ce:	10 93       	[P2] = R0;
 100d3d0:	11 91       	R1 = [P2];
 100d3d2:	20 e1 ff cf 	R0 = -0x3001 (X);		/*		R0=0xffffcfff(-12289) */
 100d3d6:	01 54       	R0 = R1 & R0;
 100d3d8:	60 4a       	BITSET (R0, 0xc);		/* bit 12 */
 100d3da:	10 93       	[P2] = R0;
 100d3dc:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100d3de:	11 91       	R1 = [P2];
 100d3e0:	00 e1 ff 3f 	R0.L = 0x3fff;		/* (16383)	R0=0xffff3fff(-49153) */
 100d3e4:	01 54       	R0 = R1 & R0;
 100d3e6:	70 4a       	BITSET (R0, 0xe);		/* bit 14 */
 100d3e8:	10 93       	[P2] = R0;
 100d3ea:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100d3ec:	11 91       	R1 = [P2];
 100d3ee:	40 e1 fc ff 	R0.H = 0xfffc;		/* ( -4)	R0=0xfffcffff(-196609) */
 100d3f2:	01 54       	R0 = R1 & R0;
 100d3f4:	80 4a       	BITSET (R0, 0x10);		/* bit 16 */
 100d3f6:	10 93       	[P2] = R0;
 100d3f8:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100d3fa:	11 91       	R1 = [P2];
 100d3fc:	40 e1 f3 ff 	R0.H = 0xfff3;		/* (-13)	R0=0xfff3ffff(-786433) */
 100d400:	01 54       	R0 = R1 & R0;
 100d402:	10 93       	[P2] = R0;
 100d404:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100d406:	11 91       	R1 = [P2];
 100d408:	40 e1 cf ff 	R0.H = 0xffcf;		/* (-49)	R0=0xffcfffff(-3145729) */
 100d40c:	01 54       	R0 = R1 & R0;
 100d40e:	10 93       	[P2] = R0;
 100d410:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100d412:	11 91       	R1 = [P2];
 100d414:	40 e1 3f ff 	R0.H = 0xff3f;		/* (-193)	R0=0xff3fffff(-12582913) */
 100d418:	01 54       	R0 = R1 & R0;
 100d41a:	b0 4a       	BITSET (R0, 0x16);		/* bit 22 */
 100d41c:	10 93       	[P2] = R0;
 100d41e:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100d420:	11 91       	R1 = [P2];
 100d422:	40 e1 ff fc 	R0.H = 0xfcff;		/* (-769)	R0=0xfcffffff(-50331649) */
 100d426:	01 54       	R0 = R1 & R0;
 100d428:	10 93       	[P2] = R0;
 100d42a:	20 95       	R0 = W[P4] (Z);
 100d42c:	21 e1 c0 00 	R1 = 0xc0 (X);		/*		R1=0xc0(192) */
 100d430:	01 56       	R0 = R1 | R0;
 100d432:	20 97       	W[P4] = R0;
 100d434:	20 e1 64 00 	R0 = 0x64 (X);		/*		R0=0x64 <_bt16_devices>(100) */
 100d438:	00 e3 c2 08 	CALL 0x100e5bc <_delay>;
 100d43c:	20 95       	R0 = W[P4] (Z);
 100d43e:	40 4a       	BITSET (R0, 0x8);		/* bit  8 */
 100d440:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x7028c */
 100d444:	20 97       	W[P4] = R0;
 100d446:	0a e1 90 02 	P2.L = 0x290;		/* (656)	P2=0x70290 */
 100d44a:	10 95       	R0 = W[P2] (Z);
 100d44c:	c7 55       	R7 = R7 & R0;
 100d44e:	17 97       	W[P2] = R7;
 100d450:	01 e8 00 00 	UNLINK;
 100d454:	bc 05       	(R7:7, P5:4) = [SP++];
 100d456:	10 00       	RTS;

0100d458 <_bt16_machine_init>:
 100d458:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000064(16777316) */
 100d45c:	41 e1 00 00 	R1.H = 0x0;		/* (  0)	R1=0xc0(192) */
 100d460:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100d464:	01 e1 4c 00 	R1.L = 0x4c;		/* ( 76)	R1=0x4c <_device_ble>( 76) */
 100d468:	00 e1 84 d4 	R0.L = 0xd484;		/* (-11132)	R0=0x100d484(16831620) */
 100d46c:	00 e3 8a 0d 	CALL 0x100ef80 <_printf>;
 100d470:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0xd484(54404) */
 100d474:	00 e1 64 00 	R0.L = 0x64;		/* (100)	R0=0x64 <_bt16_devices>(100) */
 100d478:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100d47a:	01 e8 00 00 	UNLINK;
 100d47e:	00 e2 f5 07 	JUMP.L 0x100e468 <_platform_add_devices>;
 100d482:	00 00       	NOP;
 100d484:	62 74       	ILLEGAL;
 100d486:	31 36       	L2 = R1;
 100d488:	5f 6d       	FP += 0x2b;		/* ( 43) */
 100d48a:	61 63       	R1 = -0x14 (X);		/*		R1=0xffffffec(-20) */
 100d48c:	68 69       	P0 = 0x2d (X);		/*		P0=0x2d( 45) */
 100d48e:	6e 65       	R6 += 0x2d;		/* ( 45) */
 100d490:	5f 69       	FP = 0x2b (X);		/*		FP=0x2b( 43) */
 100d492:	6e 69       	SP = 0x2d (X);		/*		SP=0x2d( 45) */
 100d494:	74 3a       	ILLEGAL;
 100d496:	20 25       	JUMP.S 0x100ded6 <_spi_pwr_inc+0x132>;
 100d498:	78 0a       	CC = P0 <= FP (IU);
 100d49a:	00 00       	NOP;
 100d49c:	62 6c       	P2 += 0xc;		/* ( 12) */
 100d49e:	65 00       	CALL (P5);

0100d4a0 <_handle__ble_irq_handler>:
 100d4a0:	00 00       	NOP;
 100d4a2:	00 00       	NOP;
 100d4a4:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d4a8:	ff e3 00 96 	CALL 0x10000a8 <_ISR_PUSH_REG>;
 100d4ac:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100d4b0:	00 e3 1c 00 	CALL 0x100d4e8 <_ble_irq_handler>;
 100d4b4:	01 e8 00 00 	UNLINK;
 100d4b8:	ff e3 26 96 	CALL 0x1000104 <_ISR_POP_REG>;
 100d4bc:	01 e8 00 00 	UNLINK;
 100d4c0:	10 00       	RTS;
	...

0100d4c4 <_irq_handler_init>:
 100d4c4:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000064(16777316) */
 100d4c8:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100d4cc:	00 e1 08 d5 	R0.L = 0xd508;		/* (-11000)	R0=0x100d508(16831752) */
 100d4d0:	00 e3 74 0d 	CALL 0x100efb8 <_puts>;
 100d4d4:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x100ffec(16842732) */
 100d4d8:	d0 60       	R0 = 0x1a (X);		/*		R0=0x1a( 26) */
 100d4da:	01 e1 a0 d4 	R1.L = 0xd4a0;		/* (-11104)	R1=0x100d4a0 <_handle__ble_irq_handler>(16831648) */
 100d4de:	3a 60       	R2 = 0x7 (X);		/*		R2=0x7(  7) */
 100d4e0:	01 e8 00 00 	UNLINK;
 100d4e4:	00 e2 54 02 	JUMP.L 0x100d98c <_HWI_Install>;

0100d4e8 <_ble_irq_handler>:
 100d4e8:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100d4ec:	d0 60       	R0 = 0x1a (X);		/*		R0=0x1a( 26) */
 100d4ee:	00 e3 65 07 	CALL 0x100e3b8 <_generic_irq_handler>;
 100d4f2:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70290 */
 100d4f6:	0a e1 4c 80 	P2.L = 0x804c;		/* (-32692)	P2=0x7804c */
 100d4fa:	10 91       	R0 = [P2];
 100d4fc:	d0 4a       	BITSET (R0, 0x1a);		/* bit 26 */
 100d4fe:	10 93       	[P2] = R0;
 100d500:	01 e8 00 00 	UNLINK;
 100d504:	10 00       	RTS;
 100d506:	00 00       	NOP;
 100d508:	69 72       	ILLEGAL;
 100d50a:	71 5f       	P5 = P1 + (SP << 0x2);
 100d50c:	68 61       	R0 = 0x2d (X);		/*		R0=0x2d( 45) */
 100d50e:	6e 64       	R6 += 0xd;		/* ( 13) */
 100d510:	6c 65       	R4 += 0x2d;		/* ( 45) */
 100d512:	72 5f       	P5 = P2 + (SP << 0x2);
 100d514:	69 6e       	P1 += -0x33;		/* (-51) */
 100d516:	69 74       	ILLEGAL;
 100d518:	0a 00       	ILLEGAL;
	...

0100d51c <_os_create_thread>:
 100d51c:	49 43       	R1 = R1.B (Z);
 100d51e:	11 32       	P2 = R1;
 100d520:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x8 <_att_ir_le_device_db_index> */
 100d524:	09 e1 18 3c 	P1.L = 0x3c18;		/* (15384)	P1=0x3c18 <_thread_fun> */
 100d528:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d52c:	91 5e       	P2 = P1 + (P2 << 0x2);
 100d52e:	10 93       	[P2] = R0;
 100d530:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100d532:	01 e8 00 00 	UNLINK;
 100d536:	10 00       	RTS;

0100d538 <_os_delete_thread>:
 100d538:	00 00       	NOP;
 100d53a:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d53e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100d540:	01 e8 00 00 	UNLINK;
 100d544:	10 00       	RTS;
	...

0100d548 <_exception_isr>:
 100d548:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 100d54c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100d550:	00 e1 34 d8 	R0.L = 0xd834;		/* (-10188)	R0=0x100d834(16832564) */
 100d554:	00 e3 32 0d 	CALL 0x100efb8 <_puts>;
 100d558:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x7804c */
 100d55c:	0a e1 14 83 	P2.L = 0x8314;		/* (-31980)	P2=0x78314 */
 100d560:	10 91       	R0 = [P2];
 100d562:	00 e3 0f 06 	CALL 0x100e180 <_put_u32hex>;
 100d566:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x78314 */
 100d56a:	0a e1 80 02 	P2.L = 0x280;		/* (640)	P2=0x70280 */
 100d56e:	50 99       	R0 = B[P2] (X);
 100d570:	20 4a       	BITSET (R0, 0x4);		/* bit  4 */
 100d572:	10 9b       	B[P2] = R0;
 100d574:	00 20       	JUMP.S 0x100d574 <_exception_isr+0x2c>;
	...

0100d578 <_malloc>:
 100d578:	08 30       	R1 = R0;
 100d57a:	78 05       	[--SP] = (R7:7);
 100d57c:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0xd834(55348) */
 100d580:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100d584:	00 e1 28 3c 	R0.L = 0x3c28;		/* (15400)	R0=0x3c28 <_malloc_buf>(15400) */
 100d588:	00 e3 44 08 	CALL 0x100e610 <_lbuf_alloc>;
 100d58c:	38 30       	R7 = R0;
 100d58e:	00 0c       	CC = R0 == 0x0;
 100d590:	08 14       	IF !CC JUMP 0x100d5a0 <_malloc+0x28> (BP);
 100d592:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1003c28(16792616) */
 100d596:	00 e1 64 18 	R0.L = 0x1864;		/* (6244)	R0=0x1001864(16783460) */
 100d59a:	00 e3 0f 0d 	CALL 0x100efb8 <_puts>;
 100d59e:	00 20       	JUMP.S 0x100d59e <_malloc+0x26>;
 100d5a0:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1001864(16783460) */
 100d5a4:	0f 30       	R1 = R7;
 100d5a6:	00 e1 7c d8 	R0.L = 0xd87c;		/* (-10116)	R0=0x100d87c(16832636) */
 100d5aa:	00 e3 eb 0c 	CALL 0x100ef80 <_printf>;
 100d5ae:	07 30       	R0 = R7;
 100d5b0:	01 e8 00 00 	UNLINK;
 100d5b4:	38 05       	(R7:7) = [SP++];
 100d5b6:	10 00       	RTS;

0100d5b8 <_calloc>:
 100d5b8:	70 05       	[--SP] = (R7:6);
 100d5ba:	39 30       	R7 = R1;
 100d5bc:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100d5c0:	01 30       	R0 = R1;
 100d5c2:	ff e3 db ff 	CALL 0x100d578 <_malloc>;
 100d5c6:	30 30       	R6 = R0;
 100d5c8:	17 30       	R2 = R7;
 100d5ca:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100d5cc:	00 e3 ea 13 	CALL 0x100fda0 <_memset>;
 100d5d0:	06 30       	R0 = R6;
 100d5d2:	01 e8 00 00 	UNLINK;
 100d5d6:	30 05       	(R7:6) = [SP++];
 100d5d8:	10 00       	RTS;
	...

0100d5dc <_free>:
 100d5dc:	78 05       	[--SP] = (R7:7);
 100d5de:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100d5e2:	38 30       	R7 = R0;
 100d5e4:	00 0c       	CC = R0 == 0x0;
 100d5e6:	13 18       	IF CC JUMP 0x100d60c <_free+0x30>;
 100d5e8:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100d87c(16832636) */
 100d5ec:	00 e1 88 d8 	R0.L = 0xd888;		/* (-10104)	R0=0x100d888(16832648) */
 100d5f0:	00 e3 e4 0c 	CALL 0x100efb8 <_puts>;
 100d5f4:	07 30       	R0 = R7;
 100d5f6:	00 e3 93 08 	CALL 0x100e71c <_lbuf_free>;
 100d5fa:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100d888(16832648) */
 100d5fe:	01 e8 00 00 	UNLINK;
 100d602:	00 e1 d4 18 	R0.L = 0x18d4;		/* (6356)	R0=0x10018d4(16783572) */
 100d606:	38 05       	(R7:7) = [SP++];
 100d608:	00 e2 d8 0c 	JUMP.L 0x100efb8 <_puts>;
 100d60c:	01 e8 00 00 	UNLINK;
 100d610:	38 05       	(R7:7) = [SP++];
 100d612:	10 00       	RTS;

0100d614 <_realloc>:
 100d614:	68 05       	[--SP] = (R7:5);
 100d616:	30 30       	R6 = R0;
 100d618:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100d61c:	39 30       	R7 = R1;
 100d61e:	01 30       	R0 = R1;
 100d620:	ff e3 ac ff 	CALL 0x100d578 <_malloc>;
 100d624:	28 30       	R5 = R0;
 100d626:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0x18d4(6356) */
 100d62a:	0e 30       	R1 = R6;
 100d62c:	17 30       	R2 = R7;
 100d62e:	00 e1 28 3c 	R0.L = 0x3c28;		/* (15400)	R0=0x3c28 <_malloc_buf>(15400) */
 100d632:	00 e3 69 13 	CALL 0x100fd04 <_memcpy>;
 100d636:	06 30       	R0 = R6;
 100d638:	ff e3 d2 ff 	CALL 0x100d5dc <_free>;
 100d63c:	05 30       	R0 = R5;
 100d63e:	01 e8 00 00 	UNLINK;
 100d642:	28 05       	(R7:5) = [SP++];
 100d644:	10 00       	RTS;
	...

0100d648 <_main>:
 100d648:	fc 05       	[--SP] = (R7:7, P5:4);
 100d64a:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100d64e:	ff e3 61 fe 	CALL 0x100d310 <_bt16_pll_init>;
 100d652:	20 e1 09 3d 	R0 = 0x3d09 (X);		/*		R0=0x3d09(15625) */
 100d656:	28 4f       	R0 <<= 0x5;
 100d658:	00 e3 b2 07 	CALL 0x100e5bc <_delay>;
 100d65c:	00 e3 08 05 	CALL 0x100e06c <_uart_init>;
 100d660:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1003d09(16792841) */
 100d664:	00 e1 90 d8 	R0.L = 0xd890;		/* (-10096)	R0=0x100d890(16832656) */
 100d668:	00 e3 a8 0c 	CALL 0x100efb8 <_puts>;
 100d66c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100d890(16832656) */
 100d670:	00 e1 b0 d8 	R0.L = 0xd8b0;		/* (-10064)	R0=0x100d8b0(16832688) */
 100d674:	00 e3 a2 0c 	CALL 0x100efb8 <_puts>;
 100d678:	00 e3 14 06 	CALL 0x100e2a0 <_system_init>;
 100d67c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100d8b0(16832688) */
 100d680:	00 e1 b8 d8 	R0.L = 0xd8b8;		/* (-10056)	R0=0x100d8b8(16832696) */
 100d684:	00 e3 9a 0c 	CALL 0x100efb8 <_puts>;
 100d688:	00 e3 ba 04 	CALL 0x100dffc <_timer0_init>;
 100d68c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100d8b8(16832696) */
 100d690:	00 e1 c0 d8 	R0.L = 0xd8c0;		/* (-10048)	R0=0x100d8c0(16832704) */
 100d694:	00 e3 92 0c 	CALL 0x100efb8 <_puts>;
 100d698:	ff e3 90 f2 	CALL 0x100bbb8 <_RF_init>;
 100d69c:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000000 <_START>(16777216) */
 100d6a0:	01 e1 48 d5 	R1.L = 0xd548;		/* (-10936)	R1=0x100d548 <_exception_isr>(16831816) */
 100d6a4:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100d6a6:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100d6a8:	00 e3 72 01 	CALL 0x100d98c <_HWI_Install>;
 100d6ac:	40 01       	[--SP] = R0;
 100d6ae:	c4 31       	R0 = RETX;
 100d6b0:	40 4a       	BITSET (R0, 0x8);		/* bit  8 */
 100d6b2:	48 4c       	BITCLR (R0, 0x9);		/* bit  9 */
 100d6b4:	20 3e       	RETX = R0;
 100d6b6:	30 90       	R0 = [SP++];
 100d6b8:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000001(16777217) */
 100d6bc:	00 e1 c8 d8 	R0.L = 0xd8c8;		/* (-10040)	R0=0x100d8c8(16832712) */
 100d6c0:	00 e3 7c 0c 	CALL 0x100efb8 <_puts>;
 100d6c4:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100d8c8(16832712) */
 100d6c8:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x100d548 <_exception_isr>(16831816) */
 100d6cc:	01 e1 38 d5 	R1.L = 0xd538;		/* (-10952)	R1=0x100d538 <_os_delete_thread>(16831800) */
 100d6d0:	00 e1 1c d5 	R0.L = 0xd51c;		/* (-10980)	R0=0x100d51c <_os_create_thread>(16831772) */
 100d6d4:	00 e3 46 0e 	CALL 0x100f360 <_thread_init>;
 100d6d8:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100d51c <_os_create_thread>(16831772) */
 100d6dc:	00 e1 d0 d8 	R0.L = 0xd8d0;		/* (-10032)	R0=0x100d8d0(16832720) */
 100d6e0:	00 e3 6c 0c 	CALL 0x100efb8 <_puts>;
 100d6e4:	00 e3 24 0d 	CALL 0x100f12c <_sys_timer_init>;
 100d6e8:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100d8d0(16832720) */
 100d6ec:	00 e1 d8 d8 	R0.L = 0xd8d8;		/* (-10024)	R0=0x100d8d8(16832728) */
 100d6f0:	00 e3 64 0c 	CALL 0x100efb8 <_puts>;
 100d6f4:	ff e3 2c 9b 	CALL 0x1000d4c <_ble_main>;
 100d6f8:	ff e3 aa ae 	CALL 0x100344c <_btstack_main>;
 100d6fc:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0xd8d8(55512) */
 100d700:	21 e1 00 20 	R1 = 0x2000 (X);		/*		R1=0x2000(8192) */
 100d704:	00 e1 28 3c 	R0.L = 0x3c28;		/* (15400)	R0=0x3c28 <_malloc_buf>(15400) */
 100d708:	00 e3 64 07 	CALL 0x100e5d0 <_lbuf_init>;
 100d70c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1003c28(16792616) */
 100d710:	00 e1 e0 d8 	R0.L = 0xd8e0;		/* (-10016)	R0=0x100d8e0(16832736) */
 100d714:	4c e1 00 00 	P4.H = 0x0;		/* (  0)	P4=0x284 */
 100d718:	00 e3 50 0c 	CALL 0x100efb8 <_puts>;
 100d71c:	05 68       	P5 = 0x0 (X);		/*		P5=0x0(  0) */
 100d71e:	0c e1 18 3c 	P4.L = 0x3c18;		/* (15384)	P4=0x3c18 <_thread_fun> */
 100d722:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100d724:	ac 5e       	P2 = P4 + (P5 << 0x2);
 100d726:	52 91       	P2 = [P2];
 100d728:	42 0c       	CC = P2 == 0x0;
 100d72a:	03 1c       	IF CC JUMP 0x100d730 <_main+0xe8> (BP);
 100d72c:	45 30       	R0 = P5;
 100d72e:	62 00       	CALL (P2);
 100d730:	0d 6c       	P5 += 0x1;		/* (  1) */
 100d732:	5d 0d       	CC = P5 <= 0x3;
 100d734:	af 06       	IF !CC P5 = R7;
 100d736:	f7 2f       	JUMP.S 0x100d724 <_main+0xdc>;

0100d738 <_hal_tick_init>:
 100d738:	00 00       	NOP;
 100d73a:	00 00       	NOP;
 100d73c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d740:	01 e8 00 00 	UNLINK;
 100d744:	10 00       	RTS;
	...

0100d748 <_hal_tick_set_handler>:
 100d748:	00 00       	NOP;
 100d74a:	00 00       	NOP;
 100d74c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d750:	01 e8 00 00 	UNLINK;
 100d754:	10 00       	RTS;
	...

0100d758 <_hal_tick_get_tick_period_in_ms>:
 100d758:	00 00       	NOP;
 100d75a:	00 00       	NOP;
 100d75c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d760:	01 e8 00 00 	UNLINK;
 100d764:	10 00       	RTS;
	...

0100d768 <_hal_cpu_disable_irqs>:
 100d768:	00 00       	NOP;
 100d76a:	00 00       	NOP;
 100d76c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d770:	01 e8 00 00 	UNLINK;
 100d774:	10 00       	RTS;
	...

0100d778 <_hal_cpu_enable_irqs>:
 100d778:	00 00       	NOP;
 100d77a:	00 00       	NOP;
 100d77c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d780:	01 e8 00 00 	UNLINK;
 100d784:	10 00       	RTS;
	...

0100d788 <_hal_cpu_enable_irqs_and_sleep>:
 100d788:	00 00       	NOP;
 100d78a:	00 00       	NOP;
 100d78c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d790:	01 e8 00 00 	UNLINK;
 100d794:	10 00       	RTS;
	...

0100d798 <_bt_puts>:
 100d798:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d79c:	01 e8 00 00 	UNLINK;
 100d7a0:	00 e2 0c 0c 	JUMP.L 0x100efb8 <_puts>;

0100d7a4 <_bt_flip_access_addr>:
 100d7a4:	09 32       	P1 = R1;
 100d7a6:	10 32       	P2 = R0;
 100d7a8:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d7ac:	01 e8 00 00 	UNLINK;
 100d7b0:	88 e5 04 00 	R0 = B[P1 + 0x4] (X);
 100d7b4:	10 9b       	B[P2] = R0;
 100d7b6:	88 e5 03 00 	R0 = B[P1 + 0x3] (X);
 100d7ba:	90 e6 01 00 	B[P2 + 0x1] = R0;
 100d7be:	88 e5 02 00 	R0 = B[P1 + 0x2] (X);
 100d7c2:	90 e6 02 00 	B[P2 + 0x2] = R0;
 100d7c6:	88 e5 01 00 	R0 = B[P1 + 0x1] (X);
 100d7ca:	90 e6 03 00 	B[P2 + 0x3] = R0;
 100d7ce:	48 99       	R0 = B[P1] (X);
 100d7d0:	90 e6 04 00 	B[P2 + 0x4] = R0;
 100d7d4:	10 00       	RTS;
	...

0100d7d8 <_endian_change>:
 100d7d8:	c5 04       	[--SP] = (P5:5);
 100d7da:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d7de:	01 0c       	CC = R1 == 0x0;
 100d7e0:	11 18       	IF CC JUMP 0x100d802 <_endian_change+0x2a>;
 100d7e2:	29 32       	P5 = R1;
 100d7e4:	01 32       	P0 = R1;
 100d7e6:	08 32       	P1 = R0;
 100d7e8:	2a 45       	P2 = P5 >> 0x1;
 100d7ea:	f8 6f       	P0 += -0x1;		/* ( -1) */
 100d7ec:	01 5a       	P0 = P1 + P0;
 100d7ee:	28 32       	P5 = R0;
 100d7f0:	0a 6c       	P2 += 0x1;		/* (  1) */
 100d7f2:	b3 e0 07 20 	LSETUP(0x100d7f8 <_endian_change+0x20>, 0x100d800 <_endian_change+0x28>) LC1 = P2;
 100d7f6:	05 20       	JUMP.S 0x100d800 <_endian_change+0x28>;
 100d7f8:	40 99       	R0 = B[P0] (X);
 100d7fa:	49 98       	R1 = B[P1++] (X);
 100d7fc:	81 9a       	B[P0--] = R1;
 100d7fe:	28 9a       	B[P5++] = R0;
 100d800:	00 00       	NOP;
 100d802:	01 e8 00 00 	UNLINK;
 100d806:	85 04       	(P5:5) = [SP++];
 100d808:	10 00       	RTS;
	...

0100d80c <_crc16>:
 100d80c:	68 05       	[--SP] = (R7:5);
 100d80e:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100d812:	38 30       	R7 = R0;
 100d814:	31 30       	R6 = R1;
 100d816:	ff e3 93 e6 	CALL 0x100a53c <_crc8>;
 100d81a:	28 30       	R5 = R0;
 100d81c:	07 30       	R0 = R7;
 100d81e:	0e 30       	R1 = R6;
 100d820:	08 64       	R0 += 0x1;		/* (  1) */
 100d822:	f9 67       	R1 += -0x1;		/* ( -1) */
 100d824:	ff e3 8c e6 	CALL 0x100a53c <_crc8>;
 100d828:	45 4f       	R5 <<= 0x8;
 100d82a:	05 56       	R0 = R5 | R0;
 100d82c:	01 e8 00 00 	UNLINK;
 100d830:	28 05       	(R7:5) = [SP++];
 100d832:	10 00       	RTS;
 100d834:	0a 0a       	CC = R2 <= R1 (IU);
 100d836:	0a 0a       	CC = R2 <= R1 (IU);
 100d838:	2d 2d       	JUMP.S 0x100d292 <_osc_clk_init+0x62>;
 100d83a:	2d 2d       	JUMP.S 0x100d294 <_osc_clk_init+0x64>;
 100d83c:	2d 2d       	JUMP.S 0x100d296 <_osc_clk_init+0x66>;
 100d83e:	2d 2d       	JUMP.S 0x100d298 <_osc_clk_init+0x68>;
 100d840:	2d 2d       	JUMP.S 0x100d29a <_osc_clk_init+0x6a>;
 100d842:	2d 2d       	JUMP.S 0x100d29c <_osc_clk_init+0x6c>;
 100d844:	2d 2d       	JUMP.S 0x100d29e <_osc_clk_init+0x6e>;
 100d846:	2d 2d       	JUMP.S 0x100d2a0 <_osc_clk_init+0x70>;
 100d848:	2d 2d       	JUMP.S 0x100d2a2 <_osc_clk_init+0x72>;
 100d84a:	2d 2d       	JUMP.S 0x100d2a4 <_osc_clk_init+0x74>;
 100d84c:	2d 2d       	JUMP.S 0x100d2a6 <_osc_clk_init+0x76>;
 100d84e:	2d 2d       	JUMP.S 0x100d2a8 <_osc_clk_init+0x78>;
 100d850:	2d 2d       	JUMP.S 0x100d2aa <_osc_clk_init+0x7a>;
 100d852:	2d 65       	R5 += 0x25;		/* ( 37) */
 100d854:	78 63       	R0 = -0x11 (X);		/*		R0=0xffffffef(-17) */
 100d856:	65 70       	ILLEGAL;
 100d858:	74 69       	P4 = 0x2e (X);		/*		P4=0x2e( 46) */
 100d85a:	6f 6e       	FP += -0x33;		/* (-51) */
 100d85c:	5f 69       	FP = 0x2b (X);		/*		FP=0x2b( 43) */
 100d85e:	73 72       	ILLEGAL;
 100d860:	2d 2d       	JUMP.S 0x100d2ba <_osc_clk_init+0x8a>;
 100d862:	2d 2d       	JUMP.S 0x100d2bc <_osc_clk_init+0x8c>;
 100d864:	2d 2d       	JUMP.S 0x100d2be <_osc_clk_init+0x8e>;
 100d866:	2d 2d       	JUMP.S 0x100d2c0 <_osc_clk_init+0x90>;
 100d868:	2d 2d       	JUMP.S 0x100d2c2 <_osc_clk_init+0x92>;
 100d86a:	2d 2d       	JUMP.S 0x100d2c4 <_osc_clk_init+0x94>;
 100d86c:	2d 2d       	JUMP.S 0x100d2c6 <_osc_clk_init+0x96>;
 100d86e:	2d 2d       	JUMP.S 0x100d2c8 <_osc_clk_init+0x98>;
 100d870:	2d 2d       	JUMP.S 0x100d2ca <_osc_clk_init+0x9a>;
 100d872:	2d 2d       	JUMP.S 0x100d2cc <_osc_clk_init+0x9c>;
 100d874:	2d 0a       	CC = R5 <= R5 (IU);
 100d876:	0a 0a       	CC = R2 <= R1 (IU);
 100d878:	0a 00       	ILLEGAL;
 100d87a:	00 00       	NOP;
 100d87c:	6d 61       	R5 = 0x2d (X);		/*		R5=0x2d( 45) */
 100d87e:	6c 6c       	P4 += 0xd;		/* ( 13) */
 100d880:	6f 63       	R7 = -0x13 (X);		/*		R7=0xffffffed(-19) */
 100d882:	3a 20       	JUMP.S 0x100d8f6 <_crc16+0xea>;
 100d884:	25 78       	ILLEGAL;
 100d886:	0a 00       	ILLEGAL;
 100d888:	66 72       	ILLEGAL;
 100d88a:	65 65       	R5 += 0x2c;		/* ( 44) */
 100d88c:	2d 00       	ILLEGAL;
 100d88e:	00 00       	NOP;
 100d890:	2e 2e       	JUMP.S 0x100d4ec <_ble_irq_handler+0x4>;
 100d892:	2e 66       	R6 += -0x3b;		/* (-59) */
 100d894:	70 67       	R0 += -0x12;		/* (-18) */
 100d896:	61 20       	JUMP.S 0x100d958 <_hwi_init+0x8>;
 100d898:	62 74       	ILLEGAL;
 100d89a:	31 36       	L2 = R1;
 100d89c:	20 73       	ILLEGAL;
 100d89e:	65 74       	ILLEGAL;
 100d8a0:	75 70       	ILLEGAL;
 100d8a2:	20 6f       	P0 += -0x1c;		/* (-28) */
 100d8a4:	6b 2e       	JUMP.S 0x100d57a <_malloc+0x2>;
 100d8a6:	2e 2e       	JUMP.S 0x100d502 <_ble_irq_handler+0x1a>;
 100d8a8:	2e 2e       	JUMP.S 0x100d504 <_ble_irq_handler+0x1c>;
 100d8aa:	2e 2e       	JUMP.S 0x100d506 <_ble_irq_handler+0x1e>;
 100d8ac:	0a 00       	ILLEGAL;
 100d8ae:	00 00       	NOP;
 100d8b0:	2d 2d       	JUMP.S 0x100d30a <_clk_out+0x3a>;
 100d8b2:	2d 2d       	JUMP.S 0x100d30c <_clk_out+0x3c>;
 100d8b4:	2d 31       	ILLEGAL;
 100d8b6:	0a 00       	ILLEGAL;
 100d8b8:	2d 2d       	JUMP.S 0x100d312 <_bt16_pll_init+0x2>;
 100d8ba:	2d 2d       	JUMP.S 0x100d314 <_bt16_pll_init+0x4>;
 100d8bc:	2d 32       	P5 = R5;
 100d8be:	0a 00       	ILLEGAL;
 100d8c0:	2d 2d       	JUMP.S 0x100d31a <_bt16_pll_init+0xa>;
 100d8c2:	2d 2d       	JUMP.S 0x100d31c <_bt16_pll_init+0xc>;
 100d8c4:	2d 33       	ILLEGAL;
 100d8c6:	0a 00       	ILLEGAL;
 100d8c8:	2d 2d       	JUMP.S 0x100d322 <_bt16_pll_init+0x12>;
 100d8ca:	2d 2d       	JUMP.S 0x100d324 <_bt16_pll_init+0x14>;
 100d8cc:	2d 34       	M1 = R5;
 100d8ce:	0a 00       	ILLEGAL;
 100d8d0:	2d 2d       	JUMP.S 0x100d32a <_bt16_pll_init+0x1a>;
 100d8d2:	2d 2d       	JUMP.S 0x100d32c <_bt16_pll_init+0x1c>;
 100d8d4:	2d 35       	ILLEGAL;
 100d8d6:	0a 00       	ILLEGAL;
 100d8d8:	2d 2d       	JUMP.S 0x100d332 <_bt16_pll_init+0x22>;
 100d8da:	2d 2d       	JUMP.S 0x100d334 <_bt16_pll_init+0x24>;
 100d8dc:	2d 36       	L1 = R5;
 100d8de:	0a 00       	ILLEGAL;
 100d8e0:	2d 2d       	JUMP.S 0x100d33a <_bt16_pll_init+0x2a>;
 100d8e2:	2d 2d       	JUMP.S 0x100d33c <_bt16_pll_init+0x2c>;
 100d8e4:	2d 2d       	JUMP.S 0x100d33e <_bt16_pll_init+0x2e>;
 100d8e6:	2d 2d       	JUMP.S 0x100d340 <_bt16_pll_init+0x30>;
 100d8e8:	2d 2d       	JUMP.S 0x100d342 <_bt16_pll_init+0x32>;
 100d8ea:	2d 2d       	JUMP.S 0x100d344 <_bt16_pll_init+0x34>;
 100d8ec:	34 2e       	JUMP.S 0x100d554 <_exception_isr+0xc>;
 100d8ee:	30 20       	JUMP.S 0x100d94e <_pll_init+0x42>;
 100d8f0:	73 74       	ILLEGAL;
 100d8f2:	61 72       	ILLEGAL;
 100d8f4:	74 20       	JUMP.S 0x100d9dc <_HWI_Install+0x50>;
 100d8f6:	72 75       	ILLEGAL;
 100d8f8:	6e 20       	JUMP.S 0x100d9d4 <_HWI_Install+0x48>;
 100d8fa:	6c 6f       	P4 += -0x13;		/* (-19) */
 100d8fc:	6f 70       	ILLEGAL;
 100d8fe:	2d 2d       	JUMP.S 0x100d358 <_bt16_pll_init+0x48>;
 100d900:	2d 2d       	JUMP.S 0x100d35a <_bt16_pll_init+0x4a>;
 100d902:	2d 2d       	JUMP.S 0x100d35c <_bt16_pll_init+0x4c>;
 100d904:	2d 2d       	JUMP.S 0x100d35e <_bt16_pll_init+0x4e>;
 100d906:	2d 2d       	JUMP.S 0x100d360 <_bt16_pll_init+0x50>;
 100d908:	2d 0a       	CC = R5 <= R5 (IU);
	...

0100d90c <_pll_init>:
 100d90c:	c5 04       	[--SP] = (P5:5);
 100d90e:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70280 */
 100d912:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100d916:	0a e1 9c 02 	P2.L = 0x29c;		/* (668)	P2=0x7029c */
 100d91a:	10 91       	R0 = [P2];
 100d91c:	00 4a       	BITSET (R0, 0x0);		/* bit  0 */
 100d91e:	10 93       	[P2] = R0;
 100d920:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100d922:	4d e1 07 00 	P5.H = 0x7;		/* (  7)	P5=0x70000 */
 100d926:	00 e3 4b 06 	CALL 0x100e5bc <_delay>;
 100d92a:	0d e1 84 02 	P5.L = 0x284;		/* (644)	P5=0x70284 */
 100d92e:	28 95       	R0 = W[P5] (Z);
 100d930:	21 e1 c0 00 	R1 = 0xc0 (X);		/*		R1=0xc0(192) */
 100d934:	01 56       	R0 = R1 | R0;
 100d936:	28 97       	W[P5] = R0;
 100d938:	20 e1 64 00 	R0 = 0x64 (X);		/*		R0=0x64 <_bt16_devices>(100) */
 100d93c:	00 e3 40 06 	CALL 0x100e5bc <_delay>;
 100d940:	28 95       	R0 = W[P5] (Z);
 100d942:	40 4a       	BITSET (R0, 0x8);		/* bit  8 */
 100d944:	28 97       	W[P5] = R0;
 100d946:	01 e8 00 00 	UNLINK;
 100d94a:	85 04       	(P5:5) = [SP++];
 100d94c:	10 00       	RTS;
	...

0100d950 <_hwi_init>:
 100d950:	00 00       	NOP;
 100d952:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d956:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100d958:	38 3e       	EMUDAT = R0;
 100d95a:	01 e8 00 00 	UNLINK;
 100d95e:	10 00       	RTS;

0100d960 <_clear_ie>:
 100d960:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100d962:	81 40       	R1 <<= R0;
 100d964:	c9 43       	R1 =~ R1;
 100d966:	d7 31       	R2 = EMUDAT;
 100d968:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d96c:	4a 54       	R1 = R2 & R1;
 100d96e:	39 3e       	EMUDAT = R1;
 100d970:	01 e8 00 00 	UNLINK;
 100d974:	10 00       	RTS;
	...

0100d978 <_set_ie>:
 100d978:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100d97a:	81 40       	R1 <<= R0;
 100d97c:	d7 31       	R2 = EMUDAT;
 100d97e:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100d982:	4a 56       	R1 = R2 | R1;
 100d984:	39 3e       	EMUDAT = R1;
 100d986:	01 e8 00 00 	UNLINK;
 100d98a:	10 00       	RTS;

0100d98c <_HWI_Install>:
 100d98c:	e4 05       	[--SP] = (R7:4, P5:4);
 100d98e:	28 32       	P5 = R0;
 100d990:	21 32       	P4 = R1;
 100d992:	30 30       	R6 = R0;
 100d994:	41 e1 cc cc 	R1.H = 0xcccc;		/* (-13108)	R1=0xcccc0001(-859045887) */
 100d998:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100d99c:	f5 6f       	P5 += -0x2;		/* ( -2) */
 100d99e:	22 30       	R4 = R2;
 100d9a0:	01 e1 cd cc 	R1.L = 0xcccd;		/* (-13107)	R1=0xcccccccd(-858993459) */
 100d9a4:	45 30       	R0 = P5;
 100d9a6:	00 e3 3d 13 	CALL 0x1010020 <___umulsi3_highpart>;
 100d9aa:	82 c6 e8 8b 	R5 = R0 >> 0x3;
 100d9ae:	57 60       	R7 = 0xa (X);		/*		R7=0xa( 10) */
 100d9b0:	0e 32       	P1 = R6;
 100d9b2:	ef 40       	R7 *= R5;
 100d9b4:	45 30       	R0 = P5;
 100d9b6:	f8 53       	R7 = R0 - R7;
 100d9b8:	82 c6 0f 80 	R0 = R7 << 0x1;
 100d9bc:	4a 44       	P2 = P1 << 0x2;
 100d9be:	f8 51       	R7 = R0 + R7;
 100d9c0:	41 e1 cc cc 	R1.H = 0xcccc;		/* (-13108)	R1=0xcccccccd(-858993459) */
 100d9c4:	14 e7 e0 7f 	[P2 + 0x1ff80] = P4;
 100d9c8:	45 30       	R0 = P5;
 100d9ca:	01 e1 cd cc 	R1.L = 0xcccd;		/* (-13107)	R1=0xcccccccd(-858993459) */
 100d9ce:	00 e3 29 13 	CALL 0x1010020 <___umulsi3_highpart>;
 100d9d2:	05 0c       	CC = R5 == 0x0;
 100d9d4:	04 1c       	IF CC JUMP 0x100d9dc <_HWI_Install+0x50> (BP);
 100d9d6:	0d 0c       	CC = R5 == 0x1;
 100d9d8:	0c 14       	IF !CC JUMP 0x100d9f0 <_HWI_Install+0x64> (BP);
 100d9da:	06 20       	JUMP.S 0x100d9e6 <_HWI_Install+0x5a>;
 100d9dc:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x7029c */
 100d9e0:	0a e1 50 80 	P2.L = 0x8050;		/* (-32688)	P2=0x78050 */
 100d9e4:	0a 20       	JUMP.S 0x100d9f8 <_HWI_Install+0x6c>;
 100d9e6:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x78050 */
 100d9ea:	0a e1 54 80 	P2.L = 0x8054;		/* (-32684)	P2=0x78054 */
 100d9ee:	05 20       	JUMP.S 0x100d9f8 <_HWI_Install+0x6c>;
 100d9f0:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x78054 */
 100d9f4:	0a e1 58 80 	P2.L = 0x8058;		/* (-32680)	P2=0x78058 */
 100d9f8:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 100d9fa:	08 30       	R1 = R0;
 100d9fc:	b9 40       	R1 <<= R7;
 100d9fe:	12 91       	R2 = [P2];
 100da00:	c9 43       	R1 =~ R1;
 100da02:	51 54       	R1 = R1 & R2;
 100da04:	11 93       	[P2] = R1;
 100da06:	04 55       	R4 = R4 & R0;
 100da08:	11 91       	R1 = [P2];
 100da0a:	bc 40       	R4 <<= R7;
 100da0c:	0c 57       	R4 = R4 | R1;
 100da0e:	14 93       	[P2] = R4;
 100da10:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x78058 */
 100da14:	0a e1 4c 80 	P2.L = 0x804c;		/* (-32692)	P2=0x7804c */
 100da18:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100da1a:	11 91       	R1 = [P2];
 100da1c:	b0 40       	R0 <<= R6;
 100da1e:	48 56       	R1 = R0 | R1;
 100da20:	11 93       	[P2] = R1;
 100da22:	0e 0e       	CC = R6 <= 0x1 (IU);
 100da24:	04 18       	IF CC JUMP 0x100da2c <_HWI_Install+0xa0>;
 100da26:	cf 31       	R1 = EMUDAT;
 100da28:	01 56       	R0 = R1 | R0;
 100da2a:	38 3e       	EMUDAT = R0;
 100da2c:	01 e8 00 00 	UNLINK;
 100da30:	a4 05       	(R7:4, P5:4) = [SP++];
 100da32:	10 00       	RTS;

0100da34 <_chdat>:
 100da34:	82 c6 c0 84 	R2 = R0 << 0x18;
 100da38:	82 c6 40 83 	R1 = R0 >> 0x18;
 100da3c:	4a 56       	R1 = R2 | R1;
 100da3e:	82 c6 80 85 	R2 = R0 >> 0x10;
 100da42:	42 4f       	R2 <<= 0x8;
 100da44:	40 4e       	R0 >>= 0x8;
 100da46:	d2 42       	R2 = R2.L (Z);
 100da48:	40 43       	R0 = R0.B (Z);
 100da4a:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100da4e:	51 56       	R1 = R1 | R2;
 100da50:	80 4f       	R0 <<= 0x10;
 100da52:	01 56       	R0 = R1 | R0;
 100da54:	01 e8 00 00 	UNLINK;
 100da58:	10 00       	RTS;
	...

0100da5c <_spi_int>:
 100da5c:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x7804c */
 100da60:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100da64:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100da66:	0a e1 18 01 	P2.L = 0x118;		/* (280)	P2=0x70118 */
 100da6a:	10 97       	W[P2] = R0;
 100da6c:	e2 6f       	P2 += -0x4;		/* ( -4) */
 100da6e:	10 95       	R0 = W[P2] (Z);
 100da70:	08 4a       	BITSET (R0, 0x1);		/* bit  1 */
 100da72:	10 97       	W[P2] = R0;
 100da74:	10 95       	R0 = W[P2] (Z);
 100da76:	18 4c       	BITCLR (R0, 0x3);		/* bit  3 */
 100da78:	10 97       	W[P2] = R0;
 100da7a:	10 95       	R0 = W[P2] (Z);
 100da7c:	20 4a       	BITSET (R0, 0x4);		/* bit  4 */
 100da7e:	10 97       	W[P2] = R0;
 100da80:	10 95       	R0 = W[P2] (Z);
 100da82:	28 4c       	BITCLR (R0, 0x5);		/* bit  5 */
 100da84:	10 97       	W[P2] = R0;
 100da86:	10 95       	R0 = W[P2] (Z);
 100da88:	30 4c       	BITCLR (R0, 0x6);		/* bit  6 */
 100da8a:	10 97       	W[P2] = R0;
 100da8c:	10 95       	R0 = W[P2] (Z);
 100da8e:	60 4a       	BITSET (R0, 0xc);		/* bit 12 */
 100da90:	10 97       	W[P2] = R0;
 100da92:	10 95       	R0 = W[P2] (Z);
 100da94:	68 4a       	BITSET (R0, 0xd);		/* bit 13 */
 100da96:	10 97       	W[P2] = R0;
 100da98:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70118 */
 100da9c:	0a e1 28 00 	P2.L = 0x28;		/* ( 40)	P2=0x70028 */
 100daa0:	10 95       	R0 = W[P2] (Z);
 100daa2:	30 4a       	BITSET (R0, 0x6);		/* bit  6 */
 100daa4:	49 e1 07 00 	P1.H = 0x7;		/* (  7)	P1=0x73c18 */
 100daa8:	10 97       	W[P2] = R0;
 100daaa:	09 e1 20 00 	P1.L = 0x20;		/* ( 32)	P1=0x70020 */
 100daae:	08 95       	R0 = W[P1] (Z);
 100dab0:	28 4c       	BITCLR (R0, 0x5);		/* bit  5 */
 100dab2:	08 97       	W[P1] = R0;
 100dab4:	10 95       	R0 = W[P2] (Z);
 100dab6:	28 4c       	BITCLR (R0, 0x5);		/* bit  5 */
 100dab8:	10 97       	W[P2] = R0;
 100daba:	a2 6c       	P2 += 0x14;		/* ( 20) */
 100dabc:	10 95       	R0 = W[P2] (Z);
 100dabe:	20 4a       	BITSET (R0, 0x4);		/* bit  4 */
 100dac0:	10 97       	W[P2] = R0;
 100dac2:	01 e8 00 00 	UNLINK;
 100dac6:	10 00       	RTS;

0100dac8 <_spi_wr>:
 100dac8:	c5 04       	[--SP] = (P5:5);
 100daca:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70028 */
 100dace:	0a e1 14 01 	P2.L = 0x114;		/* (276)	P2=0x70114 */
 100dad2:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100dad6:	12 95       	R2 = W[P2] (Z);
 100dad8:	02 4a       	BITSET (R2, 0x0);		/* bit  0 */
 100dada:	4a 32       	P1 = P2;
 100dadc:	12 97       	W[P2] = R2;
 100dade:	41 34       	I0 = P1;
 100dae0:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70114 */
 100dae4:	22 9d       	R2.L = W[I0];
 100dae6:	92 42       	R2 = R2.L (X);
 100dae8:	0a e1 14 01 	P2.L = 0x114;		/* (276)	P2=0x70114 */
 100daec:	82 0c       	CC = R2 < 0x0;
 100daee:	f9 17       	IF !CC JUMP 0x100dae0 <_spi_wr+0x18> (BP);
 100daf0:	12 95       	R2 = W[P2] (Z);
 100daf2:	62 4c       	BITCLR (R2, 0xc);		/* bit 12 */
 100daf4:	12 97       	W[P2] = R2;
 100daf6:	22 e1 80 ff 	R2 = -0x80 (X);		/*		R2=0xffffff80(-128) */
 100dafa:	49 e1 07 00 	P1.H = 0x7;		/* (  7)	P1=0x70020 */
 100dafe:	02 56       	R0 = R2 | R0;
 100db00:	09 e1 1c 01 	P1.L = 0x11c;		/* (284)	P1=0x7011c */
 100db04:	08 9b       	B[P1] = R0;
 100db06:	49 e1 07 00 	P1.H = 0x7;		/* (  7)	P1=0x7011c */
 100db0a:	09 e1 20 00 	P1.L = 0x20;		/* ( 32)	P1=0x70020 */
 100db0e:	08 95       	R0 = W[P1] (Z);
 100db10:	28 4a       	BITSET (R0, 0x5);		/* bit  5 */
 100db12:	08 97       	W[P1] = R0;
 100db14:	42 34       	I0 = P2;
 100db16:	4d e1 07 00 	P5.H = 0x7;		/* (  7)	P5=0x70284 */
 100db1a:	20 9d       	R0.L = W[I0];
 100db1c:	80 42       	R0 = R0.L (X);
 100db1e:	0d e1 14 01 	P5.L = 0x114;		/* (276)	P5=0x70114 */
 100db22:	80 0c       	CC = R0 < 0x0;
 100db24:	f9 17       	IF !CC JUMP 0x100db16 <_spi_wr+0x4e> (BP);
 100db26:	28 95       	R0 = W[P5] (Z);
 100db28:	60 4c       	BITCLR (R0, 0xc);		/* bit 12 */
 100db2a:	28 97       	W[P5] = R0;
 100db2c:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70114 */
 100db30:	47 30       	R0 = FP;
 100db32:	f1 bb       	[FP -0x4] = R1;
 100db34:	0a e1 20 01 	P2.L = 0x120;		/* (288)	P2=0x70120 */
 100db38:	e0 67       	R0 += -0x4;		/* ( -4) */
 100db3a:	10 93       	[P2] = R0;
 100db3c:	22 6c       	P2 += 0x4;		/* (  4) */
 100db3e:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100db40:	10 93       	[P2] = R0;
 100db42:	20 e1 64 00 	R0 = 0x64 (X);		/*		R0=0x64 <_bt16_devices>(100) */
 100db46:	00 e3 3b 05 	CALL 0x100e5bc <_delay>;
 100db4a:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70120 */
 100db4e:	0a e1 20 00 	P2.L = 0x20;		/* ( 32)	P2=0x70020 */
 100db52:	10 95       	R0 = W[P2] (Z);
 100db54:	28 4c       	BITCLR (R0, 0x5);		/* bit  5 */
 100db56:	10 97       	W[P2] = R0;
 100db58:	45 34       	I0 = P5;
 100db5a:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70020 */
 100db5e:	20 9d       	R0.L = W[I0];
 100db60:	80 42       	R0 = R0.L (X);
 100db62:	0a e1 14 01 	P2.L = 0x114;		/* (276)	P2=0x70114 */
 100db66:	80 0c       	CC = R0 < 0x0;
 100db68:	f9 17       	IF !CC JUMP 0x100db5a <_spi_wr+0x92> (BP);
 100db6a:	10 95       	R0 = W[P2] (Z);
 100db6c:	00 4c       	BITCLR (R0, 0x0);		/* bit  0 */
 100db6e:	10 97       	W[P2] = R0;
 100db70:	01 e8 00 00 	UNLINK;
 100db74:	85 04       	(P5:5) = [SP++];
 100db76:	10 00       	RTS;

0100db78 <_spi_rd>:
 100db78:	c5 04       	[--SP] = (P5:5);
 100db7a:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70114 */
 100db7e:	0a e1 14 01 	P2.L = 0x114;		/* (276)	P2=0x70114 */
 100db82:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100db86:	11 95       	R1 = W[P2] (Z);
 100db88:	01 4a       	BITSET (R1, 0x0);		/* bit  0 */
 100db8a:	4a 32       	P1 = P2;
 100db8c:	11 97       	W[P2] = R1;
 100db8e:	41 34       	I0 = P1;
 100db90:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70114 */
 100db94:	21 9d       	R1.L = W[I0];
 100db96:	89 42       	R1 = R1.L (X);
 100db98:	0a e1 14 01 	P2.L = 0x114;		/* (276)	P2=0x70114 */
 100db9c:	81 0c       	CC = R1 < 0x0;
 100db9e:	f9 17       	IF !CC JUMP 0x100db90 <_spi_rd+0x18> (BP);
 100dba0:	11 95       	R1 = W[P2] (Z);
 100dba2:	61 4c       	BITCLR (R1, 0xc);		/* bit 12 */
 100dba4:	11 97       	W[P2] = R1;
 100dba6:	21 e1 7f 00 	R1 = 0x7f (X);		/*		R1=0x7f(127) */
 100dbaa:	49 e1 07 00 	P1.H = 0x7;		/* (  7)	P1=0x70020 */
 100dbae:	01 54       	R0 = R1 & R0;
 100dbb0:	09 e1 1c 01 	P1.L = 0x11c;		/* (284)	P1=0x7011c */
 100dbb4:	08 9b       	B[P1] = R0;
 100dbb6:	49 e1 07 00 	P1.H = 0x7;		/* (  7)	P1=0x7011c */
 100dbba:	09 e1 20 00 	P1.L = 0x20;		/* ( 32)	P1=0x70020 */
 100dbbe:	08 95       	R0 = W[P1] (Z);
 100dbc0:	28 4a       	BITSET (R0, 0x5);		/* bit  5 */
 100dbc2:	08 97       	W[P1] = R0;
 100dbc4:	42 34       	I0 = P2;
 100dbc6:	4d e1 07 00 	P5.H = 0x7;		/* (  7)	P5=0x70114 */
 100dbca:	20 9d       	R0.L = W[I0];
 100dbcc:	80 42       	R0 = R0.L (X);
 100dbce:	0d e1 14 01 	P5.L = 0x114;		/* (276)	P5=0x70114 */
 100dbd2:	80 0c       	CC = R0 < 0x0;
 100dbd4:	f9 17       	IF !CC JUMP 0x100dbc6 <_spi_rd+0x4e> (BP);
 100dbd6:	28 95       	R0 = W[P5] (Z);
 100dbd8:	60 4a       	BITSET (R0, 0xc);		/* bit 12 */
 100dbda:	28 97       	W[P5] = R0;
 100dbdc:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70114 */
 100dbe0:	47 30       	R0 = FP;
 100dbe2:	0a e1 20 01 	P2.L = 0x120;		/* (288)	P2=0x70120 */
 100dbe6:	e0 67       	R0 += -0x4;		/* ( -4) */
 100dbe8:	10 93       	[P2] = R0;
 100dbea:	22 6c       	P2 += 0x4;		/* (  4) */
 100dbec:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100dbee:	10 93       	[P2] = R0;
 100dbf0:	20 e1 64 00 	R0 = 0x64 (X);		/*		R0=0x64 <_bt16_devices>(100) */
 100dbf4:	00 e3 e4 04 	CALL 0x100e5bc <_delay>;
 100dbf8:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70120 */
 100dbfc:	0a e1 20 00 	P2.L = 0x20;		/* ( 32)	P2=0x70020 */
 100dc00:	10 95       	R0 = W[P2] (Z);
 100dc02:	28 4c       	BITCLR (R0, 0x5);		/* bit  5 */
 100dc04:	10 97       	W[P2] = R0;
 100dc06:	45 34       	I0 = P5;
 100dc08:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70020 */
 100dc0c:	20 9d       	R0.L = W[I0];
 100dc0e:	80 42       	R0 = R0.L (X);
 100dc10:	0a e1 14 01 	P2.L = 0x114;		/* (276)	P2=0x70114 */
 100dc14:	80 0c       	CC = R0 < 0x0;
 100dc16:	f9 17       	IF !CC JUMP 0x100dc08 <_spi_rd+0x90> (BP);
 100dc18:	10 95       	R0 = W[P2] (Z);
 100dc1a:	00 4c       	BITCLR (R0, 0x0);		/* bit  0 */
 100dc1c:	10 97       	W[P2] = R0;
 100dc1e:	f0 b9       	R0 = [FP -0x4];
 100dc20:	01 e8 00 00 	UNLINK;
 100dc24:	85 04       	(P5:5) = [SP++];
 100dc26:	10 00       	RTS;

0100dc28 <_spi_wr_rg>:
 100dc28:	60 05       	[--SP] = (R7:4);
 100dc2a:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100dc2e:	38 30       	R7 = R0;
 100dc30:	21 30       	R4 = R1;
 100dc32:	2a 30       	R5 = R2;
 100dc34:	7e a2       	R6 = [FP + 0x24];
 100dc36:	ff e3 a1 ff 	CALL 0x100db78 <_spi_rd>;
 100dc3a:	6d 43       	R5 = R5.B (Z);
 100dc3c:	fa 63       	R2 = -0x1 (X);		/*		R2=0xffffffff( -1) */
 100dc3e:	aa 40       	R2 <<= R5;
 100dc40:	d2 43       	R2 =~ R2;
 100dc42:	64 43       	R4 = R4.B (Z);
 100dc44:	0a 30       	R1 = R2;
 100dc46:	a1 40       	R1 <<= R4;
 100dc48:	c9 43       	R1 =~ R1;
 100dc4a:	b2 55       	R6 = R2 & R6;
 100dc4c:	48 54       	R1 = R0 & R1;
 100dc4e:	a6 40       	R6 <<= R4;
 100dc50:	71 56       	R1 = R1 | R6;
 100dc52:	07 30       	R0 = R7;
 100dc54:	01 e8 00 00 	UNLINK;
 100dc58:	20 05       	(R7:4) = [SP++];
 100dc5a:	ff e2 37 ff 	JUMP.L 0x100dac8 <_spi_wr>;
	...

0100dc60 <_spi_agc_inc>:
 100dc60:	e5 05       	[--SP] = (R7:4, P5:5);
 100dc62:	00 43       	R0 = R0.B (X);
 100dc64:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100dc68:	00 0c       	CC = R0 == 0x0;
 100dc6a:	17 14       	IF !CC JUMP 0x100dc98 <_spi_agc_inc+0x38> (BP);
 100dc6c:	08 43       	R0 = R1.B (X);
 100dc6e:	80 0c       	CC = R0 < 0x0;
 100dc70:	07 14       	IF !CC JUMP 0x100dc7e <_spi_agc_inc+0x1e> (BP);
 100dc72:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x114 */
 100dc76:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100dc78:	0a e1 29 44 	P2.L = 0x4429;		/* (17449)	P2=0x4429 <_agc_set.1331> */
 100dc7c:	09 20       	JUMP.S 0x100dc8e <_spi_agc_inc+0x2e>;
 100dc7e:	7a 60       	R2 = 0xf (X);		/*		R2=0xf( 15) */
 100dc80:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4429 <_agc_set.1331> */
 100dc84:	10 09       	CC = R0 <= R2;
 100dc86:	0a e1 29 44 	P2.L = 0x4429;		/* (17449)	P2=0x4429 <_agc_set.1331> */
 100dc8a:	05 1c       	IF CC JUMP 0x100dc94 <_spi_agc_inc+0x34> (BP);
 100dc8c:	78 60       	R0 = 0xf (X);		/*		R0=0xf( 15) */
 100dc8e:	10 9b       	B[P2] = R0;
 100dc90:	05 68       	P5 = 0x0 (X);		/*		P5=0x0(  0) */
 100dc92:	15 20       	JUMP.S 0x100dcbc <_spi_agc_inc+0x5c>;
 100dc94:	11 9b       	B[P2] = R1;
 100dc96:	12 20       	JUMP.S 0x100dcba <_spi_agc_inc+0x5a>;
 100dc98:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4429 <_agc_set.1331> */
 100dc9c:	0a e1 29 44 	P2.L = 0x4429;		/* (17449)	P2=0x4429 <_agc_set.1331> */
 100dca0:	50 99       	R0 = B[P2] (X);
 100dca2:	41 50       	R1 = R1 + R0;
 100dca4:	11 9b       	B[P2] = R1;
 100dca6:	09 43       	R1 = R1.B (X);
 100dca8:	81 0c       	CC = R1 < 0x0;
 100dcaa:	03 14       	IF !CC JUMP 0x100dcb0 <_spi_agc_inc+0x50> (BP);
 100dcac:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100dcae:	f0 2f       	JUMP.S 0x100dc8e <_spi_agc_inc+0x2e>;
 100dcb0:	78 60       	R0 = 0xf (X);		/*		R0=0xf( 15) */
 100dcb2:	01 09       	CC = R1 <= R0;
 100dcb4:	03 1c       	IF CC JUMP 0x100dcba <_spi_agc_inc+0x5a> (BP);
 100dcb6:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100dcb8:	eb 2f       	JUMP.S 0x100dc8e <_spi_agc_inc+0x2e>;
 100dcba:	0d 68       	P5 = 0x1 (X);		/*		P5=0x1(  1) */
 100dcbc:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4429 <_agc_set.1331> */
 100dcc0:	0a e1 29 44 	P2.L = 0x4429;		/* (17449)	P2=0x4429 <_agc_set.1331> */
 100dcc4:	51 99       	R1 = B[P2] (X);
 100dcc6:	48 43       	R0 = R1.B (Z);
 100dcc8:	7a 60       	R2 = 0xf (X);		/*		R2=0xf( 15) */
 100dcca:	10 0a       	CC = R0 <= R2 (IU);
 100dccc:	3a 14       	IF !CC JUMP 0x100dd40 <_spi_agc_inc+0xe0> (BP);
 100dcce:	08 32       	P1 = R0;
 100dcd0:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1004429 */
 100dcd4:	0a e1 80 de 	P2.L = 0xde80;		/* (-8576)	P2=0x100de80 */
 100dcd8:	8a 5e       	P2 = P2 + (P1 << 0x2);
 100dcda:	52 91       	P2 = [P2];
 100dcdc:	52 00       	JUMP (P2);
 100dcde:	04 60       	R4 = 0x0 (X);		/*		R4=0x0(  0) */
 100dce0:	05 60       	R5 = 0x0 (X);		/*		R5=0x0(  0) */
 100dce2:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100dce4:	04 20       	JUMP.S 0x100dcec <_spi_agc_inc+0x8c>;
 100dce6:	04 60       	R4 = 0x0 (X);		/*		R4=0x0(  0) */
 100dce8:	05 60       	R5 = 0x0 (X);		/*		R5=0x0(  0) */
 100dcea:	0e 60       	R6 = 0x1 (X);		/*		R6=0x1(  1) */
 100dcec:	17 60       	R7 = 0x2 (X);		/*		R7=0x2(  2) */
 100dcee:	33 20       	JUMP.S 0x100dd54 <_spi_agc_inc+0xf4>;
 100dcf0:	04 60       	R4 = 0x0 (X);		/*		R4=0x0(  0) */
 100dcf2:	05 60       	R5 = 0x0 (X);		/*		R5=0x0(  0) */
 100dcf4:	0e 60       	R6 = 0x1 (X);		/*		R6=0x1(  1) */
 100dcf6:	2e 20       	JUMP.S 0x100dd52 <_spi_agc_inc+0xf2>;
 100dcf8:	04 60       	R4 = 0x0 (X);		/*		R4=0x0(  0) */
 100dcfa:	05 60       	R5 = 0x0 (X);		/*		R5=0x0(  0) */
 100dcfc:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100dcfe:	08 20       	JUMP.S 0x100dd0e <_spi_agc_inc+0xae>;
 100dd00:	04 60       	R4 = 0x0 (X);		/*		R4=0x0(  0) */
 100dd02:	05 60       	R5 = 0x0 (X);		/*		R5=0x0(  0) */
 100dd04:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100dd06:	21 20       	JUMP.S 0x100dd48 <_spi_agc_inc+0xe8>;
 100dd08:	04 60       	R4 = 0x0 (X);		/*		R4=0x0(  0) */
 100dd0a:	05 60       	R5 = 0x0 (X);		/*		R5=0x0(  0) */
 100dd0c:	0e 60       	R6 = 0x1 (X);		/*		R6=0x1(  1) */
 100dd0e:	1f 60       	R7 = 0x3 (X);		/*		R7=0x3(  3) */
 100dd10:	22 20       	JUMP.S 0x100dd54 <_spi_agc_inc+0xf4>;
 100dd12:	04 60       	R4 = 0x0 (X);		/*		R4=0x0(  0) */
 100dd14:	05 60       	R5 = 0x0 (X);		/*		R5=0x0(  0) */
 100dd16:	0e 60       	R6 = 0x1 (X);		/*		R6=0x1(  1) */
 100dd18:	18 20       	JUMP.S 0x100dd48 <_spi_agc_inc+0xe8>;
 100dd1a:	04 60       	R4 = 0x0 (X);		/*		R4=0x0(  0) */
 100dd1c:	06 20       	JUMP.S 0x100dd28 <_spi_agc_inc+0xc8>;
 100dd1e:	14 60       	R4 = 0x2 (X);		/*		R4=0x2(  2) */
 100dd20:	04 20       	JUMP.S 0x100dd28 <_spi_agc_inc+0xc8>;
 100dd22:	14 60       	R4 = 0x2 (X);		/*		R4=0x2(  2) */
 100dd24:	05 20       	JUMP.S 0x100dd2e <_spi_agc_inc+0xce>;
 100dd26:	44 60       	R4 = 0x8 (X);		/*		R4=0x8(  8) */
 100dd28:	05 60       	R5 = 0x0 (X);		/*		R5=0x0(  0) */
 100dd2a:	06 20       	JUMP.S 0x100dd36 <_spi_agc_inc+0xd6>;
 100dd2c:	44 60       	R4 = 0x8 (X);		/*		R4=0x8(  8) */
 100dd2e:	15 60       	R5 = 0x2 (X);		/*		R5=0x2(  2) */
 100dd30:	03 20       	JUMP.S 0x100dd36 <_spi_agc_inc+0xd6>;
 100dd32:	44 60       	R4 = 0x8 (X);		/*		R4=0x8(  8) */
 100dd34:	25 60       	R5 = 0x4 (X);		/*		R5=0x4(  4) */
 100dd36:	16 60       	R6 = 0x2 (X);		/*		R6=0x2(  2) */
 100dd38:	08 20       	JUMP.S 0x100dd48 <_spi_agc_inc+0xe8>;
 100dd3a:	44 60       	R4 = 0x8 (X);		/*		R4=0x8(  8) */
 100dd3c:	25 60       	R5 = 0x4 (X);		/*		R5=0x4(  4) */
 100dd3e:	04 20       	JUMP.S 0x100dd46 <_spi_agc_inc+0xe6>;
 100dd40:	05 68       	P5 = 0x0 (X);		/*		P5=0x0(  0) */
 100dd42:	44 60       	R4 = 0x8 (X);		/*		R4=0x8(  8) */
 100dd44:	45 60       	R5 = 0x8 (X);		/*		R5=0x8(  8) */
 100dd46:	1e 60       	R6 = 0x3 (X);		/*		R6=0x3(  3) */
 100dd48:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 100dd4a:	05 20       	JUMP.S 0x100dd54 <_spi_agc_inc+0xf4>;
 100dd4c:	04 60       	R4 = 0x0 (X);		/*		R4=0x0(  0) */
 100dd4e:	05 60       	R5 = 0x0 (X);		/*		R5=0x0(  0) */
 100dd50:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100dd52:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100dd54:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000001(16777217) */
 100dd58:	09 43       	R1 = R1.B (X);
 100dd5a:	00 e1 78 de 	R0.L = 0xde78;		/* (-8584)	R0=0x100de78(16834168) */
 100dd5e:	00 e3 11 09 	CALL 0x100ef80 <_printf>;
 100dd62:	3f 43       	R7 = R7.B (X);
 100dd64:	f7 b0       	[SP + 0xc] = R7;
 100dd66:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100dd68:	e1 60       	R1 = 0x1c (X);		/*		R1=0x1c( 28) */
 100dd6a:	12 60       	R2 = 0x2 (X);		/*		R2=0x2(  2) */
 100dd6c:	ff e3 5e ff 	CALL 0x100dc28 <_spi_wr_rg>;
 100dd70:	36 43       	R6 = R6.B (X);
 100dd72:	f6 b0       	[SP + 0xc] = R6;
 100dd74:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100dd76:	49 60       	R1 = 0x9 (X);		/*		R1=0x9(  9) */
 100dd78:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100dd7a:	ff e3 57 ff 	CALL 0x100dc28 <_spi_wr_rg>;
 100dd7e:	2d 43       	R5 = R5.B (X);
 100dd80:	f5 b0       	[SP + 0xc] = R5;
 100dd82:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100dd84:	b1 60       	R1 = 0x16 (X);		/*		R1=0x16( 22) */
 100dd86:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 100dd88:	ff e3 50 ff 	CALL 0x100dc28 <_spi_wr_rg>;
 100dd8c:	24 43       	R4 = R4.B (X);
 100dd8e:	f4 b0       	[SP + 0xc] = R4;
 100dd90:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100dd92:	d1 60       	R1 = 0x1a (X);		/*		R1=0x1a( 26) */
 100dd94:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 100dd96:	ff e3 49 ff 	CALL 0x100dc28 <_spi_wr_rg>;
 100dd9a:	45 30       	R0 = P5;
 100dd9c:	01 e8 00 00 	UNLINK;
 100dda0:	a5 05       	(R7:4, P5:5) = [SP++];
 100dda2:	10 00       	RTS;

0100dda4 <_spi_pwr_inc>:
 100dda4:	78 05       	[--SP] = (R7:7);
 100dda6:	00 43       	R0 = R0.B (X);
 100dda8:	00 e8 04 00 	LINK 0x10;		/* (16) */
 100ddac:	00 0c       	CC = R0 == 0x0;
 100ddae:	16 14       	IF !CC JUMP 0x100ddda <_spi_pwr_inc+0x36> (BP);
 100ddb0:	08 43       	R0 = R1.B (X);
 100ddb2:	80 0c       	CC = R0 < 0x0;
 100ddb4:	07 14       	IF !CC JUMP 0x100ddc2 <_spi_pwr_inc+0x1e> (BP);
 100ddb6:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0xde80 */
 100ddba:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100ddbc:	0a e1 28 44 	P2.L = 0x4428;		/* (17448)	P2=0x4428 <_pwr_set.1360> */
 100ddc0:	1c 20       	JUMP.S 0x100ddf8 <_spi_pwr_inc+0x54>;
 100ddc2:	72 60       	R2 = 0xe (X);		/*		R2=0xe( 14) */
 100ddc4:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4428 <_pwr_set.1360> */
 100ddc8:	10 09       	CC = R0 <= R2;
 100ddca:	0a e1 28 44 	P2.L = 0x4428;		/* (17448)	P2=0x4428 <_pwr_set.1360> */
 100ddce:	03 1c       	IF CC JUMP 0x100ddd4 <_spi_pwr_inc+0x30> (BP);
 100ddd0:	70 60       	R0 = 0xe (X);		/*		R0=0xe( 14) */
 100ddd2:	13 20       	JUMP.S 0x100ddf8 <_spi_pwr_inc+0x54>;
 100ddd4:	11 9b       	B[P2] = R1;
 100ddd6:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100ddd8:	13 20       	JUMP.S 0x100ddfe <_spi_pwr_inc+0x5a>;
 100ddda:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4428 <_pwr_set.1360> */
 100ddde:	0a e1 28 44 	P2.L = 0x4428;		/* (17448)	P2=0x4428 <_pwr_set.1360> */
 100dde2:	50 99       	R0 = B[P2] (X);
 100dde4:	41 50       	R1 = R1 + R0;
 100dde6:	11 9b       	B[P2] = R1;
 100dde8:	09 43       	R1 = R1.B (X);
 100ddea:	81 0c       	CC = R1 < 0x0;
 100ddec:	03 14       	IF !CC JUMP 0x100ddf2 <_spi_pwr_inc+0x4e> (BP);
 100ddee:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100ddf0:	04 20       	JUMP.S 0x100ddf8 <_spi_pwr_inc+0x54>;
 100ddf2:	70 60       	R0 = 0xe (X);		/*		R0=0xe( 14) */
 100ddf4:	01 09       	CC = R1 <= R0;
 100ddf6:	03 1c       	IF CC JUMP 0x100ddfc <_spi_pwr_inc+0x58> (BP);
 100ddf8:	10 9b       	B[P2] = R0;
 100ddfa:	ee 2f       	JUMP.S 0x100ddd6 <_spi_pwr_inc+0x32>;
 100ddfc:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 100ddfe:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4428 <_pwr_set.1360> */
 100de02:	0a e1 28 44 	P2.L = 0x4428;		/* (17448)	P2=0x4428 <_pwr_set.1360> */
 100de06:	10 99       	R0 = B[P2] (Z);
 100de08:	71 60       	R1 = 0xe (X);		/*		R1=0xe( 14) */
 100de0a:	08 0a       	CC = R0 <= R1 (IU);
 100de0c:	25 14       	IF !CC JUMP 0x100de56 <_spi_pwr_inc+0xb2> (BP);
 100de0e:	08 32       	P1 = R0;
 100de10:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1004428 */
 100de14:	0a e1 c0 de 	P2.L = 0xdec0;		/* (-8512)	P2=0x100dec0 */
 100de18:	8a 5e       	P2 = P2 + (P1 << 0x2);
 100de1a:	52 91       	P2 = [P2];
 100de1c:	52 00       	JUMP (P2);
 100de1e:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100de20:	1f 20       	JUMP.S 0x100de5e <_spi_pwr_inc+0xba>;
 100de22:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100de24:	1d 20       	JUMP.S 0x100de5e <_spi_pwr_inc+0xba>;
 100de26:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100de28:	1b 20       	JUMP.S 0x100de5e <_spi_pwr_inc+0xba>;
 100de2a:	28 60       	R0 = 0x5 (X);		/*		R0=0x5(  5) */
 100de2c:	19 20       	JUMP.S 0x100de5e <_spi_pwr_inc+0xba>;
 100de2e:	40 60       	R0 = 0x8 (X);		/*		R0=0x8(  8) */
 100de30:	17 20       	JUMP.S 0x100de5e <_spi_pwr_inc+0xba>;
 100de32:	48 60       	R0 = 0x9 (X);		/*		R0=0x9(  9) */
 100de34:	15 20       	JUMP.S 0x100de5e <_spi_pwr_inc+0xba>;
 100de36:	30 60       	R0 = 0x6 (X);		/*		R0=0x6(  6) */
 100de38:	13 20       	JUMP.S 0x100de5e <_spi_pwr_inc+0xba>;
 100de3a:	38 60       	R0 = 0x7 (X);		/*		R0=0x7(  7) */
 100de3c:	11 20       	JUMP.S 0x100de5e <_spi_pwr_inc+0xba>;
 100de3e:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100de40:	0f 20       	JUMP.S 0x100de5e <_spi_pwr_inc+0xba>;
 100de42:	58 60       	R0 = 0xb (X);		/*		R0=0xb( 11) */
 100de44:	0d 20       	JUMP.S 0x100de5e <_spi_pwr_inc+0xba>;
 100de46:	60 60       	R0 = 0xc (X);		/*		R0=0xc( 12) */
 100de48:	0b 20       	JUMP.S 0x100de5e <_spi_pwr_inc+0xba>;
 100de4a:	68 60       	R0 = 0xd (X);		/*		R0=0xd( 13) */
 100de4c:	09 20       	JUMP.S 0x100de5e <_spi_pwr_inc+0xba>;
 100de4e:	70 60       	R0 = 0xe (X);		/*		R0=0xe( 14) */
 100de50:	07 20       	JUMP.S 0x100de5e <_spi_pwr_inc+0xba>;
 100de52:	78 60       	R0 = 0xf (X);		/*		R0=0xf( 15) */
 100de54:	05 20       	JUMP.S 0x100de5e <_spi_pwr_inc+0xba>;
 100de56:	78 60       	R0 = 0xf (X);		/*		R0=0xf( 15) */
 100de58:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100de5a:	02 20       	JUMP.S 0x100de5e <_spi_pwr_inc+0xba>;
 100de5c:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100de5e:	00 43       	R0 = R0.B (X);
 100de60:	f0 b0       	[SP + 0xc] = R0;
 100de62:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100de64:	31 60       	R1 = 0x6 (X);		/*		R1=0x6(  6) */
 100de66:	22 60       	R2 = 0x4 (X);		/*		R2=0x4(  4) */
 100de68:	ff e3 e0 fe 	CALL 0x100dc28 <_spi_wr_rg>;
 100de6c:	07 30       	R0 = R7;
 100de6e:	01 e8 00 00 	UNLINK;
 100de72:	38 05       	(R7:7) = [SP++];
 100de74:	10 00       	RTS;
 100de76:	00 00       	NOP;
 100de78:	0a 61       	R2 = 0x21 (X);		/*		R2=0x21( 33) */
 100de7a:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 100de7c:	3a 25       	JUMP.S 0x100e8f0 <___timer_register+0x34>;
 100de7e:	64 00       	CALL (P4);
 100de80:	de dc       	ILLEGAL;
 100de82:	00 01       	ILLEGAL;
 100de84:	4c dd       	ILLEGAL;
 100de86:	00 01       	ILLEGAL;
 100de88:	e6 dc       	ILLEGAL;
 100de8a:	00 01       	ILLEGAL;
 100de8c:	f0 dc       	ILLEGAL;
 100de8e:	00 01       	ILLEGAL;
 100de90:	f8 dc       	ILLEGAL;
 100de92:	00 01       	ILLEGAL;
 100de94:	00 dd       	ILLEGAL;
 100de96:	00 01       	ILLEGAL;
 100de98:	08 dd       	ILLEGAL;
 100de9a:	00 01       	ILLEGAL;
 100de9c:	12 dd       	ILLEGAL;
 100de9e:	00 01       	ILLEGAL;
 100dea0:	1a dd       	ILLEGAL;
 100dea2:	00 01       	ILLEGAL;
 100dea4:	1e dd       	ILLEGAL;
 100dea6:	00 01       	ILLEGAL;
 100dea8:	22 dd       	ILLEGAL;
 100deaa:	00 01       	ILLEGAL;
 100deac:	26 dd       	ILLEGAL;
 100deae:	00 01       	ILLEGAL;
 100deb0:	2c dd       	ILLEGAL;
 100deb2:	00 01       	ILLEGAL;
 100deb4:	32 dd       	ILLEGAL;
 100deb6:	00 01       	ILLEGAL;
 100deb8:	3a dd       	ILLEGAL;
 100deba:	00 01       	ILLEGAL;
 100debc:	42 dd       	ILLEGAL;
 100debe:	00 01       	ILLEGAL;
 100dec0:	1e de       	ILLEGAL;
 100dec2:	00 01       	ILLEGAL;
 100dec4:	5c de       	ILLEGAL;
 100dec6:	00 01       	ILLEGAL;
 100dec8:	22 de       	ILLEGAL;
 100deca:	00 01       	ILLEGAL;
 100decc:	26 de       	ILLEGAL;
 100dece:	00 01       	ILLEGAL;
 100ded0:	2a de       	ILLEGAL;
 100ded2:	00 01       	ILLEGAL;
 100ded4:	2e de       	ILLEGAL;
 100ded6:	00 01       	ILLEGAL;
 100ded8:	32 de       	ILLEGAL;
 100deda:	00 01       	ILLEGAL;
 100dedc:	36 de       	ILLEGAL;
 100dede:	00 01       	ILLEGAL;
 100dee0:	3a de       	ILLEGAL;
 100dee2:	00 01       	ILLEGAL;
 100dee4:	3e de       	ILLEGAL;
 100dee6:	00 01       	ILLEGAL;
 100dee8:	42 de       	ILLEGAL;
 100deea:	00 01       	ILLEGAL;
 100deec:	46 de       	ILLEGAL;
 100deee:	00 01       	ILLEGAL;
 100def0:	4a de       	ILLEGAL;
 100def2:	00 01       	ILLEGAL;
 100def4:	4e de       	ILLEGAL;
 100def6:	00 01       	ILLEGAL;
 100def8:	52 de       	ILLEGAL;
 100defa:	00 01       	ILLEGAL;

0100defc <_handle__timer0_isr>:
 100defc:	00 00       	NOP;
 100defe:	00 00       	NOP;
 100df00:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100df04:	ff e3 d2 90 	CALL 0x10000a8 <_ISR_PUSH_REG>;
 100df08:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100df0c:	00 e3 32 00 	CALL 0x100df70 <_timer0_isr>;
 100df10:	01 e8 00 00 	UNLINK;
 100df14:	ff e3 f8 90 	CALL 0x1000104 <_ISR_POP_REG>;
 100df18:	01 e8 00 00 	UNLINK;
 100df1c:	10 00       	RTS;
	...

0100df20 <_timer1_isr>:
 100df20:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x7dec0 */
 100df24:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100df28:	0a e1 90 00 	P2.L = 0x90;		/* (144)	P2=0x70090 */
 100df2c:	10 95       	R0 = W[P2] (Z);
 100df2e:	30 4a       	BITSET (R0, 0x6);		/* bit  6 */
 100df30:	10 97       	W[P2] = R0;
 100df32:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100df34:	10 97       	W[P2] = R0;
 100df36:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70090 */
 100df3a:	0a e1 4c 80 	P2.L = 0x804c;		/* (-32692)	P2=0x7804c */
 100df3e:	10 91       	R0 = [P2];
 100df40:	18 4a       	BITSET (R0, 0x3);		/* bit  3 */
 100df42:	10 93       	[P2] = R0;
 100df44:	01 e8 00 00 	UNLINK;
 100df48:	10 00       	RTS;
	...

0100df4c <_handle__timer1_isr>:
 100df4c:	00 00       	NOP;
 100df4e:	00 00       	NOP;
 100df50:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100df54:	ff e3 aa 90 	CALL 0x10000a8 <_ISR_PUSH_REG>;
 100df58:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100df5c:	ff e3 e2 ff 	CALL 0x100df20 <_timer1_isr>;
 100df60:	01 e8 00 00 	UNLINK;
 100df64:	ff e3 d0 90 	CALL 0x1000104 <_ISR_POP_REG>;
 100df68:	01 e8 00 00 	UNLINK;
 100df6c:	10 00       	RTS;
	...

0100df70 <_timer0_isr>:
 100df70:	78 05       	[--SP] = (R7:7);
 100df72:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x7804c */
 100df76:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100df7a:	0a e1 80 00 	P2.L = 0x80;		/* (128)	P2=0x70080 */
 100df7e:	10 95       	R0 = W[P2] (Z);
 100df80:	70 4a       	BITSET (R0, 0xe);		/* bit 14 */
 100df82:	10 97       	W[P2] = R0;
 100df84:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70080 */
 100df88:	20 60       	R0 = 0x4 (X);		/*		R0=0x4(  4) */
 100df8a:	0a e1 4c 80 	P2.L = 0x804c;		/* (-32692)	P2=0x7804c */
 100df8e:	10 93       	[P2] = R0;
 100df90:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x804c */
 100df94:	0a e1 2c 44 	P2.L = 0x442c;		/* (17452)	P2=0x442c <_cnt1.1292> */
 100df98:	17 91       	R7 = [P2];
 100df9a:	0f 64       	R7 += 0x1;		/* (  1) */
 100df9c:	17 93       	[P2] = R7;
 100df9e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x442c <_cnt1.1292> */
 100dfa2:	0a e1 c4 45 	P2.L = 0x45c4;		/* (17860)	P2=0x45c4 <_g_rand_seed> */
 100dfa6:	10 91       	R0 = [P2];
 100dfa8:	08 64       	R0 += 0x1;		/* (  1) */
 100dfaa:	10 93       	[P2] = R0;
 100dfac:	41 e1 cc cc 	R1.H = 0xcccc;		/* (-13108)	R1=0xcccc0006(-859045882) */
 100dfb0:	01 e1 cd cc 	R1.L = 0xcccd;		/* (-13107)	R1=0xcccccccd(-858993459) */
 100dfb4:	07 30       	R0 = R7;
 100dfb6:	00 e3 35 10 	CALL 0x1010020 <___umulsi3_highpart>;
 100dfba:	10 4e       	R0 >>= 0x2;
 100dfbc:	82 c6 10 82 	R1 = R0 << 0x2;
 100dfc0:	01 50       	R0 = R1 + R0;
 100dfc2:	07 08       	CC = R7 == R0;
 100dfc4:	03 14       	IF !CC JUMP 0x100dfca <_timer0_isr+0x5a> (BP);
 100dfc6:	00 e3 8d 08 	CALL 0x100f0e0 <_sys_timer_schedule>;
 100dfca:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45c4 <_g_rand_seed> */
 100dfce:	0a e1 2c 44 	P2.L = 0x442c;		/* (17452)	P2=0x442c <_cnt1.1292> */
 100dfd2:	10 91       	R0 = [P2];
 100dfd4:	21 e1 fa 00 	R1 = 0xfa (X);		/*		R1=0xfa(250) */
 100dfd8:	08 08       	CC = R0 == R1;
 100dfda:	0c 14       	IF !CC JUMP 0x100dff2 <_timer0_isr+0x82> (BP);
 100dfdc:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100dfde:	10 93       	[P2] = R0;
 100dfe0:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 100dfe4:	01 e8 00 00 	UNLINK;
 100dfe8:	00 e1 68 e0 	R0.L = 0xe068;		/* (-8088)	R0=0x100e068(16834664) */
 100dfec:	38 05       	(R7:7) = [SP++];
 100dfee:	00 e2 e5 07 	JUMP.L 0x100efb8 <_puts>;
 100dff2:	01 e8 00 00 	UNLINK;
 100dff6:	38 05       	(R7:7) = [SP++];
 100dff8:	10 00       	RTS;
	...

0100dffc <_timer0_init>:
 100dffc:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x7442c */
 100e000:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e004:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100e006:	0a e1 84 00 	P2.L = 0x84;		/* (132)	P2=0x70084 */
 100e00a:	10 97       	W[P2] = R0;
 100e00c:	20 e1 52 07 	R0 = 0x752 (X);		/*		R0=0x752(1874) */
 100e010:	22 6c       	P2 += 0x4;		/* (  4) */
 100e012:	10 97       	W[P2] = R0;
 100e014:	88 61       	R0 = 0x31 (X);		/*		R0=0x31( 49) */
 100e016:	c2 6f       	P2 += -0x8;		/* ( -8) */
 100e018:	10 97       	W[P2] = R0;
 100e01a:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x10000fa(16777466) */
 100e01e:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100e020:	01 e1 fc de 	R1.L = 0xdefc;		/* (-8452)	R1=0x100defc <_handle__timer0_isr>(16834300) */
 100e024:	0a 60       	R2 = 0x1 (X);		/*		R2=0x1(  1) */
 100e026:	01 e8 00 00 	UNLINK;
 100e02a:	ff e2 b1 fc 	JUMP.L 0x100d98c <_HWI_Install>;
	...

0100e030 <_timer1_init>:
 100e030:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70084 */
 100e034:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e038:	20 e1 00 ff 	R0 = -0x100 (X);		/*		R0=0xffffff00(-256) */
 100e03c:	0a e1 94 00 	P2.L = 0x94;		/* (148)	P2=0x70094 */
 100e040:	10 97       	W[P2] = R0;
 100e042:	e2 6f       	P2 += -0x4;		/* ( -4) */
 100e044:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100e046:	10 97       	W[P2] = R0;
 100e048:	10 95       	R0 = W[P2] (Z);
 100e04a:	21 e1 70 00 	R1 = 0x70 (X);		/*		R1=0x70(112) */
 100e04e:	01 56       	R0 = R1 | R0;
 100e050:	10 97       	W[P2] = R0;
 100e052:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000070 <_movedata>(16777328) */
 100e056:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100e058:	01 e1 4c df 	R1.L = 0xdf4c;		/* (-8372)	R1=0x100df4c <_handle__timer1_isr>(16834380) */
 100e05c:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100e05e:	01 e8 00 00 	UNLINK;
 100e062:	ff e2 95 fc 	JUMP.L 0x100d98c <_HWI_Install>;
 100e066:	00 00       	NOP;
 100e068:	2e 00       	ILLEGAL;
	...

0100e06c <_uart_init>:
 100e06c:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70094 */
 100e070:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e074:	0a e1 88 02 	P2.L = 0x288;		/* (648)	P2=0x70288 */
 100e078:	11 91       	R1 = [P2];
 100e07a:	20 e1 ff f3 	R0 = -0xc01 (X);		/*		R0=0xfffff3ff(-3073) */
 100e07e:	01 54       	R0 = R1 & R0;
 100e080:	58 4a       	BITSET (R0, 0xb);		/* bit 11 */
 100e082:	10 93       	[P2] = R0;
 100e084:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70288 */
 100e088:	0a e1 1c 00 	P2.L = 0x1c;		/* ( 28)	P2=0x7001c */
 100e08c:	10 95       	R0 = W[P2] (Z);
 100e08e:	21 e1 3f ff 	R1 = -0xc1 (X);		/*		R1=0xffffff3f(-193) */
 100e092:	01 54       	R0 = R1 & R0;
 100e094:	10 97       	W[P2] = R0;
 100e096:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x7001c */
 100e09a:	20 e1 cf 00 	R0 = 0xcf (X);		/*		R0=0xcf(207) */
 100e09e:	0a e1 44 01 	P2.L = 0x144;		/* (324)	P2=0x70144 */
 100e0a2:	10 97       	W[P2] = R0;
 100e0a4:	e2 6f       	P2 += -0x4;		/* ( -4) */
 100e0a6:	10 95       	R0 = W[P2] (Z);
 100e0a8:	00 4a       	BITSET (R0, 0x0);		/* bit  0 */
 100e0aa:	10 97       	W[P2] = R0;
 100e0ac:	10 95       	R0 = W[P2] (Z);
 100e0ae:	10 4c       	BITCLR (R0, 0x2);		/* bit  2 */
 100e0b0:	10 97       	W[P2] = R0;
 100e0b2:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70144 */
 100e0b6:	0a e1 08 00 	P2.L = 0x8;		/* (  8)	P2=0x70008 */
 100e0ba:	10 95       	R0 = W[P2] (Z);
 100e0bc:	40 4c       	BITCLR (R0, 0x8);		/* bit  8 */
 100e0be:	10 97       	W[P2] = R0;
 100e0c0:	10 95       	R0 = W[P2] (Z);
 100e0c2:	48 4a       	BITSET (R0, 0x9);		/* bit  9 */
 100e0c4:	10 97       	W[P2] = R0;
 100e0c6:	01 e8 00 00 	UNLINK;
 100e0ca:	10 00       	RTS;

0100e0cc <_putbyte>:
 100e0cc:	01 43       	R1 = R0.B (X);
 100e0ce:	52 60       	R2 = 0xa (X);		/*		R2=0xa( 10) */
 100e0d0:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e0d4:	11 08       	CC = R1 == R2;
 100e0d6:	0e 14       	IF !CC JUMP 0x100e0f2 <_putbyte+0x26> (BP);
 100e0d8:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70008 */
 100e0dc:	0a e1 48 01 	P2.L = 0x148;		/* (328)	P2=0x70148 */
 100e0e0:	69 60       	R1 = 0xd (X);		/*		R1=0xd( 13) */
 100e0e2:	11 9b       	B[P2] = R1;
 100e0e4:	c2 6f       	P2 += -0x8;		/* ( -8) */
 100e0e6:	42 34       	I0 = P2;
 100e0e8:	00 00       	NOP;
 100e0ea:	21 9d       	R1.L = W[I0];
 100e0ec:	89 42       	R1 = R1.L (X);
 100e0ee:	81 0c       	CC = R1 < 0x0;
 100e0f0:	fc 17       	IF !CC JUMP 0x100e0e8 <_putbyte+0x1c> (BP);
 100e0f2:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70148 */
 100e0f6:	0a e1 48 01 	P2.L = 0x148;		/* (328)	P2=0x70148 */
 100e0fa:	10 9b       	B[P2] = R0;
 100e0fc:	c2 6f       	P2 += -0x8;		/* ( -8) */
 100e0fe:	42 34       	I0 = P2;
 100e100:	00 00       	NOP;
 100e102:	20 9d       	R0.L = W[I0];
 100e104:	80 42       	R0 = R0.L (X);
 100e106:	80 0c       	CC = R0 < 0x0;
 100e108:	fc 17       	IF !CC JUMP 0x100e100 <_putbyte+0x34> (BP);
 100e10a:	01 e8 00 00 	UNLINK;
 100e10e:	10 00       	RTS;

0100e110 <_putchar>:
 100e110:	78 05       	[--SP] = (R7:7);
 100e112:	38 30       	R7 = R0;
 100e114:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100e116:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e11a:	07 08       	CC = R7 == R0;
 100e11c:	06 14       	IF !CC JUMP 0x100e128 <_putchar+0x18> (BP);
 100e11e:	68 60       	R0 = 0xd (X);		/*		R0=0xd( 13) */
 100e120:	ff e3 d6 ff 	CALL 0x100e0cc <_putbyte>;
 100e124:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100e126:	02 20       	JUMP.S 0x100e12a <_putchar+0x1a>;
 100e128:	07 30       	R0 = R7;
 100e12a:	ff e3 d1 ff 	CALL 0x100e0cc <_putbyte>;
 100e12e:	07 30       	R0 = R7;
 100e130:	01 e8 00 00 	UNLINK;
 100e134:	38 05       	(R7:7) = [SP++];
 100e136:	10 00       	RTS;

0100e138 <_getchar>:
 100e138:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70148 */
 100e13c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e140:	0a e1 40 01 	P2.L = 0x140;		/* (320)	P2=0x70140 */
 100e144:	10 95       	R0 = W[P2] (Z);
 100e146:	70 48       	CC = !BITTST (R0, 0xe);		/* bit 14 */
 100e148:	08 1c       	IF CC JUMP 0x100e158 <_getchar+0x20> (BP);
 100e14a:	10 95       	R0 = W[P2] (Z);
 100e14c:	60 4a       	BITSET (R0, 0xc);		/* bit 12 */
 100e14e:	10 97       	W[P2] = R0;
 100e150:	42 6c       	P2 += 0x8;		/* (  8) */
 100e152:	50 99       	R0 = B[P2] (X);
 100e154:	40 43       	R0 = R0.B (Z);
 100e156:	02 20       	JUMP.S 0x100e15a <_getchar+0x22>;
 100e158:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100e15a:	01 e8 00 00 	UNLINK;
 100e15e:	10 00       	RTS;

0100e160 <_put_u4hex>:
 100e160:	79 60       	R1 = 0xf (X);		/*		R1=0xf( 15) */
 100e162:	08 54       	R0 = R0 & R1;
 100e164:	41 43       	R1 = R0.B (Z);
 100e166:	4a 60       	R2 = 0x9 (X);		/*		R2=0x9(  9) */
 100e168:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e16c:	11 0a       	CC = R1 <= R2 (IU);
 100e16e:	03 1c       	IF CC JUMP 0x100e174 <_put_u4hex+0x14> (BP);
 100e170:	b8 65       	R0 += 0x37;		/* ( 55) */
 100e172:	02 20       	JUMP.S 0x100e176 <_put_u4hex+0x16>;
 100e174:	80 65       	R0 += 0x30;		/* ( 48) */
 100e176:	01 e8 00 00 	UNLINK;
 100e17a:	ff e2 a9 ff 	JUMP.L 0x100e0cc <_putbyte>;
	...

0100e180 <_put_u32hex>:
 100e180:	78 05       	[--SP] = (R7:7);
 100e182:	38 30       	R7 = R0;
 100e184:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e188:	e0 4e       	R0 >>= 0x1c;
 100e18a:	ff e3 eb ff 	CALL 0x100e160 <_put_u4hex>;
 100e18e:	82 c6 47 81 	R0 = R7 >> 0x18;
 100e192:	ff e3 e7 ff 	CALL 0x100e160 <_put_u4hex>;
 100e196:	82 c6 67 81 	R0 = R7 >> 0x14;
 100e19a:	ff e3 e3 ff 	CALL 0x100e160 <_put_u4hex>;
 100e19e:	82 c6 87 81 	R0 = R7 >> 0x10;
 100e1a2:	ff e3 df ff 	CALL 0x100e160 <_put_u4hex>;
 100e1a6:	82 c6 a7 81 	R0 = R7 >> 0xc;
 100e1aa:	ff e3 db ff 	CALL 0x100e160 <_put_u4hex>;
 100e1ae:	82 c6 c7 81 	R0 = R7 >> 0x8;
 100e1b2:	ff e3 d7 ff 	CALL 0x100e160 <_put_u4hex>;
 100e1b6:	82 c6 e7 81 	R0 = R7 >> 0x4;
 100e1ba:	ff e3 d3 ff 	CALL 0x100e160 <_put_u4hex>;
 100e1be:	07 30       	R0 = R7;
 100e1c0:	ff e3 d0 ff 	CALL 0x100e160 <_put_u4hex>;
 100e1c4:	01 e8 00 00 	UNLINK;
 100e1c8:	00 61       	R0 = 0x20 (X);		/*		R0=0x20( 32) */
 100e1ca:	38 05       	(R7:7) = [SP++];
 100e1cc:	ff e2 a2 ff 	JUMP.L 0x100e110 <_putchar>;

0100e1d0 <_put_u16hex>:
 100e1d0:	70 05       	[--SP] = (R7:6);
 100e1d2:	c7 42       	R7 = R0.L (Z);
 100e1d4:	30 30       	R6 = R0;
 100e1d6:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e1da:	82 c6 a7 81 	R0 = R7 >> 0xc;
 100e1de:	ff e3 c1 ff 	CALL 0x100e160 <_put_u4hex>;
 100e1e2:	82 c6 c7 81 	R0 = R7 >> 0x8;
 100e1e6:	ff e3 bd ff 	CALL 0x100e160 <_put_u4hex>;
 100e1ea:	82 c6 e7 81 	R0 = R7 >> 0x4;
 100e1ee:	ff e3 b9 ff 	CALL 0x100e160 <_put_u4hex>;
 100e1f2:	06 30       	R0 = R6;
 100e1f4:	01 e8 00 00 	UNLINK;
 100e1f8:	30 05       	(R7:6) = [SP++];
 100e1fa:	ff e2 b3 ff 	JUMP.L 0x100e160 <_put_u4hex>;
	...

0100e200 <_put_u8hex>:
 100e200:	78 05       	[--SP] = (R7:7);
 100e202:	38 30       	R7 = R0;
 100e204:	40 43       	R0 = R0.B (Z);
 100e206:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e20a:	20 4e       	R0 >>= 0x4;
 100e20c:	ff e3 aa ff 	CALL 0x100e160 <_put_u4hex>;
 100e210:	07 30       	R0 = R7;
 100e212:	01 e8 00 00 	UNLINK;
 100e216:	38 05       	(R7:7) = [SP++];
 100e218:	ff e2 a4 ff 	JUMP.L 0x100e160 <_put_u4hex>;

0100e21c <_printf_buf>:
 100e21c:	ed 05       	[--SP] = (R7:5, P5:5);
 100e21e:	28 32       	P5 = R0;
 100e220:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e224:	31 30       	R6 = R1;
 100e226:	20 e1 7b 00 	R0 = 0x7b (X);		/*		R0=0x7b(123) */
 100e22a:	ff e3 73 ff 	CALL 0x100e110 <_putchar>;
 100e22e:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100e230:	7d 60       	R5 = 0xf (X);		/*		R5=0xf( 15) */
 100e232:	12 20       	JUMP.S 0x100e256 <_printf_buf+0x3a>;
 100e234:	07 0c       	CC = R7 == 0x0;
 100e236:	07 1c       	IF CC JUMP 0x100e244 <_printf_buf+0x28> (BP);
 100e238:	2f 54       	R0 = R7 & R5;
 100e23a:	00 0c       	CC = R0 == 0x0;
 100e23c:	04 14       	IF !CC JUMP 0x100e244 <_printf_buf+0x28> (BP);
 100e23e:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100e240:	ff e3 46 ff 	CALL 0x100e0cc <_putbyte>;
 100e244:	0f 64       	R7 += 0x1;		/* (  1) */
 100e246:	68 98       	R0 = B[P5++] (X);
 100e248:	ff e3 dc ff 	CALL 0x100e200 <_put_u8hex>;
 100e24c:	b7 09       	CC = R7 < R6 (IU);
 100e24e:	06 14       	IF !CC JUMP 0x100e25a <_printf_buf+0x3e> (BP);
 100e250:	60 61       	R0 = 0x2c (X);		/*		R0=0x2c( 44) */
 100e252:	ff e3 5f ff 	CALL 0x100e110 <_putchar>;
 100e256:	b7 09       	CC = R7 < R6 (IU);
 100e258:	ee 1f       	IF CC JUMP 0x100e234 <_printf_buf+0x18> (BP);
 100e25a:	20 e1 7d 00 	R0 = 0x7d (X);		/*		R0=0x7d(125) */
 100e25e:	ff e3 59 ff 	CALL 0x100e110 <_putchar>;
 100e262:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100e264:	ff e3 34 ff 	CALL 0x100e0cc <_putbyte>;
 100e268:	01 e8 00 00 	UNLINK;
 100e26c:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100e26e:	ad 05       	(R7:5, P5:5) = [SP++];
 100e270:	ff e2 2e ff 	JUMP.L 0x100e0cc <_putbyte>;

0100e274 <___do_initcall>:
 100e274:	c4 04       	[--SP] = (P5:4);
 100e276:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e27a:	21 32       	P4 = R1;
 100e27c:	28 32       	P5 = R0;
 100e27e:	0a 20       	JUMP.S 0x100e292 <___do_initcall+0x1e>;
 100e280:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100000a(16777226) */
 100e284:	4d 30       	R1 = P5;
 100e286:	00 e1 08 e3 	R0.L = 0xe308;		/* (-7416)	R0=0x100e308(16835336) */
 100e28a:	00 e3 7b 06 	CALL 0x100ef80 <_printf>;
 100e28e:	6a 90       	P2 = [P5++];
 100e290:	62 00       	CALL (P2);
 100e292:	e5 09       	CC = P5 < P4 (IU);
 100e294:	f6 1f       	IF CC JUMP 0x100e280 <___do_initcall+0xc> (BP);
 100e296:	01 e8 00 00 	UNLINK;
 100e29a:	84 04       	(P5:4) = [SP++];
 100e29c:	10 00       	RTS;
	...

0100e2a0 <_system_init>:
 100e2a0:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e2a4:	00 e3 7c 01 	CALL 0x100e59c <_platform_init>;
 100e2a8:	00 e3 b0 00 	CALL 0x100e408 <_interrupt_init>;
 100e2ac:	20 e1 a8 00 	R0 = 0xa8 (X);		/*		R0=0xa8(168) */
 100e2b0:	21 e1 40 00 	R1 = 0x40 (X);		/*		R1=0x40( 64) */
 100e2b4:	c0 4a       	BITSET (R0, 0x18);		/* bit 24 */
 100e2b6:	ff e3 b3 ff 	CALL 0x100e21c <_printf_buf>;
 100e2ba:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x10000a8 <_ISR_PUSH_REG>(16777384) */
 100e2be:	00 e1 14 e3 	R0.L = 0xe314;		/* (-7404)	R0=0x100e314(16835348) */
 100e2c2:	00 e3 7b 06 	CALL 0x100efb8 <_puts>;
 100e2c6:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100e314(16835348) */
 100e2ca:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000040(16777280) */
 100e2ce:	00 e1 60 01 	R0.L = 0x160;		/* (352)	R0=0x1000160 <___initcall_bt16_machine_init>(16777568) */
 100e2d2:	01 e1 68 01 	R1.L = 0x168;		/* (360)	R1=0x1000168 <__early_initcall_end>(16777576) */
 100e2d6:	ff e3 cf ff 	CALL 0x100e274 <___do_initcall>;
 100e2da:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000160 <___initcall_bt16_machine_init>(16777568) */
 100e2de:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000168 <__early_initcall_end>(16777576) */
 100e2e2:	00 e1 68 01 	R0.L = 0x168;		/* (360)	R0=0x1000168 <__early_initcall_end>(16777576) */
 100e2e6:	01 e1 68 01 	R1.L = 0x168;		/* (360)	R1=0x1000168 <__early_initcall_end>(16777576) */
 100e2ea:	ff e3 c5 ff 	CALL 0x100e274 <___do_initcall>;
 100e2ee:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000168 <__early_initcall_end>(16777576) */
 100e2f2:	41 e1 00 01 	R1.H = 0x100;		/* (256)	R1=0x1000168 <__early_initcall_end>(16777576) */
 100e2f6:	00 e1 68 01 	R0.L = 0x168;		/* (360)	R0=0x1000168 <__early_initcall_end>(16777576) */
 100e2fa:	01 e1 68 01 	R1.L = 0x168;		/* (360)	R1=0x1000168 <__early_initcall_end>(16777576) */
 100e2fe:	01 e8 00 00 	UNLINK;
 100e302:	ff e2 b9 ff 	JUMP.L 0x100e274 <___do_initcall>;
 100e306:	00 00       	NOP;
 100e308:	66 75       	ILLEGAL;
 100e30a:	6e 63       	R6 = -0x13 (X);		/*		R6=0xffffffed(-19) */
 100e30c:	20 3a       	ILLEGAL;
 100e30e:	20 25       	JUMP.S 0x100ed4e <_printi+0x3a>;
 100e310:	78 0a       	CC = P0 <= FP (IU);
 100e312:	00 00       	NOP;
 100e314:	73 79       	ILLEGAL;
 100e316:	73 5f       	P5 = P3 + (SP << 0x2);
 100e318:	69 6e       	P1 += -0x33;		/* (-51) */
 100e31a:	69 74       	ILLEGAL;
 100e31c:	63 61       	R3 = 0x2c (X);		/*		R3=0x2c( 44) */
 100e31e:	6c 6c       	P4 += 0xd;		/* ( 13) */
 100e320:	78 0a       	CC = P0 <= FP (IU);
	...

0100e324 <_request_irq>:
 100e324:	ec 05       	[--SP] = (R7:5, P5:4);
 100e326:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x140 */
 100e32a:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x20 */
 100e32e:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e332:	0a e1 dc 44 	P2.L = 0x44dc;		/* (17628)	P2=0x44dc <_dec.1345> */
 100e336:	09 e1 38 44 	P1.L = 0x4438;		/* (17464)	P1=0x4438 <_decs> */
 100e33a:	52 91       	P2 = [P2];
 100e33c:	03 60       	R3 = 0x0 (X);		/*		R3=0x0(  0) */
 100e33e:	a7 60       	R7 = 0x14 (X);		/*		R7=0x14( 20) */
 100e340:	61 34       	M0 = P1;
 100e342:	28 e1 a1 00 	P0 = 0xa1 (X);		/*		P0=0xa1(161) */
 100e346:	25 e1 ff 00 	R5 = 0xff (X);		/*		R5=0xff(255) */
 100e34a:	b3 e0 2c 00 	LSETUP(0x100e350 <_request_irq+0x2c>, 0x100e3a2 <_request_irq+0x7e>) LC1 = P0;
 100e34e:	2a 20       	JUMP.S 0x100e3a2 <_request_irq+0x7e>;
 100e350:	33 30       	R6 = R3;
 100e352:	fe 40       	R6 *= R7;
 100e354:	26 32       	P4 = R6;
 100e356:	0e 99       	R6 = B[P1] (Z);
 100e358:	ac 32       	P5 = M0;
 100e35a:	a1 6c       	P1 += 0x14;		/* ( 20) */
 100e35c:	2e 08       	CC = R6 == R5;
 100e35e:	ac 5a       	P2 = P4 + P5;
 100e360:	20 14       	IF !CC JUMP 0x100e3a0 <_request_irq+0x7c> (BP);
 100e362:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x4438 <_decs> */
 100e366:	10 9b       	B[P2] = R0;
 100e368:	09 e1 dc 44 	P1.L = 0x44dc;		/* (17628)	P1=0x44dc <_dec.1345> */
 100e36c:	b8 a2       	R0 = [FP + 0x28];
 100e36e:	4a 93       	[P1] = P2;
 100e370:	10 b1       	[P2 + 0x10] = R0;
 100e372:	42 30       	R0 = P2;
 100e374:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x44dc <_dec.1345> */
 100e378:	52 b4       	W[P2 + 0x2] = R2;
 100e37a:	d1 b0       	[P2 + 0xc] = R1;
 100e37c:	02 48       	CC = !BITTST (R2, 0x0);		/* bit  0 */
 100e37e:	20 64       	R0 += 0x4;		/* (  4) */
 100e380:	09 e1 30 44 	P1.L = 0x4430;		/* (17456)	P1=0x4430 <_head> */
 100e384:	07 1c       	IF CC JUMP 0x100e392 <_request_irq+0x6e> (BP);
 100e386:	48 ac       	P0 = [P1 + 0x4];
 100e388:	51 bc       	[P2 + 0x4] = P1;
 100e38a:	48 b0       	[P1 + 0x4] = R0;
 100e38c:	90 bc       	[P2 + 0x8] = P0;
 100e38e:	00 93       	[P0] = R0;
 100e390:	06 20       	JUMP.S 0x100e39c <_request_irq+0x78>;
 100e392:	48 91       	P0 = [P1];
 100e394:	08 93       	[P1] = R0;
 100e396:	40 b0       	[P0 + 0x4] = R0;
 100e398:	50 bc       	[P2 + 0x4] = P0;
 100e39a:	91 bc       	[P2 + 0x8] = P1;
 100e39c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100e39e:	09 20       	JUMP.S 0x100e3b0 <_request_irq+0x8c>;
 100e3a0:	0b 64       	R3 += 0x1;		/* (  1) */
 100e3a2:	00 00       	NOP;
 100e3a4:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x4430 <_head> */
 100e3a8:	09 e1 dc 44 	P1.L = 0x44dc;		/* (17628)	P1=0x44dc <_dec.1345> */
 100e3ac:	4a 93       	[P1] = P2;
 100e3ae:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100e3b0:	01 e8 00 00 	UNLINK;
 100e3b4:	ac 05       	(R7:5, P5:4) = [SP++];
 100e3b6:	10 00       	RTS;

0100e3b8 <_generic_irq_handler>:
 100e3b8:	f5 05       	[--SP] = (R7:6, P5:5);
 100e3ba:	46 e1 00 00 	R6.H = 0x0;		/* (  0)	R6=0xffed(65517) */
 100e3be:	06 e1 30 44 	R6.L = 0x4430;		/* (17456)	R6=0x4430 <_head>(17456) */
 100e3c2:	16 32       	P2 = R6;
 100e3c4:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e3c8:	38 30       	R7 = R0;
 100e3ca:	4d e1 00 00 	P5.H = 0x0;		/* (  0)	P5=0x0 <data_addr> */
 100e3ce:	0d e1 d8 44 	P5.L = 0x44d8;		/* (17624)	P5=0x44d8 <_dec.1352> */
 100e3d2:	10 91       	R0 = [P2];
 100e3d4:	0e 20       	JUMP.S 0x100e3f0 <_generic_irq_handler+0x38>;
 100e3d6:	00 00       	NOP;
 100e3d8:	10 99       	R0 = B[P2] (Z);
 100e3da:	38 08       	CC = R0 == R7;
 100e3dc:	08 14       	IF !CC JUMP 0x100e3ec <_generic_irq_handler+0x34> (BP);
 100e3de:	10 a1       	R0 = [P2 + 0x10];
 100e3e0:	d2 ac       	P2 = [P2 + 0xc];
 100e3e2:	62 00       	CALL (P2);
 100e3e4:	6a 91       	P2 = [P5];
 100e3e6:	50 a4       	R0 = W[P2 + 0x2] (Z);
 100e3e8:	00 48       	CC = !BITTST (R0, 0x0);		/* bit  0 */
 100e3ea:	0a 1c       	IF CC JUMP 0x100e3fe <_generic_irq_handler+0x46> (BP);
 100e3ec:	6a 91       	P2 = [P5];
 100e3ee:	50 a0       	R0 = [P2 + 0x4];
 100e3f0:	e0 67       	R0 += -0x4;		/* ( -4) */
 100e3f2:	28 93       	[P5] = R0;
 100e3f4:	6a 91       	P2 = [P5];
 100e3f6:	42 30       	R0 = P2;
 100e3f8:	20 64       	R0 += 0x4;		/* (  4) */
 100e3fa:	30 08       	CC = R0 == R6;
 100e3fc:	ed 17       	IF !CC JUMP 0x100e3d6 <_generic_irq_handler+0x1e> (BP);
 100e3fe:	01 e8 00 00 	UNLINK;
 100e402:	b5 05       	(R7:6, P5:5) = [SP++];
 100e404:	10 00       	RTS;
	...

0100e408 <_interrupt_init>:
 100e408:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x44dc <_dec.1345> */
 100e40c:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e410:	0a e1 30 44 	P2.L = 0x4430;		/* (17456)	P2=0x4430 <_head> */
 100e414:	52 93       	[P2] = P2;
 100e416:	52 bc       	[P2 + 0x4] = P2;
 100e418:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4430 <_head> */
 100e41c:	0a e1 38 44 	P2.L = 0x4438;		/* (17464)	P2=0x4438 <_decs> */
 100e420:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100e422:	10 9b       	B[P2] = R0;
 100e424:	90 e6 14 00 	B[P2 + 0x14] = R0;
 100e428:	90 e6 28 00 	B[P2 + 0x28] = R0;
 100e42c:	90 e6 3c 00 	B[P2 + 0x3c] = R0;
 100e430:	90 e6 50 00 	B[P2 + 0x50] = R0;
 100e434:	90 e6 64 00 	B[P2 + 0x64] = R0;
 100e438:	90 e6 78 00 	B[P2 + 0x78] = R0;
 100e43c:	90 e6 8c 00 	B[P2 + 0x8c] = R0;
 100e440:	01 e8 00 00 	UNLINK;
 100e444:	10 00       	RTS;
	...

0100e448 <_platform_device_register>:
 100e448:	10 32       	P2 = R0;
 100e44a:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x44dc <_dec.1345> */
 100e44e:	09 e1 e0 44 	P1.L = 0x44e0;		/* (17632)	P1=0x44e0 <_platform_bus> */
 100e452:	48 ac       	P0 = [P1 + 0x4];
 100e454:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e458:	60 64       	R0 += 0xc;		/* ( 12) */
 100e45a:	d1 bc       	[P2 + 0xc] = P1;
 100e45c:	00 93       	[P0] = R0;
 100e45e:	48 b0       	[P1 + 0x4] = R0;
 100e460:	10 bd       	[P2 + 0x10] = P0;
 100e462:	01 e8 00 00 	UNLINK;
 100e466:	10 00       	RTS;

0100e468 <_platform_add_devices>:
 100e468:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x44e0 <_platform_bus> */
 100e46c:	09 e1 e0 44 	P1.L = 0x44e0;		/* (17632)	P1=0x44e0 <_platform_bus> */
 100e470:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e474:	4a ac       	P2 = [P1 + 0x4];
 100e476:	00 32       	P0 = R0;
 100e478:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100e47a:	59 30       	R3 = P1;
 100e47c:	09 20       	JUMP.S 0x100e48e <_platform_add_devices+0x26>;
 100e47e:	0a 64       	R2 += 0x1;		/* (  1) */
 100e480:	41 90       	P1 = [P0++];
 100e482:	41 30       	R0 = P1;
 100e484:	60 64       	R0 += 0xc;		/* ( 12) */
 100e486:	cb b0       	[P1 + 0xc] = R3;
 100e488:	0a bd       	[P1 + 0x10] = P2;
 100e48a:	10 93       	[P2] = R0;
 100e48c:	10 32       	P2 = R0;
 100e48e:	8a 08       	CC = R2 < R1;
 100e490:	f7 1f       	IF CC JUMP 0x100e47e <_platform_add_devices+0x16> (BP);
 100e492:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x44e0 <_platform_bus> */
 100e496:	09 e1 e0 44 	P1.L = 0x44e0;		/* (17632)	P1=0x44e0 <_platform_bus> */
 100e49a:	4a bc       	[P1 + 0x4] = P2;
 100e49c:	01 e8 00 00 	UNLINK;
 100e4a0:	10 00       	RTS;
	...

0100e4a4 <_platform_get_resource>:
 100e4a4:	10 32       	P2 = R0;
 100e4a6:	78 05       	[--SP] = (R7:7);
 100e4a8:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e4ac:	00 68       	P0 = 0x0 (X);		/*		P0=0x0(  0) */
 100e4ae:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100e4b0:	93 e4 04 00 	R3 = B[P2 + 0x4] (Z);
 100e4b4:	0c 20       	JUMP.S 0x100e4cc <_platform_get_resource+0x28>;
 100e4b6:	00 00       	NOP;
 100e4b8:	91 ac       	P1 = [P2 + 0x8];
 100e4ba:	41 5a       	P1 = P1 + P0;
 100e4bc:	8f a0       	R7 = [P1 + 0x8];
 100e4be:	39 08       	CC = R1 == R7;
 100e4c0:	04 10       	IF !CC JUMP 0x100e4c8 <_platform_get_resource+0x24>;
 100e4c2:	02 0c       	CC = R2 == 0x0;
 100e4c4:	07 18       	IF CC JUMP 0x100e4d2 <_platform_get_resource+0x2e>;
 100e4c6:	fa 67       	R2 += -0x1;		/* ( -1) */
 100e4c8:	08 64       	R0 += 0x1;		/* (  1) */
 100e4ca:	60 6c       	P0 += 0xc;		/* ( 12) */
 100e4cc:	98 08       	CC = R0 < R3;
 100e4ce:	f4 1f       	IF CC JUMP 0x100e4b6 <_platform_get_resource+0x12> (BP);
 100e4d0:	01 68       	P1 = 0x0 (X);		/*		P1=0x0(  0) */
 100e4d2:	01 e8 00 00 	UNLINK;
 100e4d6:	41 30       	R0 = P1;
 100e4d8:	38 05       	(R7:7) = [SP++];
 100e4da:	10 00       	RTS;

0100e4dc <_platform_get_irq>:
 100e4dc:	11 30       	R2 = R1;
 100e4de:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e4e2:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100e4e4:	ff e3 e0 ff 	CALL 0x100e4a4 <_platform_get_resource>;
 100e4e8:	10 32       	P2 = R0;
 100e4ea:	42 0c       	CC = P2 == 0x0;
 100e4ec:	03 1c       	IF CC JUMP 0x100e4f2 <_platform_get_irq+0x16> (BP);
 100e4ee:	10 91       	R0 = [P2];
 100e4f0:	02 20       	JUMP.S 0x100e4f4 <_platform_get_irq+0x18>;
 100e4f2:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100e4f4:	01 e8 00 00 	UNLINK;
 100e4f8:	10 00       	RTS;
	...

0100e4fc <_platform_driver_register>:
 100e4fc:	fb 05       	[--SP] = (R7:7, P5:3);
 100e4fe:	47 e1 00 00 	R7.H = 0x0;		/* (  0)	R7=0x14( 20) */
 100e502:	07 e1 e0 44 	R7.L = 0x44e0;		/* (17632)	R7=0x44e0 <_platform_bus>(17632) */
 100e506:	17 32       	P2 = R7;
 100e508:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e50c:	20 32       	P4 = R0;
 100e50e:	55 91       	P5 = [P2];
 100e510:	18 20       	JUMP.S 0x100e540 <_platform_driver_register+0x44>;
 100e512:	00 00       	NOP;
 100e514:	28 91       	R0 = [P5];
 100e516:	21 91       	R1 = [P4];
 100e518:	00 e3 9c 0c 	CALL 0x100fe50 <_strcmp>;
 100e51c:	00 0c       	CC = R0 == 0x0;
 100e51e:	0f 14       	IF !CC JUMP 0x100e53c <_platform_driver_register+0x40> (BP);
 100e520:	22 ad       	P2 = [P4 + 0x10];
 100e522:	45 30       	R0 = P5;
 100e524:	e5 bc       	[P4 + 0xc] = P5;
 100e526:	62 00       	CALL (P2);
 100e528:	44 30       	R0 = P4;
 100e52a:	da ac       	P2 = [P3 + 0xc];
 100e52c:	20 64       	R0 += 0x4;		/* (  4) */
 100e52e:	d8 b0       	[P3 + 0xc] = R0;
 100e530:	43 6c       	P3 += 0x8;		/* (  8) */
 100e532:	63 bc       	[P4 + 0x4] = P3;
 100e534:	10 93       	[P2] = R0;
 100e536:	a2 bc       	[P4 + 0x8] = P2;
 100e538:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100e53a:	0d 20       	JUMP.S 0x100e554 <_platform_driver_register+0x58>;
 100e53c:	00 00       	NOP;
 100e53e:	ed ac       	P5 = [P5 + 0xc];
 100e540:	a5 6f       	P5 += -0xc;		/* (-12) */
 100e542:	45 30       	R0 = P5;
 100e544:	60 64       	R0 += 0xc;		/* ( 12) */
 100e546:	4b e1 00 00 	P3.H = 0x0;		/* (  0)	P3=0xc <_test_buf> */
 100e54a:	0b e1 e0 44 	P3.L = 0x44e0;		/* (17632)	P3=0x44e0 <_platform_bus> */
 100e54e:	38 08       	CC = R0 == R7;
 100e550:	e1 17       	IF !CC JUMP 0x100e512 <_platform_driver_register+0x16> (BP);
 100e552:	f8 63       	R0 = -0x1 (X);		/*		R0=0xffffffff( -1) */
 100e554:	01 e8 00 00 	UNLINK;
 100e558:	bb 05       	(R7:7, P5:3) = [SP++];
 100e55a:	10 00       	RTS;

0100e55c <_platform_get_driver>:
 100e55c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4438 <_decs> */
 100e560:	f5 05       	[--SP] = (R7:6, P5:5);
 100e562:	0a e1 e0 44 	P2.L = 0x44e0;		/* (17632)	P2=0x44e0 <_platform_bus> */
 100e566:	95 ac       	P5 = [P2 + 0x8];
 100e568:	7a 30       	R7 = P2;
 100e56a:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e56e:	30 30       	R6 = R0;
 100e570:	e5 6f       	P5 += -0x4;		/* ( -4) */
 100e572:	47 64       	R7 += 0x8;		/* (  8) */
 100e574:	09 20       	JUMP.S 0x100e586 <_platform_get_driver+0x2a>;
 100e576:	0e 30       	R1 = R6;
 100e578:	28 91       	R0 = [P5];
 100e57a:	00 e3 6b 0c 	CALL 0x100fe50 <_strcmp>;
 100e57e:	00 0c       	CC = R0 == 0x0;
 100e580:	08 1c       	IF CC JUMP 0x100e590 <_platform_get_driver+0x34> (BP);
 100e582:	6d ac       	P5 = [P5 + 0x4];
 100e584:	e5 6f       	P5 += -0x4;		/* ( -4) */
 100e586:	45 30       	R0 = P5;
 100e588:	20 64       	R0 += 0x4;		/* (  4) */
 100e58a:	38 08       	CC = R0 == R7;
 100e58c:	f5 17       	IF !CC JUMP 0x100e576 <_platform_get_driver+0x1a> (BP);
 100e58e:	05 68       	P5 = 0x0 (X);		/*		P5=0x0(  0) */
 100e590:	45 30       	R0 = P5;
 100e592:	01 e8 00 00 	UNLINK;
 100e596:	b5 05       	(R7:6, P5:5) = [SP++];
 100e598:	10 00       	RTS;
	...

0100e59c <_platform_init>:
 100e59c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x44e0 <_platform_bus> */
 100e5a0:	0a e1 e0 44 	P2.L = 0x44e0;		/* (17632)	P2=0x44e0 <_platform_bus> */
 100e5a4:	42 30       	R0 = P2;
 100e5a6:	40 64       	R0 += 0x8;		/* (  8) */
 100e5a8:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e5ac:	52 93       	[P2] = P2;
 100e5ae:	52 bc       	[P2 + 0x4] = P2;
 100e5b0:	90 b0       	[P2 + 0x8] = R0;
 100e5b2:	d0 b0       	[P2 + 0xc] = R0;
 100e5b4:	01 e8 00 00 	UNLINK;
 100e5b8:	10 00       	RTS;
	...

0100e5bc <_delay>:
 100e5bc:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e5c0:	03 20       	JUMP.S 0x100e5c6 <_delay+0xa>;
 100e5c2:	00 00       	NOP;
 100e5c4:	f8 67       	R0 += -0x1;		/* ( -1) */
 100e5c6:	00 0c       	CC = R0 == 0x0;
 100e5c8:	fd 17       	IF !CC JUMP 0x100e5c2 <_delay+0x6> (BP);
 100e5ca:	01 e8 00 00 	UNLINK;
 100e5ce:	10 00       	RTS;

0100e5d0 <_lbuf_init>:
 100e5d0:	10 32       	P2 = R0;
 100e5d2:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100e5d4:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e5d8:	52 30       	R2 = P2;
 100e5da:	02 54       	R0 = R2 & R0;
 100e5dc:	00 0c       	CC = R0 == 0x0;
 100e5de:	09 1c       	IF CC JUMP 0x100e5f0 <_lbuf_init+0x20> (BP);
 100e5e0:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000003(16777219) */
 100e5e4:	00 e1 60 e8 	R0.L = 0xe860;		/* (-6048)	R0=0x100e860(16836704) */
 100e5e8:	4a 30       	R1 = P2;
 100e5ea:	00 e3 cb 04 	CALL 0x100ef80 <_printf>;
 100e5ee:	00 20       	JUMP.S 0x100e5ee <_lbuf_init+0x1e>;
 100e5f0:	4a 32       	P1 = P2;
 100e5f2:	81 6c       	P1 += 0x10;		/* ( 16) */
 100e5f4:	81 67       	R1 += -0x10;		/* (-16) */
 100e5f6:	09 b5       	W[P1 + 0x8] = R1;
 100e5f8:	42 30       	R0 = P2;
 100e5fa:	40 64       	R0 += 0x8;		/* (  8) */
 100e5fc:	52 bc       	[P2 + 0x4] = P2;
 100e5fe:	d1 bc       	[P2 + 0xc] = P1;
 100e600:	48 b0       	[P1 + 0x4] = R0;
 100e602:	10 b1       	[P2 + 0x10] = R0;
 100e604:	42 30       	R0 = P2;
 100e606:	52 93       	[P2] = P2;
 100e608:	91 bc       	[P2 + 0x8] = P1;
 100e60a:	01 e8 00 00 	UNLINK;
 100e60e:	10 00       	RTS;

0100e610 <_lbuf_alloc>:
 100e610:	81 64       	R1 += 0x10;		/* ( 16) */
 100e612:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100e614:	f4 05       	[--SP] = (R7:6, P5:4);
 100e616:	91 54       	R2 = R1 & R2;
 100e618:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e61c:	02 0c       	CC = R2 == 0x0;
 100e61e:	04 1c       	IF CC JUMP 0x100e626 <_lbuf_alloc+0x16> (BP);
 100e620:	e2 63       	R2 = -0x4 (X);		/*		R2=0xfffffffc( -4) */
 100e622:	51 54       	R1 = R1 & R2;
 100e624:	21 64       	R1 += 0x4;		/* (  4) */
 100e626:	37 00       	CLI R7;
 100e628:	08 32       	P1 = R0;
 100e62a:	8a ac       	P2 = [P1 + 0x8];
 100e62c:	41 6c       	P1 += 0x8;		/* (  8) */
 100e62e:	27 20       	JUMP.S 0x100e67c <_lbuf_alloc+0x6c>;
 100e630:	00 00       	NOP;
 100e632:	12 a9       	R2 = W[P2 + 0x8] (X);
 100e634:	d3 42       	R3 = R2.L (Z);
 100e636:	8b 09       	CC = R3 < R1 (IU);
 100e638:	03 14       	IF !CC JUMP 0x100e63e <_lbuf_alloc+0x2e> (BP);
 100e63a:	52 91       	P2 = [P2];
 100e63c:	20 20       	JUMP.S 0x100e67c <_lbuf_alloc+0x6c>;
 100e63e:	31 30       	R6 = R1;
 100e640:	66 64       	R6 += 0xc;		/* ( 12) */
 100e642:	33 0a       	CC = R3 <= R6 (IU);
 100e644:	50 ac       	P0 = [P2 + 0x4];
 100e646:	55 91       	P5 = [P2];
 100e648:	0a 1c       	IF CC JUMP 0x100e65c <_lbuf_alloc+0x4c> (BP);
 100e64a:	21 32       	P4 = R1;
 100e64c:	8a 52       	R2 = R2 - R1;
 100e64e:	62 5a       	P1 = P2 + P4;
 100e650:	0a b5       	W[P1 + 0x8] = R2;
 100e652:	69 bc       	[P5 + 0x4] = P1;
 100e654:	4d 93       	[P1] = P5;
 100e656:	48 bc       	[P1 + 0x4] = P0;
 100e658:	41 93       	[P0] = P1;
 100e65a:	03 20       	JUMP.S 0x100e660 <_lbuf_alloc+0x50>;
 100e65c:	68 bc       	[P5 + 0x4] = P0;
 100e65e:	45 93       	[P0] = P5;
 100e660:	90 b0       	[P2 + 0x8] = R0;
 100e662:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100e664:	90 e6 0e 00 	B[P2 + 0xe] = R0;
 100e668:	90 e6 0f 00 	B[P2 + 0xf] = R0;
 100e66c:	42 30       	R0 = P2;
 100e66e:	80 64       	R0 += 0x10;		/* ( 16) */
 100e670:	91 b5       	W[P2 + 0xc] = R1;
 100e672:	52 93       	[P2] = P2;
 100e674:	52 bc       	[P2 + 0x4] = P2;
 100e676:	00 0c       	CC = R0 == 0x0;
 100e678:	08 14       	IF !CC JUMP 0x100e688 <_lbuf_alloc+0x78> (BP);
 100e67a:	03 20       	JUMP.S 0x100e680 <_lbuf_alloc+0x70>;
 100e67c:	4a 08       	CC = P2 == P1;
 100e67e:	d9 17       	IF !CC JUMP 0x100e630 <_lbuf_alloc+0x20> (BP);
 100e680:	18 61       	R0 = 0x23 (X);		/*		R0=0x23( 35) */
 100e682:	ff e3 47 fd 	CALL 0x100e110 <_putchar>;
 100e686:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100e688:	47 00       	STI R7;
 100e68a:	01 e8 00 00 	UNLINK;
 100e68e:	b4 05       	(R7:6, P5:4) = [SP++];
 100e690:	10 00       	RTS;
	...

0100e694 <_lbuf_empty>:
 100e694:	10 32       	P2 = R0;
 100e696:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e69a:	01 e8 00 00 	UNLINK;
 100e69e:	51 91       	P1 = [P2];
 100e6a0:	51 08       	CC = P1 == P2;
 100e6a2:	00 02       	R0 = CC;
 100e6a4:	10 00       	RTS;
	...

0100e6a8 <_lbuf_push>:
 100e6a8:	10 32       	P2 = R0;
 100e6aa:	c5 04       	[--SP] = (P5:5);
 100e6ac:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e6b0:	82 6f       	P2 += -0x10;		/* (-16) */
 100e6b2:	32 00       	CLI R2;
 100e6b4:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100e6b6:	91 e6 0e 00 	B[P2 + 0xe] = R1;
 100e6ba:	91 e5 0f 00 	R1 = B[P2 + 0xf] (X);
 100e6be:	19 30       	R3 = R1;
 100e6c0:	0b 64       	R3 += 0x1;		/* (  1) */
 100e6c2:	93 e6 0f 00 	B[P2 + 0xf] = R3;
 100e6c6:	01 0c       	CC = R1 == 0x0;
 100e6c8:	09 14       	IF !CC JUMP 0x100e6da <_lbuf_push+0x32> (BP);
 100e6ca:	28 32       	P5 = R0;
 100e6cc:	91 ac       	P1 = [P2 + 0x8];
 100e6ce:	48 ac       	P0 = [P1 + 0x4];
 100e6d0:	4a bc       	[P1 + 0x4] = P2;
 100e6d2:	29 e7 fc ff 	[P5 + -0x10] = P1;
 100e6d6:	50 bc       	[P2 + 0x4] = P0;
 100e6d8:	42 93       	[P0] = P2;
 100e6da:	42 00       	STI R2;
 100e6dc:	01 e8 00 00 	UNLINK;
 100e6e0:	85 04       	(P5:5) = [SP++];
 100e6e2:	10 00       	RTS;

0100e6e4 <_lbuf_pop>:
 100e6e4:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e6e8:	08 32       	P1 = R0;
 100e6ea:	31 00       	CLI R1;
 100e6ec:	4a 91       	P2 = [P1];
 100e6ee:	0f 20       	JUMP.S 0x100e70c <_lbuf_pop+0x28>;
 100e6f0:	00 00       	NOP;
 100e6f2:	90 e4 0e 00 	R0 = B[P2 + 0xe] (Z);
 100e6f6:	00 0c       	CC = R0 == 0x0;
 100e6f8:	08 14       	IF !CC JUMP 0x100e708 <_lbuf_pop+0x24> (BP);
 100e6fa:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100e6fc:	90 e6 0e 00 	B[P2 + 0xe] = R0;
 100e700:	41 00       	STI R1;
 100e702:	42 30       	R0 = P2;
 100e704:	80 64       	R0 += 0x10;		/* ( 16) */
 100e706:	07 20       	JUMP.S 0x100e714 <_lbuf_pop+0x30>;
 100e708:	00 00       	NOP;
 100e70a:	52 91       	P2 = [P2];
 100e70c:	4a 08       	CC = P2 == P1;
 100e70e:	f1 17       	IF !CC JUMP 0x100e6f0 <_lbuf_pop+0xc> (BP);
 100e710:	41 00       	STI R1;
 100e712:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100e714:	01 e8 00 00 	UNLINK;
 100e718:	10 00       	RTS;
	...

0100e71c <_lbuf_free>:
 100e71c:	10 32       	P2 = R0;
 100e71e:	fb 05       	[--SP] = (R7:7, P5:3);
 100e720:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e724:	42 0c       	CC = P2 == 0x0;
 100e726:	51 1c       	IF CC JUMP 0x100e7c8 <_lbuf_free+0xac> (BP);
 100e728:	08 32       	P1 = R0;
 100e72a:	81 6f       	P1 += -0x10;		/* (-16) */
 100e72c:	8d ac       	P5 = [P1 + 0x8];
 100e72e:	37 00       	CLI R7;
 100e730:	88 e5 0f 00 	R0 = B[P1 + 0xf] (X);
 100e734:	f8 67       	R0 += -0x1;		/* ( -1) */
 100e736:	88 e6 0f 00 	B[P1 + 0xf] = R0;
 100e73a:	00 43       	R0 = R0.B (X);
 100e73c:	00 0d       	CC = R0 <= 0x0;
 100e73e:	44 14       	IF !CC JUMP 0x100e7c6 <_lbuf_free+0xaa> (BP);
 100e740:	14 e5 fc ff 	P4 = [P2 + -0x10];
 100e744:	48 ac       	P0 = [P1 + 0x4];
 100e746:	88 a9       	R0 = W[P1 + 0xc] (X);
 100e748:	60 bc       	[P4 + 0x4] = P0;
 100e74a:	44 93       	[P0] = P4;
 100e74c:	65 32       	P4 = P5;
 100e74e:	08 b5       	W[P1 + 0x8] = R0;
 100e750:	a8 ac       	P0 = [P5 + 0x8];
 100e752:	44 6c       	P4 += 0x8;		/* (  8) */
 100e754:	1a 20       	JUMP.S 0x100e788 <_lbuf_free+0x6c>;
 100e756:	48 0a       	CC = P0 <= P1 (IU);
 100e758:	0f 14       	IF !CC JUMP 0x100e776 <_lbuf_free+0x5a> (BP);
 100e75a:	48 30       	R1 = P0;
 100e75c:	00 a5       	R0 = W[P0 + 0x8] (Z);
 100e75e:	01 50       	R0 = R1 + R0;
 100e760:	49 30       	R1 = P1;
 100e762:	81 09       	CC = R1 < R0 (IU);
 100e764:	10 14       	IF !CC JUMP 0x100e784 <_lbuf_free+0x68> (BP);
 100e766:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 100e76a:	4a 30       	R1 = P2;
 100e76c:	00 e1 8c e8 	R0.L = 0xe88c;		/* (-6004)	R0=0x100e88c(16836748) */
 100e770:	00 e3 08 04 	CALL 0x100ef80 <_printf>;
 100e774:	29 20       	JUMP.S 0x100e7c6 <_lbuf_free+0xaa>;
 100e776:	10 e7 fc ff 	[P2 + -0x10] = P0;
 100e77a:	43 ac       	P3 = [P0 + 0x4];
 100e77c:	41 bc       	[P0 + 0x4] = P1;
 100e77e:	4b bc       	[P1 + 0x4] = P3;
 100e780:	59 93       	[P3] = P1;
 100e782:	0b 20       	JUMP.S 0x100e798 <_lbuf_free+0x7c>;
 100e784:	00 00       	NOP;
 100e786:	40 91       	P0 = [P0];
 100e788:	60 08       	CC = P0 == P4;
 100e78a:	e6 17       	IF !CC JUMP 0x100e756 <_lbuf_free+0x3a> (BP);
 100e78c:	e8 ac       	P0 = [P5 + 0xc];
 100e78e:	e9 bc       	[P5 + 0xc] = P1;
 100e790:	14 e7 fc ff 	[P2 + -0x10] = P4;
 100e794:	48 bc       	[P1 + 0x4] = P0;
 100e796:	41 93       	[P0] = P1;
 100e798:	aa ac       	P2 = [P5 + 0x8];
 100e79a:	01 68       	P1 = 0x0 (X);		/*		P1=0x0(  0) */
 100e79c:	13 20       	JUMP.S 0x100e7c2 <_lbuf_free+0xa6>;
 100e79e:	41 0c       	CC = P1 == 0x0;
 100e7a0:	0f 1c       	IF CC JUMP 0x100e7be <_lbuf_free+0xa2> (BP);
 100e7a2:	08 a9       	R0 = W[P1 + 0x8] (X);
 100e7a4:	c1 42       	R1 = R0.L (Z);
 100e7a6:	29 32       	P5 = R1;
 100e7a8:	29 5a       	P0 = P1 + P5;
 100e7aa:	42 08       	CC = P2 == P0;
 100e7ac:	09 14       	IF !CC JUMP 0x100e7be <_lbuf_free+0xa2> (BP);
 100e7ae:	50 ac       	P0 = [P2 + 0x4];
 100e7b0:	55 91       	P5 = [P2];
 100e7b2:	11 a9       	R1 = W[P2 + 0x8] (X);
 100e7b4:	01 50       	R0 = R1 + R0;
 100e7b6:	08 b5       	W[P1 + 0x8] = R0;
 100e7b8:	68 bc       	[P5 + 0x4] = P0;
 100e7ba:	45 93       	[P0] = P5;
 100e7bc:	02 20       	JUMP.S 0x100e7c0 <_lbuf_free+0xa4>;
 100e7be:	4a 32       	P1 = P2;
 100e7c0:	52 91       	P2 = [P2];
 100e7c2:	62 08       	CC = P2 == P4;
 100e7c4:	ed 17       	IF !CC JUMP 0x100e79e <_lbuf_free+0x82> (BP);
 100e7c6:	47 00       	STI R7;
 100e7c8:	01 e8 00 00 	UNLINK;
 100e7cc:	bb 05       	(R7:7, P5:3) = [SP++];
 100e7ce:	10 00       	RTS;

0100e7d0 <_lbuf_clear>:
 100e7d0:	fc 05       	[--SP] = (R7:7, P5:4);
 100e7d2:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e7d6:	20 32       	P4 = R0;
 100e7d8:	37 00       	CLI R7;
 100e7da:	62 91       	P2 = [P4];
 100e7dc:	55 91       	P5 = [P2];
 100e7de:	07 20       	JUMP.S 0x100e7ec <_lbuf_clear+0x1c>;
 100e7e0:	42 30       	R0 = P2;
 100e7e2:	80 64       	R0 += 0x10;		/* ( 16) */
 100e7e4:	ff e3 9c ff 	CALL 0x100e71c <_lbuf_free>;
 100e7e8:	55 32       	P2 = P5;
 100e7ea:	6d 91       	P5 = [P5];
 100e7ec:	62 08       	CC = P2 == P4;
 100e7ee:	f9 17       	IF !CC JUMP 0x100e7e0 <_lbuf_clear+0x10> (BP);
 100e7f0:	47 00       	STI R7;
 100e7f2:	01 e8 00 00 	UNLINK;
 100e7f6:	bc 05       	(R7:7, P5:4) = [SP++];
 100e7f8:	10 00       	RTS;
	...

0100e7fc <_lbuf_realloc>:
 100e7fc:	08 32       	P1 = R0;
 100e7fe:	78 05       	[--SP] = (R7:7);
 100e800:	38 30       	R7 = R0;
 100e802:	18 60       	R0 = 0x3 (X);		/*		R0=0x3(  3) */
 100e804:	01 54       	R0 = R1 & R0;
 100e806:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e80a:	81 6f       	P1 += -0x10;		/* (-16) */
 100e80c:	00 0c       	CC = R0 == 0x0;
 100e80e:	03 1c       	IF CC JUMP 0x100e814 <_lbuf_realloc+0x18> (BP);
 100e810:	21 64       	R1 += 0x4;		/* (  4) */
 100e812:	41 52       	R1 = R1 - R0;
 100e814:	00 00       	NOP;
 100e816:	8a a9       	R2 = W[P1 + 0xc] (X);
 100e818:	d3 42       	R3 = R2.L (Z);
 100e81a:	99 08       	CC = R1 < R3;
 100e81c:	08 18       	IF CC JUMP 0x100e82c <_lbuf_realloc+0x30>;
 100e81e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000003(16777219) */
 100e822:	00 e1 9c e8 	R0.L = 0xe89c;		/* (-5988)	R0=0x100e89c(16836764) */
 100e826:	00 e3 c9 03 	CALL 0x100efb8 <_puts>;
 100e82a:	00 20       	JUMP.S 0x100e82a <_lbuf_realloc+0x2e>;
 100e82c:	01 30       	R0 = R1;
 100e82e:	80 64       	R0 += 0x10;		/* ( 16) */
 100e830:	98 09       	CC = R0 < R3 (IU);
 100e832:	12 14       	IF !CC JUMP 0x100e856 <_lbuf_realloc+0x5a> (BP);
 100e834:	cf 50       	R3 = R7 + R1;
 100e836:	13 32       	P2 = R3;
 100e838:	82 67       	R2 += -0x10;		/* (-16) */
 100e83a:	4a 52       	R1 = R2 - R1;
 100e83c:	8b a0       	R3 = [P1 + 0x8];
 100e83e:	91 b5       	W[P2 + 0xc] = R1;
 100e840:	88 b5       	W[P1 + 0xc] = R0;
 100e842:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100e844:	42 30       	R0 = P2;
 100e846:	93 b0       	[P2 + 0x8] = R3;
 100e848:	91 e6 0f 00 	B[P2 + 0xf] = R1;
 100e84c:	52 93       	[P2] = P2;
 100e84e:	52 bc       	[P2 + 0x4] = P2;
 100e850:	80 64       	R0 += 0x10;		/* ( 16) */
 100e852:	ff e3 65 ff 	CALL 0x100e71c <_lbuf_free>;
 100e856:	07 30       	R0 = R7;
 100e858:	01 e8 00 00 	UNLINK;
 100e85c:	38 05       	(R7:7) = [SP++];
 100e85e:	10 00       	RTS;
 100e860:	41 53       	R5 = R1 - R0;
 100e862:	53 45       	P3 += P2 (BREV);
 100e864:	52 54       	R1 = R2 & R2;
 100e866:	2d 46       	ILLEGAL;
 100e868:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 100e86a:	4c 44       	P4 = P1 << 0x2;
 100e86c:	3a 20       	JUMP.S 0x100e8e0 <___timer_register+0x24>;
 100e86e:	28 28       	JUMP.S 0x100d8be <_crc16+0xb2>;
 100e870:	28 75       	ILLEGAL;
 100e872:	33 32       	SP = R3;
 100e874:	29 62       	R1 = -0x3b (X);		/*		R1=0xffffffc5(-59) */
 100e876:	75 66       	R5 += -0x32;		/* (-50) */
 100e878:	29 20       	JUMP.S 0x100e8ca <___timer_register+0xe>;
 100e87a:	26 20       	JUMP.S 0x100e8c6 <___timer_register+0xa>;
 100e87c:	30 78       	ILLEGAL;
 100e87e:	30 33       	SP = A0.X;
 100e880:	29 3d       	LB1 = A0.W;
 100e882:	3d 30       	R7 = R5;
 100e884:	0a 25       	JUMP.S 0x100f298 <_thread_resume>;
 100e886:	78 0a       	CC = P0 <= FP (IU);
 100e888:	00 00       	NOP;
 100e88a:	00 00       	NOP;
 100e88c:	66 72       	ILLEGAL;
 100e88e:	65 65       	R5 += 0x2c;		/* ( 44) */
 100e890:	2d 65       	R5 += 0x25;		/* ( 37) */
 100e892:	72 72       	ILLEGAL;
 100e894:	3a 20       	JUMP.S 0x100e908 <___timer_set+0x4>;
 100e896:	25 78       	ILLEGAL;
 100e898:	0a 00       	ILLEGAL;
 100e89a:	00 00       	NOP;
 100e89c:	41 53       	R5 = R1 - R0;
 100e89e:	53 45       	P3 += P2 (BREV);
 100e8a0:	52 54       	R1 = R2 & R2;
 100e8a2:	2d 46       	ILLEGAL;
 100e8a4:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 100e8a6:	4c 44       	P4 = P1 << 0x2;
 100e8a8:	3a 20       	JUMP.S 0x100e91c <___timer_set+0x18>;
 100e8aa:	73 69       	P3 = 0x2e (X);		/*		P3=0x2e( 46) */
 100e8ac:	7a 65       	R2 += 0x2f;		/* ( 47) */
 100e8ae:	20 3c       	LT1 = R0;
 100e8b0:	20 65       	R0 += 0x24;		/* ( 36) */
 100e8b2:	6e 74       	ILLEGAL;
 100e8b4:	72 79       	ILLEGAL;
 100e8b6:	2d 3e       	RETN = R5;
 100e8b8:	6c 65       	R4 += 0x2d;		/* ( 45) */
 100e8ba:	6e 00       	ILLEGAL;

0100e8bc <___timer_register>:
 100e8bc:	10 32       	P2 = R0;
 100e8be:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e8c2:	09 32       	P1 = R1;
 100e8c4:	50 91       	P0 = [P2];
 100e8c6:	0c 20       	JUMP.S 0x100e8de <___timer_register+0x22>;
 100e8c8:	48 08       	CC = P0 == P1;
 100e8ca:	08 14       	IF !CC JUMP 0x100e8da <___timer_register+0x1e> (BP);
 100e8cc:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100e89c(16836764) */
 100e8d0:	00 e1 64 ea 	R0.L = 0xea64;		/* (-5532)	R0=0x100ea64(16837220) */
 100e8d4:	00 e3 72 03 	CALL 0x100efb8 <_puts>;
 100e8d8:	00 20       	JUMP.S 0x100e8d8 <___timer_register+0x1c>;
 100e8da:	00 00       	NOP;
 100e8dc:	40 ac       	P0 = [P0 + 0x4];
 100e8de:	e0 6f       	P0 += -0x4;		/* ( -4) */
 100e8e0:	40 30       	R0 = P0;
 100e8e2:	20 64       	R0 += 0x4;		/* (  4) */
 100e8e4:	4a 30       	R1 = P2;
 100e8e6:	01 08       	CC = R1 == R0;
 100e8e8:	f0 17       	IF !CC JUMP 0x100e8c8 <___timer_register+0xc> (BP);
 100e8ea:	31 00       	CLI R1;
 100e8ec:	50 ac       	P0 = [P2 + 0x4];
 100e8ee:	41 30       	R0 = P1;
 100e8f0:	ca b0       	[P1 + 0xc] = R2;
 100e8f2:	20 64       	R0 += 0x4;		/* (  4) */
 100e8f4:	4a bc       	[P1 + 0x4] = P2;
 100e8f6:	50 b0       	[P2 + 0x4] = R0;
 100e8f8:	00 93       	[P0] = R0;
 100e8fa:	88 bc       	[P1 + 0x8] = P0;
 100e8fc:	41 00       	STI R1;
 100e8fe:	01 e8 00 00 	UNLINK;
 100e902:	10 00       	RTS;

0100e904 <___timer_set>:
 100e904:	c5 04       	[--SP] = (P5:5);
 100e906:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e90a:	10 32       	P2 = R0;
 100e90c:	09 32       	P1 = R1;
 100e90e:	31 00       	CLI R1;
 100e910:	88 ac       	P0 = [P1 + 0x8];
 100e912:	4d ac       	P5 = [P1 + 0x4];
 100e914:	41 30       	R0 = P1;
 100e916:	20 64       	R0 += 0x4;		/* (  4) */
 100e918:	68 bc       	[P5 + 0x4] = P0;
 100e91a:	45 93       	[P0] = P5;
 100e91c:	88 b0       	[P1 + 0x8] = R0;
 100e91e:	50 ac       	P0 = [P2 + 0x4];
 100e920:	4a bc       	[P1 + 0x4] = P2;
 100e922:	50 b0       	[P2 + 0x4] = R0;
 100e924:	00 93       	[P0] = R0;
 100e926:	88 bc       	[P1 + 0x8] = P0;
 100e928:	41 00       	STI R1;
 100e92a:	01 e8 00 00 	UNLINK;
 100e92e:	85 04       	(P5:5) = [SP++];
 100e930:	10 00       	RTS;
	...

0100e934 <___timer_delete>:
 100e934:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e938:	10 32       	P2 = R0;
 100e93a:	30 00       	CLI R0;
 100e93c:	51 ac       	P1 = [P2 + 0x4];
 100e93e:	50 91       	P0 = [P2];
 100e940:	41 bc       	[P0 + 0x4] = P1;
 100e942:	48 93       	[P1] = P0;
 100e944:	52 93       	[P2] = P2;
 100e946:	52 bc       	[P2 + 0x4] = P2;
 100e948:	40 00       	STI R0;
 100e94a:	01 e8 00 00 	UNLINK;
 100e94e:	10 00       	RTS;

0100e950 <___timer_delete_region>:
 100e950:	f5 05       	[--SP] = (R7:6, P5:5);
 100e952:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e956:	37 00       	CLI R7;
 100e958:	08 32       	P1 = R0;
 100e95a:	4a 91       	P2 = [P1];
 100e95c:	d1 90       	P1 = [P2--];
 100e95e:	0f 20       	JUMP.S 0x100e97c <___timer_delete_region+0x2c>;
 100e960:	72 30       	R6 = P2;
 100e962:	8e 09       	CC = R6 < R1 (IU);
 100e964:	09 1c       	IF CC JUMP 0x100e976 <___timer_delete_region+0x26> (BP);
 100e966:	96 09       	CC = R6 < R2 (IU);
 100e968:	07 14       	IF !CC JUMP 0x100e976 <___timer_delete_region+0x26> (BP);
 100e96a:	90 ac       	P0 = [P2 + 0x8];
 100e96c:	55 ac       	P5 = [P2 + 0x4];
 100e96e:	68 bc       	[P5 + 0x4] = P0;
 100e970:	45 93       	[P0] = P5;
 100e972:	53 b0       	[P2 + 0x4] = R3;
 100e974:	93 b0       	[P2 + 0x8] = R3;
 100e976:	51 32       	P2 = P1;
 100e978:	4b a0       	R3 = [P1 + 0x4];
 100e97a:	0b 32       	P1 = R3;
 100e97c:	5a 30       	R3 = P2;
 100e97e:	23 64       	R3 += 0x4;		/* (  4) */
 100e980:	e1 6f       	P1 += -0x4;		/* ( -4) */
 100e982:	03 08       	CC = R3 == R0;
 100e984:	ee 17       	IF !CC JUMP 0x100e960 <___timer_delete_region+0x10> (BP);
 100e986:	47 00       	STI R7;
 100e988:	01 e8 00 00 	UNLINK;
 100e98c:	b5 05       	(R7:6, P5:5) = [SP++];
 100e98e:	10 00       	RTS;

0100e990 <___timer_delete_all>:
 100e990:	c5 04       	[--SP] = (P5:5);
 100e992:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100e996:	32 00       	CLI R2;
 100e998:	08 32       	P1 = R0;
 100e99a:	4a 91       	P2 = [P1];
 100e99c:	d1 90       	P1 = [P2--];
 100e99e:	0b 20       	JUMP.S 0x100e9b4 <___timer_delete_all+0x24>;
 100e9a0:	00 00       	NOP;
 100e9a2:	90 ac       	P0 = [P2 + 0x8];
 100e9a4:	55 ac       	P5 = [P2 + 0x4];
 100e9a6:	45 93       	[P0] = P5;
 100e9a8:	68 bc       	[P5 + 0x4] = P0;
 100e9aa:	51 b0       	[P2 + 0x4] = R1;
 100e9ac:	91 b0       	[P2 + 0x8] = R1;
 100e9ae:	49 a0       	R1 = [P1 + 0x4];
 100e9b0:	51 32       	P2 = P1;
 100e9b2:	09 32       	P1 = R1;
 100e9b4:	4a 30       	R1 = P2;
 100e9b6:	21 64       	R1 += 0x4;		/* (  4) */
 100e9b8:	e1 6f       	P1 += -0x4;		/* ( -4) */
 100e9ba:	01 08       	CC = R1 == R0;
 100e9bc:	f2 17       	IF !CC JUMP 0x100e9a0 <___timer_delete_all+0x10> (BP);
 100e9be:	42 00       	STI R2;
 100e9c0:	01 e8 00 00 	UNLINK;
 100e9c4:	85 04       	(P5:5) = [SP++];
 100e9c6:	10 00       	RTS;

0100e9c8 <___timer_schedule>:
 100e9c8:	fc 05       	[--SP] = (R7:7, P5:4);
 100e9ca:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100e9ce:	20 32       	P4 = R0;
 100e9d0:	39 30       	R7 = R1;
 100e9d2:	65 91       	P5 = [P4];
 100e9d4:	0e 20       	JUMP.S 0x100e9f0 <___timer_schedule+0x28>;
 100e9d6:	00 00       	NOP;
 100e9d8:	29 91       	R1 = [P5];
 100e9da:	79 52       	R1 = R1 - R7;
 100e9dc:	81 0c       	CC = R1 < 0x0;
 100e9de:	07 14       	IF !CC JUMP 0x100e9ec <___timer_schedule+0x24> (BP);
 100e9e0:	ff e3 aa ff 	CALL 0x100e934 <___timer_delete>;
 100e9e4:	ea ac       	P2 = [P5 + 0xc];
 100e9e6:	45 30       	R0 = P5;
 100e9e8:	62 00       	CALL (P2);
 100e9ea:	f4 2f       	JUMP.S 0x100e9d2 <___timer_schedule+0xa>;
 100e9ec:	00 00       	NOP;
 100e9ee:	6d ac       	P5 = [P5 + 0x4];
 100e9f0:	e5 6f       	P5 += -0x4;		/* ( -4) */
 100e9f2:	45 30       	R0 = P5;
 100e9f4:	20 64       	R0 += 0x4;		/* (  4) */
 100e9f6:	4c 30       	R1 = P4;
 100e9f8:	08 08       	CC = R0 == R1;
 100e9fa:	ee 17       	IF !CC JUMP 0x100e9d6 <___timer_schedule+0xe> (BP);
 100e9fc:	01 e8 00 00 	UNLINK;
 100ea00:	bc 05       	(R7:7, P5:4) = [SP++];
 100ea02:	10 00       	RTS;

0100ea04 <___run_loop_register>:
 100ea04:	10 32       	P2 = R0;
 100ea06:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100ea0a:	09 32       	P1 = R1;
 100ea0c:	50 91       	P0 = [P2];
 100ea0e:	0d 20       	JUMP.S 0x100ea28 <___run_loop_register+0x24>;
 100ea10:	48 08       	CC = P0 == P1;
 100ea12:	09 14       	IF !CC JUMP 0x100ea24 <___run_loop_register+0x20> (BP);
 100ea14:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x100ea64(16837220) */
 100ea18:	00 e1 80 ea 	R0.L = 0xea80;		/* (-5504)	R0=0x100ea80(16837248) */
 100ea1c:	48 30       	R1 = P0;
 100ea1e:	00 e3 b1 02 	CALL 0x100ef80 <_printf>;
 100ea22:	00 20       	JUMP.S 0x100ea22 <___run_loop_register+0x1e>;
 100ea24:	00 00       	NOP;
 100ea26:	40 91       	P0 = [P0];
 100ea28:	50 08       	CC = P0 == P2;
 100ea2a:	f3 17       	IF !CC JUMP 0x100ea10 <___run_loop_register+0xc> (BP);
 100ea2c:	50 ac       	P0 = [P2 + 0x4];
 100ea2e:	8a b0       	[P1 + 0x8] = R2;
 100ea30:	4a 93       	[P1] = P2;
 100ea32:	51 bc       	[P2 + 0x4] = P1;
 100ea34:	41 93       	[P0] = P1;
 100ea36:	48 bc       	[P1 + 0x4] = P0;
 100ea38:	01 e8 00 00 	UNLINK;
 100ea3c:	10 00       	RTS;
	...

0100ea40 <___run_loop_schedule>:
 100ea40:	c4 04       	[--SP] = (P5:4);
 100ea42:	20 32       	P4 = R0;
 100ea44:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100ea48:	61 91       	P1 = [P4];
 100ea4a:	4d 91       	P5 = [P1];
 100ea4c:	06 20       	JUMP.S 0x100ea58 <___run_loop_schedule+0x18>;
 100ea4e:	41 30       	R0 = P1;
 100ea50:	8a ac       	P2 = [P1 + 0x8];
 100ea52:	62 00       	CALL (P2);
 100ea54:	4d 32       	P1 = P5;
 100ea56:	6d 91       	P5 = [P5];
 100ea58:	61 08       	CC = P1 == P4;
 100ea5a:	fa 17       	IF !CC JUMP 0x100ea4e <___run_loop_schedule+0xe> (BP);
 100ea5c:	01 e8 00 00 	UNLINK;
 100ea60:	84 04       	(P5:4) = [SP++];
 100ea62:	10 00       	RTS;
 100ea64:	65 72       	ILLEGAL;
 100ea66:	72 3a       	ILLEGAL;
 100ea68:	20 74       	ILLEGAL;
 100ea6a:	69 6d       	P1 += 0x2d;		/* ( 45) */
 100ea6c:	65 6f       	P5 += -0x14;		/* (-20) */
 100ea6e:	75 74       	ILLEGAL;
 100ea70:	20 65       	R0 += 0x24;		/* ( 36) */
 100ea72:	6e 74       	ILLEGAL;
 100ea74:	72 79       	ILLEGAL;
 100ea76:	20 65       	R0 += 0x24;		/* ( 36) */
 100ea78:	78 69       	P0 = 0x2f (X);		/*		P0=0x2f( 47) */
 100ea7a:	73 74       	ILLEGAL;
 100ea7c:	0a 00       	ILLEGAL;
 100ea7e:	00 00       	NOP;
 100ea80:	65 72       	ILLEGAL;
 100ea82:	72 3a       	ILLEGAL;
 100ea84:	20 6c       	P0 += 0x4;		/* (  4) */
 100ea86:	6f 6f       	FP += -0x13;		/* (-19) */
 100ea88:	70 20       	JUMP.S 0x100eb68 <___vsprintf+0x4c>;
 100ea8a:	65 6e       	P5 += -0x34;		/* (-52) */
 100ea8c:	74 72       	ILLEGAL;
 100ea8e:	79 20       	JUMP.S 0x100eb80 <___vsprintf+0x64>;
 100ea90:	65 78       	ILLEGAL;
 100ea92:	69 73       	ILLEGAL;
 100ea94:	74 3a       	ILLEGAL;
 100ea96:	20 25       	JUMP.S 0x100f4d6 <_ccm_memory+0xda>;
 100ea98:	78 0a       	CC = P0 <= FP (IU);
	...

0100ea9c <___vsprintf_len>:
 100ea9c:	10 32       	P2 = R0;
 100ea9e:	fc 05       	[--SP] = (R7:7, P5:4);
 100eaa0:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100eaa4:	42 0c       	CC = P2 == 0x0;
 100eaa6:	36 18       	IF CC JUMP 0x100eb12 <___vsprintf_len+0x76>;
 100eaa8:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100eaaa:	23 e1 9e ff 	R3 = -0x62 (X);		/*		R3=0xffffff9e(-98) */
 100eaae:	28 e1 f0 fd 	P0 = -0x210 (X);		/*		P0=0xfffffdf0(-528) */
 100eab2:	52 60       	R2 = 0xa (X);		/*		R2=0xa( 10) */
 100eab4:	2b 20       	JUMP.S 0x100eb0a <___vsprintf_len+0x6e>;
 100eab6:	27 e1 41 00 	R7 = 0x41 (X);		/*		R7=0x41( 65) */
 100eaba:	39 08       	CC = R1 == R7;
 100eabc:	23 18       	IF CC JUMP 0x100eb02 <___vsprintf_len+0x66>;
 100eabe:	39 09       	CC = R1 <= R7;
 100eac0:	06 14       	IF !CC JUMP 0x100eacc <___vsprintf_len+0x30> (BP);
 100eac2:	39 30       	R7 = R1;
 100eac4:	7f 66       	R7 += -0x31;		/* (-49) */
 100eac6:	1f 0e       	CC = R7 <= 0x3 (IU);
 100eac8:	20 14       	IF !CC JUMP 0x100eb08 <___vsprintf_len+0x6c> (BP);
 100eaca:	0b 20       	JUMP.S 0x100eae0 <___vsprintf_len+0x44>;
 100eacc:	27 e1 48 00 	R7 = 0x48 (X);		/*		R7=0x48( 72) */
 100ead0:	39 08       	CC = R1 == R7;
 100ead2:	1a 18       	IF CC JUMP 0x100eb06 <___vsprintf_len+0x6a>;
 100ead4:	b9 08       	CC = R1 < R7;
 100ead6:	19 1c       	IF CC JUMP 0x100eb08 <___vsprintf_len+0x6c> (BP);
 100ead8:	59 50       	R1 = R1 + R3;
 100eada:	09 0e       	CC = R1 <= 0x1 (IU);
 100eadc:	16 14       	IF !CC JUMP 0x100eb08 <___vsprintf_len+0x6c> (BP);
 100eade:	04 20       	JUMP.S 0x100eae6 <___vsprintf_len+0x4a>;
 100eae0:	80 66       	R0 += -0x30;		/* (-48) */
 100eae2:	08 50       	R0 = R0 + R1;
 100eae4:	12 20       	JUMP.S 0x100eb08 <___vsprintf_len+0x6c>;
 100eae6:	20 32       	P4 = R0;
 100eae8:	4a 32       	P1 = P2;
 100eaea:	09 6c       	P1 += 0x1;		/* (  1) */
 100eaec:	49 99       	R1 = B[P1] (X);
 100eaee:	d1 40       	R1 *= R2;
 100eaf0:	44 5b       	P5 = P4 + P0;
 100eaf2:	21 32       	P4 = R1;
 100eaf4:	8f e5 01 00 	R7 = B[P1 + 0x1] (X);
 100eaf8:	12 6c       	P2 += 0x2;		/* (  2) */
 100eafa:	65 5b       	P5 = P5 + P4;
 100eafc:	4d 30       	R1 = P5;
 100eafe:	39 50       	R0 = R1 + R7;
 100eb00:	04 20       	JUMP.S 0x100eb08 <___vsprintf_len+0x6c>;
 100eb02:	30 64       	R0 += 0x6;		/* (  6) */
 100eb04:	02 20       	JUMP.S 0x100eb08 <___vsprintf_len+0x6c>;
 100eb06:	10 64       	R0 += 0x2;		/* (  2) */
 100eb08:	0a 6c       	P2 += 0x1;		/* (  1) */
 100eb0a:	51 99       	R1 = B[P2] (X);
 100eb0c:	01 0c       	CC = R1 == 0x0;
 100eb0e:	d4 17       	IF !CC JUMP 0x100eab6 <___vsprintf_len+0x1a> (BP);
 100eb10:	02 20       	JUMP.S 0x100eb14 <___vsprintf_len+0x78>;
 100eb12:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100eb14:	01 e8 00 00 	UNLINK;
 100eb18:	bc 05       	(R7:7, P5:4) = [SP++];
 100eb1a:	10 00       	RTS;

0100eb1c <___vsprintf>:
 100eb1c:	e3 05       	[--SP] = (R7:4, P5:3);
 100eb1e:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100eb22:	78 b2       	[FP + 0x24] = R0;
 100eb24:	19 32       	P3 = R1;
 100eb26:	22 32       	P4 = R2;
 100eb28:	28 32       	P5 = R0;
 100eb2a:	55 60       	R5 = 0xa (X);		/*		R5=0xa( 10) */
 100eb2c:	26 e1 f0 fd 	R6 = -0x210 (X);		/*		R6=0xfffffdf0(-528) */
 100eb30:	8b 20       	JUMP.S 0x100ec46 <___vsprintf+0x12a>;
 100eb32:	a2 61       	R2 = 0x34 (X);		/*		R2=0x34( 52) */
 100eb34:	10 09       	CC = R0 <= R2;
 100eb36:	08 14       	IF !CC JUMP 0x100eb46 <___vsprintf+0x2a> (BP);
 100eb38:	9a 61       	R2 = 0x33 (X);		/*		R2=0x33( 51) */
 100eb3a:	90 08       	CC = R0 < R2;
 100eb3c:	22 14       	IF !CC JUMP 0x100eb80 <___vsprintf+0x64> (BP);
 100eb3e:	8a 61       	R2 = 0x31 (X);		/*		R2=0x31( 49) */
 100eb40:	90 08       	CC = R0 < R2;
 100eb42:	78 1c       	IF CC JUMP 0x100ec32 <___vsprintf+0x116> (BP);
 100eb44:	13 20       	JUMP.S 0x100eb6a <___vsprintf+0x4e>;
 100eb46:	22 e1 48 00 	R2 = 0x48 (X);		/*		R2=0x48( 72) */
 100eb4a:	10 08       	CC = R0 == R2;
 100eb4c:	68 18       	IF CC JUMP 0x100ec1c <___vsprintf+0x100>;
 100eb4e:	10 09       	CC = R0 <= R2;
 100eb50:	05 14       	IF !CC JUMP 0x100eb5a <___vsprintf+0x3e> (BP);
 100eb52:	ca 67       	R2 += -0x7;		/* ( -7) */
 100eb54:	10 08       	CC = R0 == R2;
 100eb56:	6e 14       	IF !CC JUMP 0x100ec32 <___vsprintf+0x116> (BP);
 100eb58:	59 20       	JUMP.S 0x100ec0a <___vsprintf+0xee>;
 100eb5a:	22 e1 62 00 	R2 = 0x62 (X);		/*		R2=0x62( 98) */
 100eb5e:	10 08       	CC = R0 == R2;
 100eb60:	29 18       	IF CC JUMP 0x100ebb2 <___vsprintf+0x96>;
 100eb62:	0a 64       	R2 += 0x1;		/* (  1) */
 100eb64:	10 08       	CC = R0 == R2;
 100eb66:	66 14       	IF !CC JUMP 0x100ec32 <___vsprintf+0x116> (BP);
 100eb68:	3e 20       	JUMP.S 0x100ebe4 <___vsprintf+0xc8>;
 100eb6a:	20 91       	R0 = [P4];
 100eb6c:	28 9a       	B[P5++] = R0;
 100eb6e:	7c 30       	R7 = P4;
 100eb70:	59 99       	R1 = B[P3] (X);
 100eb72:	92 61       	R2 = 0x32 (X);		/*		R2=0x32( 50) */
 100eb74:	27 64       	R7 += 0x4;		/* (  4) */
 100eb76:	11 08       	CC = R1 == R2;
 100eb78:	65 14       	IF !CC JUMP 0x100ec42 <___vsprintf+0x126> (BP);
 100eb7a:	40 4e       	R0 >>= 0x8;
 100eb7c:	28 9a       	B[P5++] = R0;
 100eb7e:	62 20       	JUMP.S 0x100ec42 <___vsprintf+0x126>;
 100eb80:	55 32       	P2 = P5;
 100eb82:	20 91       	R0 = [P4];
 100eb84:	10 9a       	B[P2++] = R0;
 100eb86:	82 c6 c0 83 	R1 = R0 >> 0x8;
 100eb8a:	a9 e6 01 00 	B[P5 + 0x1] = R1;
 100eb8e:	82 c6 80 83 	R1 = R0 >> 0x10;
 100eb92:	4a 32       	P1 = P2;
 100eb94:	09 6c       	P1 += 0x1;		/* (  1) */
 100eb96:	91 e6 01 00 	B[P2 + 0x1] = R1;
 100eb9a:	7c 30       	R7 = P4;
 100eb9c:	69 32       	P5 = P1;
 100eb9e:	59 99       	R1 = B[P3] (X);
 100eba0:	a2 61       	R2 = 0x34 (X);		/*		R2=0x34( 52) */
 100eba2:	27 64       	R7 += 0x4;		/* (  4) */
 100eba4:	0d 6c       	P5 += 0x1;		/* (  1) */
 100eba6:	11 08       	CC = R1 == R2;
 100eba8:	4d 14       	IF !CC JUMP 0x100ec42 <___vsprintf+0x126> (BP);
 100ebaa:	c0 4e       	R0 >>= 0x18;
 100ebac:	88 e6 01 00 	B[P1 + 0x1] = R0;
 100ebb0:	3f 20       	JUMP.S 0x100ec2e <___vsprintf+0x112>;
 100ebb2:	4b 32       	P1 = P3;
 100ebb4:	09 6c       	P1 += 0x1;		/* (  1) */
 100ebb6:	48 99       	R0 = B[P1] (X);
 100ebb8:	e8 40       	R0 *= R5;
 100ebba:	8f e5 01 00 	R7 = B[P1 + 0x1] (X);
 100ebbe:	07 50       	R0 = R7 + R0;
 100ebc0:	10 32       	P2 = R0;
 100ebc2:	0e 32       	P1 = R6;
 100ebc4:	44 32       	P0 = P4;
 100ebc6:	13 6c       	P3 += 0x2;		/* (  2) */
 100ebc8:	40 34       	I0 = P0;
 100ebca:	8a 5a       	P2 = P2 + P1;
 100ebcc:	42 30       	R0 = P2;
 100ebce:	4d 32       	P1 = P5;
 100ebd0:	04 20       	JUMP.S 0x100ebd8 <___vsprintf+0xbc>;
 100ebd2:	00 00       	NOP;
 100ebd4:	01 9c       	R1 = [I0++];
 100ebd6:	09 9a       	B[P1++] = R1;
 100ebd8:	f8 67       	R0 += -0x1;		/* ( -1) */
 100ebda:	38 0c       	CC = R0 == -0x1;
 100ebdc:	fb 17       	IF !CC JUMP 0x100ebd2 <___vsprintf+0xb6> (BP);
 100ebde:	55 5b       	P5 = P5 + P2;
 100ebe0:	14 5f       	P4 = P4 + (P2 << 0x2);
 100ebe2:	2f 20       	JUMP.S 0x100ec40 <___vsprintf+0x124>;
 100ebe4:	53 32       	P2 = P3;
 100ebe6:	0a 6c       	P2 += 0x1;		/* (  1) */
 100ebe8:	50 99       	R0 = B[P2] (X);
 100ebea:	e8 40       	R0 *= R5;
 100ebec:	94 e5 01 00 	R4 = B[P2 + 0x1] (X);
 100ebf0:	20 51       	R4 = R0 + R4;
 100ebf2:	34 51       	R4 = R4 + R6;
 100ebf4:	45 30       	R0 = P5;
 100ebf6:	21 91       	R1 = [P4];
 100ebf8:	14 30       	R2 = R4;
 100ebfa:	00 e3 85 08 	CALL 0x100fd04 <_memcpy>;
 100ebfe:	14 32       	P2 = R4;
 100ec00:	7c 30       	R7 = P4;
 100ec02:	13 6c       	P3 += 0x2;		/* (  2) */
 100ec04:	27 64       	R7 += 0x4;		/* (  4) */
 100ec06:	55 5b       	P5 = P5 + P2;
 100ec08:	1d 20       	JUMP.S 0x100ec42 <___vsprintf+0x126>;
 100ec0a:	45 30       	R0 = P5;
 100ec0c:	7c 30       	R7 = P4;
 100ec0e:	21 91       	R1 = [P4];
 100ec10:	32 60       	R2 = 0x6 (X);		/*		R2=0x6(  6) */
 100ec12:	27 64       	R7 += 0x4;		/* (  4) */
 100ec14:	00 e3 78 08 	CALL 0x100fd04 <_memcpy>;
 100ec18:	35 6c       	P5 += 0x6;		/* (  6) */
 100ec1a:	14 20       	JUMP.S 0x100ec42 <___vsprintf+0x126>;
 100ec1c:	20 91       	R0 = [P4];
 100ec1e:	55 32       	P2 = P5;
 100ec20:	10 9a       	B[P2++] = R0;
 100ec22:	40 4e       	R0 >>= 0x8;
 100ec24:	7c 30       	R7 = P4;
 100ec26:	a8 e6 01 00 	B[P5 + 0x1] = R0;
 100ec2a:	27 64       	R7 += 0x4;		/* (  4) */
 100ec2c:	6a 32       	P5 = P2;
 100ec2e:	0d 6c       	P5 += 0x1;		/* (  1) */
 100ec30:	09 20       	JUMP.S 0x100ec42 <___vsprintf+0x126>;
 100ec32:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 100ec36:	09 43       	R1 = R1.B (X);
 100ec38:	00 e1 5c ec 	R0.L = 0xec5c;		/* (-5028)	R0=0x100ec5c(16837724) */
 100ec3c:	00 e3 a2 01 	CALL 0x100ef80 <_printf>;
 100ec40:	7c 30       	R7 = P4;
 100ec42:	0b 6c       	P3 += 0x1;		/* (  1) */
 100ec44:	27 32       	P4 = R7;
 100ec46:	59 99       	R1 = B[P3] (X);
 100ec48:	08 43       	R0 = R1.B (X);
 100ec4a:	00 0c       	CC = R0 == 0x0;
 100ec4c:	73 17       	IF !CC JUMP 0x100eb32 <___vsprintf+0x16> (BP);
 100ec4e:	7a a2       	R2 = [FP + 0x24];
 100ec50:	4d 30       	R1 = P5;
 100ec52:	01 e8 00 00 	UNLINK;
 100ec56:	11 52       	R0 = R1 - R2;
 100ec58:	a3 05       	(R7:4, P5:3) = [SP++];
 100ec5a:	10 00       	RTS;
 100ec5c:	75 6e       	P5 += -0x32;		/* (-50) */
 100ec5e:	6b 6e       	P3 += -0x33;		/* (-51) */
 100ec60:	6f 77       	ILLEGAL;
 100ec62:	20 66       	R0 += -0x3c;		/* (-60) */
 100ec64:	6f 72       	ILLEGAL;
 100ec66:	61 6d       	P1 += 0x2c;		/* ( 44) */
 100ec68:	74 3a       	ILLEGAL;
 100ec6a:	20 25       	JUMP.S 0x100f6aa <_ccm_memory+0x2ae>;
 100ec6c:	63 0a       	CC = P3 <= P4 (IU);
	...

0100ec70 <_printchar>:
 100ec70:	10 32       	P2 = R0;
 100ec72:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100ec76:	01 30       	R0 = R1;
 100ec78:	42 0c       	CC = P2 == 0x0;
 100ec7a:	09 1c       	IF CC JUMP 0x100ec8c <_printchar+0x1c> (BP);
 100ec7c:	51 91       	P1 = [P2];
 100ec7e:	09 9b       	B[P1] = R1;
 100ec80:	10 91       	R0 = [P2];
 100ec82:	08 64       	R0 += 0x1;		/* (  1) */
 100ec84:	10 93       	[P2] = R0;
 100ec86:	01 e8 00 00 	UNLINK;
 100ec8a:	10 00       	RTS;
 100ec8c:	01 e8 00 00 	UNLINK;
 100ec90:	ff e2 40 fa 	JUMP.L 0x100e110 <_putchar>;

0100ec94 <_prints>:
 100ec94:	e5 05       	[--SP] = (R7:4, P5:5);
 100ec96:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100ec9a:	29 32       	P5 = R1;
 100ec9c:	20 30       	R4 = R0;
 100ec9e:	3a 30       	R7 = R2;
 100eca0:	b9 a2       	R1 = [FP + 0x28];
 100eca2:	02 0d       	CC = R2 <= 0x0;
 100eca4:	12 18       	IF CC JUMP 0x100ecc8 <_prints+0x34>;
 100eca6:	55 32       	P2 = P5;
 100eca8:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100ecaa:	02 20       	JUMP.S 0x100ecae <_prints+0x1a>;
 100ecac:	08 64       	R0 += 0x1;		/* (  1) */
 100ecae:	52 98       	R2 = B[P2++] (X);
 100ecb0:	02 0c       	CC = R2 == 0x0;
 100ecb2:	fd 17       	IF !CC JUMP 0x100ecac <_prints+0x18> (BP);
 100ecb4:	b8 08       	CC = R0 < R7;
 100ecb6:	03 14       	IF !CC JUMP 0x100ecbc <_prints+0x28> (BP);
 100ecb8:	c7 53       	R7 = R7 - R0;
 100ecba:	02 20       	JUMP.S 0x100ecbe <_prints+0x2a>;
 100ecbc:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100ecbe:	09 48       	CC = !BITTST (R1, 0x1);		/* bit  1 */
 100ecc0:	80 61       	R0 = 0x30 (X);		/*		R0=0x30( 48) */
 100ecc2:	05 61       	R5 = 0x20 (X);		/*		R5=0x20( 32) */
 100ecc4:	28 06       	IF !CC R5 = R0;
 100ecc6:	02 20       	JUMP.S 0x100ecca <_prints+0x36>;
 100ecc8:	05 61       	R5 = 0x20 (X);		/*		R5=0x20( 32) */
 100ecca:	01 48       	CC = !BITTST (R1, 0x0);		/* bit  0 */
 100eccc:	0c 14       	IF !CC JUMP 0x100ece4 <_prints+0x50> (BP);
 100ecce:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100ecd0:	07 20       	JUMP.S 0x100ecde <_prints+0x4a>;
 100ecd2:	04 30       	R0 = R4;
 100ecd4:	0d 30       	R1 = R5;
 100ecd6:	ff e3 cd ff 	CALL 0x100ec70 <_printchar>;
 100ecda:	0e 64       	R6 += 0x1;		/* (  1) */
 100ecdc:	ff 67       	R7 += -0x1;		/* ( -1) */
 100ecde:	07 0d       	CC = R7 <= 0x0;
 100ece0:	f9 17       	IF !CC JUMP 0x100ecd2 <_prints+0x3e> (BP);
 100ece2:	07 20       	JUMP.S 0x100ecf0 <_prints+0x5c>;
 100ece4:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100ece6:	05 20       	JUMP.S 0x100ecf0 <_prints+0x5c>;
 100ece8:	04 30       	R0 = R4;
 100ecea:	ff e3 c3 ff 	CALL 0x100ec70 <_printchar>;
 100ecee:	0e 64       	R6 += 0x1;		/* (  1) */
 100ecf0:	69 98       	R1 = B[P5++] (X);
 100ecf2:	01 0c       	CC = R1 == 0x0;
 100ecf4:	fa 17       	IF !CC JUMP 0x100ece8 <_prints+0x54> (BP);
 100ecf6:	07 20       	JUMP.S 0x100ed04 <_prints+0x70>;
 100ecf8:	04 30       	R0 = R4;
 100ecfa:	0d 30       	R1 = R5;
 100ecfc:	ff e3 ba ff 	CALL 0x100ec70 <_printchar>;
 100ed00:	0e 64       	R6 += 0x1;		/* (  1) */
 100ed02:	ff 67       	R7 += -0x1;		/* ( -1) */
 100ed04:	07 0d       	CC = R7 <= 0x0;
 100ed06:	f9 17       	IF !CC JUMP 0x100ecf8 <_prints+0x64> (BP);
 100ed08:	06 30       	R0 = R6;
 100ed0a:	01 e8 00 00 	UNLINK;
 100ed0e:	a5 05       	(R7:4, P5:5) = [SP++];
 100ed10:	10 00       	RTS;
	...

0100ed14 <_printi>:
 100ed14:	e3 05       	[--SP] = (R7:4, P5:3);
 100ed16:	00 e8 08 00 	LINK 0x20;		/* (32) */
 100ed1a:	20 32       	P4 = R0;
 100ed1c:	22 30       	R4 = R2;
 100ed1e:	7d a3       	R5 = [FP + 0x34];
 100ed20:	bb af       	P3 = [FP + 0x38];
 100ed22:	39 30       	R7 = R1;
 100ed24:	01 0c       	CC = R1 == 0x0;
 100ed26:	0f 14       	IF !CC JUMP 0x100ed44 <_printi+0x30> (BP);
 100ed28:	80 61       	R0 = 0x30 (X);		/*		R0=0x30( 48) */
 100ed2a:	b8 e6 f4 ff 	B[FP + -0xc] = R0;
 100ed2e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100ed30:	b8 e6 f5 ff 	B[FP + -0xb] = R0;
 100ed34:	4f 30       	R1 = FP;
 100ed36:	f3 bc       	[SP + 0xc] = P3;
 100ed38:	44 30       	R0 = P4;
 100ed3a:	a1 67       	R1 += -0xc;		/* (-12) */
 100ed3c:	15 30       	R2 = R5;
 100ed3e:	ff e3 ab ff 	CALL 0x100ec94 <_prints>;
 100ed42:	44 20       	JUMP.S 0x100edca <_printi+0xb6>;
 100ed44:	38 a3       	R0 = [FP + 0x30];
 100ed46:	00 0c       	CC = R0 == 0x0;
 100ed48:	09 1c       	IF CC JUMP 0x100ed5a <_printi+0x46> (BP);
 100ed4a:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 100ed4c:	02 08       	CC = R2 == R0;
 100ed4e:	06 14       	IF !CC JUMP 0x100ed5a <_printi+0x46> (BP);
 100ed50:	81 0c       	CC = R1 < 0x0;
 100ed52:	04 14       	IF !CC JUMP 0x100ed5a <_printi+0x46> (BP);
 100ed54:	8f 43       	R7 = -R1;
 100ed56:	0e 60       	R6 = 0x1 (X);		/*		R6=0x1(  1) */
 100ed58:	02 20       	JUMP.S 0x100ed5c <_printi+0x48>;
 100ed5a:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100ed5c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100ed5e:	b8 e6 ff ff 	B[FP + -0x1] = R0;
 100ed62:	f8 a3       	R0 = [FP + 0x3c];
 100ed64:	6f 32       	P5 = FP;
 100ed66:	30 66       	R0 += -0x3a;		/* (-58) */
 100ed68:	fd 6f       	P5 += -0x1;		/* ( -1) */
 100ed6a:	c0 bb       	[FP -0x10] = R0;
 100ed6c:	12 20       	JUMP.S 0x100ed90 <_printi+0x7c>;
 100ed6e:	07 30       	R0 = R7;
 100ed70:	0c 30       	R1 = R4;
 100ed72:	00 e3 4b 09 	CALL 0x1010008 <___umodsi3>;
 100ed76:	49 60       	R1 = 0x9 (X);		/*		R1=0x9(  9) */
 100ed78:	08 09       	CC = R0 <= R1;
 100ed7a:	c2 b9       	R2 = [FP -0x10];
 100ed7c:	50 50       	R1 = R0 + R2;
 100ed7e:	01 06       	IF !CC R0 = R1;
 100ed80:	80 65       	R0 += 0x30;		/* ( 48) */
 100ed82:	fd 6f       	P5 += -0x1;		/* ( -1) */
 100ed84:	28 9b       	B[P5] = R0;
 100ed86:	07 30       	R0 = R7;
 100ed88:	0c 30       	R1 = R4;
 100ed8a:	ff e3 e6 89 	CALL 0x1000156 <___udivsi3>;
 100ed8e:	38 30       	R7 = R0;
 100ed90:	07 0c       	CC = R7 == 0x0;
 100ed92:	ee 17       	IF !CC JUMP 0x100ed6e <_printi+0x5a> (BP);
 100ed94:	55 32       	P2 = P5;
 100ed96:	06 0c       	CC = R6 == 0x0;
 100ed98:	11 1c       	IF CC JUMP 0x100edba <_printi+0xa6> (BP);
 100ed9a:	05 0c       	CC = R5 == 0x0;
 100ed9c:	0b 1c       	IF CC JUMP 0x100edb2 <_printi+0x9e> (BP);
 100ed9e:	43 30       	R0 = P3;
 100eda0:	08 48       	CC = !BITTST (R0, 0x1);		/* bit  1 */
 100eda2:	08 1c       	IF CC JUMP 0x100edb2 <_printi+0x9e> (BP);
 100eda4:	44 30       	R0 = P4;
 100eda6:	69 61       	R1 = 0x2d (X);		/*		R1=0x2d( 45) */
 100eda8:	ff e3 64 ff 	CALL 0x100ec70 <_printchar>;
 100edac:	fd 67       	R5 += -0x1;		/* ( -1) */
 100edae:	0f 60       	R7 = 0x1 (X);		/*		R7=0x1(  1) */
 100edb0:	06 20       	JUMP.S 0x100edbc <_printi+0xa8>;
 100edb2:	68 61       	R0 = 0x2d (X);		/*		R0=0x2d( 45) */
 100edb4:	fd 6f       	P5 += -0x1;		/* ( -1) */
 100edb6:	90 e6 ff ff 	B[P2 + -0x1] = R0;
 100edba:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100edbc:	f3 bc       	[SP + 0xc] = P3;
 100edbe:	44 30       	R0 = P4;
 100edc0:	4d 30       	R1 = P5;
 100edc2:	15 30       	R2 = R5;
 100edc4:	ff e3 68 ff 	CALL 0x100ec94 <_prints>;
 100edc8:	38 50       	R0 = R0 + R7;
 100edca:	01 e8 00 00 	UNLINK;
 100edce:	a3 05       	(R7:4, P5:3) = [SP++];
 100edd0:	10 00       	RTS;
	...

0100edd4 <_print>:
 100edd4:	e3 05       	[--SP] = (R7:4, P5:3);
 100edd6:	00 e8 08 00 	LINK 0x20;		/* (32) */
 100edda:	4b e1 00 01 	P3.H = 0x100;		/* (256)	P3=0x100002e */
 100edde:	20 32       	P4 = R0;
 100ede0:	29 32       	P5 = R1;
 100ede2:	fa b2       	[FP + 0x2c] = R2;
 100ede4:	07 60       	R7 = 0x0 (X);		/*		R7=0x0(  0) */
 100ede6:	05 60       	R5 = 0x0 (X);		/*		R5=0x0(  0) */
 100ede8:	26 e1 61 00 	R6 = 0x61 (X);		/*		R6=0x61( 97) */
 100edec:	24 e1 41 00 	R4 = 0x41 (X);		/*		R4=0x41( 65) */
 100edf0:	0b e1 d4 ef 	P3.L = 0xefd4;		/* (-4140)	P3=0x100efd4 */
 100edf4:	b8 20       	JUMP.S 0x100ef64 <_print+0x190>;
 100edf6:	29 61       	R1 = 0x25 (X);		/*		R1=0x25( 37) */
 100edf8:	08 08       	CC = R0 == R1;
 100edfa:	af 14       	IF !CC JUMP 0x100ef58 <_print+0x184> (BP);
 100edfc:	0d 6c       	P5 += 0x1;		/* (  1) */
 100edfe:	68 99       	R0 = B[P5] (X);
 100ee00:	00 0c       	CC = R0 == 0x0;
 100ee02:	b4 18       	IF CC JUMP 0x100ef6a <_print+0x196>;
 100ee04:	08 08       	CC = R0 == R1;
 100ee06:	a9 18       	IF CC JUMP 0x100ef58 <_print+0x184>;
 100ee08:	6a 61       	R2 = 0x2d (X);		/*		R2=0x2d( 45) */
 100ee0a:	10 08       	CC = R0 == R2;
 100ee0c:	04 14       	IF !CC JUMP 0x100ee14 <_print+0x40> (BP);
 100ee0e:	0d 6c       	P5 += 0x1;		/* (  1) */
 100ee10:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100ee12:	02 20       	JUMP.S 0x100ee16 <_print+0x42>;
 100ee14:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100ee16:	55 32       	P2 = P5;
 100ee18:	83 61       	R3 = 0x30 (X);		/*		R3=0x30( 48) */
 100ee1a:	02 20       	JUMP.S 0x100ee1e <_print+0x4a>;
 100ee1c:	08 4a       	BITSET (R0, 0x1);		/* bit  1 */
 100ee1e:	6a 32       	P5 = P2;
 100ee20:	51 98       	R1 = B[P2++] (X);
 100ee22:	0a 43       	R2 = R1.B (X);
 100ee24:	1a 08       	CC = R2 == R3;
 100ee26:	fb 1f       	IF CC JUMP 0x100ee1c <_print+0x48> (BP);
 100ee28:	81 66       	R1 += -0x30;		/* (-48) */
 100ee2a:	49 43       	R1 = R1.B (Z);
 100ee2c:	4a 60       	R2 = 0x9 (X);		/*		R2=0x9(  9) */
 100ee2e:	11 0a       	CC = R1 <= R2 (IU);
 100ee30:	16 14       	IF !CC JUMP 0x100ee5c <_print+0x88> (BP);
 100ee32:	55 32       	P2 = P5;
 100ee34:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100ee36:	30 e1 0a 00 	I0 = 0xa (X);		/*		I0=0xa( 10) */
 100ee3a:	48 68       	P0 = 0x9 (X);		/*		P0=0x9(  9) */
 100ee3c:	06 20       	JUMP.S 0x100ee48 <_print+0x74>;
 100ee3e:	98 30       	R3 = I0;
 100ee40:	da 40       	R2 *= R3;
 100ee42:	09 43       	R1 = R1.B (X);
 100ee44:	81 66       	R1 += -0x30;		/* (-48) */
 100ee46:	91 50       	R2 = R1 + R2;
 100ee48:	6a 32       	P5 = P2;
 100ee4a:	51 98       	R1 = B[P2++] (X);
 100ee4c:	09 32       	P1 = R1;
 100ee4e:	81 6e       	P1 += -0x30;		/* (-48) */
 100ee50:	59 30       	R3 = P1;
 100ee52:	5b 43       	R3 = R3.B (Z);
 100ee54:	0b 32       	P1 = R3;
 100ee56:	41 0a       	CC = P1 <= P0 (IU);
 100ee58:	f3 1f       	IF CC JUMP 0x100ee3e <_print+0x6a> (BP);
 100ee5a:	02 20       	JUMP.S 0x100ee5e <_print+0x8a>;
 100ee5c:	fa 63       	R2 = -0x1 (X);		/*		R2=0xffffffff( -1) */
 100ee5e:	69 99       	R1 = B[P5] (X);
 100ee60:	73 61       	R3 = 0x2e (X);		/*		R3=0x2e( 46) */
 100ee62:	19 08       	CC = R1 == R3;
 100ee64:	1b 14       	IF !CC JUMP 0x100ee9a <_print+0xc6> (BP);
 100ee66:	0d 6c       	P5 += 0x1;		/* (  1) */
 100ee68:	69 99       	R1 = B[P5] (X);
 100ee6a:	19 30       	R3 = R1;
 100ee6c:	83 66       	R3 += -0x30;		/* (-48) */
 100ee6e:	5b 43       	R3 = R3.B (Z);
 100ee70:	13 32       	P2 = R3;
 100ee72:	48 68       	P0 = 0x9 (X);		/*		P0=0x9(  9) */
 100ee74:	42 0a       	CC = P2 <= P0 (IU);
 100ee76:	0a 14       	IF !CC JUMP 0x100ee8a <_print+0xb6> (BP);
 100ee78:	55 32       	P2 = P5;
 100ee7a:	4b 60       	R3 = 0x9 (X);		/*		R3=0x9(  9) */
 100ee7c:	6a 32       	P5 = P2;
 100ee7e:	51 98       	R1 = B[P2++] (X);
 100ee80:	81 66       	R1 += -0x30;		/* (-48) */
 100ee82:	49 43       	R1 = R1.B (Z);
 100ee84:	19 0a       	CC = R1 <= R3 (IU);
 100ee86:	fb 1f       	IF CC JUMP 0x100ee7c <_print+0xa8> (BP);
 100ee88:	09 20       	JUMP.S 0x100ee9a <_print+0xc6>;
 100ee8a:	09 43       	R1 = R1.B (X);
 100ee8c:	53 61       	R3 = 0x2a (X);		/*		R3=0x2a( 42) */
 100ee8e:	19 08       	CC = R1 == R3;
 100ee90:	05 14       	IF !CC JUMP 0x100ee9a <_print+0xc6> (BP);
 100ee92:	f9 a2       	R1 = [FP + 0x2c];
 100ee94:	21 64       	R1 += 0x4;		/* (  4) */
 100ee96:	0d 6c       	P5 += 0x1;		/* (  1) */
 100ee98:	f9 b2       	[FP + 0x2c] = R1;
 100ee9a:	23 e1 73 00 	R3 = 0x73 (X);		/*		R3=0x73(115) */
 100ee9e:	69 99       	R1 = B[P5] (X);
 100eea0:	19 08       	CC = R1 == R3;
 100eea2:	0b 14       	IF !CC JUMP 0x100eeb8 <_print+0xe4> (BP);
 100eea4:	fa ae       	P2 = [FP + 0x2c];
 100eea6:	4a 30       	R1 = P2;
 100eea8:	21 64       	R1 += 0x4;		/* (  4) */
 100eeaa:	f9 b2       	[FP + 0x2c] = R1;
 100eeac:	11 91       	R1 = [P2];
 100eeae:	01 0c       	CC = R1 == 0x0;
 100eeb0:	f0 b0       	[SP + 0xc] = R0;
 100eeb2:	4b 07       	IF CC R1 = P3;
 100eeb4:	44 30       	R0 = P4;
 100eeb6:	4e 20       	JUMP.S 0x100ef52 <_print+0x17e>;
 100eeb8:	23 e1 64 00 	R3 = 0x64 (X);		/*		R3=0x64 <_bt16_devices>(100) */
 100eebc:	19 08       	CC = R1 == R3;
 100eebe:	11 14       	IF !CC JUMP 0x100eee0 <_print+0x10c> (BP);
 100eec0:	fa ae       	P2 = [FP + 0x2c];
 100eec2:	08 68       	P0 = 0x1 (X);		/*		P0=0x1(  1) */
 100eec4:	f0 bc       	[SP + 0xc] = P0;
 100eec6:	4a 30       	R1 = P2;
 100eec8:	21 64       	R1 += 0x4;		/* (  4) */
 100eeca:	f9 b2       	[FP + 0x2c] = R1;
 100eecc:	32 b1       	[SP + 0x10] = R2;
 100eece:	70 b1       	[SP + 0x14] = R0;
 100eed0:	b6 b1       	[SP + 0x18] = R6;
 100eed2:	44 30       	R0 = P4;
 100eed4:	11 91       	R1 = [P2];
 100eed6:	52 60       	R2 = 0xa (X);		/*		R2=0xa( 10) */
 100eed8:	ff e3 1e ff 	CALL 0x100ed14 <_printi>;
 100eedc:	c7 51       	R7 = R7 + R0;
 100eede:	42 20       	JUMP.S 0x100ef62 <_print+0x18e>;
 100eee0:	23 e1 78 00 	R3 = 0x78 (X);		/*		R3=0x78(120) */
 100eee4:	19 08       	CC = R1 == R3;
 100eee6:	0a 14       	IF !CC JUMP 0x100eefa <_print+0x126> (BP);
 100eee8:	fa ae       	P2 = [FP + 0x2c];
 100eeea:	f5 b0       	[SP + 0xc] = R5;
 100eeec:	32 b1       	[SP + 0x10] = R2;
 100eeee:	70 b1       	[SP + 0x14] = R0;
 100eef0:	4a 30       	R1 = P2;
 100eef2:	21 64       	R1 += 0x4;		/* (  4) */
 100eef4:	f9 b2       	[FP + 0x2c] = R1;
 100eef6:	b6 b1       	[SP + 0x18] = R6;
 100eef8:	0d 20       	JUMP.S 0x100ef12 <_print+0x13e>;
 100eefa:	23 e1 58 00 	R3 = 0x58 (X);		/*		R3=0x58( 88) */
 100eefe:	19 08       	CC = R1 == R3;
 100ef00:	0d 14       	IF !CC JUMP 0x100ef1a <_print+0x146> (BP);
 100ef02:	fa ae       	P2 = [FP + 0x2c];
 100ef04:	f5 b0       	[SP + 0xc] = R5;
 100ef06:	32 b1       	[SP + 0x10] = R2;
 100ef08:	70 b1       	[SP + 0x14] = R0;
 100ef0a:	4a 30       	R1 = P2;
 100ef0c:	21 64       	R1 += 0x4;		/* (  4) */
 100ef0e:	f9 b2       	[FP + 0x2c] = R1;
 100ef10:	b4 b1       	[SP + 0x18] = R4;
 100ef12:	44 30       	R0 = P4;
 100ef14:	11 91       	R1 = [P2];
 100ef16:	82 60       	R2 = 0x10 (X);		/*		R2=0x10( 16) */
 100ef18:	e0 2f       	JUMP.S 0x100eed8 <_print+0x104>;
 100ef1a:	23 e1 75 00 	R3 = 0x75 (X);		/*		R3=0x75(117) */
 100ef1e:	19 08       	CC = R1 == R3;
 100ef20:	07 14       	IF !CC JUMP 0x100ef2e <_print+0x15a> (BP);
 100ef22:	fa ae       	P2 = [FP + 0x2c];
 100ef24:	f5 b0       	[SP + 0xc] = R5;
 100ef26:	4a 30       	R1 = P2;
 100ef28:	21 64       	R1 += 0x4;		/* (  4) */
 100ef2a:	f9 b2       	[FP + 0x2c] = R1;
 100ef2c:	d0 2f       	JUMP.S 0x100eecc <_print+0xf8>;
 100ef2e:	23 e1 63 00 	R3 = 0x63 (X);		/*		R3=0x63( 99) */
 100ef32:	19 08       	CC = R1 == R3;
 100ef34:	17 14       	IF !CC JUMP 0x100ef62 <_print+0x18e> (BP);
 100ef36:	fa ae       	P2 = [FP + 0x2c];
 100ef38:	4a 30       	R1 = P2;
 100ef3a:	21 64       	R1 += 0x4;		/* (  4) */
 100ef3c:	f9 b2       	[FP + 0x2c] = R1;
 100ef3e:	51 99       	R1 = B[P2] (X);
 100ef40:	b9 e6 fc ff 	B[FP + -0x4] = R1;
 100ef44:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100ef46:	b9 e6 fd ff 	B[FP + -0x3] = R1;
 100ef4a:	f0 b0       	[SP + 0xc] = R0;
 100ef4c:	4f 30       	R1 = FP;
 100ef4e:	44 30       	R0 = P4;
 100ef50:	e1 67       	R1 += -0x4;		/* ( -4) */
 100ef52:	ff e3 a1 fe 	CALL 0x100ec94 <_prints>;
 100ef56:	c3 2f       	JUMP.S 0x100eedc <_print+0x108>;
 100ef58:	44 30       	R0 = P4;
 100ef5a:	69 99       	R1 = B[P5] (X);
 100ef5c:	ff e3 8a fe 	CALL 0x100ec70 <_printchar>;
 100ef60:	0f 64       	R7 += 0x1;		/* (  1) */
 100ef62:	0d 6c       	P5 += 0x1;		/* (  1) */
 100ef64:	68 99       	R0 = B[P5] (X);
 100ef66:	00 0c       	CC = R0 == 0x0;
 100ef68:	47 17       	IF !CC JUMP 0x100edf6 <_print+0x22> (BP);
 100ef6a:	44 0c       	CC = P4 == 0x0;
 100ef6c:	04 1c       	IF CC JUMP 0x100ef74 <_print+0x1a0> (BP);
 100ef6e:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100ef70:	62 91       	P2 = [P4];
 100ef72:	10 9b       	B[P2] = R0;
 100ef74:	07 30       	R0 = R7;
 100ef76:	01 e8 00 00 	UNLINK;
 100ef7a:	a3 05       	(R7:4, P5:3) = [SP++];
 100ef7c:	10 00       	RTS;
	...

0100ef80 <_printf>:
 100ef80:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100ef84:	f9 b0       	[FP + 0xc] = R1;
 100ef86:	3a b1       	[FP + 0x10] = R2;
 100ef88:	08 30       	R1 = R0;
 100ef8a:	57 30       	R2 = FP;
 100ef8c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100ef8e:	62 64       	R2 += 0xc;		/* ( 12) */
 100ef90:	ff e3 22 ff 	CALL 0x100edd4 <_print>;
 100ef94:	01 e8 00 00 	UNLINK;
 100ef98:	10 00       	RTS;
	...

0100ef9c <_sprintf>:
 100ef9c:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100efa0:	b8 b0       	[FP + 0x8] = R0;
 100efa2:	3a b1       	[FP + 0x10] = R2;
 100efa4:	47 30       	R0 = FP;
 100efa6:	57 30       	R2 = FP;
 100efa8:	40 64       	R0 += 0x8;		/* (  8) */
 100efaa:	82 64       	R2 += 0x10;		/* ( 16) */
 100efac:	ff e3 14 ff 	CALL 0x100edd4 <_print>;
 100efb0:	01 e8 00 00 	UNLINK;
 100efb4:	10 00       	RTS;
	...

0100efb8 <_puts>:
 100efb8:	c5 04       	[--SP] = (P5:5);
 100efba:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100efbe:	28 32       	P5 = R0;
 100efc0:	03 20       	JUMP.S 0x100efc6 <_puts+0xe>;
 100efc2:	ff e3 a7 f8 	CALL 0x100e110 <_putchar>;
 100efc6:	68 98       	R0 = B[P5++] (X);
 100efc8:	00 0c       	CC = R0 == 0x0;
 100efca:	fc 17       	IF !CC JUMP 0x100efc2 <_puts+0xa> (BP);
 100efcc:	01 e8 00 00 	UNLINK;
 100efd0:	85 04       	(P5:5) = [SP++];
 100efd2:	10 00       	RTS;
 100efd4:	28 6e       	P0 += -0x3b;		/* (-59) */
 100efd6:	75 6c       	P5 += 0xe;		/* ( 14) */
 100efd8:	6c 29       	JUMP.S 0x100e2b0 <_system_init+0x10>;
	...

0100efdc <___timer_insert>:
 100efdc:	c5 04       	[--SP] = (P5:5);
 100efde:	48 e1 00 00 	P0.H = 0x0;		/* (  0)	P0=0x1 */
 100efe2:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100efe6:	08 e1 f0 44 	P0.L = 0x44f0;		/* (17648)	P0=0x44f0 <_timer_head> */
 100efea:	10 32       	P2 = R0;
 100efec:	41 91       	P1 = [P0];
 100efee:	0c 20       	JUMP.S 0x100f006 <___timer_insert+0x2a>;
 100eff0:	51 08       	CC = P1 == P2;
 100eff2:	08 14       	IF !CC JUMP 0x100f002 <___timer_insert+0x26> (BP);
 100eff4:	48 ac       	P0 = [P1 + 0x4];
 100eff6:	4d 91       	P5 = [P1];
 100eff8:	68 bc       	[P5 + 0x4] = P0;
 100effa:	45 93       	[P0] = P5;
 100effc:	49 93       	[P1] = P1;
 100effe:	49 bc       	[P1 + 0x4] = P1;
 100f000:	05 20       	JUMP.S 0x100f00a <___timer_insert+0x2e>;
 100f002:	00 00       	NOP;
 100f004:	49 91       	P1 = [P1];
 100f006:	41 08       	CC = P1 == P0;
 100f008:	f4 17       	IF !CC JUMP 0x100eff0 <___timer_insert+0x14> (BP);
 100f00a:	48 e1 00 00 	P0.H = 0x0;		/* (  0)	P0=0x44f0 <_timer_head> */
 100f00e:	08 e1 f0 44 	P0.L = 0x44f0;		/* (17648)	P0=0x44f0 <_timer_head> */
 100f012:	41 91       	P1 = [P0];
 100f014:	68 32       	P5 = P0;
 100f016:	0e 20       	JUMP.S 0x100f032 <___timer_insert+0x56>;
 100f018:	00 00       	NOP;
 100f01a:	c9 a0       	R1 = [P1 + 0xc];
 100f01c:	d0 a0       	R0 = [P2 + 0xc];
 100f01e:	01 0a       	CC = R1 <= R0 (IU);
 100f020:	07 1c       	IF CC JUMP 0x100f02e <___timer_insert+0x52> (BP);
 100f022:	48 ac       	P0 = [P1 + 0x4];
 100f024:	4a bc       	[P1 + 0x4] = P2;
 100f026:	51 93       	[P2] = P1;
 100f028:	50 bc       	[P2 + 0x4] = P0;
 100f02a:	42 93       	[P0] = P2;
 100f02c:	0e 20       	JUMP.S 0x100f048 <___timer_insert+0x6c>;
 100f02e:	00 00       	NOP;
 100f030:	49 91       	P1 = [P1];
 100f032:	48 e1 00 00 	P0.H = 0x0;		/* (  0)	P0=0x44f0 <_timer_head> */
 100f036:	08 e1 f0 44 	P0.L = 0x44f0;		/* (17648)	P0=0x44f0 <_timer_head> */
 100f03a:	69 08       	CC = P1 == P5;
 100f03c:	ee 17       	IF !CC JUMP 0x100f018 <___timer_insert+0x3c> (BP);
 100f03e:	41 ac       	P1 = [P0 + 0x4];
 100f040:	42 bc       	[P0 + 0x4] = P2;
 100f042:	50 93       	[P2] = P0;
 100f044:	51 bc       	[P2 + 0x4] = P1;
 100f046:	4a 93       	[P1] = P2;
 100f048:	01 e8 00 00 	UNLINK;
 100f04c:	85 04       	(P5:5) = [SP++];
 100f04e:	10 00       	RTS;

0100f050 <_sys_timer_register>:
 100f050:	f5 05       	[--SP] = (R7:6, P5:5);
 100f052:	28 32       	P5 = R0;
 100f054:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100f058:	01 30       	R0 = R1;
 100f05a:	36 00       	CLI R6;
 100f05c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x44e0 <_platform_bus> */
 100f060:	0a e1 c8 45 	P2.L = 0x45c8;		/* (17864)	P2=0x45c8 <_jiffies> */
 100f064:	41 e1 cc cc 	R1.H = 0xcccc;		/* (-13108)	R1=0xcccc0000(-859045888) */
 100f068:	17 91       	R7 = [P2];
 100f06a:	aa b0       	[P5 + 0x8] = R2;
 100f06c:	01 e1 cd cc 	R1.L = 0xcccd;		/* (-13107)	R1=0xcccccccd(-858993459) */
 100f070:	00 e3 d8 07 	CALL 0x1010020 <___umulsi3_highpart>;
 100f074:	18 4e       	R0 >>= 0x3;
 100f076:	f8 51       	R7 = R0 + R7;
 100f078:	ef b0       	[P5 + 0xc] = R7;
 100f07a:	45 30       	R0 = P5;
 100f07c:	ff e3 b0 ff 	CALL 0x100efdc <___timer_insert>;
 100f080:	46 00       	STI R6;
 100f082:	01 e8 00 00 	UNLINK;
 100f086:	b5 05       	(R7:6, P5:5) = [SP++];
 100f088:	10 00       	RTS;
	...

0100f08c <_sys_timer_reset>:
 100f08c:	f5 05       	[--SP] = (R7:6, P5:5);
 100f08e:	28 32       	P5 = R0;
 100f090:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100f094:	01 30       	R0 = R1;
 100f096:	36 00       	CLI R6;
 100f098:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45c8 <_jiffies> */
 100f09c:	0a e1 c8 45 	P2.L = 0x45c8;		/* (17864)	P2=0x45c8 <_jiffies> */
 100f0a0:	41 e1 cc cc 	R1.H = 0xcccc;		/* (-13108)	R1=0xcccccccd(-858993459) */
 100f0a4:	17 91       	R7 = [P2];
 100f0a6:	01 e1 cd cc 	R1.L = 0xcccd;		/* (-13107)	R1=0xcccccccd(-858993459) */
 100f0aa:	00 e3 bb 07 	CALL 0x1010020 <___umulsi3_highpart>;
 100f0ae:	18 4e       	R0 >>= 0x3;
 100f0b0:	f8 51       	R7 = R0 + R7;
 100f0b2:	ef b0       	[P5 + 0xc] = R7;
 100f0b4:	45 30       	R0 = P5;
 100f0b6:	ff e3 93 ff 	CALL 0x100efdc <___timer_insert>;
 100f0ba:	46 00       	STI R6;
 100f0bc:	01 e8 00 00 	UNLINK;
 100f0c0:	b5 05       	(R7:6, P5:5) = [SP++];
 100f0c2:	10 00       	RTS;

0100f0c4 <_sys_timer_remove>:
 100f0c4:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100f0c8:	10 32       	P2 = R0;
 100f0ca:	30 00       	CLI R0;
 100f0cc:	51 ac       	P1 = [P2 + 0x4];
 100f0ce:	50 91       	P0 = [P2];
 100f0d0:	41 bc       	[P0 + 0x4] = P1;
 100f0d2:	48 93       	[P1] = P0;
 100f0d4:	52 93       	[P2] = P2;
 100f0d6:	52 bc       	[P2 + 0x4] = P2;
 100f0d8:	40 00       	STI R0;
 100f0da:	01 e8 00 00 	UNLINK;
 100f0de:	10 00       	RTS;

0100f0e0 <_sys_timer_schedule>:
 100f0e0:	fb 05       	[--SP] = (R7:7, P5:3);
 100f0e2:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45c8 <_jiffies> */
 100f0e6:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100f0ea:	0a e1 c8 45 	P2.L = 0x45c8;		/* (17864)	P2=0x45c8 <_jiffies> */
 100f0ee:	10 91       	R0 = [P2];
 100f0f0:	08 64       	R0 += 0x1;		/* (  1) */
 100f0f2:	4b e1 00 00 	P3.H = 0x0;		/* (  0)	P3=0xefd4 */
 100f0f6:	10 93       	[P2] = R0;
 100f0f8:	0b e1 f0 44 	P3.L = 0x44f0;		/* (17648)	P3=0x44f0 <_timer_head> */
 100f0fc:	5d 91       	P5 = [P3];
 100f0fe:	7a 30       	R7 = P2;
 100f100:	6c 91       	P4 = [P5];
 100f102:	0f 20       	JUMP.S 0x100f120 <_sys_timer_schedule+0x40>;
 100f104:	17 32       	P2 = R7;
 100f106:	e8 a0       	R0 = [P5 + 0xc];
 100f108:	11 91       	R1 = [P2];
 100f10a:	01 52       	R0 = R1 - R0;
 100f10c:	80 0c       	CC = R0 < 0x0;
 100f10e:	0b 18       	IF CC JUMP 0x100f124 <_sys_timer_schedule+0x44>;
 100f110:	45 30       	R0 = P5;
 100f112:	ff e3 d9 ff 	CALL 0x100f0c4 <_sys_timer_remove>;
 100f116:	45 30       	R0 = P5;
 100f118:	aa ac       	P2 = [P5 + 0x8];
 100f11a:	6c 32       	P5 = P4;
 100f11c:	62 00       	CALL (P2);
 100f11e:	64 91       	P4 = [P4];
 100f120:	5d 08       	CC = P5 == P3;
 100f122:	f1 17       	IF !CC JUMP 0x100f104 <_sys_timer_schedule+0x24> (BP);
 100f124:	01 e8 00 00 	UNLINK;
 100f128:	bb 05       	(R7:7, P5:3) = [SP++];
 100f12a:	10 00       	RTS;

0100f12c <_sys_timer_init>:
 100f12c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x45c8 <_jiffies> */
 100f130:	0a e1 f0 44 	P2.L = 0x44f0;		/* (17648)	P2=0x44f0 <_timer_head> */
 100f134:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100f138:	52 93       	[P2] = P2;
 100f13a:	52 bc       	[P2 + 0x4] = P2;
 100f13c:	01 e8 00 00 	UNLINK;
 100f140:	10 00       	RTS;
	...

0100f144 <_thread_schedule>:
 100f144:	40 43       	R0 = R0.B (Z);
 100f146:	c4 04       	[--SP] = (P5:4);
 100f148:	18 4f       	R0 <<= 0x3;
 100f14a:	20 32       	P4 = R0;
 100f14c:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x44f0 <_timer_head> */
 100f150:	0a e1 00 45 	P2.L = 0x4500;		/* (17664)	P2=0x4500 <_thread_head> */
 100f154:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100f158:	14 5b       	P4 = P4 + P2;
 100f15a:	62 91       	P2 = [P4];
 100f15c:	91 e4 01 00 	R1 = B[P2 + 0x1] (Z);
 100f160:	12 99       	R2 = B[P2] (Z);
 100f162:	41 4f       	R1 <<= 0x8;
 100f164:	90 e4 02 00 	R0 = B[P2 + 0x2] (Z);
 100f168:	51 56       	R1 = R1 | R2;
 100f16a:	80 4f       	R0 <<= 0x10;
 100f16c:	08 56       	R0 = R0 | R1;
 100f16e:	91 e4 03 00 	R1 = B[P2 + 0x3] (Z);
 100f172:	c1 4f       	R1 <<= 0x18;
 100f174:	20 20       	JUMP.S 0x100f1b4 <_thread_schedule+0x70>;
 100f176:	00 00       	NOP;
 100f178:	92 e4 09 00 	R2 = B[P2 + 0x9] (Z);
 100f17c:	93 e4 08 00 	R3 = B[P2 + 0x8] (Z);
 100f180:	90 e4 0a 00 	R0 = B[P2 + 0xa] (Z);
 100f184:	42 4f       	R2 <<= 0x8;
 100f186:	9a 56       	R2 = R2 | R3;
 100f188:	91 e4 0b 00 	R1 = B[P2 + 0xb] (Z);
 100f18c:	80 4f       	R0 <<= 0x10;
 100f18e:	10 56       	R0 = R0 | R2;
 100f190:	c1 4f       	R1 <<= 0x18;
 100f192:	41 56       	R1 = R1 | R0;
 100f194:	42 30       	R0 = P2;
 100f196:	11 32       	P2 = R1;
 100f198:	62 00       	CALL (P2);
 100f19a:	a9 e4 01 00 	R1 = B[P5 + 0x1] (Z);
 100f19e:	2a 99       	R2 = B[P5] (Z);
 100f1a0:	41 4f       	R1 <<= 0x8;
 100f1a2:	a8 e4 02 00 	R0 = B[P5 + 0x2] (Z);
 100f1a6:	51 56       	R1 = R1 | R2;
 100f1a8:	80 4f       	R0 <<= 0x10;
 100f1aa:	08 56       	R0 = R0 | R1;
 100f1ac:	a9 e4 03 00 	R1 = B[P5 + 0x3] (Z);
 100f1b0:	c1 4f       	R1 <<= 0x18;
 100f1b2:	55 32       	P2 = P5;
 100f1b4:	41 56       	R1 = R1 | R0;
 100f1b6:	29 32       	P5 = R1;
 100f1b8:	62 08       	CC = P2 == P4;
 100f1ba:	de 17       	IF !CC JUMP 0x100f176 <_thread_schedule+0x32> (BP);
 100f1bc:	01 e8 00 00 	UNLINK;
 100f1c0:	84 04       	(P5:4) = [SP++];
 100f1c2:	10 00       	RTS;

0100f1c4 <_thread_create>:
 100f1c4:	f5 05       	[--SP] = (R7:6, P5:5);
 100f1c6:	56 43       	R6 = R2.B (Z);
 100f1c8:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100f1cc:	28 32       	P5 = R0;
 100f1ce:	1e 0e       	CC = R6 <= 0x3 (IU);
 100f1d0:	08 1c       	IF CC JUMP 0x100f1e0 <_thread_create+0x1c> (BP);
 100f1d2:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 100f1d6:	00 e1 b4 f3 	R0.L = 0xf3b4;		/* (-3148)	R0=0x100f3b4(16839604) */
 100f1da:	ff e3 ef fe 	CALL 0x100efb8 <_puts>;
 100f1de:	00 20       	JUMP.S 0x100f1de <_thread_create+0x1a>;
 100f1e0:	40 e1 00 00 	R0.H = 0x0;		/* (  0)	R0=0xf3b4(62388) */
 100f1e4:	00 e1 00 45 	R0.L = 0x4500;		/* (17664)	R0=0x4500 <_thread_head>(17664) */
 100f1e8:	82 c6 1e 8e 	R7 = R6 << 0x3;
 100f1ec:	c7 51       	R7 = R7 + R0;
 100f1ee:	82 c6 c1 81 	R0 = R1 >> 0x8;
 100f1f2:	0f 32       	P1 = R7;
 100f1f4:	a8 e6 09 00 	B[P5 + 0x9] = R0;
 100f1f8:	82 c6 81 81 	R0 = R1 >> 0x10;
 100f1fc:	a9 e6 08 00 	B[P5 + 0x8] = R1;
 100f200:	c1 4e       	R1 >>= 0x18;
 100f202:	a8 e6 0a 00 	B[P5 + 0xa] = R0;
 100f206:	a9 e6 0b 00 	B[P5 + 0xb] = R1;
 100f20a:	aa e6 0c 00 	B[P5 + 0xc] = R2;
 100f20e:	08 91       	R0 = [P1];
 100f210:	38 08       	CC = R0 == R7;
 100f212:	0e 14       	IF !CC JUMP 0x100f22e <_thread_create+0x6a> (BP);
 100f214:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4500 <_thread_head> */
 100f218:	0a e1 f8 44 	P2.L = 0x44f8;		/* (17656)	P2=0x44f8 <_os_create> */
 100f21c:	52 91       	P2 = [P2];
 100f21e:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1004500(16794880) */
 100f222:	00 e1 44 f1 	R0.L = 0xf144;		/* (-3772)	R0=0x100f144 <_thread_schedule>(16838980) */
 100f226:	0a 30       	R1 = R2;
 100f228:	62 00       	CALL (P2);
 100f22a:	00 0c       	CC = R0 == 0x0;
 100f22c:	27 14       	IF !CC JUMP 0x100f27a <_thread_create+0xb6> (BP);
 100f22e:	1e 4f       	R6 <<= 0x3;
 100f230:	0e 32       	P1 = R6;
 100f232:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x44f8 <_os_create> */
 100f236:	0a e1 00 45 	P2.L = 0x4500;		/* (17664)	P2=0x4500 <_thread_head> */
 100f23a:	82 c6 c7 83 	R1 = R7 >> 0x8;
 100f23e:	8a 5a       	P2 = P2 + P1;
 100f240:	50 a0       	R0 = [P2 + 0x4];
 100f242:	55 bc       	[P2 + 0x4] = P5;
 100f244:	a9 e6 01 00 	B[P5 + 0x1] = R1;
 100f248:	82 c6 87 83 	R1 = R7 >> 0x10;
 100f24c:	2f 9b       	B[P5] = R7;
 100f24e:	a9 e6 02 00 	B[P5 + 0x2] = R1;
 100f252:	82 c6 c0 83 	R1 = R0 >> 0x8;
 100f256:	a9 e6 05 00 	B[P5 + 0x5] = R1;
 100f25a:	10 32       	P2 = R0;
 100f25c:	82 c6 80 83 	R1 = R0 >> 0x10;
 100f260:	a9 e6 06 00 	B[P5 + 0x6] = R1;
 100f264:	82 c6 40 83 	R1 = R0 >> 0x18;
 100f268:	c7 4e       	R7 >>= 0x18;
 100f26a:	a8 e6 04 00 	B[P5 + 0x4] = R0;
 100f26e:	af e6 03 00 	B[P5 + 0x3] = R7;
 100f272:	a9 e6 07 00 	B[P5 + 0x7] = R1;
 100f276:	55 93       	[P2] = P5;
 100f278:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100f27a:	01 e8 00 00 	UNLINK;
 100f27e:	b5 05       	(R7:6, P5:5) = [SP++];
 100f280:	10 00       	RTS;
	...

0100f284 <_thread_suspend>:
 100f284:	10 32       	P2 = R0;
 100f286:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100f28a:	09 60       	R1 = 0x1 (X);		/*		R1=0x1(  1) */
 100f28c:	91 e6 0d 00 	B[P2 + 0xd] = R1;
 100f290:	01 e8 00 00 	UNLINK;
 100f294:	10 00       	RTS;
	...

0100f298 <_thread_resume>:
 100f298:	10 32       	P2 = R0;
 100f29a:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100f29e:	01 60       	R1 = 0x0 (X);		/*		R1=0x0(  0) */
 100f2a0:	91 e6 0d 00 	B[P2 + 0xd] = R1;
 100f2a4:	01 e8 00 00 	UNLINK;
 100f2a8:	10 00       	RTS;
	...

0100f2ac <_thread_run>:
 100f2ac:	00 00       	NOP;
 100f2ae:	00 00       	NOP;
 100f2b0:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100f2b4:	01 e8 00 00 	UNLINK;
 100f2b8:	10 00       	RTS;
	...

0100f2bc <_thread_delete>:
 100f2bc:	10 32       	P2 = R0;
 100f2be:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100f2c2:	92 e4 05 00 	R2 = B[P2 + 0x5] (Z);
 100f2c6:	93 e4 04 00 	R3 = B[P2 + 0x4] (Z);
 100f2ca:	91 e4 06 00 	R1 = B[P2 + 0x6] (Z);
 100f2ce:	42 4f       	R2 <<= 0x8;
 100f2d0:	90 e4 07 00 	R0 = B[P2 + 0x7] (Z);
 100f2d4:	9a 56       	R2 = R2 | R3;
 100f2d6:	81 4f       	R1 <<= 0x10;
 100f2d8:	51 56       	R1 = R1 | R2;
 100f2da:	c0 4f       	R0 <<= 0x18;
 100f2dc:	93 e4 01 00 	R3 = B[P2 + 0x1] (Z);
 100f2e0:	08 56       	R0 = R0 | R1;
 100f2e2:	11 99       	R1 = B[P2] (Z);
 100f2e4:	43 4f       	R3 <<= 0x8;
 100f2e6:	92 e4 02 00 	R2 = B[P2 + 0x2] (Z);
 100f2ea:	cb 56       	R3 = R3 | R1;
 100f2ec:	91 e4 03 00 	R1 = B[P2 + 0x3] (Z);
 100f2f0:	82 4f       	R2 <<= 0x10;
 100f2f2:	9a 56       	R2 = R2 | R3;
 100f2f4:	c1 4f       	R1 <<= 0x18;
 100f2f6:	51 56       	R1 = R1 | R2;
 100f2f8:	09 32       	P1 = R1;
 100f2fa:	52 30       	R2 = P2;
 100f2fc:	5a 30       	R3 = P2;
 100f2fe:	42 4e       	R2 >>= 0x8;
 100f300:	48 b0       	[P1 + 0x4] = R0;
 100f302:	08 32       	P1 = R0;
 100f304:	42 30       	R0 = P2;
 100f306:	c0 4e       	R0 >>= 0x18;
 100f308:	09 93       	[P1] = R1;
 100f30a:	4a 30       	R1 = P2;
 100f30c:	81 4e       	R1 >>= 0x10;
 100f30e:	90 e6 03 00 	B[P2 + 0x3] = R0;
 100f312:	90 e6 07 00 	B[P2 + 0x7] = R0;
 100f316:	91 e6 02 00 	B[P2 + 0x2] = R1;
 100f31a:	91 e6 06 00 	B[P2 + 0x6] = R1;
 100f31e:	90 e5 0c 00 	R0 = B[P2 + 0xc] (X);
 100f322:	41 43       	R1 = R0.B (Z);
 100f324:	13 9b       	B[P2] = R3;
 100f326:	92 e6 01 00 	B[P2 + 0x1] = R2;
 100f32a:	93 e6 04 00 	B[P2 + 0x4] = R3;
 100f32e:	92 e6 05 00 	B[P2 + 0x5] = R2;
 100f332:	19 4f       	R1 <<= 0x3;
 100f334:	11 32       	P2 = R1;
 100f336:	49 e1 00 00 	P1.H = 0x0;		/* (  0)	P1=0x0 <data_addr> */
 100f33a:	09 e1 00 45 	P1.L = 0x4500;		/* (17664)	P1=0x4500 <_thread_head> */
 100f33e:	91 5a       	P2 = P1 + P2;
 100f340:	51 91       	P1 = [P2];
 100f342:	51 08       	CC = P1 == P2;
 100f344:	09 14       	IF !CC JUMP 0x100f356 <_thread_delete+0x9a> (BP);
 100f346:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x4500 <_thread_head> */
 100f34a:	0a e1 fc 44 	P2.L = 0x44fc;		/* (17660)	P2=0x44fc <_os_delete> */
 100f34e:	52 91       	P2 = [P2];
 100f350:	01 e8 00 00 	UNLINK;
 100f354:	52 00       	JUMP (P2);
 100f356:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100f358:	01 e8 00 00 	UNLINK;
 100f35c:	10 00       	RTS;
	...

0100f360 <_thread_init>:
 100f360:	00 e8 03 00 	LINK 0xc;		/* (12) */
 100f364:	00 0c       	CC = R0 == 0x0;
 100f366:	03 18       	IF CC JUMP 0x100f36c <_thread_init+0xc>;
 100f368:	01 0c       	CC = R1 == 0x0;
 100f36a:	08 14       	IF !CC JUMP 0x100f37a <_thread_init+0x1a> (BP);
 100f36c:	40 e1 00 01 	R0.H = 0x100;		/* (256)	R0=0x1000000 <_START>(16777216) */
 100f370:	00 e1 dc f3 	R0.L = 0xf3dc;		/* (-3108)	R0=0x100f3dc(16839644) */
 100f374:	ff e3 22 fe 	CALL 0x100efb8 <_puts>;
 100f378:	00 20       	JUMP.S 0x100f378 <_thread_init+0x18>;
 100f37a:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x44fc <_os_delete> */
 100f37e:	0a e1 f8 44 	P2.L = 0x44f8;		/* (17656)	P2=0x44f8 <_os_create> */
 100f382:	10 93       	[P2] = R0;
 100f384:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x44f8 <_os_create> */
 100f388:	0a e1 fc 44 	P2.L = 0x44fc;		/* (17660)	P2=0x44fc <_os_delete> */
 100f38c:	11 93       	[P2] = R1;
 100f38e:	4a e1 00 00 	P2.H = 0x0;		/* (  0)	P2=0x44fc <_os_delete> */
 100f392:	0a e1 00 45 	P2.L = 0x4500;		/* (17664)	P2=0x4500 <_thread_head> */
 100f396:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100f398:	52 30       	R2 = P2;
 100f39a:	21 68       	P1 = 0x4 (X);		/*		P1=0x4(  4) */
 100f39c:	b2 e0 08 10 	LSETUP(0x100f3a0 <_thread_init+0x40>, 0x100f3ac <_thread_init+0x4c>) LC1 = P1;
 100f3a0:	82 c6 18 82 	R1 = R0 << 0x3;
 100f3a4:	51 50       	R1 = R1 + R2;
 100f3a6:	11 93       	[P2] = R1;
 100f3a8:	51 b0       	[P2 + 0x4] = R1;
 100f3aa:	08 64       	R0 += 0x1;		/* (  1) */
 100f3ac:	42 6c       	P2 += 0x8;		/* (  8) */
 100f3ae:	01 e8 00 00 	UNLINK;
 100f3b2:	10 00       	RTS;
 100f3b4:	41 53       	R5 = R1 - R0;
 100f3b6:	53 45       	P3 += P2 (BREV);
 100f3b8:	52 54       	R1 = R2 & R2;
 100f3ba:	2d 46       	ILLEGAL;
 100f3bc:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 100f3be:	4c 44       	P4 = P1 << 0x2;
 100f3c0:	3a 20       	JUMP.S 0x100f434 <_ccm_memory+0x38>;
 100f3c2:	70 72       	ILLEGAL;
 100f3c4:	69 6f       	P1 += -0x13;		/* (-19) */
 100f3c6:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 100f3c8:	74 79       	ILLEGAL;
 100f3ca:	20 3c       	LT1 = R0;
 100f3cc:	20 50       	R0 = R0 + R4;
 100f3ce:	52 49       	CC = BITTST (R2, 0xa);		/* bit 10 */
 100f3d0:	4f 52       	R1 = R7 - R1;
 100f3d2:	49 54       	R1 = R1 & R1;
 100f3d4:	59 5f       	P5 = P1 + (P3 << 0x2);
 100f3d6:	4e 55       	R5 = R6 & R1;
 100f3d8:	4d 00       	ILLEGAL;
 100f3da:	00 00       	NOP;
 100f3dc:	41 53       	R5 = R1 - R0;
 100f3de:	53 45       	P3 += P2 (BREV);
 100f3e0:	52 54       	R1 = R2 & R2;
 100f3e2:	2d 46       	ILLEGAL;
 100f3e4:	41 49       	CC = BITTST (R1, 0x8);		/* bit  8 */
 100f3e6:	4c 44       	P4 = P1 << 0x2;
 100f3e8:	3a 20       	JUMP.S 0x100f45c <_ccm_memory+0x60>;
 100f3ea:	63 72       	ILLEGAL;
 100f3ec:	65 61       	R5 = 0x2c (X);		/*		R5=0x2c( 44) */
 100f3ee:	74 65       	R4 += 0x2e;		/* ( 46) */
 100f3f0:	20 26       	JUMP.S 0x1010030 <___umulsi3_highpart+0x10>;
 100f3f2:	26 20       	JUMP.S 0x100f43e <_ccm_memory+0x42>;
 100f3f4:	64 65       	R4 += 0x2c;		/* ( 44) */
 100f3f6:	6c 65       	R4 += 0x2d;		/* ( 45) */
 100f3f8:	74 65       	R4 += 0x2e;		/* ( 46) */
	...

0100f3fc <_ccm_memory>:
 100f3fc:	e3 05       	[--SP] = (R7:4, P5:3);
 100f3fe:	02 0c       	CC = R2 == 0x0;
 100f400:	19 32       	P3 = R1;
 100f402:	3a 30       	R7 = R2;
 100f404:	02 60       	R2 = 0x0 (X);		/*		R2=0x0(  0) */
 100f406:	21 e1 40 00 	R1 = 0x40 (X);		/*		R1=0x40( 64) */
 100f40a:	0a 07       	IF CC R1 = R2;
 100f40c:	00 e8 10 00 	LINK 0x40;		/* (64) */
 100f410:	4a 60       	R2 = 0x9 (X);		/*		R2=0x9(  9) */
 100f412:	51 56       	R1 = R1 | R2;
 100f414:	46 32       	P0 = SP;
 100f416:	34 e4 1c 00 	R4 = [SP + 0x70];
 100f41a:	b1 e6 30 00 	B[SP + 0x30] = R1;
 100f41e:	20 32       	P4 = R0;
 100f420:	88 6d       	P0 += 0x31;		/* ( 49) */
 100f422:	08 32       	P1 = R0;
 100f424:	6a 68       	P2 = 0xd (X);		/*		P2=0xd( 13) */
 100f426:	b2 e0 03 20 	LSETUP(0x100f42a <_ccm_memory+0x2e>, 0x100f42c <_ccm_memory+0x30>) LC1 = P2;
 100f42a:	48 98       	R0 = B[P1++] (X);
 100f42c:	00 9a       	B[P0++] = R0;
 100f42e:	30 e4 1d 00 	R0 = [SP + 0x74];
 100f432:	40 4e       	R0 >>= 0x8;
 100f434:	b0 e6 3e 00 	B[SP + 0x3e] = R0;
 100f438:	b0 e5 74 00 	R0 = B[SP + 0x74] (X);
 100f43c:	4e 30       	R1 = SP;
 100f43e:	b0 e6 3f 00 	B[SP + 0x3f] = R0;
 100f442:	81 65       	R1 += 0x30;		/* ( 48) */
 100f444:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x100000d */
 100f448:	01 30       	R0 = R1;
 100f44a:	0a e1 38 fb 	P2.L = 0xfb38;		/* (-1224)	P2=0x100fb38 <_rijndael_ecb_encrypt> */
 100f44e:	62 00       	CALL (P2);
 100f450:	00 0c       	CC = R0 == 0x0;
 100f452:	80 11       	IF !CC JUMP 0x100f752 <_ccm_memory+0x356>;
 100f454:	07 0c       	CC = R7 == 0x0;
 100f456:	59 1c       	IF CC JUMP 0x100f508 <_ccm_memory+0x10c> (BP);
 100f458:	80 e1 ff fe 	R0 = 0xfeff (Z);		/*		R0=0xfeff(65279) */
 100f45c:	07 0a       	CC = R7 <= R0 (IU);
 100f45e:	82 c6 c7 81 	R0 = R7 >> 0x8;
 100f462:	b2 e5 30 00 	R2 = B[SP + 0x30] (X);
 100f466:	b1 e5 31 00 	R1 = B[SP + 0x31] (X);
 100f46a:	09 14       	IF !CC JUMP 0x100f47c <_ccm_memory+0x80> (BP);
 100f46c:	10 58       	R0 = R0 ^ R2;
 100f46e:	4f 58       	R1 = R7 ^ R1;
 100f470:	b0 e6 30 00 	B[SP + 0x30] = R0;
 100f474:	b1 e6 31 00 	B[SP + 0x31] = R1;
 100f478:	12 68       	P2 = 0x2 (X);		/*		P2=0x2(  2) */
 100f47a:	21 20       	JUMP.S 0x100f4bc <_ccm_memory+0xc0>;
 100f47c:	d2 43       	R2 =~ R2;
 100f47e:	b2 e6 30 00 	B[SP + 0x30] = R2;
 100f482:	f2 63       	R2 = -0x2 (X);		/*		R2=0xfffffffe( -2) */
 100f484:	51 58       	R1 = R1 ^ R2;
 100f486:	b1 e6 31 00 	B[SP + 0x31] = R1;
 100f48a:	82 c6 47 85 	R2 = R7 >> 0x18;
 100f48e:	b1 e5 32 00 	R1 = B[SP + 0x32] (X);
 100f492:	4a 58       	R1 = R2 ^ R1;
 100f494:	b1 e6 32 00 	B[SP + 0x32] = R1;
 100f498:	b1 e5 33 00 	R1 = B[SP + 0x33] (X);
 100f49c:	82 c6 87 85 	R2 = R7 >> 0x10;
 100f4a0:	4a 58       	R1 = R2 ^ R1;
 100f4a2:	b1 e6 33 00 	B[SP + 0x33] = R1;
 100f4a6:	b1 e5 34 00 	R1 = B[SP + 0x34] (X);
 100f4aa:	08 58       	R0 = R0 ^ R1;
 100f4ac:	b0 e6 34 00 	B[SP + 0x34] = R0;
 100f4b0:	b0 e5 35 00 	R0 = B[SP + 0x35] (X);
 100f4b4:	07 58       	R0 = R7 ^ R0;
 100f4b6:	b0 e6 35 00 	B[SP + 0x35] = R0;
 100f4ba:	32 68       	P2 = 0x6 (X);		/*		P2=0x6(  6) */
 100f4bc:	6e 32       	P5 = SP;
 100f4be:	4f e1 00 01 	FP.H = 0x100;		/* (256)	FP=0x100002b */
 100f4c2:	06 60       	R6 = 0x0 (X);		/*		R6=0x0(  0) */
 100f4c4:	85 6d       	P5 += 0x30;		/* ( 48) */
 100f4c6:	0f e1 38 fb 	FP.L = 0xfb38;		/* (-1224)	FP=0x100fb38 <_rijndael_ecb_encrypt> */
 100f4ca:	11 20       	JUMP.S 0x100f4ec <_ccm_memory+0xf0>;
 100f4cc:	81 68       	P1 = 0x10 (X);		/*		P1=0x10( 16) */
 100f4ce:	4a 08       	CC = P2 == P1;
 100f4d0:	07 14       	IF !CC JUMP 0x100f4de <_ccm_memory+0xe2> (BP);
 100f4d2:	45 30       	R0 = P5;
 100f4d4:	4d 30       	R1 = P5;
 100f4d6:	67 00       	CALL (FP);
 100f4d8:	00 0c       	CC = R0 == 0x0;
 100f4da:	3c 15       	IF !CC JUMP 0x100f752 <_ccm_memory+0x356> (BP);
 100f4dc:	02 68       	P2 = 0x0 (X);		/*		P2=0x0(  0) */
 100f4de:	55 5a       	P1 = P5 + P2;
 100f4e0:	58 98       	R0 = B[P3++] (X);
 100f4e2:	49 99       	R1 = B[P1] (X);
 100f4e4:	01 58       	R0 = R1 ^ R0;
 100f4e6:	08 9b       	B[P1] = R0;
 100f4e8:	0a 6c       	P2 += 0x1;		/* (  1) */
 100f4ea:	0e 64       	R6 += 0x1;		/* (  1) */
 100f4ec:	be 09       	CC = R6 < R7 (IU);
 100f4ee:	ef 1f       	IF CC JUMP 0x100f4cc <_ccm_memory+0xd0> (BP);
 100f4f0:	42 0c       	CC = P2 == 0x0;
 100f4f2:	0b 1c       	IF CC JUMP 0x100f508 <_ccm_memory+0x10c> (BP);
 100f4f4:	4e 30       	R1 = SP;
 100f4f6:	81 65       	R1 += 0x30;		/* ( 48) */
 100f4f8:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1000000 <_START> */
 100f4fc:	01 30       	R0 = R1;
 100f4fe:	0a e1 38 fb 	P2.L = 0xfb38;		/* (-1224)	P2=0x100fb38 <_rijndael_ecb_encrypt> */
 100f502:	62 00       	CALL (P2);
 100f504:	00 0c       	CC = R0 == 0x0;
 100f506:	26 11       	IF !CC JUMP 0x100f752 <_ccm_memory+0x356>;
 100f508:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100f50a:	4e 32       	P1 = SP;
 100f50c:	b0 e6 20 00 	B[SP + 0x20] = R0;
 100f510:	09 6d       	P1 += 0x21;		/* ( 33) */
 100f512:	6a 68       	P2 = 0xd (X);		/*		P2=0xd( 13) */
 100f514:	b2 e0 03 20 	LSETUP(0x100f518 <_ccm_memory+0x11c>, 0x100f51a <_ccm_memory+0x11e>) LC1 = P2;
 100f518:	60 98       	R0 = B[P4++] (X);
 100f51a:	08 9a       	B[P1++] = R0;
 100f51c:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100f51e:	b0 e6 2e 00 	B[SP + 0x2e] = R0;
 100f522:	b0 e6 2f 00 	B[SP + 0x2f] = R0;
 100f526:	30 e4 1d 00 	R0 = [SP + 0x74];
 100f52a:	00 0c       	CC = R0 == 0x0;
 100f52c:	ea 1c       	IF CC JUMP 0x100f700 <_ccm_memory+0x304> (BP);
 100f52e:	86 63       	R6 = -0x10 (X);		/*		R6=0xfffffff0(-16) */
 100f530:	b0 55       	R6 = R0 & R6;
 100f532:	06 0c       	CC = R6 == 0x0;
 100f534:	77 1c       	IF CC JUMP 0x100f622 <_ccm_memory+0x226> (BP);
 100f536:	31 e4 20 00 	R1 = [SP + 0x80];
 100f53a:	01 0c       	CC = R1 == 0x0;
 100f53c:	31 1c       	IF CC JUMP 0x100f59e <_ccm_memory+0x1a2> (BP);
 100f53e:	6e 30       	R5 = SP;
 100f540:	4c e1 00 01 	P4.H = 0x100;		/* (256)	P4=0x100002e */
 100f544:	7e 30       	R7 = SP;
 100f546:	05 68       	P5 = 0x0 (X);		/*		P5=0x0(  0) */
 100f548:	85 64       	R5 += 0x10;		/* ( 16) */
 100f54a:	0c e1 38 fb 	P4.L = 0xfb38;		/* (-1224)	P4=0x100fb38 <_rijndael_ecb_encrypt> */
 100f54e:	87 65       	R7 += 0x30;		/* ( 48) */
 100f550:	7c 20       	JUMP.S 0x100f648 <_ccm_memory+0x24c>;
 100f552:	46 30       	R0 = SP;
 100f554:	00 65       	R0 += 0x20;		/* ( 32) */
 100f556:	0d 30       	R1 = R5;
 100f558:	64 00       	CALL (P4);
 100f55a:	00 0c       	CC = R0 == 0x0;
 100f55c:	fb 10       	IF !CC JUMP 0x100f752 <_ccm_memory+0x356>;
 100f55e:	05 32       	P0 = R5;
 100f560:	55 30       	R2 = P5;
 100f562:	0f 30       	R1 = R7;
 100f564:	32 e5 1e 00 	P2 = [SP + 0x78];
 100f568:	14 50       	R0 = R4 + R2;
 100f56a:	40 34       	I0 = P0;
 100f56c:	6a 5a       	P1 = P2 + P5;
 100f56e:	17 32       	P2 = R7;
 100f570:	19 32       	P3 = R1;
 100f572:	21 64       	R1 += 0x4;		/* (  4) */
 100f574:	1b 90       	R3 = [P3++];
 100f576:	18 32       	P3 = R0;
 100f578:	20 64       	R0 += 0x4;		/* (  4) */
 100f57a:	1a 90       	R2 = [P3++];
 100f57c:	da 58       	R3 = R2 ^ R3;
 100f57e:	13 92       	[P2++] = R3;
 100f580:	03 9c       	R3 = [I0++];
 100f582:	93 58       	R2 = R3 ^ R2;
 100f584:	0a 92       	[P1++] = R2;
 100f586:	7a 08       	CC = P2 == FP;
 100f588:	f4 17       	IF !CC JUMP 0x100f570 <_ccm_memory+0x174> (BP);
 100f58a:	07 30       	R0 = R7;
 100f58c:	0f 30       	R1 = R7;
 100f58e:	64 00       	CALL (P4);
 100f590:	00 0c       	CC = R0 == 0x0;
 100f592:	e0 10       	IF !CC JUMP 0x100f752 <_ccm_memory+0x356>;
 100f594:	85 6c       	P5 += 0x10;		/* ( 16) */
 100f596:	45 30       	R0 = P5;
 100f598:	b0 09       	CC = R0 < R6 (IU);
 100f59a:	0e 1c       	IF CC JUMP 0x100f5b6 <_ccm_memory+0x1ba> (BP);
 100f59c:	44 20       	JUMP.S 0x100f624 <_ccm_memory+0x228>;
 100f59e:	6e 30       	R5 = SP;
 100f5a0:	4c e1 00 01 	P4.H = 0x100;		/* (256)	P4=0x100fb38 <_rijndael_ecb_encrypt> */
 100f5a4:	7e 30       	R7 = SP;
 100f5a6:	29 e1 40 00 	P1 = 0x40 (X);		/*		P1=0x40( 64) */
 100f5aa:	05 68       	P5 = 0x0 (X);		/*		P5=0x0(  0) */
 100f5ac:	85 64       	R5 += 0x10;		/* ( 16) */
 100f5ae:	0c e1 38 fb 	P4.L = 0xfb38;		/* (-1224)	P4=0x100fb38 <_rijndael_ecb_encrypt> */
 100f5b2:	87 65       	R7 += 0x30;		/* ( 48) */
 100f5b4:	f1 5b       	FP = P1 + SP;
 100f5b6:	b0 e5 2f 00 	R0 = B[SP + 0x2f] (X);
 100f5ba:	08 64       	R0 += 0x1;		/* (  1) */
 100f5bc:	b0 e6 2f 00 	B[SP + 0x2f] = R0;
 100f5c0:	40 43       	R0 = R0.B (Z);
 100f5c2:	00 0c       	CC = R0 == 0x0;
 100f5c4:	c7 13       	IF !CC JUMP 0x100f552 <_ccm_memory+0x156>;
 100f5c6:	b0 e5 2e 00 	R0 = B[SP + 0x2e] (X);
 100f5ca:	08 64       	R0 += 0x1;		/* (  1) */
 100f5cc:	b0 e6 2e 00 	B[SP + 0x2e] = R0;
 100f5d0:	c1 2f       	JUMP.S 0x100f552 <_ccm_memory+0x156>;
 100f5d2:	46 30       	R0 = SP;
 100f5d4:	00 65       	R0 += 0x20;		/* ( 32) */
 100f5d6:	0d 30       	R1 = R5;
 100f5d8:	64 00       	CALL (P4);
 100f5da:	00 0c       	CC = R0 == 0x0;
 100f5dc:	bb 10       	IF !CC JUMP 0x100f752 <_ccm_memory+0x356>;
 100f5de:	1c 32       	P3 = R4;
 100f5e0:	07 32       	P0 = R7;
 100f5e2:	05 30       	R0 = R5;
 100f5e4:	32 e5 1e 00 	P2 = [SP + 0x78];
 100f5e8:	0f 32       	P1 = R7;
 100f5ea:	eb 5b       	FP = P3 + P5;
 100f5ec:	40 34       	I0 = P0;
 100f5ee:	aa 5a       	P2 = P2 + P5;
 100f5f0:	4a 30       	R1 = P2;
 100f5f2:	22 68       	P2 = 0x4 (X);		/*		P2=0x4(  4) */
 100f5f4:	b2 e0 0c 20 	LSETUP(0x100f5f8 <_ccm_memory+0x1fc>, 0x100f60c <_ccm_memory+0x210>) LC1 = P2;
 100f5f8:	19 32       	P3 = R1;
 100f5fa:	21 64       	R1 += 0x4;		/* (  4) */
 100f5fc:	1a 90       	R2 = [P3++];
 100f5fe:	18 32       	P3 = R0;
 100f600:	20 64       	R0 += 0x4;		/* (  4) */
 100f602:	1b 90       	R3 = [P3++];
 100f604:	93 58       	R2 = R3 ^ R2;
 100f606:	3a 92       	[FP++] = R2;
 100f608:	03 9c       	R3 = [I0++];
 100f60a:	9a 58       	R2 = R2 ^ R3;
 100f60c:	0a 92       	[P1++] = R2;
 100f60e:	07 30       	R0 = R7;
 100f610:	0f 30       	R1 = R7;
 100f612:	64 00       	CALL (P4);
 100f614:	00 0c       	CC = R0 == 0x0;
 100f616:	9e 10       	IF !CC JUMP 0x100f752 <_ccm_memory+0x356>;
 100f618:	85 6c       	P5 += 0x10;		/* ( 16) */
 100f61a:	45 30       	R0 = P5;
 100f61c:	b0 09       	CC = R0 < R6 (IU);
 100f61e:	15 1c       	IF CC JUMP 0x100f648 <_ccm_memory+0x24c> (BP);
 100f620:	02 20       	JUMP.S 0x100f624 <_ccm_memory+0x228>;
 100f622:	05 68       	P5 = 0x0 (X);		/*		P5=0x0(  0) */
 100f624:	31 e5 1e 00 	P1 = [SP + 0x78];
 100f628:	30 e4 20 00 	R0 = [SP + 0x80];
 100f62c:	4d 30       	R1 = P5;
 100f62e:	8c 51       	R6 = R4 + R1;
 100f630:	00 0c       	CC = R0 == 0x0;
 100f632:	6e 30       	R5 = SP;
 100f634:	00 02       	R0 = CC;
 100f636:	66 30       	R4 = SP;
 100f638:	e9 5b       	FP = P1 + P5;
 100f63a:	84 68       	P4 = 0x10 (X);		/*		P4=0x10( 16) */
 100f63c:	03 68       	P3 = 0x0 (X);		/*		P3=0x0(  0) */
 100f63e:	85 64       	R5 += 0x10;		/* ( 16) */
 100f640:	b0 e6 0f 00 	B[SP + 0xf] = R0;
 100f644:	84 65       	R4 += 0x30;		/* ( 48) */
 100f646:	57 20       	JUMP.S 0x100f6f4 <_ccm_memory+0x2f8>;
 100f648:	b0 e5 2f 00 	R0 = B[SP + 0x2f] (X);
 100f64c:	08 64       	R0 += 0x1;		/* (  1) */
 100f64e:	b0 e6 2f 00 	B[SP + 0x2f] = R0;
 100f652:	40 43       	R0 = R0.B (Z);
 100f654:	00 0c       	CC = R0 == 0x0;
 100f656:	be 13       	IF !CC JUMP 0x100f5d2 <_ccm_memory+0x1d6>;
 100f658:	b0 e5 2e 00 	R0 = B[SP + 0x2e] (X);
 100f65c:	08 64       	R0 += 0x1;		/* (  1) */
 100f65e:	b0 e6 2e 00 	B[SP + 0x2e] = R0;
 100f662:	b8 2f       	JUMP.S 0x100f5d2 <_ccm_memory+0x1d6>;
 100f664:	81 68       	P1 = 0x10 (X);		/*		P1=0x10( 16) */
 100f666:	4c 08       	CC = P4 == P1;
 100f668:	19 14       	IF !CC JUMP 0x100f69a <_ccm_memory+0x29e> (BP);
 100f66a:	b0 e5 2f 00 	R0 = B[SP + 0x2f] (X);
 100f66e:	08 64       	R0 += 0x1;		/* (  1) */
 100f670:	b0 e6 2f 00 	B[SP + 0x2f] = R0;
 100f674:	40 43       	R0 = R0.B (Z);
 100f676:	00 0c       	CC = R0 == 0x0;
 100f678:	06 10       	IF !CC JUMP 0x100f684 <_ccm_memory+0x288>;
 100f67a:	b0 e5 2e 00 	R0 = B[SP + 0x2e] (X);
 100f67e:	08 64       	R0 += 0x1;		/* (  1) */
 100f680:	b0 e6 2e 00 	B[SP + 0x2e] = R0;
 100f684:	46 30       	R0 = SP;
 100f686:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x1000004 */
 100f68a:	00 65       	R0 += 0x20;		/* ( 32) */
 100f68c:	0d 30       	R1 = R5;
 100f68e:	0a e1 38 fb 	P2.L = 0xfb38;		/* (-1224)	P2=0x100fb38 <_rijndael_ecb_encrypt> */
 100f692:	62 00       	CALL (P2);
 100f694:	00 0c       	CC = R0 == 0x0;
 100f696:	5e 10       	IF !CC JUMP 0x100f752 <_ccm_memory+0x356>;
 100f698:	04 68       	P4 = 0x0 (X);		/*		P4=0x0(  0) */
 100f69a:	44 30       	R0 = P4;
 100f69c:	b1 e4 0f 00 	R1 = B[SP + 0xf] (Z);
 100f6a0:	08 64       	R0 += 0x1;		/* (  1) */
 100f6a2:	09 02       	CC = R1;
 100f6a4:	0a 14       	IF !CC JUMP 0x100f6b8 <_ccm_memory+0x2bc> (BP);
 100f6a6:	15 32       	P2 = R5;
 100f6a8:	0e 32       	P1 = R6;
 100f6aa:	22 5b       	P4 = P2 + P4;
 100f6ac:	61 99       	R1 = B[P4] (X);
 100f6ae:	4f 99       	R7 = B[P1] (X);
 100f6b0:	79 58       	R1 = R1 ^ R7;
 100f6b2:	39 9b       	B[FP] = R1;
 100f6b4:	20 32       	P4 = R0;
 100f6b6:	09 20       	JUMP.S 0x100f6c8 <_ccm_memory+0x2cc>;
 100f6b8:	0d 32       	P1 = R5;
 100f6ba:	16 32       	P2 = R6;
 100f6bc:	79 99       	R1 = B[FP] (X);
 100f6be:	21 5b       	P4 = P1 + P4;
 100f6c0:	67 99       	R7 = B[P4] (X);
 100f6c2:	cf 59       	R7 = R7 ^ R1;
 100f6c4:	20 32       	P4 = R0;
 100f6c6:	17 9b       	B[P2] = R7;
 100f6c8:	81 68       	P1 = 0x10 (X);		/*		P1=0x10( 16) */
 100f6ca:	4b 08       	CC = P3 == P1;
 100f6cc:	0b 14       	IF !CC JUMP 0x100f6e2 <_ccm_memory+0x2e6> (BP);
 100f6ce:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x100fb38 <_rijndael_ecb_encrypt> */
 100f6d2:	04 30       	R0 = R4;
 100f6d4:	0c 30       	R1 = R4;
 100f6d6:	0a e1 38 fb 	P2.L = 0xfb38;		/* (-1224)	P2=0x100fb38 <_rijndael_ecb_encrypt> */
 100f6da:	62 00       	CALL (P2);
 100f6dc:	00 0c       	CC = R0 == 0x0;
 100f6de:	3a 10       	IF !CC JUMP 0x100f752 <_ccm_memory+0x356>;
 100f6e0:	03 68       	P3 = 0x0 (X);		/*		P3=0x0(  0) */
 100f6e2:	0c 32       	P1 = R4;
 100f6e4:	0d 6c       	P5 += 0x1;		/* (  1) */
 100f6e6:	0e 64       	R6 += 0x1;		/* (  1) */
 100f6e8:	0f 6c       	FP += 0x1;		/* (  1) */
 100f6ea:	99 5a       	P2 = P1 + P3;
 100f6ec:	50 99       	R0 = B[P2] (X);
 100f6ee:	f8 59       	R7 = R0 ^ R7;
 100f6f0:	17 9b       	B[P2] = R7;
 100f6f2:	0b 6c       	P3 += 0x1;		/* (  1) */
 100f6f4:	32 e5 1d 00 	P2 = [SP + 0x74];
 100f6f8:	d5 09       	CC = P5 < P2 (IU);
 100f6fa:	b5 1f       	IF CC JUMP 0x100f664 <_ccm_memory+0x268> (BP);
 100f6fc:	43 0c       	CC = P3 == 0x0;
 100f6fe:	13 10       	IF !CC JUMP 0x100f724 <_ccm_memory+0x328>;
 100f700:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100f702:	b0 e6 2f 00 	B[SP + 0x2f] = R0;
 100f706:	b0 e6 2e 00 	B[SP + 0x2e] = R0;
 100f70a:	7e 30       	R7 = SP;
 100f70c:	87 64       	R7 += 0x10;		/* ( 16) */
 100f70e:	46 30       	R0 = SP;
 100f710:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x100fb38 <_rijndael_ecb_encrypt> */
 100f714:	00 65       	R0 += 0x20;		/* ( 32) */
 100f716:	0f 30       	R1 = R7;
 100f718:	0a e1 38 fb 	P2.L = 0xfb38;		/* (-1224)	P2=0x100fb38 <_rijndael_ecb_encrypt> */
 100f71c:	62 00       	CALL (P2);
 100f71e:	00 0c       	CC = R0 == 0x0;
 100f720:	0d 1c       	IF CC JUMP 0x100f73a <_ccm_memory+0x33e> (BP);
 100f722:	18 20       	JUMP.S 0x100f752 <_ccm_memory+0x356>;
 100f724:	4e 30       	R1 = SP;
 100f726:	81 65       	R1 += 0x30;		/* ( 48) */
 100f728:	4a e1 00 01 	P2.H = 0x100;		/* (256)	P2=0x100fb38 <_rijndael_ecb_encrypt> */
 100f72c:	01 30       	R0 = R1;
 100f72e:	0a e1 38 fb 	P2.L = 0xfb38;		/* (-1224)	P2=0x100fb38 <_rijndael_ecb_encrypt> */
 100f732:	62 00       	CALL (P2);
 100f734:	00 0c       	CC = R0 == 0x0;
 100f736:	e5 1f       	IF CC JUMP 0x100f700 <_ccm_memory+0x304> (BP);
 100f738:	0d 20       	JUMP.S 0x100f752 <_ccm_memory+0x356>;
 100f73a:	6e 32       	P5 = SP;
 100f73c:	85 6d       	P5 += 0x30;		/* ( 48) */
 100f73e:	07 32       	P0 = R7;
 100f740:	31 e5 1f 00 	P1 = [SP + 0x7c];
 100f744:	22 68       	P2 = 0x4 (X);		/*		P2=0x4(  4) */
 100f746:	b2 e0 05 20 	LSETUP(0x100f74a <_ccm_memory+0x34e>, 0x100f750 <_ccm_memory+0x354>) LC1 = P2;
 100f74a:	69 98       	R1 = B[P5++] (X);
 100f74c:	42 98       	R2 = B[P0++] (X);
 100f74e:	4a 58       	R1 = R2 ^ R1;
 100f750:	09 9a       	B[P1++] = R1;
 100f752:	e6 6d       	SP += 0x3c;		/* ( 60) */
 100f754:	26 6c       	SP += 0x4;		/* (  4) */
 100f756:	77 90       	FP = [SP++];
 100f758:	27 01       	RETS = [SP++];
 100f75a:	a3 05       	(R7:4, P5:3) = [SP++];
 100f75c:	10 00       	RTS;
	...

0100f760 <_aes128_start_enc>:
 100f760:	10 32       	P2 = R0;
 100f762:	c5 04       	[--SP] = (P5:5);
 100f764:	09 32       	P1 = R1;
 100f766:	4d e1 07 00 	P5.H = 0x7;		/* (  7)	P5=0x70000 */
 100f76a:	0d e1 94 81 	P5.L = 0x8194;		/* (-32364)	P5=0x78194 */
 100f76e:	91 e4 0d 00 	R1 = B[P2 + 0xd] (Z);
 100f772:	90 e4 0e 00 	R0 = B[P2 + 0xe] (Z);
 100f776:	41 4f       	R1 <<= 0x8;
 100f778:	80 4f       	R0 <<= 0x10;
 100f77a:	01 56       	R0 = R1 | R0;
 100f77c:	91 e4 0c 00 	R1 = B[P2 + 0xc] (Z);
 100f780:	08 56       	R0 = R0 | R1;
 100f782:	91 e4 0f 00 	R1 = B[P2 + 0xf] (Z);
 100f786:	c1 4f       	R1 <<= 0x18;
 100f788:	08 56       	R0 = R0 | R1;
 100f78a:	28 93       	[P5] = R0;
 100f78c:	91 e4 09 00 	R1 = B[P2 + 0x9] (Z);
 100f790:	90 e4 0a 00 	R0 = B[P2 + 0xa] (Z);
 100f794:	41 4f       	R1 <<= 0x8;
 100f796:	80 4f       	R0 <<= 0x10;
 100f798:	01 56       	R0 = R1 | R0;
 100f79a:	91 e4 08 00 	R1 = B[P2 + 0x8] (Z);
 100f79e:	08 56       	R0 = R0 | R1;
 100f7a0:	91 e4 0b 00 	R1 = B[P2 + 0xb] (Z);
 100f7a4:	c1 4f       	R1 <<= 0x18;
 100f7a6:	08 56       	R0 = R0 | R1;
 100f7a8:	28 93       	[P5] = R0;
 100f7aa:	91 e4 05 00 	R1 = B[P2 + 0x5] (Z);
 100f7ae:	90 e4 06 00 	R0 = B[P2 + 0x6] (Z);
 100f7b2:	41 4f       	R1 <<= 0x8;
 100f7b4:	80 4f       	R0 <<= 0x10;
 100f7b6:	01 56       	R0 = R1 | R0;
 100f7b8:	91 e4 04 00 	R1 = B[P2 + 0x4] (Z);
 100f7bc:	08 56       	R0 = R0 | R1;
 100f7be:	91 e4 07 00 	R1 = B[P2 + 0x7] (Z);
 100f7c2:	c1 4f       	R1 <<= 0x18;
 100f7c4:	08 56       	R0 = R0 | R1;
 100f7c6:	28 93       	[P5] = R0;
 100f7c8:	91 e4 01 00 	R1 = B[P2 + 0x1] (Z);
 100f7cc:	90 e4 02 00 	R0 = B[P2 + 0x2] (Z);
 100f7d0:	41 4f       	R1 <<= 0x8;
 100f7d2:	80 4f       	R0 <<= 0x10;
 100f7d4:	01 56       	R0 = R1 | R0;
 100f7d6:	11 99       	R1 = B[P2] (Z);
 100f7d8:	08 56       	R0 = R0 | R1;
 100f7da:	91 e4 03 00 	R1 = B[P2 + 0x3] (Z);
 100f7de:	c1 4f       	R1 <<= 0x18;
 100f7e0:	08 56       	R0 = R0 | R1;
 100f7e2:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x70004 */
 100f7e6:	28 93       	[P5] = R0;
 100f7e8:	0a e1 80 81 	P2.L = 0x8180;		/* (-32384)	P2=0x78180 */
 100f7ec:	00 61       	R0 = 0x20 (X);		/*		R0=0x20( 32) */
 100f7ee:	6a 32       	P5 = P2;
 100f7f0:	02 32       	P0 = R2;
 100f7f2:	10 93       	[P2] = R0;
 100f7f4:	45 34       	I0 = P5;
 100f7f6:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x78180 */
 100f7fa:	00 9d       	R0 = [I0];
 100f7fc:	0a e1 80 81 	P2.L = 0x8180;		/* (-32384)	P2=0x78180 */
 100f800:	28 48       	CC = !BITTST (R0, 0x5);		/* bit  5 */
 100f802:	fa 1f       	IF CC JUMP 0x100f7f6 <_aes128_start_enc+0x96> (BP);
 100f804:	89 e4 01 00 	R1 = B[P1 + 0x1] (Z);
 100f808:	88 e4 02 00 	R0 = B[P1 + 0x2] (Z);
 100f80c:	41 4f       	R1 <<= 0x8;
 100f80e:	80 4f       	R0 <<= 0x10;
 100f810:	01 56       	R0 = R1 | R0;
 100f812:	09 99       	R1 = B[P1] (Z);
 100f814:	08 56       	R0 = R0 | R1;
 100f816:	89 e4 03 00 	R1 = B[P1 + 0x3] (Z);
 100f81a:	c1 4f       	R1 <<= 0x18;
 100f81c:	4d e1 07 00 	P5.H = 0x7;		/* (  7)	P5=0x78194 */
 100f820:	08 56       	R0 = R0 | R1;
 100f822:	0d e1 84 81 	P5.L = 0x8184;		/* (-32380)	P5=0x78184 */
 100f826:	28 93       	[P5] = R0;
 100f828:	89 e4 05 00 	R1 = B[P1 + 0x5] (Z);
 100f82c:	88 e4 06 00 	R0 = B[P1 + 0x6] (Z);
 100f830:	41 4f       	R1 <<= 0x8;
 100f832:	80 4f       	R0 <<= 0x10;
 100f834:	01 56       	R0 = R1 | R0;
 100f836:	89 e4 04 00 	R1 = B[P1 + 0x4] (Z);
 100f83a:	08 56       	R0 = R0 | R1;
 100f83c:	89 e4 07 00 	R1 = B[P1 + 0x7] (Z);
 100f840:	c1 4f       	R1 <<= 0x18;
 100f842:	08 56       	R0 = R0 | R1;
 100f844:	25 6c       	P5 += 0x4;		/* (  4) */
 100f846:	28 93       	[P5] = R0;
 100f848:	89 e4 09 00 	R1 = B[P1 + 0x9] (Z);
 100f84c:	88 e4 0a 00 	R0 = B[P1 + 0xa] (Z);
 100f850:	41 4f       	R1 <<= 0x8;
 100f852:	80 4f       	R0 <<= 0x10;
 100f854:	01 56       	R0 = R1 | R0;
 100f856:	89 e4 08 00 	R1 = B[P1 + 0x8] (Z);
 100f85a:	08 56       	R0 = R0 | R1;
 100f85c:	89 e4 0b 00 	R1 = B[P1 + 0xb] (Z);
 100f860:	c1 4f       	R1 <<= 0x18;
 100f862:	08 56       	R0 = R0 | R1;
 100f864:	25 6c       	P5 += 0x4;		/* (  4) */
 100f866:	28 93       	[P5] = R0;
 100f868:	89 e4 0d 00 	R1 = B[P1 + 0xd] (Z);
 100f86c:	88 e4 0e 00 	R0 = B[P1 + 0xe] (Z);
 100f870:	41 4f       	R1 <<= 0x8;
 100f872:	80 4f       	R0 <<= 0x10;
 100f874:	01 56       	R0 = R1 | R0;
 100f876:	89 e4 0c 00 	R1 = B[P1 + 0xc] (Z);
 100f87a:	08 56       	R0 = R0 | R1;
 100f87c:	89 e4 0f 00 	R1 = B[P1 + 0xf] (Z);
 100f880:	c1 4f       	R1 <<= 0x18;
 100f882:	49 e1 07 00 	P1.H = 0x7;		/* (  7)	P1=0x70010 */
 100f886:	08 56       	R0 = R0 | R1;
 100f888:	09 e1 90 81 	P1.L = 0x8190;		/* (-32368)	P1=0x78190 */
 100f88c:	08 93       	[P1] = R0;
 100f88e:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100f890:	10 93       	[P2] = R0;
 100f892:	42 34       	I0 = P2;
 100f894:	00 00       	NOP;
 100f896:	00 9d       	R0 = [I0];
 100f898:	10 48       	CC = !BITTST (R0, 0x2);		/* bit  2 */
 100f89a:	fd 17       	IF !CC JUMP 0x100f894 <_aes128_start_enc+0x134> (BP);
 100f89c:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x78180 */
 100f8a0:	0a e1 84 81 	P2.L = 0x8184;		/* (-32380)	P2=0x78184 */
 100f8a4:	10 91       	R0 = [P2];
 100f8a6:	00 9b       	B[P0] = R0;
 100f8a8:	10 91       	R0 = [P2];
 100f8aa:	40 4e       	R0 >>= 0x8;
 100f8ac:	80 e6 01 00 	B[P0 + 0x1] = R0;
 100f8b0:	10 91       	R0 = [P2];
 100f8b2:	80 4e       	R0 >>= 0x10;
 100f8b4:	80 e6 02 00 	B[P0 + 0x2] = R0;
 100f8b8:	10 91       	R0 = [P2];
 100f8ba:	c0 4e       	R0 >>= 0x18;
 100f8bc:	80 e6 03 00 	B[P0 + 0x3] = R0;
 100f8c0:	22 6c       	P2 += 0x4;		/* (  4) */
 100f8c2:	10 91       	R0 = [P2];
 100f8c4:	80 e6 04 00 	B[P0 + 0x4] = R0;
 100f8c8:	10 91       	R0 = [P2];
 100f8ca:	40 4e       	R0 >>= 0x8;
 100f8cc:	80 e6 05 00 	B[P0 + 0x5] = R0;
 100f8d0:	10 91       	R0 = [P2];
 100f8d2:	80 4e       	R0 >>= 0x10;
 100f8d4:	80 e6 06 00 	B[P0 + 0x6] = R0;
 100f8d8:	10 91       	R0 = [P2];
 100f8da:	c0 4e       	R0 >>= 0x18;
 100f8dc:	80 e6 07 00 	B[P0 + 0x7] = R0;
 100f8e0:	22 6c       	P2 += 0x4;		/* (  4) */
 100f8e2:	10 91       	R0 = [P2];
 100f8e4:	80 e6 08 00 	B[P0 + 0x8] = R0;
 100f8e8:	10 91       	R0 = [P2];
 100f8ea:	40 4e       	R0 >>= 0x8;
 100f8ec:	80 e6 09 00 	B[P0 + 0x9] = R0;
 100f8f0:	10 91       	R0 = [P2];
 100f8f2:	80 4e       	R0 >>= 0x10;
 100f8f4:	80 e6 0a 00 	B[P0 + 0xa] = R0;
 100f8f8:	10 91       	R0 = [P2];
 100f8fa:	c0 4e       	R0 >>= 0x18;
 100f8fc:	80 e6 0b 00 	B[P0 + 0xb] = R0;
 100f900:	22 6c       	P2 += 0x4;		/* (  4) */
 100f902:	10 91       	R0 = [P2];
 100f904:	80 e6 0c 00 	B[P0 + 0xc] = R0;
 100f908:	10 91       	R0 = [P2];
 100f90a:	40 4e       	R0 >>= 0x8;
 100f90c:	80 e6 0d 00 	B[P0 + 0xd] = R0;
 100f910:	10 91       	R0 = [P2];
 100f912:	80 4e       	R0 >>= 0x10;
 100f914:	80 e6 0e 00 	B[P0 + 0xe] = R0;
 100f918:	10 91       	R0 = [P2];
 100f91a:	c0 4e       	R0 >>= 0x18;
 100f91c:	80 e6 0f 00 	B[P0 + 0xf] = R0;
 100f920:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100f922:	85 04       	(P5:5) = [SP++];
 100f924:	10 00       	RTS;
	...

0100f928 <_aes128_start_dec>:
 100f928:	10 32       	P2 = R0;
 100f92a:	c5 04       	[--SP] = (P5:5);
 100f92c:	09 32       	P1 = R1;
 100f92e:	4d e1 07 00 	P5.H = 0x7;		/* (  7)	P5=0x78184 */
 100f932:	0d e1 94 81 	P5.L = 0x8194;		/* (-32364)	P5=0x78194 */
 100f936:	91 e4 0d 00 	R1 = B[P2 + 0xd] (Z);
 100f93a:	90 e4 0e 00 	R0 = B[P2 + 0xe] (Z);
 100f93e:	41 4f       	R1 <<= 0x8;
 100f940:	80 4f       	R0 <<= 0x10;
 100f942:	01 56       	R0 = R1 | R0;
 100f944:	91 e4 0c 00 	R1 = B[P2 + 0xc] (Z);
 100f948:	08 56       	R0 = R0 | R1;
 100f94a:	91 e4 0f 00 	R1 = B[P2 + 0xf] (Z);
 100f94e:	c1 4f       	R1 <<= 0x18;
 100f950:	08 56       	R0 = R0 | R1;
 100f952:	28 93       	[P5] = R0;
 100f954:	91 e4 09 00 	R1 = B[P2 + 0x9] (Z);
 100f958:	90 e4 0a 00 	R0 = B[P2 + 0xa] (Z);
 100f95c:	41 4f       	R1 <<= 0x8;
 100f95e:	80 4f       	R0 <<= 0x10;
 100f960:	01 56       	R0 = R1 | R0;
 100f962:	91 e4 08 00 	R1 = B[P2 + 0x8] (Z);
 100f966:	08 56       	R0 = R0 | R1;
 100f968:	91 e4 0b 00 	R1 = B[P2 + 0xb] (Z);
 100f96c:	c1 4f       	R1 <<= 0x18;
 100f96e:	08 56       	R0 = R0 | R1;
 100f970:	28 93       	[P5] = R0;
 100f972:	91 e4 05 00 	R1 = B[P2 + 0x5] (Z);
 100f976:	90 e4 06 00 	R0 = B[P2 + 0x6] (Z);
 100f97a:	41 4f       	R1 <<= 0x8;
 100f97c:	80 4f       	R0 <<= 0x10;
 100f97e:	01 56       	R0 = R1 | R0;
 100f980:	91 e4 04 00 	R1 = B[P2 + 0x4] (Z);
 100f984:	08 56       	R0 = R0 | R1;
 100f986:	91 e4 07 00 	R1 = B[P2 + 0x7] (Z);
 100f98a:	c1 4f       	R1 <<= 0x18;
 100f98c:	08 56       	R0 = R0 | R1;
 100f98e:	28 93       	[P5] = R0;
 100f990:	91 e4 01 00 	R1 = B[P2 + 0x1] (Z);
 100f994:	90 e4 02 00 	R0 = B[P2 + 0x2] (Z);
 100f998:	41 4f       	R1 <<= 0x8;
 100f99a:	80 4f       	R0 <<= 0x10;
 100f99c:	01 56       	R0 = R1 | R0;
 100f99e:	11 99       	R1 = B[P2] (Z);
 100f9a0:	08 56       	R0 = R0 | R1;
 100f9a2:	91 e4 03 00 	R1 = B[P2 + 0x3] (Z);
 100f9a6:	c1 4f       	R1 <<= 0x18;
 100f9a8:	08 56       	R0 = R0 | R1;
 100f9aa:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x78184 */
 100f9ae:	28 93       	[P5] = R0;
 100f9b0:	0a e1 80 81 	P2.L = 0x8180;		/* (-32384)	P2=0x78180 */
 100f9b4:	00 61       	R0 = 0x20 (X);		/*		R0=0x20( 32) */
 100f9b6:	6a 32       	P5 = P2;
 100f9b8:	02 32       	P0 = R2;
 100f9ba:	10 93       	[P2] = R0;
 100f9bc:	45 34       	I0 = P5;
 100f9be:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x78180 */
 100f9c2:	00 9d       	R0 = [I0];
 100f9c4:	0a e1 80 81 	P2.L = 0x8180;		/* (-32384)	P2=0x78180 */
 100f9c8:	28 48       	CC = !BITTST (R0, 0x5);		/* bit  5 */
 100f9ca:	fa 1f       	IF CC JUMP 0x100f9be <_aes128_start_dec+0x96> (BP);
 100f9cc:	89 e4 01 00 	R1 = B[P1 + 0x1] (Z);
 100f9d0:	88 e4 02 00 	R0 = B[P1 + 0x2] (Z);
 100f9d4:	41 4f       	R1 <<= 0x8;
 100f9d6:	80 4f       	R0 <<= 0x10;
 100f9d8:	01 56       	R0 = R1 | R0;
 100f9da:	09 99       	R1 = B[P1] (Z);
 100f9dc:	08 56       	R0 = R0 | R1;
 100f9de:	89 e4 03 00 	R1 = B[P1 + 0x3] (Z);
 100f9e2:	c1 4f       	R1 <<= 0x18;
 100f9e4:	4d e1 07 00 	P5.H = 0x7;		/* (  7)	P5=0x78194 */
 100f9e8:	08 56       	R0 = R0 | R1;
 100f9ea:	0d e1 84 81 	P5.L = 0x8184;		/* (-32380)	P5=0x78184 */
 100f9ee:	28 93       	[P5] = R0;
 100f9f0:	89 e4 05 00 	R1 = B[P1 + 0x5] (Z);
 100f9f4:	88 e4 06 00 	R0 = B[P1 + 0x6] (Z);
 100f9f8:	41 4f       	R1 <<= 0x8;
 100f9fa:	80 4f       	R0 <<= 0x10;
 100f9fc:	01 56       	R0 = R1 | R0;
 100f9fe:	89 e4 04 00 	R1 = B[P1 + 0x4] (Z);
 100fa02:	08 56       	R0 = R0 | R1;
 100fa04:	89 e4 07 00 	R1 = B[P1 + 0x7] (Z);
 100fa08:	c1 4f       	R1 <<= 0x18;
 100fa0a:	08 56       	R0 = R0 | R1;
 100fa0c:	25 6c       	P5 += 0x4;		/* (  4) */
 100fa0e:	28 93       	[P5] = R0;
 100fa10:	89 e4 09 00 	R1 = B[P1 + 0x9] (Z);
 100fa14:	88 e4 0a 00 	R0 = B[P1 + 0xa] (Z);
 100fa18:	41 4f       	R1 <<= 0x8;
 100fa1a:	80 4f       	R0 <<= 0x10;
 100fa1c:	01 56       	R0 = R1 | R0;
 100fa1e:	89 e4 08 00 	R1 = B[P1 + 0x8] (Z);
 100fa22:	08 56       	R0 = R0 | R1;
 100fa24:	89 e4 0b 00 	R1 = B[P1 + 0xb] (Z);
 100fa28:	c1 4f       	R1 <<= 0x18;
 100fa2a:	08 56       	R0 = R0 | R1;
 100fa2c:	25 6c       	P5 += 0x4;		/* (  4) */
 100fa2e:	28 93       	[P5] = R0;
 100fa30:	89 e4 0d 00 	R1 = B[P1 + 0xd] (Z);
 100fa34:	88 e4 0e 00 	R0 = B[P1 + 0xe] (Z);
 100fa38:	41 4f       	R1 <<= 0x8;
 100fa3a:	80 4f       	R0 <<= 0x10;
 100fa3c:	01 56       	R0 = R1 | R0;
 100fa3e:	89 e4 0c 00 	R1 = B[P1 + 0xc] (Z);
 100fa42:	08 56       	R0 = R0 | R1;
 100fa44:	89 e4 0f 00 	R1 = B[P1 + 0xf] (Z);
 100fa48:	c1 4f       	R1 <<= 0x18;
 100fa4a:	49 e1 07 00 	P1.H = 0x7;		/* (  7)	P1=0x78190 */
 100fa4e:	08 56       	R0 = R0 | R1;
 100fa50:	09 e1 90 81 	P1.L = 0x8190;		/* (-32368)	P1=0x78190 */
 100fa54:	08 93       	[P1] = R0;
 100fa56:	10 60       	R0 = 0x2 (X);		/*		R0=0x2(  2) */
 100fa58:	10 93       	[P2] = R0;
 100fa5a:	42 34       	I0 = P2;
 100fa5c:	00 00       	NOP;
 100fa5e:	00 9d       	R0 = [I0];
 100fa60:	18 48       	CC = !BITTST (R0, 0x3);		/* bit  3 */
 100fa62:	fd 17       	IF !CC JUMP 0x100fa5c <_aes128_start_dec+0x134> (BP);
 100fa64:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x78180 */
 100fa68:	0a e1 84 81 	P2.L = 0x8184;		/* (-32380)	P2=0x78184 */
 100fa6c:	10 91       	R0 = [P2];
 100fa6e:	00 9b       	B[P0] = R0;
 100fa70:	10 91       	R0 = [P2];
 100fa72:	40 4e       	R0 >>= 0x8;
 100fa74:	80 e6 01 00 	B[P0 + 0x1] = R0;
 100fa78:	10 91       	R0 = [P2];
 100fa7a:	80 4e       	R0 >>= 0x10;
 100fa7c:	80 e6 02 00 	B[P0 + 0x2] = R0;
 100fa80:	10 91       	R0 = [P2];
 100fa82:	c0 4e       	R0 >>= 0x18;
 100fa84:	80 e6 03 00 	B[P0 + 0x3] = R0;
 100fa88:	22 6c       	P2 += 0x4;		/* (  4) */
 100fa8a:	10 91       	R0 = [P2];
 100fa8c:	80 e6 04 00 	B[P0 + 0x4] = R0;
 100fa90:	10 91       	R0 = [P2];
 100fa92:	40 4e       	R0 >>= 0x8;
 100fa94:	80 e6 05 00 	B[P0 + 0x5] = R0;
 100fa98:	10 91       	R0 = [P2];
 100fa9a:	80 4e       	R0 >>= 0x10;
 100fa9c:	80 e6 06 00 	B[P0 + 0x6] = R0;
 100faa0:	10 91       	R0 = [P2];
 100faa2:	c0 4e       	R0 >>= 0x18;
 100faa4:	80 e6 07 00 	B[P0 + 0x7] = R0;
 100faa8:	22 6c       	P2 += 0x4;		/* (  4) */
 100faaa:	10 91       	R0 = [P2];
 100faac:	80 e6 08 00 	B[P0 + 0x8] = R0;
 100fab0:	10 91       	R0 = [P2];
 100fab2:	40 4e       	R0 >>= 0x8;
 100fab4:	80 e6 09 00 	B[P0 + 0x9] = R0;
 100fab8:	10 91       	R0 = [P2];
 100faba:	80 4e       	R0 >>= 0x10;
 100fabc:	80 e6 0a 00 	B[P0 + 0xa] = R0;
 100fac0:	10 91       	R0 = [P2];
 100fac2:	c0 4e       	R0 >>= 0x18;
 100fac4:	80 e6 0b 00 	B[P0 + 0xb] = R0;
 100fac8:	22 6c       	P2 += 0x4;		/* (  4) */
 100faca:	10 91       	R0 = [P2];
 100facc:	80 e6 0c 00 	B[P0 + 0xc] = R0;
 100fad0:	10 91       	R0 = [P2];
 100fad2:	40 4e       	R0 >>= 0x8;
 100fad4:	80 e6 0d 00 	B[P0 + 0xd] = R0;
 100fad8:	10 91       	R0 = [P2];
 100fada:	80 4e       	R0 >>= 0x10;
 100fadc:	80 e6 0e 00 	B[P0 + 0xe] = R0;
 100fae0:	10 91       	R0 = [P2];
 100fae2:	c0 4e       	R0 >>= 0x18;
 100fae4:	80 e6 0f 00 	B[P0 + 0xf] = R0;
 100fae8:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100faea:	85 04       	(P5:5) = [SP++];
 100faec:	10 00       	RTS;
	...

0100faf0 <_rijndael_setup>:
 100faf0:	48 e1 07 00 	P0.H = 0x7;		/* (  7)	P0=0x744f0 */
 100faf4:	10 32       	P2 = R0;
 100faf6:	08 e1 94 81 	P0.L = 0x8194;		/* (-32364)	P0=0x78194 */
 100fafa:	21 68       	P1 = 0x4 (X);		/*		P1=0x4(  4) */
 100fafc:	b2 e0 10 10 	LSETUP(0x100fb00 <_rijndael_setup+0x10>, 0x100fb1c <_rijndael_setup+0x2c>) LC1 = P1;
 100fb00:	11 99       	R1 = B[P2] (Z);
 100fb02:	90 e4 01 00 	R0 = B[P2 + 0x1] (Z);
 100fb06:	c1 4f       	R1 <<= 0x18;
 100fb08:	80 4f       	R0 <<= 0x10;
 100fb0a:	01 56       	R0 = R1 | R0;
 100fb0c:	91 e4 03 00 	R1 = B[P2 + 0x3] (Z);
 100fb10:	08 56       	R0 = R0 | R1;
 100fb12:	91 e4 02 00 	R1 = B[P2 + 0x2] (Z);
 100fb16:	41 4f       	R1 <<= 0x8;
 100fb18:	08 56       	R0 = R0 | R1;
 100fb1a:	22 6c       	P2 += 0x4;		/* (  4) */
 100fb1c:	00 93       	[P0] = R0;
 100fb1e:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x78184 */
 100fb22:	0a e1 80 81 	P2.L = 0x8180;		/* (-32384)	P2=0x78180 */
 100fb26:	00 61       	R0 = 0x20 (X);		/*		R0=0x20( 32) */
 100fb28:	10 93       	[P2] = R0;
 100fb2a:	42 34       	I0 = P2;
 100fb2c:	00 00       	NOP;
 100fb2e:	00 9d       	R0 = [I0];
 100fb30:	28 48       	CC = !BITTST (R0, 0x5);		/* bit  5 */
 100fb32:	fd 1f       	IF CC JUMP 0x100fb2c <_rijndael_setup+0x3c> (BP);
 100fb34:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100fb36:	10 00       	RTS;

0100fb38 <_rijndael_ecb_encrypt>:
 100fb38:	10 32       	P2 = R0;
 100fb3a:	70 05       	[--SP] = (R7:6);
 100fb3c:	49 e1 07 00 	P1.H = 0x7;		/* (  7)	P1=0x70004 */
 100fb40:	09 e1 90 81 	P1.L = 0x8190;		/* (-32368)	P1=0x78190 */
 100fb44:	10 99       	R0 = B[P2] (Z);
 100fb46:	92 e4 03 00 	R2 = B[P2 + 0x3] (Z);
 100fb4a:	c0 4f       	R0 <<= 0x18;
 100fb4c:	02 56       	R0 = R2 | R0;
 100fb4e:	92 e4 01 00 	R2 = B[P2 + 0x1] (Z);
 100fb52:	82 4f       	R2 <<= 0x10;
 100fb54:	10 56       	R0 = R0 | R2;
 100fb56:	92 e4 02 00 	R2 = B[P2 + 0x2] (Z);
 100fb5a:	42 4f       	R2 <<= 0x8;
 100fb5c:	10 56       	R0 = R0 | R2;
 100fb5e:	08 93       	[P1] = R0;
 100fb60:	4a 32       	P1 = P2;
 100fb62:	21 6c       	P1 += 0x4;		/* (  4) */
 100fb64:	90 e4 04 00 	R0 = B[P2 + 0x4] (Z);
 100fb68:	8a e4 03 00 	R2 = B[P1 + 0x3] (Z);
 100fb6c:	c0 4f       	R0 <<= 0x18;
 100fb6e:	02 56       	R0 = R2 | R0;
 100fb70:	8a e4 01 00 	R2 = B[P1 + 0x1] (Z);
 100fb74:	82 4f       	R2 <<= 0x10;
 100fb76:	10 56       	R0 = R0 | R2;
 100fb78:	8a e4 02 00 	R2 = B[P1 + 0x2] (Z);
 100fb7c:	42 4f       	R2 <<= 0x8;
 100fb7e:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x78180 */
 100fb82:	10 56       	R0 = R0 | R2;
 100fb84:	0a e1 8c 81 	P2.L = 0x818c;		/* (-32372)	P2=0x7818c */
 100fb88:	10 93       	[P2] = R0;
 100fb8a:	51 32       	P2 = P1;
 100fb8c:	22 6c       	P2 += 0x4;		/* (  4) */
 100fb8e:	88 e4 04 00 	R0 = B[P1 + 0x4] (Z);
 100fb92:	92 e4 03 00 	R2 = B[P2 + 0x3] (Z);
 100fb96:	c0 4f       	R0 <<= 0x18;
 100fb98:	02 56       	R0 = R2 | R0;
 100fb9a:	92 e4 01 00 	R2 = B[P2 + 0x1] (Z);
 100fb9e:	82 4f       	R2 <<= 0x10;
 100fba0:	10 56       	R0 = R0 | R2;
 100fba2:	92 e4 02 00 	R2 = B[P2 + 0x2] (Z);
 100fba6:	42 4f       	R2 <<= 0x8;
 100fba8:	49 e1 07 00 	P1.H = 0x7;		/* (  7)	P1=0x78190 */
 100fbac:	10 56       	R0 = R0 | R2;
 100fbae:	09 e1 88 81 	P1.L = 0x8188;		/* (-32376)	P1=0x78188 */
 100fbb2:	08 93       	[P1] = R0;
 100fbb4:	4a 32       	P1 = P2;
 100fbb6:	21 6c       	P1 += 0x4;		/* (  4) */
 100fbb8:	90 e4 04 00 	R0 = B[P2 + 0x4] (Z);
 100fbbc:	8a e4 03 00 	R2 = B[P1 + 0x3] (Z);
 100fbc0:	c0 4f       	R0 <<= 0x18;
 100fbc2:	02 56       	R0 = R2 | R0;
 100fbc4:	8a e4 01 00 	R2 = B[P1 + 0x1] (Z);
 100fbc8:	82 4f       	R2 <<= 0x10;
 100fbca:	10 56       	R0 = R0 | R2;
 100fbcc:	8a e4 02 00 	R2 = B[P1 + 0x2] (Z);
 100fbd0:	42 4f       	R2 <<= 0x8;
 100fbd2:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x7818c */
 100fbd6:	10 56       	R0 = R0 | R2;
 100fbd8:	0a e1 84 81 	P2.L = 0x8184;		/* (-32380)	P2=0x78184 */
 100fbdc:	10 93       	[P2] = R0;
 100fbde:	e2 6f       	P2 += -0x4;		/* ( -4) */
 100fbe0:	08 60       	R0 = 0x1 (X);		/*		R0=0x1(  1) */
 100fbe2:	10 93       	[P2] = R0;
 100fbe4:	42 34       	I0 = P2;
 100fbe6:	00 00       	NOP;
 100fbe8:	00 9d       	R0 = [I0];
 100fbea:	10 48       	CC = !BITTST (R0, 0x2);		/* bit  2 */
 100fbec:	fd 17       	IF !CC JUMP 0x100fbe6 <_rijndael_ecb_encrypt+0xae> (BP);
 100fbee:	4a e1 07 00 	P2.H = 0x7;		/* (  7)	P2=0x78184 */
 100fbf2:	0a e1 90 81 	P2.L = 0x8190;		/* (-32368)	P2=0x78190 */
 100fbf6:	10 91       	R0 = [P2];
 100fbf8:	17 91       	R7 = [P2];
 100fbfa:	12 91       	R2 = [P2];
 100fbfc:	13 91       	R3 = [P2];
 100fbfe:	c0 4e       	R0 >>= 0x18;
 100fc00:	c2 4f       	R2 <<= 0x18;
 100fc02:	11 32       	P2 = R1;
 100fc04:	82 56       	R2 = R2 | R0;
 100fc06:	80 e1 00 ff 	R0 = 0xff00 (Z);		/*		R0=0xff00(65280) */
 100fc0a:	47 4e       	R7 >>= 0x8;
 100fc0c:	c7 55       	R7 = R7 & R0;
 100fc0e:	c3 54       	R3 = R3 & R0;
 100fc10:	ba 56       	R2 = R2 | R7;
 100fc12:	43 4f       	R3 <<= 0x8;
 100fc14:	9a 56       	R2 = R2 | R3;
 100fc16:	49 e1 07 00 	P1.H = 0x7;		/* (  7)	P1=0x78188 */
 100fc1a:	12 92       	[P2++] = R2;
 100fc1c:	09 e1 8c 81 	P1.L = 0x818c;		/* (-32372)	P1=0x7818c */
 100fc20:	0a 91       	R2 = [P1];
 100fc22:	0f 91       	R7 = [P1];
 100fc24:	0e 91       	R6 = [P1];
 100fc26:	0b 91       	R3 = [P1];
 100fc28:	09 32       	P1 = R1;
 100fc2a:	c6 4f       	R6 <<= 0x18;
 100fc2c:	c2 4e       	R2 >>= 0x18;
 100fc2e:	47 4e       	R7 >>= 0x8;
 100fc30:	c7 55       	R7 = R7 & R0;
 100fc32:	96 56       	R2 = R6 | R2;
 100fc34:	c3 54       	R3 = R3 & R0;
 100fc36:	ba 56       	R2 = R2 | R7;
 100fc38:	43 4f       	R3 <<= 0x8;
 100fc3a:	9a 56       	R2 = R2 | R3;
 100fc3c:	4a b0       	[P1 + 0x4] = R2;
 100fc3e:	49 e1 07 00 	P1.H = 0x7;		/* (  7)	P1=0x7818c */
 100fc42:	09 e1 88 81 	P1.L = 0x8188;		/* (-32376)	P1=0x78188 */
 100fc46:	09 91       	R1 = [P1];
 100fc48:	0b 91       	R3 = [P1];
 100fc4a:	0f 91       	R7 = [P1];
 100fc4c:	0a 91       	R2 = [P1];
 100fc4e:	c7 4f       	R7 <<= 0x18;
 100fc50:	c1 4e       	R1 >>= 0x18;
 100fc52:	43 4e       	R3 >>= 0x8;
 100fc54:	c3 54       	R3 = R3 & R0;
 100fc56:	4f 56       	R1 = R7 | R1;
 100fc58:	82 54       	R2 = R2 & R0;
 100fc5a:	59 56       	R1 = R1 | R3;
 100fc5c:	42 4f       	R2 <<= 0x8;
 100fc5e:	51 56       	R1 = R1 | R2;
 100fc60:	e1 6f       	P1 += -0x4;		/* ( -4) */
 100fc62:	51 b0       	[P2 + 0x4] = R1;
 100fc64:	09 91       	R1 = [P1];
 100fc66:	0b 91       	R3 = [P1];
 100fc68:	0f 91       	R7 = [P1];
 100fc6a:	43 4e       	R3 >>= 0x8;
 100fc6c:	0a 91       	R2 = [P1];
 100fc6e:	c7 4f       	R7 <<= 0x18;
 100fc70:	c3 54       	R3 = R3 & R0;
 100fc72:	c1 4e       	R1 >>= 0x18;
 100fc74:	4f 56       	R1 = R7 | R1;
 100fc76:	02 54       	R0 = R2 & R0;
 100fc78:	59 56       	R1 = R1 | R3;
 100fc7a:	40 4f       	R0 <<= 0x8;
 100fc7c:	01 56       	R0 = R1 | R0;
 100fc7e:	90 b0       	[P2 + 0x8] = R0;
 100fc80:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100fc82:	30 05       	(R7:6) = [SP++];
 100fc84:	10 00       	RTS;
	...

0100fc88 <_memcmp>:
 100fc88:	78 05       	[--SP] = (R7:7);
 100fc8a:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100fc8e:	08 32       	P1 = R0;
 100fc90:	11 32       	P2 = R1;
 100fc92:	1a 0e       	CC = R2 <= 0x3 (IU);
 100fc94:	2f 1c       	IF CC JUMP 0x100fcf2 <_memcmp+0x6a> (BP);
 100fc96:	c1 57       	R7 = R1 | R0;
 100fc98:	1b 60       	R3 = 0x3 (X);		/*		R3=0x3(  3) */
 100fc9a:	df 54       	R3 = R7 & R3;
 100fc9c:	03 0c       	CC = R3 == 0x0;
 100fc9e:	17 1c       	IF CC JUMP 0x100fccc <_memcmp+0x44> (BP);
 100fca0:	00 00       	NOP;
 100fca2:	0b 99       	R3 = B[P1] (Z);
 100fca4:	10 99       	R0 = B[P2] (Z);
 100fca6:	03 08       	CC = R3 == R0;
 100fca8:	28 10       	IF !CC JUMP 0x100fcf8 <_memcmp+0x70>;
 100fcaa:	0a 30       	R1 = R2;
 100fcac:	f9 67       	R1 += -0x1;		/* ( -1) */
 100fcae:	09 6c       	P1 += 0x1;		/* (  1) */
 100fcb0:	0a 6c       	P2 += 0x1;		/* (  1) */
 100fcb2:	06 20       	JUMP.S 0x100fcbe <_memcmp+0x36>;
 100fcb4:	f9 67       	R1 += -0x1;		/* ( -1) */
 100fcb6:	0b 98       	R3 = B[P1++] (Z);
 100fcb8:	10 98       	R0 = B[P2++] (Z);
 100fcba:	03 08       	CC = R3 == R0;
 100fcbc:	1e 10       	IF !CC JUMP 0x100fcf8 <_memcmp+0x70>;
 100fcbe:	01 0c       	CC = R1 == 0x0;
 100fcc0:	fa 17       	IF !CC JUMP 0x100fcb4 <_memcmp+0x2c> (BP);
 100fcc2:	01 e8 00 00 	UNLINK;
 100fcc6:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100fcc8:	38 05       	(R7:7) = [SP++];
 100fcca:	10 00       	RTS;
 100fccc:	0a 32       	P1 = R2;
 100fcce:	10 32       	P2 = R0;
 100fcd0:	01 32       	P0 = R1;
 100fcd2:	e1 6f       	P1 += -0x4;		/* ( -4) */
 100fcd4:	c9 44       	P1 = P1 >> 0x2;
 100fcd6:	09 6c       	P1 += 0x1;		/* (  1) */
 100fcd8:	b2 e0 0a 10 	LSETUP(0x100fcdc <_memcmp+0x54>, 0x100fcec <_memcmp+0x64>) LC1 = P1;
 100fcdc:	40 30       	R0 = P0;
 100fcde:	4a 30       	R1 = P2;
 100fce0:	17 90       	R7 = [P2++];
 100fce2:	03 90       	R3 = [P0++];
 100fce4:	1f 08       	CC = R7 == R3;
 100fce6:	04 10       	IF !CC JUMP 0x100fcee <_memcmp+0x66>;
 100fce8:	4a 30       	R1 = P2;
 100fcea:	40 30       	R0 = P0;
 100fcec:	e2 67       	R2 += -0x4;		/* ( -4) */
 100fcee:	09 32       	P1 = R1;
 100fcf0:	10 32       	P2 = R0;
 100fcf2:	02 0c       	CC = R2 == 0x0;
 100fcf4:	d6 17       	IF !CC JUMP 0x100fca0 <_memcmp+0x18> (BP);
 100fcf6:	e6 2f       	JUMP.S 0x100fcc2 <_memcmp+0x3a>;
 100fcf8:	01 e8 00 00 	UNLINK;
 100fcfc:	03 52       	R0 = R3 - R0;
 100fcfe:	38 05       	(R7:7) = [SP++];
 100fd00:	10 00       	RTS;
	...

0100fd04 <_memcpy>:
 100fd04:	fc 05       	[--SP] = (R7:7, P5:4);
 100fd06:	7b 60       	R3 = 0xf (X);		/*		R3=0xf( 15) */
 100fd08:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100fd0c:	10 32       	P2 = R0;
 100fd0e:	09 32       	P1 = R1;
 100fd10:	1a 0a       	CC = R2 <= R3 (IU);
 100fd12:	41 1c       	IF CC JUMP 0x100fd94 <_memcpy+0x90> (BP);
 100fd14:	c1 57       	R7 = R1 | R0;
 100fd16:	1b 60       	R3 = 0x3 (X);		/*		R3=0x3(  3) */
 100fd18:	df 54       	R3 = R7 & R3;
 100fd1a:	03 0c       	CC = R3 == 0x0;
 100fd1c:	39 14       	IF !CC JUMP 0x100fd8e <_memcpy+0x8a> (BP);
 100fd1e:	1a 30       	R3 = R2;
 100fd20:	83 67       	R3 += -0x10;		/* (-16) */
 100fd22:	23 4e       	R3 >>= 0x4;
 100fd24:	03 32       	P0 = R3;
 100fd26:	08 6c       	P0 += 0x1;		/* (  1) */
 100fd28:	b2 e0 0b 00 	LSETUP(0x100fd2c <_memcpy+0x28>, 0x100fd3e <_memcpy+0x3a>) LC1 = P0;
 100fd2c:	0b 91       	R3 = [P1];
 100fd2e:	13 93       	[P2] = R3;
 100fd30:	4b a0       	R3 = [P1 + 0x4];
 100fd32:	53 b0       	[P2 + 0x4] = R3;
 100fd34:	8b a0       	R3 = [P1 + 0x8];
 100fd36:	93 b0       	[P2 + 0x8] = R3;
 100fd38:	cb a0       	R3 = [P1 + 0xc];
 100fd3a:	d3 b0       	[P2 + 0xc] = R3;
 100fd3c:	82 6c       	P2 += 0x10;		/* ( 16) */
 100fd3e:	81 6c       	P1 += 0x10;		/* ( 16) */
 100fd40:	82 67       	R2 += -0x10;		/* (-16) */
 100fd42:	82 c6 e2 87 	R3 = R2 >> 0x4;
 100fd46:	0b 64       	R3 += 0x1;		/* (  1) */
 100fd48:	23 4f       	R3 <<= 0x4;
 100fd4a:	59 50       	R1 = R1 + R3;
 100fd4c:	21 32       	P4 = R1;
 100fd4e:	79 60       	R1 = 0xf (X);		/*		R1=0xf( 15) */
 100fd50:	d8 51       	R7 = R0 + R3;
 100fd52:	8a 54       	R2 = R2 & R1;
 100fd54:	17 32       	P2 = R7;
 100fd56:	1a 0e       	CC = R2 <= 0x3 (IU);
 100fd58:	16 18       	IF CC JUMP 0x100fd84 <_memcpy+0x80>;
 100fd5a:	02 32       	P0 = R2;
 100fd5c:	6c 32       	P5 = P4;
 100fd5e:	0f 32       	P1 = R7;
 100fd60:	45 34       	I0 = P5;
 100fd62:	e0 6f       	P0 += -0x4;		/* ( -4) */
 100fd64:	c0 44       	P0 = P0 >> 0x2;
 100fd66:	08 6c       	P0 += 0x1;		/* (  1) */
 100fd68:	b2 e0 03 00 	LSETUP(0x100fd6c <_memcpy+0x68>, 0x100fd6e <_memcpy+0x6a>) LC1 = P0;
 100fd6c:	03 9c       	R3 = [I0++];
 100fd6e:	0b 92       	[P1++] = R3;
 100fd70:	e2 67       	R2 += -0x4;		/* ( -4) */
 100fd72:	82 c6 f2 83 	R1 = R2 >> 0x2;
 100fd76:	09 64       	R1 += 0x1;		/* (  1) */
 100fd78:	01 32       	P0 = R1;
 100fd7a:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 100fd7c:	8a 54       	R2 = R2 & R1;
 100fd7e:	41 44       	P1 = P0 << 0x2;
 100fd80:	8a 5a       	P2 = P2 + P1;
 100fd82:	0c 5b       	P4 = P4 + P1;
 100fd84:	4c 32       	P1 = P4;
 100fd86:	02 0c       	CC = R2 == 0x0;
 100fd88:	08 18       	IF CC JUMP 0x100fd98 <_memcpy+0x94>;
 100fd8a:	00 00       	NOP;
 100fd8c:	00 00       	NOP;
 100fd8e:	fa 67       	R2 += -0x1;		/* ( -1) */
 100fd90:	49 98       	R1 = B[P1++] (X);
 100fd92:	11 9a       	B[P2++] = R1;
 100fd94:	02 0c       	CC = R2 == 0x0;
 100fd96:	fc 17       	IF !CC JUMP 0x100fd8e <_memcpy+0x8a> (BP);
 100fd98:	01 e8 00 00 	UNLINK;
 100fd9c:	bc 05       	(R7:7, P5:4) = [SP++];
 100fd9e:	10 00       	RTS;

0100fda0 <_memset>:
 100fda0:	1b 60       	R3 = 0x3 (X);		/*		R3=0x3(  3) */
 100fda2:	68 05       	[--SP] = (R7:5);
 100fda4:	d8 54       	R3 = R0 & R3;
 100fda6:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100fdaa:	08 32       	P1 = R0;
 100fdac:	03 0c       	CC = R3 == 0x0;
 100fdae:	11 18       	IF CC JUMP 0x100fdd0 <_memset+0x30>;
 100fdb0:	02 0c       	CC = R2 == 0x0;
 100fdb2:	4a 18       	IF CC JUMP 0x100fe46 <_memset+0xa6>;
 100fdb4:	fa 67       	R2 += -0x1;		/* ( -1) */
 100fdb6:	31 30       	R6 = R1;
 100fdb8:	10 32       	P2 = R0;
 100fdba:	1f 60       	R7 = 0x3 (X);		/*		R7=0x3(  3) */
 100fdbc:	04 20       	JUMP.S 0x100fdc4 <_memset+0x24>;
 100fdbe:	02 0c       	CC = R2 == 0x0;
 100fdc0:	43 18       	IF CC JUMP 0x100fe46 <_memset+0xa6>;
 100fdc2:	fa 67       	R2 += -0x1;		/* ( -1) */
 100fdc4:	16 9a       	B[P2++] = R6;
 100fdc6:	6a 30       	R5 = P2;
 100fdc8:	fd 54       	R3 = R5 & R7;
 100fdca:	4a 32       	P1 = P2;
 100fdcc:	03 0c       	CC = R3 == 0x0;
 100fdce:	f8 17       	IF !CC JUMP 0x100fdbe <_memset+0x1e> (BP);
 100fdd0:	1a 0e       	CC = R2 <= 0x3 (IU);
 100fdd2:	34 1c       	IF CC JUMP 0x100fe3a <_memset+0x9a> (BP);
 100fdd4:	4b 43       	R3 = R1.B (Z);
 100fdd6:	82 c6 43 8e 	R7 = R3 << 0x8;
 100fdda:	df 56       	R3 = R7 | R3;
 100fddc:	82 c6 83 8e 	R7 = R3 << 0x10;
 100fde0:	df 56       	R3 = R7 | R3;
 100fde2:	7f 60       	R7 = 0xf (X);		/*		R7=0xf( 15) */
 100fde4:	41 32       	P0 = P1;
 100fde6:	3a 0a       	CC = R2 <= R7 (IU);
 100fde8:	19 18       	IF CC JUMP 0x100fe1a <_memset+0x7a>;
 100fdea:	3a 30       	R7 = R2;
 100fdec:	87 67       	R7 += -0x10;		/* (-16) */
 100fdee:	27 4e       	R7 >>= 0x4;
 100fdf0:	07 32       	P0 = R7;
 100fdf2:	51 32       	P2 = P1;
 100fdf4:	08 6c       	P0 += 0x1;		/* (  1) */
 100fdf6:	b2 e0 06 00 	LSETUP(0x100fdfa <_memset+0x5a>, 0x100fe02 <_memset+0x62>) LC1 = P0;
 100fdfa:	13 93       	[P2] = R3;
 100fdfc:	53 b0       	[P2 + 0x4] = R3;
 100fdfe:	93 b0       	[P2 + 0x8] = R3;
 100fe00:	d3 b0       	[P2 + 0xc] = R3;
 100fe02:	82 6c       	P2 += 0x10;		/* ( 16) */
 100fe04:	82 67       	R2 += -0x10;		/* (-16) */
 100fe06:	82 c6 e2 8f 	R7 = R2 >> 0x4;
 100fe0a:	0f 64       	R7 += 0x1;		/* (  1) */
 100fe0c:	27 4f       	R7 <<= 0x4;
 100fe0e:	17 32       	P2 = R7;
 100fe10:	7f 60       	R7 = 0xf (X);		/*		R7=0xf( 15) */
 100fe12:	ba 54       	R2 = R2 & R7;
 100fe14:	1a 0e       	CC = R2 <= 0x3 (IU);
 100fe16:	11 5a       	P0 = P1 + P2;
 100fe18:	10 18       	IF CC JUMP 0x100fe38 <_memset+0x98>;
 100fe1a:	12 32       	P2 = R2;
 100fe1c:	48 32       	P1 = P0;
 100fe1e:	e2 6f       	P2 += -0x4;		/* ( -4) */
 100fe20:	d2 44       	P2 = P2 >> 0x2;
 100fe22:	0a 6c       	P2 += 0x1;		/* (  1) */
 100fe24:	b2 e0 02 20 	LSETUP(0x100fe28 <_memset+0x88>, 0x100fe28 <_memset+0x88>) LC1 = P2;
 100fe28:	0b 92       	[P1++] = R3;
 100fe2a:	e2 67       	R2 += -0x4;		/* ( -4) */
 100fe2c:	0a 32       	P1 = R2;
 100fe2e:	1b 60       	R3 = 0x3 (X);		/*		R3=0x3(  3) */
 100fe30:	9a 54       	R2 = R2 & R3;
 100fe32:	ca 44       	P2 = P1 >> 0x2;
 100fe34:	0a 6c       	P2 += 0x1;		/* (  1) */
 100fe36:	10 5e       	P0 = P0 + (P2 << 0x2);
 100fe38:	48 32       	P1 = P0;
 100fe3a:	02 0c       	CC = R2 == 0x0;
 100fe3c:	05 18       	IF CC JUMP 0x100fe46 <_memset+0xa6>;
 100fe3e:	12 32       	P2 = R2;
 100fe40:	b2 e0 02 20 	LSETUP(0x100fe44 <_memset+0xa4>, 0x100fe44 <_memset+0xa4>) LC1 = P2;
 100fe44:	09 9a       	B[P1++] = R1;
 100fe46:	01 e8 00 00 	UNLINK;
 100fe4a:	28 05       	(R7:5) = [SP++];
 100fe4c:	10 00       	RTS;
	...

0100fe50 <_strcmp>:
 100fe50:	c1 56       	R3 = R1 | R0;
 100fe52:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100fe54:	70 05       	[--SP] = (R7:6);
 100fe56:	93 54       	R2 = R3 & R2;
 100fe58:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100fe5c:	02 0c       	CC = R2 == 0x0;
 100fe5e:	2a 14       	IF !CC JUMP 0x100feb2 <_strcmp+0x62> (BP);
 100fe60:	10 32       	P2 = R0;
 100fe62:	18 30       	R3 = R0;
 100fe64:	11 30       	R2 = R1;
 100fe66:	17 91       	R7 = [P2];
 100fe68:	11 32       	P2 = R1;
 100fe6a:	16 91       	R6 = [P2];
 100fe6c:	37 08       	CC = R7 == R6;
 100fe6e:	20 10       	IF !CC JUMP 0x100feae <_strcmp+0x5e>;
 100fe70:	46 e1 fe fe 	R6.H = 0xfefe;		/* (-258)	R6=0xfefefff0(-16842768) */
 100fe74:	06 e1 ff fe 	R6.L = 0xfeff;		/* (-257)	R6=0xfefefeff(-16843009) */
 100fe78:	b7 50       	R2 = R7 + R6;
 100fe7a:	ff 43       	R7 =~ R7;
 100fe7c:	ba 54       	R2 = R2 & R7;
 100fe7e:	47 e1 80 80 	R7.H = 0x8080;		/* (-32640)	R7=0x8080000f(-2139095025) */
 100fe82:	07 e1 80 80 	R7.L = 0x8080;		/* (-32640)	R7=0x80808080(-2139062144) */
 100fe86:	ba 54       	R2 = R2 & R7;
 100fe88:	02 0c       	CC = R2 == 0x0;
 100fe8a:	36 10       	IF !CC JUMP 0x100fef6 <_strcmp+0xa6>;
 100fe8c:	08 32       	P1 = R0;
 100fe8e:	22 6c       	P2 += 0x4;		/* (  4) */
 100fe90:	21 6c       	P1 += 0x4;		/* (  4) */
 100fe92:	08 20       	JUMP.S 0x100fea2 <_strcmp+0x52>;
 100fe94:	31 50       	R0 = R1 + R6;
 100fe96:	c9 43       	R1 =~ R1;
 100fe98:	48 54       	R1 = R0 & R1;
 100fe9a:	79 54       	R1 = R1 & R7;
 100fe9c:	01 0c       	CC = R1 == 0x0;
 100fe9e:	2c 10       	IF !CC JUMP 0x100fef6 <_strcmp+0xa6>;
 100fea0:	00 00       	NOP;
 100fea2:	59 30       	R3 = P1;
 100fea4:	52 30       	R2 = P2;
 100fea6:	09 90       	R1 = [P1++];
 100fea8:	10 90       	R0 = [P2++];
 100feaa:	01 08       	CC = R1 == R0;
 100feac:	f4 1f       	IF CC JUMP 0x100fe94 <_strcmp+0x44> (BP);
 100feae:	03 30       	R0 = R3;
 100feb0:	0a 30       	R1 = R2;
 100feb2:	10 32       	P2 = R0;
 100feb4:	52 99       	R2 = B[P2] (X);
 100feb6:	02 0c       	CC = R2 == 0x0;
 100feb8:	16 18       	IF CC JUMP 0x100fee4 <_strcmp+0x94>;
 100feba:	00 00       	NOP;
 100febc:	00 00       	NOP;
 100febe:	11 32       	P2 = R1;
 100fec0:	53 99       	R3 = B[P2] (X);
 100fec2:	1a 08       	CC = R2 == R3;
 100fec4:	10 10       	IF !CC JUMP 0x100fee4 <_strcmp+0x94>;
 100fec6:	10 32       	P2 = R0;
 100fec8:	09 32       	P1 = R1;
 100feca:	0a 6c       	P2 += 0x1;		/* (  1) */
 100fecc:	09 6c       	P1 += 0x1;		/* (  1) */
 100fece:	06 20       	JUMP.S 0x100feda <_strcmp+0x8a>;
 100fed0:	00 00       	NOP;
 100fed2:	4b 98       	R3 = B[P1++] (X);
 100fed4:	1a 08       	CC = R2 == R3;
 100fed6:	07 10       	IF !CC JUMP 0x100fee4 <_strcmp+0x94>;
 100fed8:	00 00       	NOP;
 100feda:	42 30       	R0 = P2;
 100fedc:	49 30       	R1 = P1;
 100fede:	52 98       	R2 = B[P2++] (X);
 100fee0:	02 0c       	CC = R2 == 0x0;
 100fee2:	f7 17       	IF !CC JUMP 0x100fed0 <_strcmp+0x80> (BP);
 100fee4:	10 32       	P2 = R0;
 100fee6:	01 e8 00 00 	UNLINK;
 100feea:	30 05       	(R7:6) = [SP++];
 100feec:	12 99       	R2 = B[P2] (Z);
 100feee:	11 32       	P2 = R1;
 100fef0:	10 99       	R0 = B[P2] (Z);
 100fef2:	02 52       	R0 = R2 - R0;
 100fef4:	10 00       	RTS;
 100fef6:	01 e8 00 00 	UNLINK;
 100fefa:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 100fefc:	30 05       	(R7:6) = [SP++];
 100fefe:	10 00       	RTS;

0100ff00 <_strcpy>:
 100ff00:	c1 56       	R3 = R1 | R0;
 100ff02:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100ff04:	70 05       	[--SP] = (R7:6);
 100ff06:	93 54       	R2 = R3 & R2;
 100ff08:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100ff0c:	10 32       	P2 = R0;
 100ff0e:	02 0c       	CC = R2 == 0x0;
 100ff10:	2a 14       	IF !CC JUMP 0x100ff64 <_strcpy+0x64> (BP);
 100ff12:	01 32       	P0 = R1;
 100ff14:	46 e1 fe fe 	R6.H = 0xfefe;		/* (-258)	R6=0xfefefeff(-16843009) */
 100ff18:	06 e1 ff fe 	R6.L = 0xfeff;		/* (-257)	R6=0xfefefeff(-16843009) */
 100ff1c:	00 34       	I0 = R0;
 100ff1e:	02 91       	R2 = [P0];
 100ff20:	d7 43       	R7 =~ R2;
 100ff22:	f2 50       	R3 = R2 + R6;
 100ff24:	df 54       	R3 = R7 & R3;
 100ff26:	47 e1 80 80 	R7.H = 0x8080;		/* (-32640)	R7=0x80808080(-2139062144) */
 100ff2a:	07 e1 80 80 	R7.L = 0x8080;		/* (-32640)	R7=0x80808080(-2139062144) */
 100ff2e:	fb 54       	R3 = R3 & R7;
 100ff30:	03 0c       	CC = R3 == 0x0;
 100ff32:	0d 10       	IF !CC JUMP 0x100ff4c <_strcpy+0x4c>;
 100ff34:	09 32       	P1 = R1;
 100ff36:	21 6c       	P1 += 0x4;		/* (  4) */
 100ff38:	12 92       	[P2++] = R2;
 100ff3a:	41 32       	P0 = P1;
 100ff3c:	0a 90       	R2 = [P1++];
 100ff3e:	d1 43       	R1 =~ R2;
 100ff40:	f2 50       	R3 = R2 + R6;
 100ff42:	d9 54       	R3 = R1 & R3;
 100ff44:	fb 54       	R3 = R3 & R7;
 100ff46:	42 34       	I0 = P2;
 100ff48:	03 0c       	CC = R3 == 0x0;
 100ff4a:	f7 1f       	IF CC JUMP 0x100ff38 <_strcpy+0x38> (BP);
 100ff4c:	90 32       	P2 = I0;
 100ff4e:	48 32       	P1 = P0;
 100ff50:	00 00       	NOP;
 100ff52:	4a 98       	R2 = B[P1++] (X);
 100ff54:	12 9a       	B[P2++] = R2;
 100ff56:	12 43       	R2 = R2.B (X);
 100ff58:	02 0c       	CC = R2 == 0x0;
 100ff5a:	fb 17       	IF !CC JUMP 0x100ff50 <_strcpy+0x50> (BP);
 100ff5c:	01 e8 00 00 	UNLINK;
 100ff60:	30 05       	(R7:6) = [SP++];
 100ff62:	10 00       	RTS;
 100ff64:	09 32       	P1 = R1;
 100ff66:	10 32       	P2 = R0;
 100ff68:	f4 2f       	JUMP.S 0x100ff50 <_strcpy+0x50>;
	...

0100ff6c <_strlen>:
 100ff6c:	19 60       	R1 = 0x3 (X);		/*		R1=0x3(  3) */
 100ff6e:	78 05       	[--SP] = (R7:7);
 100ff70:	48 54       	R1 = R0 & R1;
 100ff72:	00 e8 00 00 	LINK 0x0;		/* (0) */
 100ff76:	01 0c       	CC = R1 == 0x0;
 100ff78:	43 18       	IF CC JUMP 0x100fffe <_strlen+0x92>;
 100ff7a:	00 00       	NOP;
 100ff7c:	00 00       	NOP;
 100ff7e:	10 32       	P2 = R0;
 100ff80:	51 99       	R1 = B[P2] (X);
 100ff82:	01 0c       	CC = R1 == 0x0;
 100ff84:	3f 18       	IF CC JUMP 0x1010002 <_strlen+0x96>;
 100ff86:	10 32       	P2 = R0;
 100ff88:	1a 60       	R2 = 0x3 (X);		/*		R2=0x3(  3) */
 100ff8a:	0a 6c       	P2 += 0x1;		/* (  1) */
 100ff8c:	05 20       	JUMP.S 0x100ff96 <_strlen+0x2a>;
 100ff8e:	00 00       	NOP;
 100ff90:	51 98       	R1 = B[P2++] (X);
 100ff92:	01 0c       	CC = R1 == 0x0;
 100ff94:	2f 18       	IF CC JUMP 0x100fff2 <_strlen+0x86>;
 100ff96:	5a 30       	R3 = P2;
 100ff98:	53 54       	R1 = R3 & R2;
 100ff9a:	4a 32       	P1 = P2;
 100ff9c:	01 0c       	CC = R1 == 0x0;
 100ff9e:	f8 17       	IF !CC JUMP 0x100ff8e <_strlen+0x22> (BP);
 100ffa0:	47 e1 fe fe 	R7.H = 0xfefe;		/* (-258)	R7=0xfefe8080(-16875392) */
 100ffa4:	09 91       	R1 = [P1];
 100ffa6:	07 e1 ff fe 	R7.L = 0xfeff;		/* (-257)	R7=0xfefefeff(-16843009) */
 100ffaa:	b9 50       	R2 = R1 + R7;
 100ffac:	c9 43       	R1 =~ R1;
 100ffae:	43 e1 80 80 	R3.H = 0x8080;		/* (-32640)	R3=0x80800003(-2139095037) */
 100ffb2:	4a 54       	R1 = R2 & R1;
 100ffb4:	03 e1 80 80 	R3.L = 0x8080;		/* (-32640)	R3=0x80808080(-2139062144) */
 100ffb8:	59 54       	R1 = R1 & R3;
 100ffba:	51 32       	P2 = P1;
 100ffbc:	01 0c       	CC = R1 == 0x0;
 100ffbe:	0b 10       	IF !CC JUMP 0x100ffd4 <_strlen+0x68>;
 100ffc0:	00 00       	NOP;
 100ffc2:	21 6c       	P1 += 0x4;		/* (  4) */
 100ffc4:	51 32       	P2 = P1;
 100ffc6:	09 90       	R1 = [P1++];
 100ffc8:	b9 50       	R2 = R1 + R7;
 100ffca:	c9 43       	R1 =~ R1;
 100ffcc:	4a 54       	R1 = R2 & R1;
 100ffce:	59 54       	R1 = R1 & R3;
 100ffd0:	01 0c       	CC = R1 == 0x0;
 100ffd2:	f9 1f       	IF CC JUMP 0x100ffc4 <_strlen+0x58> (BP);
 100ffd4:	51 99       	R1 = B[P2] (X);
 100ffd6:	52 30       	R2 = P2;
 100ffd8:	01 0c       	CC = R1 == 0x0;
 100ffda:	07 18       	IF CC JUMP 0x100ffe8 <_strlen+0x7c>;
 100ffdc:	00 00       	NOP;
 100ffde:	0a 6c       	P2 += 0x1;		/* (  1) */
 100ffe0:	52 30       	R2 = P2;
 100ffe2:	51 98       	R1 = B[P2++] (X);
 100ffe4:	01 0c       	CC = R1 == 0x0;
 100ffe6:	fd 17       	IF !CC JUMP 0x100ffe0 <_strlen+0x74> (BP);
 100ffe8:	02 52       	R0 = R2 - R0;
 100ffea:	01 e8 00 00 	UNLINK;
 100ffee:	38 05       	(R7:7) = [SP++];
 100fff0:	10 00       	RTS;
 100fff2:	49 30       	R1 = P1;
 100fff4:	01 e8 00 00 	UNLINK;
 100fff8:	01 52       	R0 = R1 - R0;
 100fffa:	38 05       	(R7:7) = [SP++];
 100fffc:	10 00       	RTS;
 100fffe:	08 32       	P1 = R0;
 1010000:	d0 2f       	JUMP.S 0x100ffa0 <_strlen+0x34>;
 1010002:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 1010004:	f3 2f       	JUMP.S 0x100ffea <_strlen+0x7e>;
	...

01010008 <___umodsi3>:
 1010008:	67 01       	[--SP] = RETS;
 101000a:	40 01       	[--SP] = R0;
 101000c:	41 01       	[--SP] = R1;
 101000e:	ff e3 a4 80 	CALL 0x1000156 <___udivsi3>;
 1010012:	32 90       	R2 = [SP++];
 1010014:	31 90       	R1 = [SP++];
 1010016:	c2 40       	R2 *= R0;
 1010018:	11 52       	R0 = R1 - R2;
 101001a:	27 01       	RETS = [SP++];
 101001c:	10 00       	RTS;
	...

01010020 <___umulsi3_highpart>:
 1010020:	80 c0 08 18 	A1 = R1.L * R0.L (FU);
 1010024:	83 c6 80 51 	A1 = A1 >> 0x10;
 1010028:	81 c0 08 46 	A1 += R1.L * R0.H, A0 = R1.H * R0.H (FU);
 101002c:	81 c0 01 58 	A1 += R0.L * R1.H (FU);
 1010030:	83 c6 80 51 	A1 = A1 >> 0x10;
 1010034:	0b c4 3f 80 	A0 += A1;
 1010038:	8b c0 00 38 	R0 = A0 (FU);
 101003c:	10 00       	RTS;
	...

Disassembly of section .data:

00000000 <_att_server_handler>:
   0:	dc 29       	JUMP.S 0xfffff3b8 <_text_end+0xfefef378>;
   2:	00 01       	ILLEGAL;

00000004 <_att_client_handler>:
   4:	dc 29       	JUMP.S 0xfffff3bc <_text_end+0xfefef37c>;
   6:	00 01       	ILLEGAL;

00000008 <_att_ir_le_device_db_index>:
   8:	ff ff       	ILLEGAL;
   a:	ff ff       	ILLEGAL;

0000000c <_test_buf>:
   c:	04 61       	R4 = 0x20 (X);		/*		R4=0x20( 32) */
   e:	62 63       	R2 = -0x14 (X);		/*		R2=0xffffffec(-20) */
  10:	64 00       	CALL (P4);
	...

0000002c <_att_client_start_handle>:
  2c:	01 00       	ILLEGAL;
	...

00000030 <_sm_io_capabilities>:
  30:	03 00       	ILLEGAL;
	...

00000034 <_ble_resource>:
  34:	1a 00       	ILLEGAL;
  36:	00 00       	NOP;
  38:	1a 00       	ILLEGAL;
  3a:	00 00       	NOP;
  3c:	01 00       	ILLEGAL;
  3e:	00 00       	NOP;
  40:	1b 00       	ILLEGAL;
  42:	00 00       	NOP;
  44:	1b 00       	ILLEGAL;
  46:	00 00       	NOP;
  48:	01 00       	ILLEGAL;
	...

0000004c <_device_ble>:
  4c:	9c d4       	ILLEGAL;
  4e:	00 01       	ILLEGAL;
  50:	02 00       	ILLEGAL;
  52:	00 00       	NOP;
  54:	34 00       	CLI R4;
	...

00000064 <_bt16_devices>:
  64:	4c 00       	ILLEGAL;
	...

Disassembly of section .bss:

00000068 <_intr_stack-0x800>:
	...

00000868 <_intr_stack>:
	...

00001068 <_bredr_base_addr>:
	...

00001868 <_hci_thread>:
	...

00001878 <_mem_pool>:
	...

00001e78 <_ll>:
	...

00001e98 <_att_read_callback>:
    1e98:	00 00       	NOP;
	...

00001e9c <_att_write_callback>:
    1e9c:	00 00       	NOP;
	...

00001ea0 <_att_prepare_write_error_code>:
	...

00001ea2 <_att_prepare_write_error_handle>:
	...

00001ea4 <_att_db>:
    1ea4:	00 00       	NOP;
	...

00001ea8 <_att_handle_value_indication_handle>:
    1ea8:	00 00       	NOP;
	...

00001eac <_att_connection>:
	...

00001eb8 <_att_handle_value_indication_timer>:
	...

00001ec8 <_att_client_packet_handler>:
    1ec8:	00 00       	NOP;
	...

00001ecc <_att_server_state>:
    1ecc:	00 00       	NOP;
	...

00001ed0 <_att_request_size>:
	...

00001ed2 <_att_request_buffer>:
	...

00001f08 <_att_ir_lookup_active>:
    1f08:	00 00       	NOP;
	...

00001f0c <_att_client_addr_type>:
	...

00001f0d <_att_client_address>:
    1f0d:	00 00       	NOP;
    1f0f:	00 00       	NOP;
    1f11:	00 00       	NOP;
	...

00001f14 <_gap_device_name>:
	...

00001f28 <_client_configuration>:
    1f28:	00 00       	NOP;
	...

00001f2c <_client_configuration_handle>:
	...

00001f2e <_gap_appearance>:
	...

00001f30 <_gap_privacy>:
    1f30:	00 00       	NOP;
	...

00001f34 <_gap_reconnection_address>:
    1f34:	00 00       	NOP;
    1f36:	00 00       	NOP;
	...

00001f3a <_handle>:
	...

00001f3c <_hci_connection_pool>:
    1f3c:	00 00       	NOP;
	...

00001f40 <_hci_connection_storage>:
	...

000020c8 <_gatt_client_pool>:
    20c8:	00 00       	NOP;
	...

000020cc <_gatt_client_storage>:
	...

000021a4 <_gatt_subclient_pool>:
    21a4:	00 00       	NOP;
	...

000021a8 <_gatt_subclient_storage>:
	...

000021c8 <_gatt_client_connections>:
    21c8:	00 00       	NOP;
	...

000021cc <_gatt_subclients>:
    21cc:	00 00       	NOP;
	...

000021d0 <_gatt_client_id>:
    21d0:	00 00       	NOP;
	...

000021d4 <_h4>:
	...

000021e8 <_hci_stack>:
    21e8:	00 00       	NOP;
	...

000021ec <_disable_l2cap_timeouts>:
    21ec:	00 00       	NOP;
	...

000021f0 <_hci_stack_static>:
	...

0000238c <_attribute_protocol_packet_handler>:
    238c:	00 00       	NOP;
	...

00002390 <_security_protocol_packet_handler>:
    2390:	00 00       	NOP;
	...

00002394 <_packet_handler>:
    2394:	00 00       	NOP;
	...

00002398 <_le_devices>:
	...

000024c8 <_the_setup>:
	...

000025f8 <_sm_client_packet_handler>:
    25f8:	00 00       	NOP;
	...

000025fc <_sm_authenticate_outgoing_connections>:
	...

000025fd <_sm_accepted_stk_generation_methods>:
	...

000025fe <_sm_max_encryption_key_size>:
	...

000025ff <_sm_min_encryption_key_size>:
	...

00002600 <_sm_cmac_state>:
    2600:	00 00       	NOP;
	...

00002604 <_dkg_state>:
    2604:	00 00       	NOP;
	...

00002608 <_rau_state>:
    2608:	00 00       	NOP;
	...

0000260c <_sm_aes128_state>:
    260c:	00 00       	NOP;
	...

00002610 <_sm_central_device_test>:
    2610:	00 00       	NOP;
	...

00002614 <_sm_central_ah_calculation_active>:
    2614:	00 00       	NOP;
	...

00002618 <_gap_random_adress_update_period>:
    2618:	00 00       	NOP;
	...

0000261c <_sm_active_connection>:
	...

0000261e <_sm_persistent_irk_ready>:
	...

0000261f <_sm_slave_request_security>:
	...

00002620 <_sm_central_device_address>:
	...

00002628 <_sm_central_device_matched>:
    2628:	00 00       	NOP;
	...

0000262c <_sm_csrk_connection_source>:
    262c:	00 00       	NOP;
	...

00002630 <_sm_central_device_addr_type>:
	...

00002631 <_sm_persistent_irk>:
	...

00002641 <_sm_persistent_dhk>:
	...

00002651 <_sm_random_address>:
    2651:	00 00       	NOP;
    2653:	00 00       	NOP;
    2655:	00 00       	NOP;
	...

00002658 <_sm_aes128_connection_source>:
    2658:	00 00       	NOP;
	...

0000265c <_sm_cmac_k>:
	...

0000266c <_sm_cmac_message_len>:
	...

0000266e <_sm_cmac_m_last>:
	...

0000267e <_sm_cmac_block_current>:
	...

0000267f <_sm_cmac_block_count>:
	...

00002680 <_sm_cmac_x>:
	...

00002690 <_sm_cmac_done_handler>:
    2690:	00 00       	NOP;
	...

00002694 <_sm_cmac_message>:
    2694:	00 00       	NOP;
	...

00002698 <_sm_random_connection_source>:
    2698:	00 00       	NOP;
	...

0000269c <_sm_persistent_ir>:
	...

000026ac <_sm_persistent_er>:
	...

000026bc <_sm_get_oob_data>:
    26bc:	00 00       	NOP;
	...

000026c0 <_sm_auth_req>:
	...

000026c1 <_sm_cmac_sign_counter>:
    26c1:	00 00       	NOP;
    26c3:	00 00       	NOP;
    26c5:	00 00       	NOP;
	...

000026c8 <_link_key_type_to_str_buffer>:
	...

000026ca <_link_key_to_str_buffer>:
	...

000026eb <_bd_addr_to_str_buffer>:
	...

000026fd <_uuid128_to_str_buffer>:
	...

00002724 <_event_cnt>:
    2724:	00 00       	NOP;
	...

00002728 <_ble_base>:
	...

00003c18 <_thread_fun>:
	...

00003c28 <_malloc_buf>:
	...

00004428 <_pwr_set.1360>:
	...

00004429 <_agc_set.1331>:
    4429:	00 00       	NOP;
	...

0000442c <_cnt1.1292>:
    442c:	00 00       	NOP;
	...

00004430 <_head>:
	...

00004438 <_decs>:
	...

000044d8 <_dec.1352>:
    44d8:	00 00       	NOP;
	...

000044dc <_dec.1345>:
    44dc:	00 00       	NOP;
	...

000044e0 <_platform_bus>:
	...

000044f0 <_timer_head>:
	...

000044f8 <_os_create>:
    44f8:	00 00       	NOP;
	...

000044fc <_os_delete>:
    44fc:	00 00       	NOP;
	...

00004500 <_thread_head>:
	...

00004520 <_hci_event_buf>:
    4520:	00 00       	NOP;
	...

00004524 <_le_param>:
	...

000045b4 <_hci_cmd_ptr>:
    45b4:	00 00       	NOP;
	...

000045b8 <_hci_rx_buf>:
    45b8:	00 00       	NOP;
	...

000045bc <_bt_pll_cap0>:
	...

000045bd <_bt_pll_cap3>:
	...

000045be <_bt_pll_cap1>:
	...

000045bf <_bt_pll_cap2>:
	...

000045c0 <_offset_cnt>:
	...

000045c2 <_fsk_offset_dly>:
	...

000045c4 <_g_rand_seed>:
    45c4:	00 00       	NOP;
	...

000045c8 <_jiffies>:
    45c8:	00 00       	NOP;
	...

Disassembly of section .comment:

00000000 <.comment>:
   0:	47 43       	R7 = R0.B (Z);
   2:	43 3a       	ILLEGAL;
   4:	20 28       	JUMP.S 0xfffff044 <_text_end+0xfefef004>;
   6:	4c 43       	R4 = R1.B (Z);
   8:	59 29       	JUMP.S 0xfffff2ba <_text_end+0xfefef27a>;
   a:	20 34       	M0 = R0;
   c:	2e 35       	ILLEGAL;
   e:	2e 33       	P5 = ASTAT;
	...

Disassembly of section .debug_abbrev:

00000000 <.debug_abbrev>:
   0:	01 11       	IF !CC JUMP 0x202 <bss_begin+0x19a>;
   2:	01 25       	JUMP.S 0xa04 <_intr_stack+0x19c>;
   4:	0e 13       	IF !CC JUMP 0xfffffe20 <_text_end+0xfefefde0>;
   6:	0b 03       	CC = ASTAT[11 /* unused bit */];
   8:	0e 1b       	IF CC JUMP 0xfffffe24 <_text_end+0xfefefde4>;
   a:	0e 11       	IF !CC JUMP 0x226 <bss_begin+0x1be>;
   c:	01 12       	IF !CC JUMP 0xfffffc0e <_text_end+0xfefefbce>;
   e:	01 10       	IF !CC JUMP 0x10 <_test_buf+0x4>;
  10:	06 00       	ILLEGAL;
  12:	00 02       	R0 = CC;
  14:	24 00       	SSYNC;
  16:	0b 0b       	ILLEGAL;
  18:	3e 0b       	ILLEGAL;
  1a:	03 0e       	CC = R3 <= 0x0 (IU);
  1c:	00 00       	NOP;
  1e:	03 24       	JUMP.S 0x824 <bss_begin+0x7bc>;
  20:	00 0b       	CC = A0 < A1;
  22:	0b 3e       	SEQSTAT = R3;
  24:	0b 03       	CC = ASTAT[11 /* unused bit */];
  26:	08 00       	ILLEGAL;
  28:	00 04       	ILLEGAL;
  2a:	0f 00       	ILLEGAL;
  2c:	0b 0b       	ILLEGAL;
  2e:	49 13       	IF !CC JUMP 0xfffffec0 <_text_end+0xfefefe80>;
  30:	00 00       	NOP;
  32:	05 04       	ILLEGAL;
  34:	01 0b       	ILLEGAL;
  36:	0b 3a       	ILLEGAL;
  38:	0b 3b       	ILLEGAL;
  3a:	0b 01       	ILLEGAL;
  3c:	13 00       	RTN;
  3e:	00 06       	IF !CC R0 = R0;
  40:	28 00       	ILLEGAL;
  42:	03 0e       	CC = R3 <= 0x0 (IU);
  44:	1c 0d       	CC = R4 <= 0x3;
  46:	00 00       	NOP;
  48:	07 01       	ILLEGAL;
  4a:	01 49       	CC = BITTST (R1, 0x0);		/* bit  0 */
  4c:	13 01       	I3 = [SP++];
  4e:	13 00       	RTN;
  50:	00 08       	CC = R0 == R0;
  52:	21 00       	ILLEGAL;
  54:	49 13       	IF !CC JUMP 0xfffffee6 <_text_end+0xfefefea6>;
  56:	2f 0b       	ILLEGAL;
  58:	00 00       	NOP;
  5a:	09 16       	IF !CC JUMP 0xfffffc6c <_text_end+0xfefefc2c> (BP);
  5c:	00 03       	CC = AZ;
  5e:	0e 3a       	ILLEGAL;
  60:	0b 3b       	ILLEGAL;
  62:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
  64:	13 00       	RTN;
  66:	00 0a       	CC = R0 <= R0 (IU);
  68:	2e 01       	ILLEGAL;
  6a:	3f 0c       	CC = R7 == -0x1;
  6c:	03 0e       	CC = R3 <= 0x0 (IU);
  6e:	3a 0b       	ILLEGAL;
  70:	3b 0b       	ILLEGAL;
  72:	27 0c       	CC = R7 == -0x4;
  74:	49 13       	IF !CC JUMP 0xffffff06 <_text_end+0xfefefec6>;
  76:	11 01       	I1 = [SP++];
  78:	12 01       	I2 = [SP++];
  7a:	40 06       	IF !CC R0 = P0;
  7c:	01 13       	IF !CC JUMP 0xfffffe7e <_text_end+0xfefefe3e>;
  7e:	00 00       	NOP;
  80:	0b 05       	ILLEGAL;
  82:	00 03       	CC = AZ;
  84:	0e 3a       	ILLEGAL;
  86:	0b 3b       	ILLEGAL;
  88:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
  8a:	13 02       	ILLEGAL;
  8c:	06 00       	ILLEGAL;
  8e:	00 0c       	CC = R0 == 0x0;
  90:	05 00       	ILLEGAL;
  92:	03 08       	CC = R3 == R0;
  94:	3a 0b       	ILLEGAL;
  96:	3b 0b       	ILLEGAL;
  98:	49 13       	IF !CC JUMP 0xffffff2a <_text_end+0xfefefeea>;
  9a:	02 0a       	CC = R2 <= R0 (IU);
  9c:	00 00       	NOP;
  9e:	0d 05       	ILLEGAL;
  a0:	00 03       	CC = AZ;
  a2:	0e 3a       	ILLEGAL;
  a4:	0b 3b       	ILLEGAL;
  a6:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
  a8:	13 02       	ILLEGAL;
  aa:	0a 00       	ILLEGAL;
  ac:	00 0e       	CC = R0 <= 0x0 (IU);
  ae:	34 00       	CLI R4;
  b0:	03 08       	CC = R3 == R0;
  b2:	3a 0b       	ILLEGAL;
  b4:	3b 0b       	ILLEGAL;
  b6:	49 13       	IF !CC JUMP 0xffffff48 <_text_end+0xfefeff08>;
  b8:	02 0a       	CC = R2 <= R0 (IU);
  ba:	00 00       	NOP;
  bc:	0f 34       	I1 = R7;
  be:	00 03       	CC = AZ;
  c0:	0e 3a       	ILLEGAL;
  c2:	0b 3b       	ILLEGAL;
  c4:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
  c6:	13 02       	ILLEGAL;
  c8:	0a 00       	ILLEGAL;
  ca:	00 10       	IF !CC JUMP 0xca <bss_begin+0x62>;
  cc:	34 00       	CLI R4;
  ce:	03 08       	CC = R3 == R0;
  d0:	3a 0b       	ILLEGAL;
  d2:	3b 0b       	ILLEGAL;
  d4:	49 13       	IF !CC JUMP 0xffffff66 <_text_end+0xfefeff26>;
  d6:	02 06       	IF !CC R0 = R2;
  d8:	00 00       	NOP;
  da:	11 34       	I2 = R1;
  dc:	00 03       	CC = AZ;
  de:	08 3a       	ILLEGAL;
  e0:	0b 3b       	ILLEGAL;
  e2:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
  e4:	13 00       	RTN;
  e6:	00 12       	IF !CC JUMP 0xfffffce6 <_text_end+0xfefefca6>;
  e8:	34 00       	CLI R4;
  ea:	03 08       	CC = R3 == R0;
  ec:	3a 0b       	ILLEGAL;
  ee:	3b 0b       	ILLEGAL;
  f0:	49 13       	IF !CC JUMP 0xffffff82 <_text_end+0xfefeff42>;
  f2:	1c 0b       	ILLEGAL;
  f4:	00 00       	NOP;
  f6:	13 34       	I2 = R3;
  f8:	00 03       	CC = AZ;
  fa:	0e 3a       	ILLEGAL;
  fc:	0b 3b       	ILLEGAL;
  fe:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 100:	13 02       	ILLEGAL;
 102:	06 00       	ILLEGAL;
 104:	00 14       	IF !CC JUMP 0x104 <bss_begin+0x9c> (BP);
 106:	34 00       	CLI R4;
 108:	03 0e       	CC = R3 <= 0x0 (IU);
 10a:	3a 0b       	ILLEGAL;
 10c:	3b 0b       	ILLEGAL;
 10e:	49 13       	IF !CC JUMP 0xffffffa0 <_text_end+0xfefeff60>;
 110:	1c 0b       	ILLEGAL;
 112:	00 00       	NOP;
 114:	15 0a       	CC = R5 <= R2 (IU);
 116:	00 03       	CC = AZ;
 118:	0e 3a       	ILLEGAL;
 11a:	0b 3b       	ILLEGAL;
 11c:	0b 11       	IF !CC JUMP 0x332 <bss_begin+0x2ca>;
 11e:	01 00       	ILLEGAL;
 120:	00 16       	IF !CC JUMP 0xfffffd20 <_text_end+0xfefefce0> (BP);
 122:	26 00       	ILLEGAL;
 124:	49 13       	IF !CC JUMP 0xffffffb6 <_text_end+0xfefeff76>;
 126:	00 00       	NOP;
 128:	00 01       	ILLEGAL;
 12a:	11 01       	I1 = [SP++];
 12c:	25 0e       	CC = R5 <= 0x4 (IU);
 12e:	13 0b       	ILLEGAL;
 130:	03 0e       	CC = R3 <= 0x0 (IU);
 132:	1b 0e       	CC = R3 <= 0x3 (IU);
 134:	11 01       	I1 = [SP++];
 136:	12 01       	I2 = [SP++];
 138:	10 06       	IF !CC R2 = R0;
 13a:	00 00       	NOP;
 13c:	02 24       	JUMP.S 0x940 <_intr_stack+0xd8>;
 13e:	00 0b       	CC = A0 < A1;
 140:	0b 3e       	SEQSTAT = R3;
 142:	0b 03       	CC = ASTAT[11 /* unused bit */];
 144:	0e 00       	ILLEGAL;
 146:	00 03       	CC = AZ;
 148:	24 00       	SSYNC;
 14a:	0b 0b       	ILLEGAL;
 14c:	3e 0b       	ILLEGAL;
 14e:	03 08       	CC = R3 == R0;
 150:	00 00       	NOP;
 152:	04 0f       	ILLEGAL;
 154:	00 0b       	CC = A0 < A1;
 156:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 158:	13 00       	RTN;
 15a:	00 05       	(R7:0) = [SP++];
 15c:	04 01       	ILLEGAL;
 15e:	0b 0b       	ILLEGAL;
 160:	3a 0b       	ILLEGAL;
 162:	3b 0b       	ILLEGAL;
 164:	01 13       	IF !CC JUMP 0xffffff66 <_text_end+0xfefeff26>;
 166:	00 00       	NOP;
 168:	06 28       	JUMP.S 0xfffff174 <_text_end+0xfefef134>;
 16a:	00 03       	CC = AZ;
 16c:	0e 1c       	IF CC JUMP 0x188 <bss_begin+0x120> (BP);
 16e:	0d 00       	ILLEGAL;
 170:	00 07       	IF CC R0 = R0;
 172:	2e 01       	ILLEGAL;
 174:	3f 0c       	CC = R7 == -0x1;
 176:	03 0e       	CC = R3 <= 0x0 (IU);
 178:	3a 0b       	ILLEGAL;
 17a:	3b 0b       	ILLEGAL;
 17c:	27 0c       	CC = R7 == -0x4;
 17e:	49 13       	IF !CC JUMP 0x10 <_test_buf+0x4>;
 180:	11 01       	I1 = [SP++];
 182:	12 01       	I2 = [SP++];
 184:	40 06       	IF !CC R0 = P0;
 186:	01 13       	IF !CC JUMP 0xffffff88 <_text_end+0xfefeff48>;
 188:	00 00       	NOP;
 18a:	08 05       	(R7:1) = [SP++];
 18c:	00 03       	CC = AZ;
 18e:	08 3a       	ILLEGAL;
 190:	0b 3b       	ILLEGAL;
 192:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 194:	13 02       	ILLEGAL;
 196:	06 00       	ILLEGAL;
 198:	00 09       	CC = R0 <= R0;
 19a:	05 00       	ILLEGAL;
 19c:	03 0e       	CC = R3 <= 0x0 (IU);
 19e:	3a 0b       	ILLEGAL;
 1a0:	3b 0b       	ILLEGAL;
 1a2:	49 13       	IF !CC JUMP 0x34 <_ble_resource>;
 1a4:	02 06       	IF !CC R0 = R2;
 1a6:	00 00       	NOP;
 1a8:	0a 05       	ILLEGAL;
 1aa:	00 03       	CC = AZ;
 1ac:	0e 3a       	ILLEGAL;
 1ae:	0b 3b       	ILLEGAL;
 1b0:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 1b2:	13 02       	ILLEGAL;
 1b4:	0a 00       	ILLEGAL;
 1b6:	00 0b       	CC = A0 < A1;
 1b8:	34 00       	CLI R4;
 1ba:	03 0e       	CC = R3 <= 0x0 (IU);
 1bc:	3a 0b       	ILLEGAL;
 1be:	3b 0b       	ILLEGAL;
 1c0:	49 13       	IF !CC JUMP 0x52 <_device_ble+0x6>;
 1c2:	00 00       	NOP;
 1c4:	0c 2e       	JUMP.S 0xfffffddc <_text_end+0xfefefd9c>;
 1c6:	01 3f       	USP = A0.W;
 1c8:	0c 03       	CC = AC0;
 1ca:	0e 3a       	ILLEGAL;
 1cc:	0b 3b       	ILLEGAL;
 1ce:	0b 27       	JUMP.S 0xfe4 <_intr_stack+0x77c>;
 1d0:	0c 49       	CC = BITTST (R4, 0x1);		/* bit  1 */
 1d2:	13 11       	IF !CC JUMP 0x3f8 <bss_begin+0x390>;
 1d4:	01 12       	IF !CC JUMP 0xfffffdd6 <_text_end+0xfefefd96>;
 1d6:	01 40       	R1 >>>= R0;
 1d8:	0a 01       	ILLEGAL;
 1da:	13 00       	RTN;
 1dc:	00 0d       	CC = R0 <= 0x0;
 1de:	34 00       	CLI R4;
 1e0:	03 08       	CC = R3 == R0;
 1e2:	3a 0b       	ILLEGAL;
 1e4:	3b 0b       	ILLEGAL;
 1e6:	49 13       	IF !CC JUMP 0x78 <bss_begin+0x10>;
 1e8:	02 06       	IF !CC R0 = R2;
 1ea:	00 00       	NOP;
 1ec:	0e 34       	I1 = R6;
 1ee:	00 03       	CC = AZ;
 1f0:	0e 3a       	ILLEGAL;
 1f2:	0b 3b       	ILLEGAL;
 1f4:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 1f6:	13 02       	ILLEGAL;
 1f8:	06 00       	ILLEGAL;
 1fa:	00 0f       	ILLEGAL;
 1fc:	34 00       	CLI R4;
 1fe:	03 08       	CC = R3 == R0;
 200:	3a 0b       	ILLEGAL;
 202:	3b 0b       	ILLEGAL;
 204:	49 13       	IF !CC JUMP 0x96 <bss_begin+0x2e>;
 206:	00 00       	NOP;
 208:	10 26       	JUMP.S 0xe28 <_intr_stack+0x5c0>;
 20a:	00 49       	CC = BITTST (R0, 0x0);		/* bit  0 */
 20c:	13 00       	RTN;
 20e:	00 11       	IF !CC JUMP 0x40e <bss_begin+0x3a6>;
 210:	2e 01       	ILLEGAL;
 212:	3f 0c       	CC = R7 == -0x1;
 214:	03 0e       	CC = R3 <= 0x0 (IU);
 216:	3a 0b       	ILLEGAL;
 218:	3b 0b       	ILLEGAL;
 21a:	27 0c       	CC = R7 == -0x4;
 21c:	49 13       	IF !CC JUMP 0xae <bss_begin+0x46>;
 21e:	11 01       	I1 = [SP++];
 220:	12 01       	I2 = [SP++];
 222:	40 06       	IF !CC R0 = P0;
 224:	00 00       	NOP;
 226:	00 01       	ILLEGAL;
 228:	11 01       	I1 = [SP++];
 22a:	25 0e       	CC = R5 <= 0x4 (IU);
 22c:	13 0b       	ILLEGAL;
 22e:	03 0e       	CC = R3 <= 0x0 (IU);
 230:	11 01       	I1 = [SP++];
 232:	12 01       	I2 = [SP++];
 234:	10 06       	IF !CC R2 = R0;
 236:	00 00       	NOP;
 238:	02 24       	JUMP.S 0xa3c <_intr_stack+0x1d4>;
 23a:	00 0b       	CC = A0 < A1;
 23c:	0b 3e       	SEQSTAT = R3;
 23e:	0b 03       	CC = ASTAT[11 /* unused bit */];
 240:	0e 00       	ILLEGAL;
 242:	00 03       	CC = AZ;
 244:	24 00       	SSYNC;
 246:	0b 0b       	ILLEGAL;
 248:	3e 0b       	ILLEGAL;
 24a:	03 08       	CC = R3 == R0;
 24c:	00 00       	NOP;
 24e:	04 0f       	ILLEGAL;
 250:	00 0b       	CC = A0 < A1;
 252:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 254:	13 00       	RTN;
 256:	00 05       	(R7:0) = [SP++];
 258:	16 00       	ILLEGAL;
 25a:	03 0e       	CC = R3 <= 0x0 (IU);
 25c:	3a 0b       	ILLEGAL;
 25e:	3b 0b       	ILLEGAL;
 260:	49 13       	IF !CC JUMP 0xf2 <bss_begin+0x8a>;
 262:	00 00       	NOP;
 264:	06 2e       	JUMP.S 0xfffffe70 <_text_end+0xfefefe30>;
 266:	01 3f       	USP = A0.W;
 268:	0c 03       	CC = AC0;
 26a:	0e 3a       	ILLEGAL;
 26c:	0b 3b       	ILLEGAL;
 26e:	0b 27       	JUMP.S 0x1084 <_bredr_base_addr+0x1c>;
 270:	0c 49       	CC = BITTST (R4, 0x1);		/* bit  1 */
 272:	13 11       	IF !CC JUMP 0x498 <bss_begin+0x430>;
 274:	01 12       	IF !CC JUMP 0xfffffe76 <_text_end+0xfefefe36>;
 276:	01 40       	R1 >>>= R0;
 278:	06 01       	ILLEGAL;
 27a:	13 00       	RTN;
 27c:	00 07       	IF CC R0 = R0;
 27e:	05 00       	ILLEGAL;
 280:	03 08       	CC = R3 == R0;
 282:	3a 0b       	ILLEGAL;
 284:	3b 0b       	ILLEGAL;
 286:	49 13       	IF !CC JUMP 0x118 <bss_begin+0xb0>;
 288:	02 06       	IF !CC R0 = R2;
 28a:	00 00       	NOP;
 28c:	08 34       	I1 = R0;
 28e:	00 03       	CC = AZ;
 290:	08 3a       	ILLEGAL;
 292:	0b 3b       	ILLEGAL;
 294:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 296:	13 02       	ILLEGAL;
 298:	06 00       	ILLEGAL;
 29a:	00 09       	CC = R0 <= R0;
 29c:	26 00       	ILLEGAL;
 29e:	00 00       	NOP;
 2a0:	00 01       	ILLEGAL;
 2a2:	11 01       	I1 = [SP++];
 2a4:	25 0e       	CC = R5 <= 0x4 (IU);
 2a6:	13 0b       	ILLEGAL;
 2a8:	03 0e       	CC = R3 <= 0x0 (IU);
 2aa:	11 01       	I1 = [SP++];
 2ac:	12 01       	I2 = [SP++];
 2ae:	10 06       	IF !CC R2 = R0;
 2b0:	00 00       	NOP;
 2b2:	02 24       	JUMP.S 0xab6 <_intr_stack+0x24e>;
 2b4:	00 0b       	CC = A0 < A1;
 2b6:	0b 3e       	SEQSTAT = R3;
 2b8:	0b 03       	CC = ASTAT[11 /* unused bit */];
 2ba:	0e 00       	ILLEGAL;
 2bc:	00 03       	CC = AZ;
 2be:	24 00       	SSYNC;
 2c0:	0b 0b       	ILLEGAL;
 2c2:	3e 0b       	ILLEGAL;
 2c4:	03 08       	CC = R3 == R0;
 2c6:	00 00       	NOP;
 2c8:	04 0f       	ILLEGAL;
 2ca:	00 0b       	CC = A0 < A1;
 2cc:	0b 00       	ILLEGAL;
 2ce:	00 05       	(R7:0) = [SP++];
 2d0:	0f 00       	ILLEGAL;
 2d2:	0b 0b       	ILLEGAL;
 2d4:	49 13       	IF !CC JUMP 0x166 <bss_begin+0xfe>;
 2d6:	00 00       	NOP;
 2d8:	06 26       	JUMP.S 0xee4 <_intr_stack+0x67c>;
 2da:	00 49       	CC = BITTST (R0, 0x0);		/* bit  0 */
 2dc:	13 00       	RTN;
 2de:	00 07       	IF CC R0 = R0;
 2e0:	16 00       	ILLEGAL;
 2e2:	03 0e       	CC = R3 <= 0x0 (IU);
 2e4:	3a 0b       	ILLEGAL;
 2e6:	3b 0b       	ILLEGAL;
 2e8:	49 13       	IF !CC JUMP 0x17a <bss_begin+0x112>;
 2ea:	00 00       	NOP;
 2ec:	08 2e       	JUMP.S 0xfffffefc <_text_end+0xfefefebc>;
 2ee:	01 3f       	USP = A0.W;
 2f0:	0c 03       	CC = AC0;
 2f2:	0e 3a       	ILLEGAL;
 2f4:	0b 3b       	ILLEGAL;
 2f6:	0b 27       	JUMP.S 0x110c <_bredr_base_addr+0xa4>;
 2f8:	0c 49       	CC = BITTST (R4, 0x1);		/* bit  1 */
 2fa:	13 11       	IF !CC JUMP 0x520 <bss_begin+0x4b8>;
 2fc:	01 12       	IF !CC JUMP 0xfffffefe <_text_end+0xfefefebe>;
 2fe:	01 40       	R1 >>>= R0;
 300:	06 01       	ILLEGAL;
 302:	13 00       	RTN;
 304:	00 09       	CC = R0 <= R0;
 306:	05 00       	ILLEGAL;
 308:	03 0e       	CC = R3 <= 0x0 (IU);
 30a:	3a 0b       	ILLEGAL;
 30c:	3b 0b       	ILLEGAL;
 30e:	49 13       	IF !CC JUMP 0x1a0 <bss_begin+0x138>;
 310:	02 0a       	CC = R2 <= R0 (IU);
 312:	00 00       	NOP;
 314:	0a 05       	ILLEGAL;
 316:	00 03       	CC = AZ;
 318:	0e 3a       	ILLEGAL;
 31a:	0b 3b       	ILLEGAL;
 31c:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 31e:	13 02       	ILLEGAL;
 320:	06 00       	ILLEGAL;
 322:	00 0b       	CC = A0 < A1;
 324:	34 00       	CLI R4;
 326:	03 08       	CC = R3 == R0;
 328:	3a 0b       	ILLEGAL;
 32a:	3b 0b       	ILLEGAL;
 32c:	49 13       	IF !CC JUMP 0x1be <bss_begin+0x156>;
 32e:	02 06       	IF !CC R0 = R2;
 330:	00 00       	NOP;
 332:	0c 34       	I1 = R4;
 334:	00 03       	CC = AZ;
 336:	0e 3a       	ILLEGAL;
 338:	0b 3b       	ILLEGAL;
 33a:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 33c:	13 02       	ILLEGAL;
 33e:	06 00       	ILLEGAL;
 340:	00 0d       	CC = R0 <= 0x0;
 342:	26 00       	ILLEGAL;
 344:	00 00       	NOP;
 346:	00 01       	ILLEGAL;
 348:	11 01       	I1 = [SP++];
 34a:	25 0e       	CC = R5 <= 0x4 (IU);
 34c:	13 0b       	ILLEGAL;
 34e:	03 0e       	CC = R3 <= 0x0 (IU);
 350:	11 01       	I1 = [SP++];
 352:	12 01       	I2 = [SP++];
 354:	10 06       	IF !CC R2 = R0;
 356:	00 00       	NOP;
 358:	02 24       	JUMP.S 0xb5c <_intr_stack+0x2f4>;
 35a:	00 0b       	CC = A0 < A1;
 35c:	0b 3e       	SEQSTAT = R3;
 35e:	0b 03       	CC = ASTAT[11 /* unused bit */];
 360:	0e 00       	ILLEGAL;
 362:	00 03       	CC = AZ;
 364:	24 00       	SSYNC;
 366:	0b 0b       	ILLEGAL;
 368:	3e 0b       	ILLEGAL;
 36a:	03 08       	CC = R3 == R0;
 36c:	00 00       	NOP;
 36e:	04 0f       	ILLEGAL;
 370:	00 0b       	CC = A0 < A1;
 372:	0b 00       	ILLEGAL;
 374:	00 05       	(R7:0) = [SP++];
 376:	0f 00       	ILLEGAL;
 378:	0b 0b       	ILLEGAL;
 37a:	49 13       	IF !CC JUMP 0x20c <bss_begin+0x1a4>;
 37c:	00 00       	NOP;
 37e:	06 16       	IF !CC JUMP 0xffffff8a <_text_end+0xfefeff4a> (BP);
 380:	00 03       	CC = AZ;
 382:	0e 3a       	ILLEGAL;
 384:	0b 3b       	ILLEGAL;
 386:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 388:	13 00       	RTN;
 38a:	00 07       	IF CC R0 = R0;
 38c:	2e 01       	ILLEGAL;
 38e:	3f 0c       	CC = R7 == -0x1;
 390:	03 0e       	CC = R3 <= 0x0 (IU);
 392:	3a 0b       	ILLEGAL;
 394:	3b 0b       	ILLEGAL;
 396:	27 0c       	CC = R7 == -0x4;
 398:	49 13       	IF !CC JUMP 0x22a <bss_begin+0x1c2>;
 39a:	11 01       	I1 = [SP++];
 39c:	12 01       	I2 = [SP++];
 39e:	40 06       	IF !CC R0 = P0;
 3a0:	01 13       	IF !CC JUMP 0x1a2 <bss_begin+0x13a>;
 3a2:	00 00       	NOP;
 3a4:	08 05       	(R7:1) = [SP++];
 3a6:	00 03       	CC = AZ;
 3a8:	08 3a       	ILLEGAL;
 3aa:	0b 3b       	ILLEGAL;
 3ac:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 3ae:	13 02       	ILLEGAL;
 3b0:	0a 00       	ILLEGAL;
 3b2:	00 09       	CC = R0 <= R0;
 3b4:	05 00       	ILLEGAL;
 3b6:	03 08       	CC = R3 == R0;
 3b8:	3a 0b       	ILLEGAL;
 3ba:	3b 0b       	ILLEGAL;
 3bc:	49 13       	IF !CC JUMP 0x24e <bss_begin+0x1e6>;
 3be:	02 06       	IF !CC R0 = R2;
 3c0:	00 00       	NOP;
 3c2:	0a 34       	I1 = R2;
 3c4:	00 03       	CC = AZ;
 3c6:	08 3a       	ILLEGAL;
 3c8:	0b 3b       	ILLEGAL;
 3ca:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 3cc:	13 02       	ILLEGAL;
 3ce:	06 00       	ILLEGAL;
 3d0:	00 0b       	CC = A0 < A1;
 3d2:	34 00       	CLI R4;
 3d4:	03 0e       	CC = R3 <= 0x0 (IU);
 3d6:	3a 0b       	ILLEGAL;
 3d8:	3b 0b       	ILLEGAL;
 3da:	49 13       	IF !CC JUMP 0x26c <bss_begin+0x204>;
 3dc:	02 06       	IF !CC R0 = R2;
 3de:	00 00       	NOP;
 3e0:	0c 34       	I1 = R4;
 3e2:	00 03       	CC = AZ;
 3e4:	08 3a       	ILLEGAL;
 3e6:	0b 3b       	ILLEGAL;
 3e8:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 3ea:	13 02       	ILLEGAL;
 3ec:	0a 00       	ILLEGAL;
 3ee:	00 00       	NOP;
 3f0:	01 11       	IF !CC JUMP 0x5f2 <bss_begin+0x58a>;
 3f2:	01 25       	JUMP.S 0xdf4 <_intr_stack+0x58c>;
 3f4:	0e 13       	IF !CC JUMP 0x210 <bss_begin+0x1a8>;
 3f6:	0b 03       	CC = ASTAT[11 /* unused bit */];
 3f8:	0e 11       	IF !CC JUMP 0x614 <bss_begin+0x5ac>;
 3fa:	01 12       	IF !CC JUMP 0xfffffffc <_text_end+0xfefeffbc>;
 3fc:	01 10       	IF !CC JUMP 0x3fe <bss_begin+0x396>;
 3fe:	06 00       	ILLEGAL;
 400:	00 02       	R0 = CC;
 402:	24 00       	SSYNC;
 404:	0b 0b       	ILLEGAL;
 406:	3e 0b       	ILLEGAL;
 408:	03 0e       	CC = R3 <= 0x0 (IU);
 40a:	00 00       	NOP;
 40c:	03 24       	JUMP.S 0xc12 <_intr_stack+0x3aa>;
 40e:	00 0b       	CC = A0 < A1;
 410:	0b 3e       	SEQSTAT = R3;
 412:	0b 03       	CC = ASTAT[11 /* unused bit */];
 414:	08 00       	ILLEGAL;
 416:	00 04       	ILLEGAL;
 418:	0f 00       	ILLEGAL;
 41a:	0b 0b       	ILLEGAL;
 41c:	49 13       	IF !CC JUMP 0x2ae <bss_begin+0x246>;
 41e:	00 00       	NOP;
 420:	05 26       	JUMP.S 0x102a <_intr_stack+0x7c2>;
 422:	00 49       	CC = BITTST (R0, 0x0);		/* bit  0 */
 424:	13 00       	RTN;
 426:	00 06       	IF !CC R0 = R0;
 428:	2e 01       	ILLEGAL;
 42a:	3f 0c       	CC = R7 == -0x1;
 42c:	03 0e       	CC = R3 <= 0x0 (IU);
 42e:	3a 0b       	ILLEGAL;
 430:	3b 0b       	ILLEGAL;
 432:	27 0c       	CC = R7 == -0x4;
 434:	49 13       	IF !CC JUMP 0x2c6 <bss_begin+0x25e>;
 436:	11 01       	I1 = [SP++];
 438:	12 01       	I2 = [SP++];
 43a:	40 06       	IF !CC R0 = P0;
 43c:	01 13       	IF !CC JUMP 0x23e <bss_begin+0x1d6>;
 43e:	00 00       	NOP;
 440:	07 05       	ILLEGAL;
 442:	00 03       	CC = AZ;
 444:	08 3a       	ILLEGAL;
 446:	0b 3b       	ILLEGAL;
 448:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 44a:	13 02       	ILLEGAL;
 44c:	06 00       	ILLEGAL;
 44e:	00 08       	CC = R0 == R0;
 450:	34 00       	CLI R4;
 452:	03 08       	CC = R3 == R0;
 454:	3a 0b       	ILLEGAL;
 456:	3b 0b       	ILLEGAL;
 458:	49 13       	IF !CC JUMP 0x2ea <bss_begin+0x282>;
 45a:	02 06       	IF !CC R0 = R2;
 45c:	00 00       	NOP;
 45e:	00 01       	ILLEGAL;
 460:	11 01       	I1 = [SP++];
 462:	25 0e       	CC = R5 <= 0x4 (IU);
 464:	13 0b       	ILLEGAL;
 466:	03 0e       	CC = R3 <= 0x0 (IU);
 468:	11 01       	I1 = [SP++];
 46a:	12 01       	I2 = [SP++];
 46c:	10 06       	IF !CC R2 = R0;
 46e:	00 00       	NOP;
 470:	02 24       	JUMP.S 0xc74 <_intr_stack+0x40c>;
 472:	00 0b       	CC = A0 < A1;
 474:	0b 3e       	SEQSTAT = R3;
 476:	0b 03       	CC = ASTAT[11 /* unused bit */];
 478:	0e 00       	ILLEGAL;
 47a:	00 03       	CC = AZ;
 47c:	24 00       	SSYNC;
 47e:	0b 0b       	ILLEGAL;
 480:	3e 0b       	ILLEGAL;
 482:	03 08       	CC = R3 == R0;
 484:	00 00       	NOP;
 486:	04 0f       	ILLEGAL;
 488:	00 0b       	CC = A0 < A1;
 48a:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 48c:	13 00       	RTN;
 48e:	00 05       	(R7:0) = [SP++];
 490:	26 00       	ILLEGAL;
 492:	49 13       	IF !CC JUMP 0x324 <bss_begin+0x2bc>;
 494:	00 00       	NOP;
 496:	06 2e       	JUMP.S 0xa2 <bss_begin+0x3a>;
 498:	01 3f       	USP = A0.W;
 49a:	0c 03       	CC = AC0;
 49c:	0e 3a       	ILLEGAL;
 49e:	0b 3b       	ILLEGAL;
 4a0:	0b 27       	JUMP.S 0x12b6 <_bredr_base_addr+0x24e>;
 4a2:	0c 49       	CC = BITTST (R4, 0x1);		/* bit  1 */
 4a4:	13 11       	IF !CC JUMP 0x6ca <bss_begin+0x662>;
 4a6:	01 12       	IF !CC JUMP 0xa8 <bss_begin+0x40>;
 4a8:	01 40       	R1 >>>= R0;
 4aa:	06 01       	ILLEGAL;
 4ac:	13 00       	RTN;
 4ae:	00 07       	IF CC R0 = R0;
 4b0:	05 00       	ILLEGAL;
 4b2:	03 0e       	CC = R3 <= 0x0 (IU);
 4b4:	3a 0b       	ILLEGAL;
 4b6:	3b 0b       	ILLEGAL;
 4b8:	49 13       	IF !CC JUMP 0x34a <bss_begin+0x2e2>;
 4ba:	02 06       	IF !CC R0 = R2;
 4bc:	00 00       	NOP;
 4be:	08 34       	I1 = R0;
 4c0:	00 03       	CC = AZ;
 4c2:	08 3a       	ILLEGAL;
 4c4:	0b 3b       	ILLEGAL;
 4c6:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 4c8:	13 02       	ILLEGAL;
 4ca:	06 00       	ILLEGAL;
 4cc:	00 09       	CC = R0 <= R0;
 4ce:	34 00       	CLI R4;
 4d0:	03 0e       	CC = R3 <= 0x0 (IU);
 4d2:	3a 0b       	ILLEGAL;
 4d4:	3b 0b       	ILLEGAL;
 4d6:	49 13       	IF !CC JUMP 0x368 <bss_begin+0x300>;
 4d8:	02 06       	IF !CC R0 = R2;
 4da:	00 00       	NOP;
 4dc:	00 01       	ILLEGAL;
 4de:	11 01       	I1 = [SP++];
 4e0:	25 0e       	CC = R5 <= 0x4 (IU);
 4e2:	13 0b       	ILLEGAL;
 4e4:	03 0e       	CC = R3 <= 0x0 (IU);
 4e6:	11 01       	I1 = [SP++];
 4e8:	12 01       	I2 = [SP++];
 4ea:	10 06       	IF !CC R2 = R0;
 4ec:	00 00       	NOP;
 4ee:	02 24       	JUMP.S 0xcf2 <_intr_stack+0x48a>;
 4f0:	00 0b       	CC = A0 < A1;
 4f2:	0b 3e       	SEQSTAT = R3;
 4f4:	0b 03       	CC = ASTAT[11 /* unused bit */];
 4f6:	0e 00       	ILLEGAL;
 4f8:	00 03       	CC = AZ;
 4fa:	24 00       	SSYNC;
 4fc:	0b 0b       	ILLEGAL;
 4fe:	3e 0b       	ILLEGAL;
 500:	03 08       	CC = R3 == R0;
 502:	00 00       	NOP;
 504:	04 0f       	ILLEGAL;
 506:	00 0b       	CC = A0 < A1;
 508:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 50a:	13 00       	RTN;
 50c:	00 05       	(R7:0) = [SP++];
 50e:	26 00       	ILLEGAL;
 510:	49 13       	IF !CC JUMP 0x3a2 <bss_begin+0x33a>;
 512:	00 00       	NOP;
 514:	06 16       	IF !CC JUMP 0x120 <bss_begin+0xb8> (BP);
 516:	00 03       	CC = AZ;
 518:	0e 3a       	ILLEGAL;
 51a:	0b 3b       	ILLEGAL;
 51c:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 51e:	13 00       	RTN;
 520:	00 07       	IF CC R0 = R0;
 522:	2e 01       	ILLEGAL;
 524:	3f 0c       	CC = R7 == -0x1;
 526:	03 0e       	CC = R3 <= 0x0 (IU);
 528:	3a 0b       	ILLEGAL;
 52a:	3b 0b       	ILLEGAL;
 52c:	27 0c       	CC = R7 == -0x4;
 52e:	49 13       	IF !CC JUMP 0x3c0 <bss_begin+0x358>;
 530:	11 01       	I1 = [SP++];
 532:	12 01       	I2 = [SP++];
 534:	40 06       	IF !CC R0 = P0;
 536:	01 13       	IF !CC JUMP 0x338 <bss_begin+0x2d0>;
 538:	00 00       	NOP;
 53a:	08 05       	(R7:1) = [SP++];
 53c:	00 03       	CC = AZ;
 53e:	08 3a       	ILLEGAL;
 540:	0b 3b       	ILLEGAL;
 542:	0b 49       	CC = BITTST (R3, 0x1);		/* bit  1 */
 544:	13 02       	ILLEGAL;
 546:	06 00       	ILLEGAL;
 548:	00 09       	CC = R0 <= R0;
 54a:	34 00       	CLI R4;
 54c:	03 0e       	CC = R3 <= 0x0 (IU);
 54e:	3a 0b       	ILLEGAL;
 550:	3b 0b       	ILLEGAL;
 552:	49 13       	IF !CC JUMP 0x3e4 <bss_begin+0x37c>;
 554:	02 06       	IF !CC R0 = R2;
 556:	00 00       	NOP;
 558:	00 01       	ILLEGAL;
 55a:	11 00       	RTI;
 55c:	10 06       	IF !CC R2 = R0;
 55e:	11 01       	I1 = [SP++];
 560:	12 01       	I2 = [SP++];
 562:	03 08       	CC = R3 == R0;
 564:	1b 08       	CC = R3 == R3;
 566:	25 08       	CC = R5 == R4;
 568:	13 05       	ILLEGAL;
 56a:	00 00       	NOP;
 56c:	00 01       	ILLEGAL;
 56e:	11 00       	RTI;
 570:	10 06       	IF !CC R2 = R0;
 572:	11 01       	I1 = [SP++];
 574:	12 01       	I2 = [SP++];
 576:	03 08       	CC = R3 == R0;
 578:	1b 08       	CC = R3 == R3;
 57a:	25 08       	CC = R5 == R4;
 57c:	13 05       	ILLEGAL;
 57e:	00 00       	NOP;
	...

Disassembly of section .debug_info:

00000000 <.debug_info>:
   0:	85 02       	ILLEGAL;
   2:	00 00       	NOP;
   4:	02 00       	ILLEGAL;
   6:	00 00       	NOP;
   8:	00 00       	NOP;
   a:	04 01       	ILLEGAL;
   c:	d4 02       	ILLEGAL;
   e:	00 00       	NOP;
  10:	01 94       	R1 = W[P0++] (Z);
  12:	00 00       	NOP;
  14:	00 79       	ILLEGAL;
  16:	01 00       	ILLEGAL;
  18:	00 fc       	ILLEGAL;
  1a:	f3 00       	ILLEGAL;
  1c:	01 5e       	P0 = P1 + (P0 << 0x2);
  1e:	f7 00       	ILLEGAL;
  20:	01 00       	ILLEGAL;
  22:	00 00       	NOP;
  24:	00 02       	R0 = CC;
  26:	04 07       	IF CC R0 = R4;
  28:	2c 00       	ILLEGAL;
  2a:	00 00       	NOP;
  2c:	02 01       	ILLEGAL;
  2e:	06 df       	ILLEGAL;
  30:	01 00       	ILLEGAL;
  32:	00 02       	R0 = CC;
  34:	01 08       	CC = R1 == R0;
  36:	dd 01       	ILLEGAL;
  38:	00 00       	NOP;
  3a:	02 02       	R2 = CC;
  3c:	05 eb       	ILLEGAL;
  3e:	01 00       	ILLEGAL;
  40:	00 02       	R0 = CC;
  42:	02 07       	IF CC R0 = R2;
  44:	3d 01       	RETN = [SP++];
  46:	00 00       	NOP;
  48:	03 04       	ILLEGAL;
  4a:	05 69       	P5 = 0x20 (X);		/*		P5=0x20( 32) */
  4c:	6e 74       	ILLEGAL;
  4e:	00 02       	R0 = CC;
  50:	04 07       	IF CC R0 = R4;
  52:	31 00       	CLI R1;
  54:	00 00       	NOP;
  56:	02 08       	CC = R2 == R0;
  58:	05 d3       	ILLEGAL;
  5a:	00 00       	NOP;
  5c:	00 02       	R0 = CC;
  5e:	08 07       	IF CC R1 = R0;
  60:	27 00       	ILLEGAL;
  62:	00 00       	NOP;
  64:	02 04       	ILLEGAL;
  66:	05 d8       	ILLEGAL;
  68:	00 00       	NOP;
  6a:	00 04       	ILLEGAL;
  6c:	04 33       	ILLEGAL;
  6e:	00 00       	NOP;
  70:	00 02       	R0 = CC;
  72:	01 06       	IF !CC R0 = R1;
  74:	e6 01       	ILLEGAL;
  76:	00 00       	NOP;
  78:	05 04       	ILLEGAL;
  7a:	02 35       	I0 = A1.X;
  7c:	1d 01       	L1 = [SP++];
  7e:	00 00       	NOP;
  80:	06 04       	ILLEGAL;
  82:	01 00       	ILLEGAL;
  84:	00 00       	NOP;
  86:	06 54       	R0 = R6 & R0;
  88:	00 00       	NOP;
  8a:	00 01       	ILLEGAL;
  8c:	06 72       	ILLEGAL;
  8e:	02 00       	ILLEGAL;
  90:	00 02       	R0 = CC;
  92:	06 7c       	ILLEGAL;
  94:	02 00       	ILLEGAL;
  96:	00 03       	CC = AZ;
  98:	06 14       	IF !CC JUMP 0xa4 <bss_begin+0x3c> (BP);
  9a:	01 00       	ILLEGAL;
  9c:	00 04       	ILLEGAL;
  9e:	06 a8       	R6 = W[P0 + 0x0] (X);
  a0:	00 00       	NOP;
  a2:	00 05       	(R7:0) = [SP++];
  a4:	06 7e       	ILLEGAL;
  a6:	00 00       	NOP;
  a8:	00 06       	IF !CC R0 = R0;
  aa:	06 e0       	ILLEGAL;
  ac:	02 00       	ILLEGAL;
  ae:	00 07       	IF CC R0 = R0;
  b0:	06 92       	[P0++] = R6;
  b2:	02 00       	ILLEGAL;
  b4:	00 08       	CC = R0 == R0;
  b6:	06 be       	[P0 + 0x20] = SP;
  b8:	00 00       	NOP;
  ba:	00 09       	CC = R0 <= R0;
  bc:	06 ef       	ILLEGAL;
  be:	00 00       	NOP;
  c0:	00 0a       	CC = R0 <= R0 (IU);
  c2:	06 50       	R0 = R6 + R0;
  c4:	01 00       	ILLEGAL;
  c6:	00 0b       	CC = A0 < A1;
  c8:	06 5f       	P4 = SP + (P0 << 0x2);
  ca:	02 00       	ILLEGAL;
  cc:	00 0c       	CC = R0 == 0x0;
  ce:	06 f5       	ILLEGAL;
  d0:	01 00       	ILLEGAL;
  d2:	00 0d       	CC = R0 <= 0x0;
  d4:	06 bd       	[P0 + 0x10] = SP;
  d6:	02 00       	ILLEGAL;
  d8:	00 0e       	CC = R0 <= 0x0 (IU);
  da:	06 a9       	R6 = W[P0 + 0x8] (X);
  dc:	01 00       	ILLEGAL;
  de:	00 0f       	ILLEGAL;
  e0:	06 cb       	R0.H = R0.L * R1.L (IS) || ILLEGAL || ILLEGAL;		/* ILLEGAL PARALLEL INSTRUCTION */
  e2:	01 00       	ILLEGAL;
  e4:	00 10       	IF !CC JUMP 0xe4 <bss_begin+0x7c>;
  e6:	06 29       	JUMP.S 0xfffff2f2 <_text_end+0xfefef2b2>;
  e8:	01 00       	ILLEGAL;
  ea:	00 11       	IF !CC JUMP 0x2ea <bss_begin+0x282>;
  ec:	06 3e       	USP = R6;
  ee:	00 00       	NOP;
  f0:	00 12       	IF !CC JUMP 0xfffffcf0 <_text_end+0xfefefcb0>;
  f2:	06 25       	JUMP.S 0xafe <_intr_stack+0x296>;
  f4:	02 00       	ILLEGAL;
  f6:	00 13       	IF !CC JUMP 0xfffffef6 <_text_end+0xfefefeb6>;
  f8:	06 00       	ILLEGAL;
  fa:	00 00       	NOP;
  fc:	00 14       	IF !CC JUMP 0xfc <bss_begin+0x94> (BP);
  fe:	06 6b       	SP = -0x20 (X);		/*		SP=0xffffffe0(-32) */
 100:	00 00       	NOP;
 102:	00 15       	IF !CC JUMP 0x302 <bss_begin+0x29a> (BP);
 104:	06 63       	R6 = -0x20 (X);		/*		R6=0xffffffe0(-32) */
 106:	01 00       	ILLEGAL;
 108:	00 16       	IF !CC JUMP 0xfffffd08 <_text_end+0xfefefcc8> (BP);
 10a:	06 0c       	CC = R6 == 0x0;
 10c:	02 00       	ILLEGAL;
 10e:	00 17       	IF !CC JUMP 0xffffff0e <_text_end+0xfefefece> (BP);
 110:	06 46       	ILLEGAL;
 112:	02 00       	ILLEGAL;
 114:	00 18       	IF CC JUMP 0x114 <bss_begin+0xac>;
 116:	06 a9       	R6 = W[P0 + 0x8] (X);
 118:	02 00       	ILLEGAL;
 11a:	00 19       	IF CC JUMP 0x31a <bss_begin+0x2b2>;
 11c:	00 07       	IF CC R0 = R0;
 11e:	33 00       	CLI R3;
 120:	00 00       	NOP;
 122:	2d 01       	ILLEGAL;
 124:	00 00       	NOP;
 126:	08 25       	JUMP.S 0xb36 <_intr_stack+0x2ce>;
 128:	00 00       	NOP;
 12a:	00 0f       	ILLEGAL;
 12c:	00 09       	CC = R0 <= R0;
 12e:	e1 00       	ILLEGAL;
 130:	00 00       	NOP;
 132:	01 25       	JUMP.S 0xb34 <_intr_stack+0x2cc>;
 134:	4f 00       	ILLEGAL;
 136:	00 00       	NOP;
 138:	0a 01       	ILLEGAL;
 13a:	60 00       	CALL (P0);
 13c:	00 00       	NOP;
 13e:	01 27       	JUMP.S 0xf40 <_intr_stack+0x6d8>;
 140:	01 48       	CC = !BITTST (R1, 0x0);		/* bit  0 */
 142:	00 00       	NOP;
 144:	00 fc       	ILLEGAL;
 146:	f3 00       	ILLEGAL;
 148:	01 5e       	P0 = P1 + (P0 << 0x2);
 14a:	f7 00       	ILLEGAL;
 14c:	01 00       	ILLEGAL;
 14e:	00 00       	NOP;
 150:	00 7d       	ILLEGAL;
 152:	02 00       	ILLEGAL;
 154:	00 0b       	CC = A0 < A1;
 156:	ff 01       	ILLEGAL;
 158:	00 00       	NOP;
 15a:	01 27       	JUMP.S 0xf5c <_intr_stack+0x6f4>;
 15c:	7d 02       	IFLUSH[P5++];
 15e:	00 00       	NOP;
 160:	2c 00       	ILLEGAL;
 162:	00 00       	NOP;
 164:	0b f5       	ILLEGAL;
 166:	02 00       	ILLEGAL;
 168:	00 01       	ILLEGAL;
 16a:	28 7d       	ILLEGAL;
 16c:	02 00       	ILLEGAL;
 16e:	00 4a       	BITSET (R0, 0x0);		/* bit  0 */
 170:	00 00       	NOP;
 172:	00 0b       	CC = A0 < A1;
 174:	0d 00       	ILLEGAL;
 176:	00 00       	NOP;
 178:	01 28       	JUMP.S 0xfffff17a <_text_end+0xfefef13a>;
 17a:	25 00       	EMUEXCPT;
 17c:	00 00       	NOP;
 17e:	68 00       	ILLEGAL;
 180:	00 00       	NOP;
 182:	0c 70       	ILLEGAL;
 184:	74 00       	CALL (PC + P4);
 186:	01 29       	JUMP.S 0xfffff388 <_text_end+0xfefef348>;
 188:	6b 00       	ILLEGAL;
 18a:	00 00       	NOP;
 18c:	02 91       	R2 = [P0];
 18e:	0c 0d       	CC = R4 <= 0x1;
 190:	17 00       	ILLEGAL;
 192:	00 00       	NOP;
 194:	01 29       	JUMP.S 0xfffff396 <_text_end+0xfefef356>;
 196:	25 00       	EMUEXCPT;
 198:	00 00       	NOP;
 19a:	02 91       	R2 = [P0];
 19c:	10 0c       	CC = R0 == 0x2;
 19e:	63 74       	ILLEGAL;
 1a0:	00 01       	ILLEGAL;
 1a2:	2a 6b       	P2 = -0x1b (X);		/*		P2=0xffffffe5(-27) */
 1a4:	00 00       	NOP;
 1a6:	00 02       	R0 = CC;
 1a8:	91 14       	IF !CC JUMP 0x2ca <bss_begin+0x262> (BP);
 1aa:	0c 74       	ILLEGAL;
 1ac:	61 67       	R1 += -0x14;		/* (-20) */
 1ae:	00 01       	ILLEGAL;
 1b0:	2a 6b       	P2 = -0x1b (X);		/*		P2=0xffffffe5(-27) */
 1b2:	00 00       	NOP;
 1b4:	00 02       	R0 = CC;
 1b6:	91 18       	IF CC JUMP 0x2d8 <bss_begin+0x270>;
 1b8:	0d 1d       	IF CC JUMP 0x3d2 <bss_begin+0x36a> (BP);
 1ba:	00 00       	NOP;
 1bc:	00 01       	ILLEGAL;
 1be:	2a 48       	CC = !BITTST (R2, 0x5);		/* bit  5 */
 1c0:	00 00       	NOP;
 1c2:	00 02       	R0 = CC;
 1c4:	91 1c       	IF CC JUMP 0x2e6 <bss_begin+0x27e> (BP);
 1c6:	0e 50       	R0 = R6 + R1;
 1c8:	41 44       	P1 = P0 << 0x2;
 1ca:	00 01       	ILLEGAL;
 1cc:	2c 1d       	IF CC JUMP 0x424 <bss_begin+0x3bc> (BP);
 1ce:	01 00       	ILLEGAL;
 1d0:	00 02       	R0 = CC;
 1d2:	91 4c       	BITCLR (R1, 0x12);		/* bit 18 */
 1d4:	0e 63       	R6 = -0x1f (X);		/*		R6=0xffffffe1(-31) */
 1d6:	74 72       	ILLEGAL;
 1d8:	00 01       	ILLEGAL;
 1da:	2c 1d       	IF CC JUMP 0x432 <bss_begin+0x3ca> (BP);
 1dc:	01 00       	ILLEGAL;
 1de:	00 03       	CC = AZ;
 1e0:	91 bc       	[P2 + 0x8] = P1;
 1e2:	7f 0f       	ILLEGAL;
 1e4:	be 01       	ILLEGAL;
 1e6:	00 00       	NOP;
 1e8:	01 2c       	JUMP.S 0xfffff9ea <_text_end+0xfefef9aa>;
 1ea:	1d 01       	L1 = [SP++];
 1ec:	00 00       	NOP;
 1ee:	03 91       	R3 = [P0];
 1f0:	ac 7f       	ILLEGAL;
 1f2:	10 62       	R0 = -0x3e (X);		/*		R0=0xffffffc2(-62) */
 1f4:	00 01       	ILLEGAL;
 1f6:	2c 33       	ILLEGAL;
 1f8:	00 00       	NOP;
 1fa:	00 9c       	R0 = [I0++];
 1fc:	00 00       	NOP;
 1fe:	00 10       	IF !CC JUMP 0x1fe <bss_begin+0x196>;
 200:	65 72       	ILLEGAL;
 202:	72 00       	CALL (PC + P2);
 204:	01 2d       	JUMP.S 0xfffffc06 <_text_end+0xfefefbc6>;
 206:	48 00       	ILLEGAL;
 208:	00 00       	NOP;
 20a:	bb 00       	ILLEGAL;
 20c:	00 00       	NOP;
 20e:	11 6c       	P1 += 0x2;		/* (  2) */
 210:	65 6e       	P5 += -0x34;		/* (-52) */
 212:	00 01       	ILLEGAL;
 214:	2e 4f       	R6 <<= 0x5;
 216:	00 00       	NOP;
 218:	00 12       	IF !CC JUMP 0xfffffe18 <_text_end+0xfefefdd8>;
 21a:	4c 00       	ILLEGAL;
 21c:	01 2e       	JUMP.S 0xfffffe1e <_text_end+0xfefefdde>;
 21e:	4f 00       	ILLEGAL;
 220:	00 00       	NOP;
 222:	02 10       	IF !CC JUMP 0x226 <bss_begin+0x1be>;
 224:	78 00       	ILLEGAL;
 226:	01 2e       	JUMP.S 0xfffffe28 <_text_end+0xfefefde8>;
 228:	4f 00       	ILLEGAL;
 22a:	00 00       	NOP;
 22c:	3c 01       	RETX = [SP++];
 22e:	00 00       	NOP;
 230:	10 79       	ILLEGAL;
 232:	00 01       	ILLEGAL;
 234:	2e 4f       	R6 <<= 0x5;
 236:	00 00       	NOP;
 238:	00 80       	R0 = [P0 ++ P0];
 23a:	02 00       	ILLEGAL;
 23c:	00 10       	IF !CC JUMP 0x23c <bss_begin+0x1d4>;
 23e:	7a 00       	ILLEGAL;
 240:	01 2e       	JUMP.S 0xfffffe42 <_text_end+0xfefefe02>;
 242:	4f 00       	ILLEGAL;
 244:	00 00       	NOP;
 246:	4e 03       	CC &= ASTAT[14 /* unused bit */];
 248:	00 00       	NOP;
 24a:	13 0d       	CC = R3 <= 0x2;
 24c:	01 00       	ILLEGAL;
 24e:	00 01       	ILLEGAL;
 250:	2e 4f       	R6 <<= 0x5;
 252:	00 00       	NOP;
 254:	00 9e       	[I0++] = R0;
 256:	03 00       	ILLEGAL;
 258:	00 14       	IF !CC JUMP 0x258 <bss_begin+0x1f0> (BP);
 25a:	3d 02       	ILLEGAL;
 25c:	00 00       	NOP;
 25e:	01 2f       	JUMP.S 0x60 <_device_ble+0x14>;
 260:	4f 00       	ILLEGAL;
 262:	00 00       	NOP;
 264:	0d 14       	IF !CC JUMP 0x27e <bss_begin+0x216> (BP);
 266:	05 02       	R5 = CC;
 268:	00 00       	NOP;
 26a:	01 2f       	JUMP.S 0x6c <bss_begin+0x4>;
 26c:	4f 00       	ILLEGAL;
 26e:	00 00       	NOP;
 270:	04 15       	IF !CC JUMP 0x478 <bss_begin+0x410> (BP);
 272:	c5 01       	ILLEGAL;
 274:	00 00       	NOP;
 276:	01 f5       	ILLEGAL;
 278:	52 f7       	ILLEGAL;
 27a:	00 01       	ILLEGAL;
 27c:	00 04       	ILLEGAL;
 27e:	04 83       	R4.L = W[P4 ++ P0];
 280:	02 00       	ILLEGAL;
 282:	00 16       	IF !CC JUMP 0xfffffe82 <_text_end+0xfefefe42> (BP);
 284:	33 00       	CLI R3;
 286:	00 00       	NOP;
 288:	00 d7       	ILLEGAL;
 28a:	02 00       	ILLEGAL;
 28c:	00 02       	R0 = CC;
 28e:	00 29       	JUMP.S 0xfffff48e <_text_end+0xfefef44e>;
 290:	01 00       	ILLEGAL;
 292:	00 04       	ILLEGAL;
 294:	01 d4       	ILLEGAL;
 296:	02 00       	ILLEGAL;
 298:	00 01       	ILLEGAL;
 29a:	57 03       	CC &= ASTAT[23 /* unused bit */];
 29c:	00 00       	NOP;
 29e:	79 01       	[--SP] = SEQSTAT;
 2a0:	00 00       	NOP;
 2a2:	60 f7       	ILLEGAL;
 2a4:	00 01       	ILLEGAL;
 2a6:	86 fc       	ILLEGAL;
 2a8:	00 01       	ILLEGAL;
 2aa:	f2 01       	ILLEGAL;
 2ac:	00 00       	NOP;
 2ae:	02 04       	ILLEGAL;
 2b0:	07 2c       	JUMP.S 0xfffffabe <_text_end+0xfefefa7e>;
 2b2:	00 00       	NOP;
 2b4:	00 02       	R0 = CC;
 2b6:	01 06       	IF !CC R0 = R1;
 2b8:	df 01       	ILLEGAL;
 2ba:	00 00       	NOP;
 2bc:	02 01       	ILLEGAL;
 2be:	08 dd       	ILLEGAL;
 2c0:	01 00       	ILLEGAL;
 2c2:	00 02       	R0 = CC;
 2c4:	02 05       	ILLEGAL;
 2c6:	eb 01       	ILLEGAL;
 2c8:	00 00       	NOP;
 2ca:	02 02       	R2 = CC;
 2cc:	07 3d       	ILLEGAL;
 2ce:	01 00       	ILLEGAL;
 2d0:	00 03       	CC = AZ;
 2d2:	04 05       	ILLEGAL;
 2d4:	69 6e       	P1 += -0x33;		/* (-51) */
 2d6:	74 00       	CALL (PC + P4);
 2d8:	02 04       	ILLEGAL;
 2da:	07 31       	R0 = RETS;
 2dc:	00 00       	NOP;
 2de:	00 02       	R0 = CC;
 2e0:	08 05       	(R7:1) = [SP++];
 2e2:	d3 00       	ILLEGAL;
 2e4:	00 00       	NOP;
 2e6:	02 08       	CC = R2 == R0;
 2e8:	07 27       	JUMP.S 0x10f6 <_bredr_base_addr+0x8e>;
 2ea:	00 00       	NOP;
 2ec:	00 02       	R0 = CC;
 2ee:	04 05       	ILLEGAL;
 2f0:	d8 00       	ILLEGAL;
 2f2:	00 00       	NOP;
 2f4:	04 04       	ILLEGAL;
 2f6:	33 00       	CLI R3;
 2f8:	00 00       	NOP;
 2fa:	02 01       	ILLEGAL;
 2fc:	06 e6 01 00 	[P0 + 0x4] = R6;
 300:	00 05       	(R7:0) = [SP++];
 302:	04 02       	R4 = CC;
 304:	35 1d       	IF CC JUMP 0x56e <bss_begin+0x506> (BP);
 306:	01 00       	ILLEGAL;
 308:	00 06       	IF !CC R0 = R0;
 30a:	04 01       	ILLEGAL;
 30c:	00 00       	NOP;
 30e:	00 06       	IF !CC R0 = R0;
 310:	54 00       	JUMP (P4);
 312:	00 00       	NOP;
 314:	01 06       	IF !CC R0 = R1;
 316:	72 02       	FLUSH[P2++];
 318:	00 00       	NOP;
 31a:	02 06       	IF !CC R0 = R2;
 31c:	7c 02       	IFLUSH[P4++];
 31e:	00 00       	NOP;
 320:	03 06       	IF !CC R0 = R3;
 322:	14 01       	M0 = [SP++];
 324:	00 00       	NOP;
 326:	04 06       	IF !CC R0 = R4;
 328:	a8 00       	EXCPT 0x8;
 32a:	00 00       	NOP;
 32c:	05 06       	IF !CC R0 = R5;
 32e:	7e 00       	ILLEGAL;
 330:	00 00       	NOP;
 332:	06 06       	IF !CC R0 = R6;
 334:	e0 02       	ILLEGAL;
 336:	00 00       	NOP;
 338:	07 06       	IF !CC R0 = R7;
 33a:	92 02       	ILLEGAL;
 33c:	00 00       	NOP;
 33e:	08 06       	IF !CC R1 = R0;
 340:	be 00       	ILLEGAL;
 342:	00 00       	NOP;
 344:	09 06       	IF !CC R1 = R1;
 346:	ef 00       	ILLEGAL;
 348:	00 00       	NOP;
 34a:	0a 06       	IF !CC R1 = R2;
 34c:	50 01       	[--SP] = I0;
 34e:	00 00       	NOP;
 350:	0b 06       	IF !CC R1 = R3;
 352:	5f 02       	IFLUSH[FP];
 354:	00 00       	NOP;
 356:	0c 06       	IF !CC R1 = R4;
 358:	f5 01       	ILLEGAL;
 35a:	00 00       	NOP;
 35c:	0d 06       	IF !CC R1 = R5;
 35e:	bd 02       	ILLEGAL;
 360:	00 00       	NOP;
 362:	0e 06       	IF !CC R1 = R6;
 364:	a9 01       	ILLEGAL;
 366:	00 00       	NOP;
 368:	0f 06       	IF !CC R1 = R7;
 36a:	cb 01       	ILLEGAL;
 36c:	00 00       	NOP;
 36e:	10 06       	IF !CC R2 = R0;
 370:	29 01       	ILLEGAL;
 372:	00 00       	NOP;
 374:	11 06       	IF !CC R2 = R1;
 376:	3e 00       	ILLEGAL;
 378:	00 00       	NOP;
 37a:	12 06       	IF !CC R2 = R2;
 37c:	25 02       	ILLEGAL;
 37e:	00 00       	NOP;
 380:	13 06       	IF !CC R2 = R3;
 382:	00 00       	NOP;
 384:	00 00       	NOP;
 386:	14 06       	IF !CC R2 = R4;
 388:	6b 00       	ILLEGAL;
 38a:	00 00       	NOP;
 38c:	15 06       	IF !CC R2 = R5;
 38e:	63 01       	[--SP] = A1.W;
 390:	00 00       	NOP;
 392:	16 06       	IF !CC R2 = R6;
 394:	0c 02       	CC = R4;
 396:	00 00       	NOP;
 398:	17 06       	IF !CC R2 = R7;
 39a:	46 02       	PREFETCH[SP];
 39c:	00 00       	NOP;
 39e:	18 06       	IF !CC R3 = R0;
 3a0:	a9 02       	ILLEGAL;
 3a2:	00 00       	NOP;
 3a4:	19 00       	ILLEGAL;
 3a6:	07 01       	ILLEGAL;
 3a8:	11 03       	CC = AV0S;
 3aa:	00 00       	NOP;
 3ac:	01 36       	B0 = R1;
 3ae:	01 48       	CC = !BITTST (R1, 0x0);		/* bit  0 */
 3b0:	00 00       	NOP;
 3b2:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 3b4:	f7 00       	ILLEGAL;
 3b6:	01 26       	JUMP.S 0xfb8 <_intr_stack+0x750>;
 3b8:	f9 00       	ILLEGAL;
 3ba:	01 0e       	CC = R1 <= 0x0 (IU);
 3bc:	04 00       	ILLEGAL;
 3be:	00 71       	ILLEGAL;
 3c0:	01 00       	ILLEGAL;
 3c2:	00 08       	CC = R0 == R0;
 3c4:	6b 65       	R3 += 0x2d;		/* ( 45) */
 3c6:	79 00       	ILLEGAL;
 3c8:	01 36       	B0 = R1;
 3ca:	6b 00       	ILLEGAL;
 3cc:	00 00       	NOP;
 3ce:	3a 04       	ILLEGAL;
 3d0:	00 00       	NOP;
 3d2:	09 22       	JUMP.S 0x7e4 <bss_begin+0x77c>;
 3d4:	03 00       	ILLEGAL;
 3d6:	00 01       	ILLEGAL;
 3d8:	36 6b       	SP = -0x1a (X);		/*		SP=0xffffffe6(-26) */
 3da:	00 00       	NOP;
 3dc:	00 58       	R0 = R0 ^ R0;
 3de:	04 00       	ILLEGAL;
 3e0:	00 0a       	CC = R0 <= R0 (IU);
 3e2:	09 03       	CC = ASTAT[9 /* unused bit */];
 3e4:	00 00       	NOP;
 3e6:	01 36       	B0 = R1;
 3e8:	6b 00       	ILLEGAL;
 3ea:	00 00       	NOP;
 3ec:	01 52       	R0 = R1 - R0;
 3ee:	0b 42       	DIVQ (R3, R1);
 3f0:	03 00       	ILLEGAL;
 3f2:	00 01       	ILLEGAL;
 3f4:	38 71       	ILLEGAL;
 3f6:	01 00       	ILLEGAL;
 3f8:	00 00       	NOP;
 3fa:	04 04       	ILLEGAL;
 3fc:	4f 00       	ILLEGAL;
 3fe:	00 00       	NOP;
 400:	07 01       	ILLEGAL;
 402:	31 03       	CC |= AV0S;
 404:	00 00       	NOP;
 406:	01 56       	R0 = R1 | R0;
 408:	01 48       	CC = !BITTST (R1, 0x0);		/* bit  0 */
 40a:	00 00       	NOP;
 40c:	00 28       	JUMP.S 0xfffff40c <_text_end+0xfefef3cc>;
 40e:	f9 00       	ILLEGAL;
 410:	01 ee       	ILLEGAL;
 412:	fa 00       	ILLEGAL;
 414:	01 76       	ILLEGAL;
 416:	04 00       	ILLEGAL;
 418:	00 cb       	ILLEGAL;
 41a:	01 00       	ILLEGAL;
 41c:	00 08       	CC = R0 == R0;
 41e:	6b 65       	R3 += 0x2d;		/* ( 45) */
 420:	79 00       	ILLEGAL;
 422:	01 56       	R0 = R1 | R0;
 424:	6b 00       	ILLEGAL;
 426:	00 00       	NOP;
 428:	a2 04       	ILLEGAL;
 42a:	00 00       	NOP;
 42c:	09 22       	JUMP.S 0x83e <bss_begin+0x7d6>;
 42e:	03 00       	ILLEGAL;
 430:	00 01       	ILLEGAL;
 432:	56 6b       	SP = -0x16 (X);		/*		SP=0xffffffea(-22) */
 434:	00 00       	NOP;
 436:	00 c0 04 00 	A1 = R0.L * R4.L, A0 = R0.L * R4.L;
 43a:	00 0a       	CC = R0 <= R0 (IU);
 43c:	09 03       	CC = ASTAT[9 /* unused bit */];
 43e:	00 00       	NOP;
 440:	01 56       	R0 = R1 | R0;
 442:	6b 00       	ILLEGAL;
 444:	00 00       	NOP;
 446:	01 52       	R0 = R1 - R0;
 448:	0b 42       	DIVQ (R3, R1);
 44a:	03 00       	ILLEGAL;
 44c:	00 01       	ILLEGAL;
 44e:	58 71       	ILLEGAL;
 450:	01 00       	ILLEGAL;
 452:	00 00       	NOP;
 454:	0c 01       	ILLEGAL;
 456:	48 03       	CC &= RND_MOD;
 458:	00 00       	NOP;
 45a:	01 7a       	ILLEGAL;
 45c:	01 48       	CC = !BITTST (R1, 0x0);		/* bit  0 */
 45e:	00 00       	NOP;
 460:	00 f0 fa 00 	DBGA (R0.L, 0xfa);
 464:	01 38       	A0.X = R1;
 466:	fb 00       	ILLEGAL;
 468:	01 02       	R1 = CC;
 46a:	7e 00       	ILLEGAL;
 46c:	1d 02       	ILLEGAL;
 46e:	00 00       	NOP;
 470:	08 6b       	P0 = -0x1f (X);		/*		P0=0xffffffe1(-31) */
 472:	65 79       	ILLEGAL;
 474:	00 01       	ILLEGAL;
 476:	7a 1d       	IF CC JUMP 0x76a <bss_begin+0x702> (BP);
 478:	02 00       	ILLEGAL;
 47a:	00 de       	ILLEGAL;
 47c:	04 00       	ILLEGAL;
 47e:	00 0d       	CC = R0 <= 0x0;
 480:	69 00       	ILLEGAL;
 482:	01 7c       	ILLEGAL;
 484:	4f 00       	ILLEGAL;
 486:	00 00       	NOP;
 488:	07 05       	ILLEGAL;
 48a:	00 00       	NOP;
 48c:	0e 2c       	JUMP.S 0xfffffca8 <_text_end+0xfefefc68>;
 48e:	03 00       	ILLEGAL;
 490:	00 01       	ILLEGAL;
 492:	7c 4f       	R4 <<= 0xf;
 494:	00 00       	NOP;
 496:	00 1b       	IF CC JUMP 0x296 <bss_begin+0x22e>;
 498:	05 00       	ILLEGAL;
 49a:	00 0f       	ILLEGAL;
 49c:	72 6b       	P2 = -0x12 (X);		/*		P2=0xffffffee(-18) */
 49e:	00 01       	ILLEGAL;
 4a0:	7c 71       	ILLEGAL;
 4a2:	01 00       	ILLEGAL;
 4a4:	00 00       	NOP;
 4a6:	04 04       	ILLEGAL;
 4a8:	23 02       	ILLEGAL;
 4aa:	00 00       	NOP;
 4ac:	10 33       	P2 = A0.X;
 4ae:	00 00       	NOP;
 4b0:	00 11       	IF !CC JUMP 0x6b0 <bss_begin+0x648>;
 4b2:	01 fc       	ILLEGAL;
 4b4:	02 00       	ILLEGAL;
 4b6:	00 01       	ILLEGAL;
 4b8:	ab 01       	ILLEGAL;
 4ba:	48 00       	ILLEGAL;
 4bc:	00 00       	NOP;
 4be:	38 fb       	ILLEGAL;
 4c0:	00 01       	ILLEGAL;
 4c2:	86 fc       	ILLEGAL;
 4c4:	00 01       	ILLEGAL;
 4c6:	3a 05       	ILLEGAL;
 4c8:	00 00       	NOP;
 4ca:	08 70       	ILLEGAL;
 4cc:	74 00       	CALL (PC + P4);
 4ce:	01 ab       	R1 = W[P0 + 0x18] (X);
 4d0:	1d 02       	ILLEGAL;
 4d2:	00 00       	NOP;
 4d4:	66 05       	ILLEGAL;
 4d6:	00 00       	NOP;
 4d8:	08 63       	R0 = -0x1f (X);		/*		R0=0xffffffe1(-31) */
 4da:	74 00       	CALL (PC + P4);
 4dc:	01 ab       	R1 = W[P0 + 0x18] (X);
 4de:	6b 00       	ILLEGAL;
 4e0:	00 00       	NOP;
 4e2:	a5 05       	(R7:4, P5:5) = [SP++];
 4e4:	00 00       	NOP;
 4e6:	0f 73       	ILLEGAL;
 4e8:	30 00       	CLI R0;
 4ea:	01 ad       	P1 = [P0 + 0x10];
 4ec:	4f 00       	ILLEGAL;
 4ee:	00 00       	NOP;
 4f0:	0f 73       	ILLEGAL;
 4f2:	31 00       	CLI R1;
 4f4:	01 ad       	P1 = [P0 + 0x10];
 4f6:	4f 00       	ILLEGAL;
 4f8:	00 00       	NOP;
 4fa:	0f 73       	ILLEGAL;
 4fc:	32 00       	CLI R2;
 4fe:	01 ad       	P1 = [P0 + 0x10];
 500:	4f 00       	ILLEGAL;
 502:	00 00       	NOP;
 504:	0f 73       	ILLEGAL;
 506:	33 00       	CLI R3;
 508:	01 ad       	P1 = [P0 + 0x10];
 50a:	4f 00       	ILLEGAL;
 50c:	00 00       	NOP;
 50e:	0f 74       	ILLEGAL;
 510:	30 00       	CLI R0;
 512:	01 ad       	P1 = [P0 + 0x10];
 514:	4f 00       	ILLEGAL;
 516:	00 00       	NOP;
 518:	0f 74       	ILLEGAL;
 51a:	31 00       	CLI R1;
 51c:	01 ad       	P1 = [P0 + 0x10];
 51e:	4f 00       	ILLEGAL;
 520:	00 00       	NOP;
 522:	0f 74       	ILLEGAL;
 524:	32 00       	CLI R2;
 526:	01 ad       	P1 = [P0 + 0x10];
 528:	4f 00       	ILLEGAL;
 52a:	00 00       	NOP;
 52c:	0f 74       	ILLEGAL;
 52e:	33 00       	CLI R3;
 530:	01 ad       	P1 = [P0 + 0x10];
 532:	4f 00       	ILLEGAL;
 534:	00 00       	NOP;
 536:	0f 72       	ILLEGAL;
 538:	6b 00       	ILLEGAL;
 53a:	01 ad       	P1 = [P0 + 0x10];
 53c:	71 01       	[--SP] = LT0;
 53e:	00 00       	NOP;
 540:	0f 4e       	R7 >>= 0x1;
 542:	72 00       	CALL (PC + P2);
 544:	01 ae       	P1 = [P0 + 0x20];
 546:	48 00       	ILLEGAL;
 548:	00 00       	NOP;
 54a:	0f 72       	ILLEGAL;
 54c:	00 01       	ILLEGAL;
 54e:	ae 48       	CC = !BITTST (R6, 0x15);		/* bit 21 */
 550:	00 00       	NOP;
 552:	00 0e       	CC = R0 <= 0x0 (IU);
 554:	42 03       	CC &= AC0_COPY;
 556:	00 00       	NOP;
 558:	01 af       	P1 = [P0 + 0x30];
 55a:	71 01       	[--SP] = LT0;
 55c:	00 00       	NOP;
 55e:	c5 05       	[--SP] = (R7:0, P5:5);
 560:	00 00       	NOP;
 562:	00 00       	NOP;
 564:	08 01       	ILLEGAL;
 566:	00 00       	NOP;
 568:	02 00       	ILLEGAL;
 56a:	27 02       	ILLEGAL;
 56c:	00 00       	NOP;
 56e:	04 01       	ILLEGAL;
 570:	d4 02       	ILLEGAL;
 572:	00 00       	NOP;
 574:	01 6b       	P1 = -0x20 (X);		/*		P1=0xffffffe0(-32) */
 576:	03 00       	ILLEGAL;
 578:	00 88       	[P0 ++ P0] = R0;
 57a:	fc 00       	ILLEGAL;
 57c:	01 02       	R1 = CC;
 57e:	fd 00       	ILLEGAL;
 580:	01 30       	R0 = R1;
 582:	03 00       	ILLEGAL;
 584:	00 02       	R0 = CC;
 586:	01 06       	IF !CC R0 = R1;
 588:	df 01       	ILLEGAL;
 58a:	00 00       	NOP;
 58c:	02 01       	ILLEGAL;
 58e:	08 dd       	ILLEGAL;
 590:	01 00       	ILLEGAL;
 592:	00 02       	R0 = CC;
 594:	02 05       	ILLEGAL;
 596:	eb 01       	ILLEGAL;
 598:	00 00       	NOP;
 59a:	02 02       	R2 = CC;
 59c:	07 3d       	ILLEGAL;
 59e:	01 00       	ILLEGAL;
 5a0:	00 03       	CC = AZ;
 5a2:	04 05       	ILLEGAL;
 5a4:	69 6e       	P1 += -0x33;		/* (-51) */
 5a6:	74 00       	CALL (PC + P4);
 5a8:	02 04       	ILLEGAL;
 5aa:	07 31       	R0 = RETS;
 5ac:	00 00       	NOP;
 5ae:	00 02       	R0 = CC;
 5b0:	08 05       	(R7:1) = [SP++];
 5b2:	d3 00       	ILLEGAL;
 5b4:	00 00       	NOP;
 5b6:	02 08       	CC = R2 == R0;
 5b8:	07 27       	JUMP.S 0x13c6 <_bredr_base_addr+0x35e>;
 5ba:	00 00       	NOP;
 5bc:	00 02       	R0 = CC;
 5be:	04 05       	ILLEGAL;
 5c0:	d8 00       	ILLEGAL;
 5c2:	00 00       	NOP;
 5c4:	02 04       	ILLEGAL;
 5c6:	07 2c       	JUMP.S 0xfffffdd4 <_text_end+0xfefefd94>;
 5c8:	00 00       	NOP;
 5ca:	00 04       	ILLEGAL;
 5cc:	04 28       	JUMP.S 0xfffff5d4 <_text_end+0xfefef594>;
 5ce:	00 00       	NOP;
 5d0:	00 02       	R0 = CC;
 5d2:	01 06       	IF !CC R0 = R1;
 5d4:	e6 01       	ILLEGAL;
 5d6:	00 00       	NOP;
 5d8:	05 64       	R5 += 0x0;		/* (  0) */
 5da:	03 00       	ILLEGAL;
 5dc:	00 03       	CC = AZ;
 5de:	d3 60       	R3 = 0x1a (X);		/*		R3=0x1a( 26) */
 5e0:	00 00       	NOP;
 5e2:	00 06       	IF !CC R0 = R0;
 5e4:	01 a6       	R1 = W[P0 + 0x10] (Z);
 5e6:	03 00       	ILLEGAL;
 5e8:	00 02       	R0 = CC;
 5ea:	17 01       	M3 = [SP++];
 5ec:	3d 00       	ILLEGAL;
 5ee:	00 00       	NOP;
 5f0:	88 fc       	ILLEGAL;
 5f2:	00 01       	ILLEGAL;
 5f4:	02 fd       	ILLEGAL;
 5f6:	00 01       	ILLEGAL;
 5f8:	ff 05       	ILLEGAL;
 5fa:	00 00       	NOP;
 5fc:	fe 00       	ILLEGAL;
 5fe:	00 00       	NOP;
 600:	07 6d       	FP += 0x20;		/* ( 32) */
 602:	31 00       	CLI R1;
 604:	01 35       	I0 = A0.W;
 606:	fe 00       	ILLEGAL;
 608:	00 00       	NOP;
 60a:	2b 06       	IF !CC R5 = R3;
 60c:	00 00       	NOP;
 60e:	07 6d       	FP += 0x20;		/* ( 32) */
 610:	32 00       	CLI R2;
 612:	01 35       	I0 = A0.W;
 614:	fe 00       	ILLEGAL;
 616:	00 00       	NOP;
 618:	49 06       	IF !CC R1 = P1;
 61a:	00 00       	NOP;
 61c:	07 6e       	FP += -0x40;		/* (-64) */
 61e:	00 01       	ILLEGAL;
 620:	35 74       	ILLEGAL;
 622:	00 00       	NOP;
 624:	00 67       	R0 += -0x20;		/* (-32) */
 626:	06 00       	ILLEGAL;
 628:	00 08       	CC = R0 == R0;
 62a:	73 31       	ILLEGAL;
 62c:	00 01       	ILLEGAL;
 62e:	49 67       	R1 += -0x17;		/* (-23) */
 630:	00 00       	NOP;
 632:	00 9d       	R0 = [I0];
 634:	06 00       	ILLEGAL;
 636:	00 08       	CC = R0 == R0;
 638:	73 32       	SP = P3;
 63a:	00 01       	ILLEGAL;
 63c:	4a 67       	R2 += -0x17;		/* (-23) */
 63e:	00 00       	NOP;
 640:	00 e9       	ILLEGAL;
 642:	06 00       	ILLEGAL;
 644:	00 08       	CC = R0 == R0;
 646:	61 31       	ILLEGAL;
 648:	00 01       	ILLEGAL;
 64a:	4b 05       	ILLEGAL;
 64c:	01 00       	ILLEGAL;
 64e:	00 2a       	JUMP.S 0xfffffa4e <_text_end+0xfefefa0e>;
 650:	07 00       	ILLEGAL;
 652:	00 08       	CC = R0 == R0;
 654:	61 32       	P4 = P1;
 656:	00 01       	ILLEGAL;
 658:	4c 05       	ILLEGAL;
 65a:	01 00       	ILLEGAL;
 65c:	00 48       	CC = !BITTST (R0, 0x0);		/* bit  0 */
 65e:	07 00       	ILLEGAL;
 660:	00 00       	NOP;
 662:	04 04       	ILLEGAL;
 664:	04 01       	ILLEGAL;
 666:	00 00       	NOP;
 668:	09 04       	ILLEGAL;
 66a:	04 60       	R4 = 0x0 (X);		/*		R4=0x0(  0) */
 66c:	00 00       	NOP;
 66e:	00 00       	NOP;
 670:	26 01       	ASTAT = [SP++];
 672:	00 00       	NOP;
 674:	02 00       	ILLEGAL;
 676:	a1 02       	ILLEGAL;
 678:	00 00       	NOP;
 67a:	04 01       	ILLEGAL;
 67c:	d4 02       	ILLEGAL;
 67e:	00 00       	NOP;
 680:	01 ad       	P1 = [P0 + 0x10];
 682:	03 00       	ILLEGAL;
 684:	00 04       	ILLEGAL;
 686:	fd 00       	ILLEGAL;
 688:	01 a0       	R1 = [P0 + 0x0];
 68a:	fd 00       	ILLEGAL;
 68c:	01 5d       	P4 = P1 + (P0 << 0x1);
 68e:	04 00       	ILLEGAL;
 690:	00 02       	R0 = CC;
 692:	01 06       	IF !CC R0 = R1;
 694:	df 01       	ILLEGAL;
 696:	00 00       	NOP;
 698:	02 01       	ILLEGAL;
 69a:	08 dd       	ILLEGAL;
 69c:	01 00       	ILLEGAL;
 69e:	00 02       	R0 = CC;
 6a0:	02 05       	ILLEGAL;
 6a2:	eb 01       	ILLEGAL;
 6a4:	00 00       	NOP;
 6a6:	02 02       	R2 = CC;
 6a8:	07 3d       	ILLEGAL;
 6aa:	01 00       	ILLEGAL;
 6ac:	00 03       	CC = AZ;
 6ae:	04 05       	ILLEGAL;
 6b0:	69 6e       	P1 += -0x33;		/* (-51) */
 6b2:	74 00       	CALL (PC + P4);
 6b4:	02 04       	ILLEGAL;
 6b6:	07 31       	R0 = RETS;
 6b8:	00 00       	NOP;
 6ba:	00 02       	R0 = CC;
 6bc:	08 05       	(R7:1) = [SP++];
 6be:	d3 00       	ILLEGAL;
 6c0:	00 00       	NOP;
 6c2:	02 08       	CC = R2 == R0;
 6c4:	07 27       	JUMP.S 0x14d2 <_bredr_base_addr+0x46a>;
 6c6:	00 00       	NOP;
 6c8:	00 02       	R0 = CC;
 6ca:	04 05       	ILLEGAL;
 6cc:	d8 00       	ILLEGAL;
 6ce:	00 00       	NOP;
 6d0:	02 04       	ILLEGAL;
 6d2:	07 2c       	JUMP.S 0xfffffee0 <_text_end+0xfefefea0>;
 6d4:	00 00       	NOP;
 6d6:	00 04       	ILLEGAL;
 6d8:	04 05       	ILLEGAL;
 6da:	04 6f       	P4 += -0x20;		/* (-32) */
 6dc:	00 00       	NOP;
 6de:	00 02       	R0 = CC;
 6e0:	01 06       	IF !CC R0 = R1;
 6e2:	e6 01       	ILLEGAL;
 6e4:	00 00       	NOP;
 6e6:	05 04       	ILLEGAL;
 6e8:	7c 00       	ILLEGAL;
 6ea:	00 00       	NOP;
 6ec:	06 6f       	SP += -0x20;		/* (-32) */
 6ee:	00 00       	NOP;
 6f0:	00 07       	IF CC R0 = R0;
 6f2:	64 03       	CC ^= ASTAT[4 /* unused bit */];
 6f4:	00 00       	NOP;
 6f6:	03 d3       	ILLEGAL;
 6f8:	60 00       	CALL (P0);
 6fa:	00 00       	NOP;
 6fc:	08 01       	ILLEGAL;
 6fe:	0a 04       	ILLEGAL;
 700:	00 00       	NOP;
 702:	02 18       	IF CC JUMP 0x706 <bss_begin+0x69e>;
 704:	01 67       	R1 += -0x20;		/* (-32) */
 706:	00 00       	NOP;
 708:	00 04       	ILLEGAL;
 70a:	fd 00       	ILLEGAL;
 70c:	01 a0       	R1 = [P0 + 0x0];
 70e:	fd 00       	ILLEGAL;
 710:	01 66       	R1 += -0x40;		/* (-64) */
 712:	07 00       	ILLEGAL;
 714:	00 11       	IF !CC JUMP 0x914 <_intr_stack+0xac>;
 716:	01 00       	ILLEGAL;
 718:	00 09       	CC = R0 <= R0;
 71a:	f9 03       	VS ^= CC;
 71c:	00 00       	NOP;
 71e:	01 35       	I0 = A0.W;
 720:	67 00       	CALL (FP);
 722:	00 00       	NOP;
 724:	01 50       	R0 = R1 + R0;
 726:	0a f4       	ILLEGAL;
 728:	03 00       	ILLEGAL;
 72a:	00 01       	ILLEGAL;
 72c:	35 11       	IF !CC JUMP 0x996 <_intr_stack+0x12e>;
 72e:	01 00       	ILLEGAL;
 730:	00 92       	[P0++] = R0;
 732:	07 00       	ILLEGAL;
 734:	00 0a       	CC = R0 <= R0 (IU);
 736:	11 04       	ILLEGAL;
 738:	00 00       	NOP;
 73a:	01 35       	I0 = A0.W;
 73c:	81 00       	JUMP (PC + P1);
 73e:	00 00       	NOP;
 740:	a5 07       	IF CC P4 = R5;
 742:	00 00       	NOP;
 744:	0b 64       	R3 += 0x1;		/* (  1) */
 746:	73 74       	ILLEGAL;
 748:	00 01       	ILLEGAL;
 74a:	47 69       	FP = 0x28 (X);		/*		FP=0x28( 40) */
 74c:	00 00       	NOP;
 74e:	00 d0       	ILLEGAL;
 750:	07 00       	ILLEGAL;
 752:	00 0b       	CC = A0 < A1;
 754:	73 72       	ILLEGAL;
 756:	63 00       	CALL (P3);
 758:	01 48       	CC = !BITTST (R1, 0x0);		/* bit  0 */
 75a:	76 00       	CALL (PC + SP);
 75c:	00 00       	NOP;
 75e:	f9 07       	IF CC FP = P1;
 760:	00 00       	NOP;
 762:	0c e8       	ILLEGAL;
 764:	03 00       	ILLEGAL;
 766:	00 01       	ILLEGAL;
 768:	49 18       	IF CC JUMP 0x7fa <bss_begin+0x792>;
 76a:	01 00       	ILLEGAL;
 76c:	00 17       	IF !CC JUMP 0x56c <bss_begin+0x504> (BP);
 76e:	08 00       	ILLEGAL;
 770:	00 0c       	CC = R0 == 0x0;
 772:	fe 03       	ASTAT[30 /* unused bit */] ^= CC;
 774:	00 00       	NOP;
 776:	01 4a       	BITSET (R1, 0x0);		/* bit  0 */
 778:	1e 01       	L2 = [SP++];
 77a:	00 00       	NOP;
 77c:	88 08       	CC = R0 < R1;
 77e:	00 00       	NOP;
 780:	00 05       	(R7:0) = [SP++];
 782:	04 17       	IF !CC JUMP 0x58a <bss_begin+0x522> (BP);
 784:	01 00       	ILLEGAL;
 786:	00 0d       	CC = R0 <= 0x0;
 788:	05 04       	ILLEGAL;
 78a:	59 00       	ILLEGAL;
 78c:	00 00       	NOP;
 78e:	05 04       	ILLEGAL;
 790:	24 01       	ILLEGAL;
 792:	00 00       	NOP;
 794:	06 59       	R4 = R6 ^ R0;
 796:	00 00       	NOP;
 798:	00 00       	NOP;
 79a:	0d 01       	ILLEGAL;
 79c:	00 00       	NOP;
 79e:	02 00       	ILLEGAL;
 7a0:	47 03       	CC &= ASTAT[7 /* unused bit */];
 7a2:	00 00       	NOP;
 7a4:	04 01       	ILLEGAL;
 7a6:	d4 02       	ILLEGAL;
 7a8:	00 00       	NOP;
 7aa:	01 16       	IF !CC JUMP 0x3ac <bss_begin+0x344> (BP);
 7ac:	04 00       	ILLEGAL;
 7ae:	00 a0       	R0 = [P0 + 0x0];
 7b0:	fd 00       	ILLEGAL;
 7b2:	01 4e       	R1 >>= 0x0;
 7b4:	fe 00       	ILLEGAL;
 7b6:	01 8c       	W[P1 ++ P0] = R0.H;
 7b8:	05 00       	ILLEGAL;
 7ba:	00 02       	R0 = CC;
 7bc:	01 06       	IF !CC R0 = R1;
 7be:	df 01       	ILLEGAL;
 7c0:	00 00       	NOP;
 7c2:	02 01       	ILLEGAL;
 7c4:	08 dd       	ILLEGAL;
 7c6:	01 00       	ILLEGAL;
 7c8:	00 02       	R0 = CC;
 7ca:	02 05       	ILLEGAL;
 7cc:	eb 01       	ILLEGAL;
 7ce:	00 00       	NOP;
 7d0:	02 02       	R2 = CC;
 7d2:	07 3d       	ILLEGAL;
 7d4:	01 00       	ILLEGAL;
 7d6:	00 03       	CC = AZ;
 7d8:	04 05       	ILLEGAL;
 7da:	69 6e       	P1 += -0x33;		/* (-51) */
 7dc:	74 00       	CALL (PC + P4);
 7de:	02 04       	ILLEGAL;
 7e0:	07 31       	R0 = RETS;
 7e2:	00 00       	NOP;
 7e4:	00 02       	R0 = CC;
 7e6:	08 05       	(R7:1) = [SP++];
 7e8:	d3 00       	ILLEGAL;
 7ea:	00 00       	NOP;
 7ec:	02 08       	CC = R2 == R0;
 7ee:	07 27       	JUMP.S 0x15fc <_bredr_base_addr+0x594>;
 7f0:	00 00       	NOP;
 7f2:	00 02       	R0 = CC;
 7f4:	04 05       	ILLEGAL;
 7f6:	d8 00       	ILLEGAL;
 7f8:	00 00       	NOP;
 7fa:	02 04       	ILLEGAL;
 7fc:	07 2c       	JUMP.S 0xa <_att_ir_le_device_db_index+0x2>;
 7fe:	00 00       	NOP;
 800:	00 04       	ILLEGAL;
 802:	04 05       	ILLEGAL;
 804:	04 6f       	P4 += -0x20;		/* (-32) */
 806:	00 00       	NOP;
 808:	00 02       	R0 = CC;
 80a:	01 06       	IF !CC R0 = R1;
 80c:	e6 01       	ILLEGAL;
 80e:	00 00       	NOP;
 810:	06 64       	R6 += 0x0;		/* (  0) */
 812:	03 00       	ILLEGAL;
 814:	00 03       	CC = AZ;
 816:	d3 60       	R3 = 0x1a (X);		/*		R3=0x1a( 26) */
 818:	00 00       	NOP;
 81a:	00 07       	IF CC R0 = R0;
 81c:	01 5e       	P0 = P1 + (P0 << 0x2);
 81e:	04 00       	ILLEGAL;
 820:	00 02       	R0 = CC;
 822:	1a 01       	B2 = [SP++];
 824:	67 00       	CALL (FP);
 826:	00 00       	NOP;
 828:	a0 fd       	ILLEGAL;
 82a:	00 01       	ILLEGAL;
 82c:	4e fe       	ILLEGAL;
 82e:	00 01       	ILLEGAL;
 830:	e3 08       	CC = P3 < P4;
 832:	00 00       	NOP;
 834:	0a 01       	ILLEGAL;
 836:	00 00       	NOP;
 838:	08 6d       	P0 += 0x21;		/* ( 33) */
 83a:	00 01       	ILLEGAL;
 83c:	2b 67       	R3 += -0x1b;		/* (-27) */
 83e:	00 00       	NOP;
 840:	00 01       	ILLEGAL;
 842:	50 08       	CC = P0 == P2;
 844:	63 00       	CALL (P3);
 846:	01 2b       	JUMP.S 0xfffffe48 <_text_end+0xfefefe08>;
 848:	3d 00       	ILLEGAL;
 84a:	00 00       	NOP;
 84c:	01 51       	R4 = R1 + R0;
 84e:	09 6e       	P1 += -0x3f;		/* (-63) */
 850:	00 01       	ILLEGAL;
 852:	2b 76       	ILLEGAL;
 854:	00 00       	NOP;
 856:	00 0f       	ILLEGAL;
 858:	09 00       	ILLEGAL;
 85a:	00 0a       	CC = R0 <= R0 (IU);
 85c:	73 00       	CALL (PC + P3);
 85e:	01 30       	R0 = R1;
 860:	69 00       	ILLEGAL;
 862:	00 00       	NOP;
 864:	6a 09       	CC = P2 <= P5;
 866:	00 00       	NOP;
 868:	0a 69       	P2 = 0x21 (X);		/*		P2=0x21( 33) */
 86a:	00 01       	ILLEGAL;
 86c:	33 3d       	CYCLES = A1.W;
 86e:	00 00       	NOP;
 870:	00 d5       	ILLEGAL;
 872:	09 00       	ILLEGAL;
 874:	00 0b       	CC = A0 < A1;
 876:	65 04       	ILLEGAL;
 878:	00 00       	NOP;
 87a:	01 34       	I0 = R1;
 87c:	60 00       	CALL (P0);
 87e:	00 00       	NOP;
 880:	ea 09       	CC = P2 < P5 (IU);
 882:	00 00       	NOP;
 884:	0b 51       	R4 = R3 + R1;
 886:	04 00       	ILLEGAL;
 888:	00 01       	ILLEGAL;
 88a:	35 0a       	CC = R5 <= R6 (IU);
 88c:	01 00       	ILLEGAL;
 88e:	00 fd       	ILLEGAL;
 890:	09 00       	ILLEGAL;
 892:	00 0c       	CC = R0 == 0x0;
 894:	64 00       	CALL (P4);
 896:	01 36       	B0 = R1;
 898:	44 00       	STI R4;
 89a:	00 00       	NOP;
 89c:	06 71       	ILLEGAL;
 89e:	00 08       	CC = R0 == R0;
 8a0:	ff 1a       	IF CC JUMP 0x69e <bss_begin+0x636>;
 8a2:	9f 00       	RAISE 0xf;
 8a4:	05 04       	ILLEGAL;
 8a6:	60 00       	CALL (P0);
 8a8:	00 00       	NOP;
 8aa:	00 d2       	ILLEGAL;
 8ac:	00 00       	NOP;
 8ae:	00 02       	R0 = CC;
 8b0:	00 f0 03 00 	DBGA (R0.L, 0x3);
 8b4:	00 04       	ILLEGAL;
 8b6:	01 d4       	ILLEGAL;
 8b8:	02 00       	ILLEGAL;
 8ba:	00 01       	ILLEGAL;
 8bc:	73 04       	ILLEGAL;
 8be:	00 00       	NOP;
 8c0:	50 fe       	ILLEGAL;
 8c2:	00 01       	ILLEGAL;
 8c4:	00 ff       	ILLEGAL;
 8c6:	00 01       	ILLEGAL;
 8c8:	de 06       	IF !CC P3 = SP;
 8ca:	00 00       	NOP;
 8cc:	02 01       	ILLEGAL;
 8ce:	06 df       	ILLEGAL;
 8d0:	01 00       	ILLEGAL;
 8d2:	00 02       	R0 = CC;
 8d4:	01 08       	CC = R1 == R0;
 8d6:	dd 01       	ILLEGAL;
 8d8:	00 00       	NOP;
 8da:	02 02       	R2 = CC;
 8dc:	05 eb       	ILLEGAL;
 8de:	01 00       	ILLEGAL;
 8e0:	00 02       	R0 = CC;
 8e2:	02 07       	IF CC R0 = R2;
 8e4:	3d 01       	RETN = [SP++];
 8e6:	00 00       	NOP;
 8e8:	03 04       	ILLEGAL;
 8ea:	05 69       	P5 = 0x20 (X);		/*		P5=0x20( 32) */
 8ec:	6e 74       	ILLEGAL;
 8ee:	00 02       	R0 = CC;
 8f0:	04 07       	IF CC R0 = R4;
 8f2:	31 00       	CLI R1;
 8f4:	00 00       	NOP;
 8f6:	02 08       	CC = R2 == R0;
 8f8:	05 d3       	ILLEGAL;
 8fa:	00 00       	NOP;
 8fc:	00 02       	R0 = CC;
 8fe:	08 07       	IF CC R1 = R0;
 900:	27 00       	ILLEGAL;
 902:	00 00       	NOP;
 904:	02 04       	ILLEGAL;
 906:	05 d8       	ILLEGAL;
 908:	00 00       	NOP;
 90a:	00 02       	R0 = CC;
 90c:	04 07       	IF CC R0 = R4;
 90e:	2c 00       	ILLEGAL;
 910:	00 00       	NOP;
 912:	02 01       	ILLEGAL;
 914:	06 e6 01 00 	[P0 + 0x4] = R6;
 918:	00 04       	ILLEGAL;
 91a:	04 74       	ILLEGAL;
 91c:	00 00       	NOP;
 91e:	00 05       	(R7:0) = [SP++];
 920:	67 00       	CALL (FP);
 922:	00 00       	NOP;
 924:	06 01       	ILLEGAL;
 926:	6c 04       	ILLEGAL;
 928:	00 00       	NOP;
 92a:	02 1d       	IF CC JUMP 0xb2e <_intr_stack+0x2c6> (BP);
 92c:	01 3d       	LC0 = A0.W;
 92e:	00 00       	NOP;
 930:	00 50       	R0 = R0 + R0;
 932:	fe 00       	ILLEGAL;
 934:	01 00       	ILLEGAL;
 936:	ff 00       	ILLEGAL;
 938:	01 84       	R0.H = W[P1 ++ P0];
 93a:	0a 00       	ILLEGAL;
 93c:	00 cf       	ILLEGAL;
 93e:	00 00       	NOP;
 940:	00 07       	IF CC R0 = R0;
 942:	73 31       	ILLEGAL;
 944:	00 01       	ILLEGAL;
 946:	3d 6e       	P5 += -0x39;		/* (-57) */
 948:	00 00       	NOP;
 94a:	00 b0       	[P0 + 0x0] = R0;
 94c:	0a 00       	ILLEGAL;
 94e:	00 07       	IF CC R0 = R0;
 950:	73 32       	SP = P3;
 952:	00 01       	ILLEGAL;
 954:	3d 6e       	P5 += -0x39;		/* (-57) */
 956:	00 00       	NOP;
 958:	00 ef       	ILLEGAL;
 95a:	0a 00       	ILLEGAL;
 95c:	00 08       	CC = R0 == R0;
 95e:	61 31       	ILLEGAL;
 960:	00 01       	ILLEGAL;
 962:	4a cf       	ILLEGAL;
 964:	00 00       	NOP;
 966:	00 23       	JUMP.S 0xf66 <_intr_stack+0x6fe>;
 968:	0b 00       	ILLEGAL;
 96a:	00 08       	CC = R0 == R0;
 96c:	61 32       	P4 = P1;
 96e:	00 01       	ILLEGAL;
 970:	4b cf       	ILLEGAL;
 972:	00 00       	NOP;
 974:	00 62       	R0 = -0x40 (X);		/*		R0=0xffffffc0(-64) */
 976:	0b 00       	ILLEGAL;
 978:	00 00       	NOP;
 97a:	04 04       	ILLEGAL;
 97c:	60 00       	CALL (P0);
 97e:	00 00       	NOP;
 980:	00 05       	(R7:0) = [SP++];
 982:	01 00       	ILLEGAL;
 984:	00 02       	R0 = CC;
 986:	00 5f       	P4 = P0 + (P0 << 0x2);
 988:	04 00       	ILLEGAL;
 98a:	00 04       	ILLEGAL;
 98c:	01 d4       	ILLEGAL;
 98e:	02 00       	ILLEGAL;
 990:	00 01       	ILLEGAL;
 992:	b5 04       	ILLEGAL;
 994:	00 00       	NOP;
 996:	00 ff       	ILLEGAL;
 998:	00 01       	ILLEGAL;
 99a:	6a ff       	ILLEGAL;
 99c:	00 01       	ILLEGAL;
 99e:	d1 07       	IF CC P2 = P1;
 9a0:	00 00       	NOP;
 9a2:	02 01       	ILLEGAL;
 9a4:	06 df       	ILLEGAL;
 9a6:	01 00       	ILLEGAL;
 9a8:	00 02       	R0 = CC;
 9aa:	01 08       	CC = R1 == R0;
 9ac:	dd 01       	ILLEGAL;
 9ae:	00 00       	NOP;
 9b0:	02 02       	R2 = CC;
 9b2:	05 eb       	ILLEGAL;
 9b4:	01 00       	ILLEGAL;
 9b6:	00 02       	R0 = CC;
 9b8:	02 07       	IF CC R0 = R2;
 9ba:	3d 01       	RETN = [SP++];
 9bc:	00 00       	NOP;
 9be:	03 04       	ILLEGAL;
 9c0:	05 69       	P5 = 0x20 (X);		/*		P5=0x20( 32) */
 9c2:	6e 74       	ILLEGAL;
 9c4:	00 02       	R0 = CC;
 9c6:	04 07       	IF CC R0 = R4;
 9c8:	31 00       	CLI R1;
 9ca:	00 00       	NOP;
 9cc:	02 08       	CC = R2 == R0;
 9ce:	05 d3       	ILLEGAL;
 9d0:	00 00       	NOP;
 9d2:	00 02       	R0 = CC;
 9d4:	08 07       	IF CC R1 = R0;
 9d6:	27 00       	ILLEGAL;
 9d8:	00 00       	NOP;
 9da:	02 04       	ILLEGAL;
 9dc:	05 d8       	ILLEGAL;
 9de:	00 00       	NOP;
 9e0:	00 02       	R0 = CC;
 9e2:	04 07       	IF CC R0 = R4;
 9e4:	2c 00       	ILLEGAL;
 9e6:	00 00       	NOP;
 9e8:	04 04       	ILLEGAL;
 9ea:	6d 00       	ILLEGAL;
 9ec:	00 00       	NOP;
 9ee:	02 01       	ILLEGAL;
 9f0:	06 e6 01 00 	[P0 + 0x4] = R6;
 9f4:	00 04       	ILLEGAL;
 9f6:	04 7a       	ILLEGAL;
 9f8:	00 00       	NOP;
 9fa:	00 05       	(R7:0) = [SP++];
 9fc:	6d 00       	ILLEGAL;
 9fe:	00 00       	NOP;
 a00:	06 01       	ILLEGAL;
 a02:	ae 04       	ILLEGAL;
 a04:	00 00       	NOP;
 a06:	02 1f       	IF CC JUMP 0x80a <bss_begin+0x7a2> (BP);
 a08:	01 67       	R1 += -0x20;		/* (-32) */
 a0a:	00 00       	NOP;
 a0c:	00 00       	NOP;
 a0e:	ff 00       	ILLEGAL;
 a10:	01 6a       	P1 = -0x40 (X);		/*		P1=0xffffffc0(-64) */
 a12:	ff 00       	ILLEGAL;
 a14:	01 96       	W[P0++] = R1;
 a16:	0b 00       	ILLEGAL;
 a18:	00 f7       	ILLEGAL;
 a1a:	00 00       	NOP;
 a1c:	00 07       	IF CC R0 = R0;
 a1e:	f9 03       	VS ^= CC;
 a20:	00 00       	NOP;
 a22:	01 3d       	LC0 = A0.W;
 a24:	67 00       	CALL (FP);
 a26:	00 00       	NOP;
 a28:	c2 0b       	ILLEGAL;
 a2a:	00 00       	NOP;
 a2c:	07 f4       	ILLEGAL;
 a2e:	03 00       	ILLEGAL;
 a30:	00 01       	ILLEGAL;
 a32:	3d 74       	ILLEGAL;
 a34:	00 00       	NOP;
 a36:	00 e0       	ILLEGAL;
 a38:	0b 00       	ILLEGAL;
 a3a:	00 08       	CC = R0 == R0;
 a3c:	64 73       	ILLEGAL;
 a3e:	74 00       	CALL (PC + P4);
 a40:	01 49       	CC = BITTST (R1, 0x0);		/* bit  0 */
 a42:	67 00       	CALL (FP);
 a44:	00 00       	NOP;
 a46:	fe 0b       	ILLEGAL;
 a48:	00 00       	NOP;
 a4a:	08 73       	ILLEGAL;
 a4c:	72 63       	R2 = -0x12 (X);		/*		R2=0xffffffee(-18) */
 a4e:	00 01       	ILLEGAL;
 a50:	4a 74       	ILLEGAL;
 a52:	00 00       	NOP;
 a54:	00 3d       	LC0 = A0.X;
 a56:	0c 00       	ILLEGAL;
 a58:	00 09       	CC = R0 <= R0;
 a5a:	e8 03       	RND_MOD ^= CC;
 a5c:	00 00       	NOP;
 a5e:	01 4b       	BITTGL (R1, 0x0);		/* bit  0 */
 a60:	f7 00       	ILLEGAL;
 a62:	00 00       	NOP;
 a64:	5b 0c       	CC = P3 == 0x3;
 a66:	00 00       	NOP;
 a68:	09 fe       	ILLEGAL;
 a6a:	03 00       	ILLEGAL;
 a6c:	00 01       	ILLEGAL;
 a6e:	4c fd       	ILLEGAL;
 a70:	00 00       	NOP;
 a72:	00 9a       	B[P0++] = R0;
 a74:	0c 00       	ILLEGAL;
 a76:	00 00       	NOP;
 a78:	04 04       	ILLEGAL;
 a7a:	59 00       	ILLEGAL;
 a7c:	00 00       	NOP;
 a7e:	04 04       	ILLEGAL;
 a80:	03 01       	ILLEGAL;
 a82:	00 00       	NOP;
 a84:	05 59       	R4 = R5 ^ R0;
 a86:	00 00       	NOP;
 a88:	00 00       	NOP;
 a8a:	d2 00       	ILLEGAL;
 a8c:	00 00       	NOP;
 a8e:	02 00       	ILLEGAL;
 a90:	dd 04       	ILLEGAL;
 a92:	00 00       	NOP;
 a94:	04 01       	ILLEGAL;
 a96:	d4 02       	ILLEGAL;
 a98:	00 00       	NOP;
 a9a:	01 f0 04 00 	DBGA (R1.L, 0x4);
 a9e:	00 6c       	P0 += 0x0;		/* (  0) */
 aa0:	ff 00       	ILLEGAL;
 aa2:	01 06       	IF !CC R0 = R1;
 aa4:	00 01       	ILLEGAL;
 aa6:	01 a9       	R1 = W[P0 + 0x8] (X);
 aa8:	08 00       	ILLEGAL;
 aaa:	00 02       	R0 = CC;
 aac:	01 06       	IF !CC R0 = R1;
 aae:	df 01       	ILLEGAL;
 ab0:	00 00       	NOP;
 ab2:	02 01       	ILLEGAL;
 ab4:	08 dd       	ILLEGAL;
 ab6:	01 00       	ILLEGAL;
 ab8:	00 02       	R0 = CC;
 aba:	02 05       	ILLEGAL;
 abc:	eb 01       	ILLEGAL;
 abe:	00 00       	NOP;
 ac0:	02 02       	R2 = CC;
 ac2:	07 3d       	ILLEGAL;
 ac4:	01 00       	ILLEGAL;
 ac6:	00 03       	CC = AZ;
 ac8:	04 05       	ILLEGAL;
 aca:	69 6e       	P1 += -0x33;		/* (-51) */
 acc:	74 00       	CALL (PC + P4);
 ace:	02 04       	ILLEGAL;
 ad0:	07 31       	R0 = RETS;
 ad2:	00 00       	NOP;
 ad4:	00 02       	R0 = CC;
 ad6:	08 05       	(R7:1) = [SP++];
 ad8:	d3 00       	ILLEGAL;
 ada:	00 00       	NOP;
 adc:	02 08       	CC = R2 == R0;
 ade:	07 27       	JUMP.S 0x18ec <_mem_pool+0x74>;
 ae0:	00 00       	NOP;
 ae2:	00 02       	R0 = CC;
 ae4:	04 05       	ILLEGAL;
 ae6:	d8 00       	ILLEGAL;
 ae8:	00 00       	NOP;
 aea:	02 04       	ILLEGAL;
 aec:	07 2c       	JUMP.S 0x2fa <bss_begin+0x292>;
 aee:	00 00       	NOP;
 af0:	00 02       	R0 = CC;
 af2:	01 06       	IF !CC R0 = R1;
 af4:	e6 01       	ILLEGAL;
 af6:	00 00       	NOP;
 af8:	04 04       	ILLEGAL;
 afa:	74 00       	CALL (PC + P4);
 afc:	00 00       	NOP;
 afe:	05 67       	R5 += -0x20;		/* (-32) */
 b00:	00 00       	NOP;
 b02:	00 06       	IF !CC R0 = R0;
 b04:	64 03       	CC ^= ASTAT[4 /* unused bit */];
 b06:	00 00       	NOP;
 b08:	03 d3       	ILLEGAL;
 b0a:	60 00       	CALL (P0);
 b0c:	00 00       	NOP;
 b0e:	07 01       	ILLEGAL;
 b10:	2b 05       	ILLEGAL;
 b12:	00 00       	NOP;
 b14:	02 22       	JUMP.S 0xf18 <_intr_stack+0x6b0>;
 b16:	01 79       	ILLEGAL;
 b18:	00 00       	NOP;
 b1a:	00 6c       	P0 += 0x0;		/* (  0) */
 b1c:	ff 00       	ILLEGAL;
 b1e:	01 06       	IF !CC R0 = R1;
 b20:	00 01       	ILLEGAL;
 b22:	01 ad       	P1 = [P0 + 0x10];
 b24:	0c 00       	ILLEGAL;
 b26:	00 cf       	ILLEGAL;
 b28:	00 00       	NOP;
 b2a:	00 08       	CC = R0 == R0;
 b2c:	73 74       	ILLEGAL;
 b2e:	72 00       	CALL (PC + P2);
 b30:	01 39       	A0.X = A0.W;
 b32:	6e 00       	ILLEGAL;
 b34:	00 00       	NOP;
 b36:	d9 0c       	CC = P1 < 0x3;
 b38:	00 00       	NOP;
 b3a:	09 32       	P1 = R1;
 b3c:	05 00       	ILLEGAL;
 b3e:	00 01       	ILLEGAL;
 b40:	3c 6e       	P4 += -0x39;		/* (-57) */
 b42:	00 00       	NOP;
 b44:	00 5a       	P0 = P0 << 0x1;
 b46:	0d 00       	ILLEGAL;
 b48:	00 09       	CC = R0 <= R0;
 b4a:	51 04       	ILLEGAL;
 b4c:	00 00       	NOP;
 b4e:	01 3f       	USP = A0.W;
 b50:	cf 00       	ILLEGAL;
 b52:	00 00       	NOP;
 b54:	8e 0d       	CC = R6 < 0x1 (IU);
 b56:	00 00       	NOP;
 b58:	00 04       	ILLEGAL;
 b5a:	04 60       	R4 = 0x0 (X);		/*		R4=0x0(  0) */
 b5c:	00 00       	NOP;
 b5e:	00 00       	NOP;
 b60:	ad 00       	EXCPT 0xd;
 b62:	00 00       	NOP;
 b64:	02 00       	ILLEGAL;
 b66:	59 05       	ILLEGAL;
 b68:	00 00       	NOP;
 b6a:	04 01       	ILLEGAL;
 b6c:	f3 09       	CC = P3 < SP (IU);
 b6e:	00 00       	NOP;
 b70:	08 00       	ILLEGAL;
 b72:	01 01       	ILLEGAL;
 b74:	1e 00       	ILLEGAL;
 b76:	01 01       	ILLEGAL;
 b78:	2f 68       	FP = 0x5 (X);		/*		FP=0x5(  5) */
 b7a:	6f 6d       	FP += 0x2d;		/* ( 45) */
 b7c:	65 2f       	JUMP.S 0xa46 <_intr_stack+0x1de>;
 b7e:	62 75       	ILLEGAL;
 b80:	69 6c       	P1 += 0xd;		/* ( 13) */
 b82:	64 2f       	JUMP.S 0xa4a <_intr_stack+0x1e2>;
 b84:	64 76       	ILLEGAL;
 b86:	31 30       	R6 = R1;
 b88:	5f 38       	A1.W = FP;
 b8a:	32 39       	ASTAT = A1.X;
 b8c:	70 6d       	P0 += 0x2e;		/* ( 46) */
 b8e:	2f 67       	R7 += -0x1b;		/* (-27) */
 b90:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 b92:	2d 34       	M1 = R5;
 b94:	2e 35       	ILLEGAL;
 b96:	2f 6c       	FP += 0x5;		/* (  5) */
 b98:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 b9a:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 b9c:	63 2f       	JUMP.S 0xa62 <_intr_stack+0x1fa>;
 b9e:	2e 2e       	JUMP.S 0x7fa <bss_begin+0x792>;
 ba0:	2f 67       	R7 += -0x1b;		/* (-27) */
 ba2:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 ba4:	2f 63       	R7 = -0x1b (X);		/*		R7=0xffffffe5(-27) */
 ba6:	6f 6e       	FP += -0x33;		/* (-51) */
 ba8:	66 69       	SP = 0x2c (X);		/*		SP=0x2c( 44) */
 baa:	67 2f       	JUMP.S 0xa78 <_intr_stack+0x210>;
 bac:	64 76       	ILLEGAL;
 bae:	31 30       	R6 = R1;
 bb0:	2f 6c       	FP += 0x5;		/* (  5) */
 bb2:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 bb4:	31 66       	R1 += -0x3a;		/* (-58) */
 bb6:	75 6e       	P5 += -0x32;		/* (-50) */
 bb8:	63 73       	ILLEGAL;
 bba:	2e 61       	R6 = 0x25 (X);		/*		R6=0x25( 37) */
 bbc:	73 6d       	P3 += 0x2e;		/* ( 46) */
 bbe:	00 2f       	JUMP.S 0x9be <_intr_stack+0x156>;
 bc0:	68 6f       	P0 += -0x13;		/* (-19) */
 bc2:	6d 65       	R5 += 0x2d;		/* ( 45) */
 bc4:	2f 62       	R7 = -0x3b (X);		/*		R7=0xffffffc5(-59) */
 bc6:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 bc8:	6c 64       	R4 += 0xd;		/* ( 13) */
 bca:	2f 64       	R7 += 0x5;		/* (  5) */
 bcc:	76 31       	ILLEGAL;
 bce:	30 5f       	P4 = P0 + (SP << 0x2);
 bd0:	38 32       	FP = R0;
 bd2:	39 70       	ILLEGAL;
 bd4:	6d 2f       	JUMP.S 0xaae <_intr_stack+0x246>;
 bd6:	64 76       	ILLEGAL;
 bd8:	31 30       	R6 = R1;
 bda:	5f 77       	ILLEGAL;
 bdc:	69 6e       	P1 += -0x33;		/* (-51) */
 bde:	5f 62       	R7 = -0x35 (X);		/*		R7=0xffffffcb(-53) */
 be0:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 be2:	6c 64       	R4 += 0xd;		/* ( 13) */
 be4:	2f 67       	R7 += -0x1b;		/* (-27) */
 be6:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 be8:	5f 62       	R7 = -0x35 (X);		/*		R7=0xffffffcb(-53) */
 bea:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 bec:	6c 64       	R4 += 0xd;		/* ( 13) */
 bee:	2d 34       	M1 = R5;
 bf0:	2e 35       	ILLEGAL;
 bf2:	2f 64       	R7 += 0x5;		/* (  5) */
 bf4:	76 31       	ILLEGAL;
 bf6:	30 2d       	JUMP.S 0x656 <bss_begin+0x5ee>;
 bf8:	65 6c       	P5 += 0xc;		/* ( 12) */
 bfa:	66 2f       	JUMP.S 0xac6 <_intr_stack+0x25e>;
 bfc:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 bfe:	62 67       	R2 += -0x14;		/* (-20) */
 c00:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 c02:	00 47       	ILLEGAL;
 c04:	4e 55       	R5 = R6 & R1;
 c06:	20 41       	R0 = (R0 + R4) << 0x1;
 c08:	53 20       	JUMP.S 0xcae <_intr_stack+0x446>;
 c0a:	32 2e       	JUMP.S 0x86e <_intr_stack+0x6>;
 c0c:	32 31       	R6 = A1.X;
 c0e:	00 01       	ILLEGAL;
 c10:	80 ad       	P0 = [P0 + 0x18];
 c12:	00 00       	NOP;
 c14:	00 02       	R0 = CC;
 c16:	00 6d       	P0 += 0x20;		/* ( 32) */
 c18:	05 00       	ILLEGAL;
 c1a:	00 04       	ILLEGAL;
 c1c:	01 73       	ILLEGAL;
 c1e:	0a 00       	ILLEGAL;
 c20:	00 20       	JUMP.S 0xc20 <_intr_stack+0x3b8>;
 c22:	00 01       	ILLEGAL;
 c24:	01 3e       	USP = R1;
 c26:	00 01       	ILLEGAL;
 c28:	01 2f       	JUMP.S 0xa2a <_intr_stack+0x1c2>;
 c2a:	68 6f       	P0 += -0x13;		/* (-19) */
 c2c:	6d 65       	R5 += 0x2d;		/* ( 45) */
 c2e:	2f 62       	R7 = -0x3b (X);		/*		R7=0xffffffc5(-59) */
 c30:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 c32:	6c 64       	R4 += 0xd;		/* ( 13) */
 c34:	2f 64       	R7 += 0x5;		/* (  5) */
 c36:	76 31       	ILLEGAL;
 c38:	30 5f       	P4 = P0 + (SP << 0x2);
 c3a:	38 32       	FP = R0;
 c3c:	39 70       	ILLEGAL;
 c3e:	6d 2f       	JUMP.S 0xb18 <_intr_stack+0x2b0>;
 c40:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 c42:	63 2d       	JUMP.S 0x708 <bss_begin+0x6a0>;
 c44:	34 2e       	JUMP.S 0x8ac <_intr_stack+0x44>;
 c46:	35 2f       	JUMP.S 0xab0 <_intr_stack+0x248>;
 c48:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 c4a:	62 67       	R2 += -0x14;		/* (-20) */
 c4c:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 c4e:	2f 2e       	JUMP.S 0x8ac <_intr_stack+0x44>;
 c50:	2e 2f       	JUMP.S 0xaac <_intr_stack+0x244>;
 c52:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 c54:	63 2f       	JUMP.S 0xb1a <_intr_stack+0x2b2>;
 c56:	63 6f       	P3 += -0x14;		/* (-20) */
 c58:	6e 66       	R6 += -0x33;		/* (-51) */
 c5a:	69 67       	R1 += -0x13;		/* (-19) */
 c5c:	2f 64       	R7 += 0x5;		/* (  5) */
 c5e:	76 31       	ILLEGAL;
 c60:	30 2f       	JUMP.S 0xac0 <_intr_stack+0x258>;
 c62:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 c64:	62 31       	ILLEGAL;
 c66:	66 75       	ILLEGAL;
 c68:	6e 63       	R6 = -0x13 (X);		/*		R6=0xffffffed(-19) */
 c6a:	73 2e       	JUMP.S 0x950 <_intr_stack+0xe8>;
 c6c:	61 73       	ILLEGAL;
 c6e:	6d 00       	ILLEGAL;
 c70:	2f 68       	FP = 0x5 (X);		/*		FP=0x5(  5) */
 c72:	6f 6d       	FP += 0x2d;		/* ( 45) */
 c74:	65 2f       	JUMP.S 0xb3e <_intr_stack+0x2d6>;
 c76:	62 75       	ILLEGAL;
 c78:	69 6c       	P1 += 0xd;		/* ( 13) */
 c7a:	64 2f       	JUMP.S 0xb42 <_intr_stack+0x2da>;
 c7c:	64 76       	ILLEGAL;
 c7e:	31 30       	R6 = R1;
 c80:	5f 38       	A1.W = FP;
 c82:	32 39       	ASTAT = A1.X;
 c84:	70 6d       	P0 += 0x2e;		/* ( 46) */
 c86:	2f 64       	R7 += 0x5;		/* (  5) */
 c88:	76 31       	ILLEGAL;
 c8a:	30 5f       	P4 = P0 + (SP << 0x2);
 c8c:	77 69       	FP = 0x2e (X);		/*		FP=0x2e( 46) */
 c8e:	6e 5f       	P5 = SP + (P5 << 0x2);
 c90:	62 75       	ILLEGAL;
 c92:	69 6c       	P1 += 0xd;		/* ( 13) */
 c94:	64 2f       	JUMP.S 0xb5c <_intr_stack+0x2f4>;
 c96:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 c98:	63 5f       	P5 = P3 + (P4 << 0x2);
 c9a:	62 75       	ILLEGAL;
 c9c:	69 6c       	P1 += 0xd;		/* ( 13) */
 c9e:	64 2d       	JUMP.S 0x766 <bss_begin+0x6fe>;
 ca0:	34 2e       	JUMP.S 0x908 <_intr_stack+0xa0>;
 ca2:	35 2f       	JUMP.S 0xb0c <_intr_stack+0x2a4>;
 ca4:	64 76       	ILLEGAL;
 ca6:	31 30       	R6 = R1;
 ca8:	2d 65       	R5 += 0x25;		/* ( 37) */
 caa:	6c 66       	R4 += -0x33;		/* (-51) */
 cac:	2f 6c       	FP += 0x5;		/* (  5) */
 cae:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 cb0:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 cb2:	63 00       	CALL (P3);
 cb4:	47 4e       	R7 >>= 0x8;
 cb6:	55 20       	JUMP.S 0xd60 <_intr_stack+0x4f8>;
 cb8:	41 53       	R5 = R1 - R0;
 cba:	20 32       	P4 = R0;
 cbc:	2e 32       	P5 = R6;
 cbe:	31 00       	CLI R1;
 cc0:	01 80       	R0 = [P1 ++ P0];

Disassembly of section .debug_line:

00000000 <.debug_line>:
   0:	ee 01       	ILLEGAL;
   2:	00 00       	NOP;
   4:	02 00       	ILLEGAL;
   6:	40 00       	STI R0;
   8:	00 00       	NOP;
   a:	01 01       	ILLEGAL;
   c:	fb 0e       	ILLEGAL;
   e:	0d 00       	ILLEGAL;
  10:	01 01       	ILLEGAL;
  12:	01 01       	ILLEGAL;
  14:	00 00       	NOP;
  16:	00 01       	ILLEGAL;
  18:	00 00       	NOP;
  1a:	01 2e       	JUMP.S 0xfffffc1c <_text_end+0xfefefbdc>;
  1c:	2e 5c       	P0 = SP + (P5 << 0x1);
  1e:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
  20:	6d 00       	ILLEGAL;
  22:	2e 2e       	JUMP.S 0xfffffc7e <_text_end+0xfefefc3e>;
  24:	5c 63       	R4 = -0x15 (X);		/*		R4=0xffffffeb(-21) */
  26:	63 6d       	P3 += 0x2c;		/* ( 44) */
  28:	5c 00       	ILLEGAL;
  2a:	00 63       	R0 = -0x20 (X);		/*		R0=0xffffffe0(-32) */
  2c:	63 6d       	P3 += 0x2c;		/* ( 44) */
  2e:	5f 6d       	FP += 0x2b;		/* ( 43) */
  30:	65 6d       	P5 += 0x2c;		/* ( 44) */
  32:	6f 72       	ILLEGAL;
  34:	79 2e       	JUMP.S 0xfffffd26 <_text_end+0xfefefce6>;
  36:	63 00       	CALL (P3);
  38:	01 00       	ILLEGAL;
  3a:	00 74       	ILLEGAL;
  3c:	6f 6d       	FP += 0x2d;		/* ( 45) */
  3e:	63 72       	ILLEGAL;
  40:	79 70       	ILLEGAL;
  42:	74 2e       	JUMP.S 0xfffffd2a <_text_end+0xfefefcea>;
  44:	68 00       	ILLEGAL;
  46:	02 00       	ILLEGAL;
  48:	00 00       	NOP;
  4a:	00 05       	(R7:0) = [SP++];
  4c:	02 fc       	ILLEGAL;
  4e:	f3 00       	ILLEGAL;
  50:	01 03       	CC = AN;
  52:	2a 01       	ILLEGAL;
  54:	03 0e       	CC = R3 <= 0x0 (IU);
  56:	2e 03       	CC |= ASTAT[14 /* unused bit */];
  58:	72 2e       	JUMP.S 0xfffffd3c <_text_end+0xfefefcfc>;
  5a:	03 0e       	CC = R3 <= 0x0 (IU);
  5c:	4a 03       	CC &= ASTAT[10 /* unused bit */];
  5e:	72 82       	R1.L = W[P2 ++ SP];
  60:	03 0e       	CC = R3 <= 0x0 (IU);
  62:	4a 03       	CC &= ASTAT[10 /* unused bit */];
  64:	72 66       	R2 += -0x32;		/* (-50) */
  66:	03 0e       	CC = R3 <= 0x0 (IU);
  68:	4a 00       	ILLEGAL;
  6a:	02 04       	ILLEGAL;
  6c:	02 f7       	ILLEGAL;
  6e:	4e 9f       	W[I1] = R6.H;
  70:	03 14       	IF !CC JUMP 0x76 <bss_begin+0xe> (BP);
  72:	4a 03       	CC &= ASTAT[10 /* unused bit */];
  74:	6c 2e       	JUMP.S 0xfffffd4c <_text_end+0xfefefd0c>;
  76:	03 14       	IF !CC JUMP 0x7c <bss_begin+0x14> (BP);
  78:	4a 08       	CC = P2 == P1;
  7a:	25 4e       	R5 >>= 0x4;
  7c:	08 3d       	LT0 = A0.X;
  7e:	2f 2d       	JUMP.S 0xfffffadc <_text_end+0xfefefa9c>;
  80:	4b 84       	R1.H = W[P3 ++ P1];
  82:	67 83       	R5.L = W[FP ++ P4];
  84:	d7 d7       	ILLEGAL;
  86:	9f 00       	RAISE 0xf;
  88:	02 04       	ILLEGAL;
  8a:	01 c1 00 02 	A1 += R0.L * R0.L, A0 = R0.L * R0.H (IS);
  8e:	04 01       	ILLEGAL;
  90:	69 00       	ILLEGAL;
  92:	02 04       	ILLEGAL;
  94:	01 2b       	JUMP.S 0xfffff696 <_text_end+0xfefef656>;
  96:	80 68       	P0 = 0x10 (X);		/*		P0=0x10( 16) */
  98:	a1 30       	R4 = I1;
  9a:	03 78       	ILLEGAL;
  9c:	ba 00       	ILLEGAL;
  9e:	02 04       	ILLEGAL;
  a0:	01 06       	IF !CC R0 = R1;
  a2:	2e 06       	IF !CC R5 = R6;
  a4:	03 0c       	CC = R3 == 0x0;
  a6:	4a 4b       	BITTGL (R2, 0x9);		/* bit  9 */
  a8:	03 0a       	CC = R3 <= R0 (IU);
  aa:	08 3c       	LT0 = R0;
  ac:	00 02       	R0 = CC;
  ae:	04 02       	R4 = CC;
  b0:	f6 4e       	R6 >>= 0x1e;
  b2:	a5 85       	R6.H = W[P5 ++ P4];
  b4:	83 03       	V_COPY = CC;
  b6:	1b 82       	R0.L = W[P3];
  b8:	6d 03       	CC ^= AC1;
  ba:	5e 2e       	JUMP.S 0xfffffd76 <_text_end+0xfefefd36>;
  bc:	03 1b       	IF CC JUMP 0xfffffec2 <_text_end+0xfefefe82>;
  be:	2e 6d       	SP += 0x25;		/* ( 37) */
  c0:	03 65       	R3 += 0x20;		/* ( 32) */
  c2:	4a c1       	ILLEGAL;
  c4:	03 79       	ILLEGAL;
  c6:	2e 34       	M1 = R6;
  c8:	03 7a       	ILLEGAL;
  ca:	2e 03       	CC |= ASTAT[14 /* unused bit */];
  cc:	89 7f       	ILLEGAL;
  ce:	9e 00       	RAISE 0xe;
  d0:	02 04       	ILLEGAL;
  d2:	02 03       	CC = AC0_COPY;
  d4:	fd 00       	ILLEGAL;
  d6:	2e 00       	ILLEGAL;
  d8:	02 04       	ILLEGAL;
  da:	02 f3       	ILLEGAL;
  dc:	00 02       	R0 = CC;
  de:	04 02       	R4 = CC;
  e0:	64 4e       	R4 >>= 0xc;
  e2:	03 71       	ILLEGAL;
  e4:	9e 00       	RAISE 0xe;
  e6:	02 04       	ILLEGAL;
  e8:	01 a4       	R1 = W[P0 + 0x0] (Z);
  ea:	00 02       	R0 = CC;
  ec:	04 01       	ILLEGAL;
  ee:	6c 00       	ILLEGAL;
  f0:	02 04       	ILLEGAL;
  f2:	01 03       	CC = AN;
  f4:	83 7f       	ILLEGAL;
  f6:	2e 00       	ILLEGAL;
  f8:	02 04       	ILLEGAL;
  fa:	01 03       	CC = AN;
  fc:	f0 00       	ILLEGAL;
  fe:	4a 00       	ILLEGAL;
 100:	02 04       	ILLEGAL;
 102:	01 35       	I0 = A0.W;
 104:	00 02       	R0 = CC;
 106:	04 01       	ILLEGAL;
 108:	6c 00       	ILLEGAL;
 10a:	02 04       	ILLEGAL;
 10c:	01 03       	CC = AN;
 10e:	83 7f       	ILLEGAL;
 110:	2e 00       	ILLEGAL;
 112:	02 04       	ILLEGAL;
 114:	01 03       	CC = AN;
 116:	f4 00       	ILLEGAL;
 118:	2e 00       	ILLEGAL;
 11a:	02 04       	ILLEGAL;
 11c:	01 9f       	[I0] = R1;
 11e:	65 03       	ILLEGAL;
 120:	17 ba       	[FP -0x7c] = R7;
 122:	dd 2d       	JUMP.S 0xfffffcdc <_text_end+0xfefefc9c>;
 124:	03 7a       	ILLEGAL;
 126:	2e 03       	CC |= ASTAT[14 /* unused bit */];
 128:	f5 7e       	ILLEGAL;
 12a:	4a 03       	CC &= ASTAT[10 /* unused bit */];
 12c:	8b 01       	ILLEGAL;
 12e:	2e 03       	CC |= ASTAT[14 /* unused bit */];
 130:	f5 7e       	ILLEGAL;
 132:	82 00       	JUMP (PC + P2);
 134:	02 04       	ILLEGAL;
 136:	02 03       	CC = AC0_COPY;
 138:	91 01       	ILLEGAL;
 13a:	66 00       	CALL (SP);
 13c:	02 04       	ILLEGAL;
 13e:	02 f3       	ILLEGAL;
 140:	68 03       	CC ^= RND_MOD;
 142:	71 9e       	I1 -= M0;
 144:	03 68       	P3 = 0x0 (X);		/*		P3=0x0(  0) */
 146:	9e 00       	RAISE 0xe;
 148:	02 04       	ILLEGAL;
 14a:	01 03       	CC = AN;
 14c:	93 7f       	ILLEGAL;
 14e:	2e 00       	ILLEGAL;
 150:	02 04       	ILLEGAL;
 152:	01 03       	CC = AN;
 154:	aa 01       	ILLEGAL;
 156:	4a 00       	ILLEGAL;
 158:	02 04       	ILLEGAL;
 15a:	01 03       	CC = AN;
 15c:	d6 7e       	ILLEGAL;
 15e:	4a 00       	ILLEGAL;
 160:	02 04       	ILLEGAL;
 162:	01 03       	CC = AN;
 164:	aa 01       	ILLEGAL;
 166:	4a 00       	ILLEGAL;
 168:	02 04       	ILLEGAL;
 16a:	01 03       	CC = AN;
 16c:	79 2e       	JUMP.S 0xfffffe5e <_text_end+0xfefefe1e>;
 16e:	00 02       	R0 = CC;
 170:	04 01       	ILLEGAL;
 172:	35 00       	CLI R5;
 174:	02 04       	ILLEGAL;
 176:	01 03       	CC = AN;
 178:	09 2e       	JUMP.S 0xfffffd8a <_text_end+0xfefefd4a>;
 17a:	00 02       	R0 = CC;
 17c:	04 01       	ILLEGAL;
 17e:	03 cd       	ILLEGAL;
 180:	7e 2e       	JUMP.S 0xfffffe7c <_text_end+0xfefefe3c>;
 182:	00 02       	R0 = CC;
 184:	04 01       	ILLEGAL;
 186:	03 a3       	R3 = [P0 + 0x30];
 188:	01 66       	R1 += -0x40;		/* (-64) */
 18a:	00 02       	R0 = CC;
 18c:	04 01       	ILLEGAL;
 18e:	35 00       	CLI R5;
 190:	02 04       	ILLEGAL;
 192:	01 03       	CC = AN;
 194:	09 4a       	BITSET (R1, 0x1);		/* bit  1 */
 196:	00 02       	R0 = CC;
 198:	04 01       	ILLEGAL;
 19a:	03 55       	R4 = R3 & R0;
 19c:	4a 00       	ILLEGAL;
 19e:	02 04       	ILLEGAL;
 1a0:	01 9f       	[I0] = R1;
 1a2:	65 03       	ILLEGAL;
 1a4:	16 ba       	[FP -0x7c] = R6;
 1a6:	00 02       	R0 = CC;
 1a8:	04 01       	ILLEGAL;
 1aa:	68 00       	ILLEGAL;
 1ac:	02 04       	ILLEGAL;
 1ae:	01 9f       	[I0] = R1;
 1b0:	65 a1       	R5 = [P4 + 0x14];
 1b2:	08 3f       	SEQSTAT = A0.X;
 1b4:	4e a0       	R6 = [P1 + 0x4];
 1b6:	2d 2f       	JUMP.S 0x10 <_test_buf+0x4>;
 1b8:	49 2f       	JUMP.S 0x4a <_ble_resource+0x16>;
 1ba:	84 2f       	JUMP.S 0xc2 <bss_begin+0x5a>;
 1bc:	2d 9f       	W[I1] = R5.L;
 1be:	31 67       	R1 += -0x1a;		/* (-26) */
 1c0:	08 23       	JUMP.S 0x7d0 <bss_begin+0x768>;
 1c2:	30 03       	CC |= AV0;
 1c4:	64 2e       	JUMP.S 0xfffffe8c <_text_end+0xfefefe4c>;
 1c6:	03 1c       	IF CC JUMP 0x1cc <bss_begin+0x164> (BP);
 1c8:	66 00       	CALL (SP);
 1ca:	02 04       	ILLEGAL;
 1cc:	01 03       	CC = AN;
 1ce:	64 9e       	I0 += M1;
 1d0:	03 1f       	IF CC JUMP 0xffffffd6 <_text_end+0xfefeff96> (BP);
 1d2:	82 00       	JUMP (PC + P2);
 1d4:	02 04       	ILLEGAL;
 1d6:	01 03       	CC = AN;
 1d8:	09 4a       	BITSET (R1, 0x1);		/* bit  1 */
 1da:	00 02       	R0 = CC;
 1dc:	04 01       	ILLEGAL;
 1de:	a0 03       	AZ |= CC;
 1e0:	76 08       	CC = SP == SP;
 1e2:	90 03       	AV0 = CC;
 1e4:	0a 08       	CC = R2 == R1;
 1e6:	e4 00       	ILLEGAL;
 1e8:	02 04       	ILLEGAL;
 1ea:	02 6c       	P2 += 0x0;		/* (  0) */
 1ec:	86 02       	ILLEGAL;
 1ee:	0c 00       	ILLEGAL;
 1f0:	01 01       	ILLEGAL;
 1f2:	3a 01       	SYSCFG = [SP++];
 1f4:	00 00       	NOP;
 1f6:	02 00       	ILLEGAL;
 1f8:	39 00       	ILLEGAL;
 1fa:	00 00       	NOP;
 1fc:	01 01       	ILLEGAL;
 1fe:	fb 0e       	ILLEGAL;
 200:	0d 00       	ILLEGAL;
 202:	01 01       	ILLEGAL;
 204:	01 01       	ILLEGAL;
 206:	00 00       	NOP;
 208:	00 01       	ILLEGAL;
 20a:	00 00       	NOP;
 20c:	01 2e       	JUMP.S 0xfffffe0e <_text_end+0xfefefdce>;
 20e:	2e 5c       	P0 = SP + (P5 << 0x1);
 210:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 212:	6d 00       	ILLEGAL;
 214:	2e 2e       	JUMP.S 0xfffffe70 <_text_end+0xfefefe30>;
 216:	5c 63       	R4 = -0x15 (X);		/*		R4=0xffffffeb(-21) */
 218:	63 6d       	P3 += 0x2c;		/* ( 44) */
 21a:	5c 00       	ILLEGAL;
 21c:	00 61       	R0 = 0x20 (X);		/*		R0=0x20( 32) */
 21e:	65 73       	ILLEGAL;
 220:	2e 63       	R6 = -0x1b (X);		/*		R6=0xffffffe5(-27) */
 222:	00 01       	ILLEGAL;
 224:	00 00       	NOP;
 226:	74 6f       	P4 += -0x12;		/* (-18) */
 228:	6d 63       	R5 = -0x13 (X);		/*		R5=0xffffffed(-19) */
 22a:	72 79       	ILLEGAL;
 22c:	70 74       	ILLEGAL;
 22e:	2e 68       	SP = 0x5 (X);		/*		SP=0x5(  5) */
 230:	00 02       	R0 = CC;
 232:	00 00       	NOP;
 234:	00 00       	NOP;
 236:	05 02       	R5 = CC;
 238:	60 f7       	ILLEGAL;
 23a:	00 01       	ILLEGAL;
 23c:	03 36       	B0 = R3;
 23e:	01 4a       	BITSET (R1, 0x0);		/* bit  0 */
 240:	31 02       	ILLEGAL;
 242:	26 13       	IF !CC JUMP 0x8e <bss_begin+0x26>;
 244:	08 c9 08 c9 	A1 = R1.H * R0.H, A0 += R1.L * R0.L (IS) || [P1++] = R0 || R1 = P0;
 248:	08 92 48 30 
 24c:	67 03       	CC ^= ASTAT[7 /* unused bit */];
 24e:	77 2e       	JUMP.S 0xffffff3c <_text_end+0xfefefefc>;
 250:	36 00       	CLI R6;
 252:	02 04       	ILLEGAL;
 254:	01 4b       	BITTGL (R1, 0x0);		/* bit  0 */
 256:	d8 02       	ILLEGAL;
 258:	24 13       	IF !CC JUMP 0xa0 <bss_begin+0x38>;
 25a:	08 e5 08 e5 	P0 = [P1 + -0x6be0];
 25e:	02 26       	JUMP.S 0xe62 <_intr_stack+0x5fa>;
 260:	14 00       	RTE;
 262:	02 04       	ILLEGAL;
 264:	01 83       	R4.L = W[P1 ++ P0];
 266:	68 02       	FLUSHINV[P0++];
 268:	24 13       	IF !CC JUMP 0xb0 <bss_begin+0x48>;
 26a:	08 e5 08 e5 	P0 = [P1 + -0x6be0];
 26e:	08 eb       	ILLEGAL;
 270:	85 4a       	BITSET (R5, 0x10);		/* bit 16 */
 272:	31 02       	ILLEGAL;
 274:	26 13       	IF !CC JUMP 0xc0 <bss_begin+0x58>;
 276:	08 c9 08 c9 	A1 = R1.H * R0.H, A0 += R1.L * R0.L (IS) || [P1++] = R0 || R1 = P0;
 27a:	08 92 48 30 
 27e:	67 03       	CC ^= ASTAT[7 /* unused bit */];
 280:	77 2e       	JUMP.S 0xffffff6e <_text_end+0xfefeff2e>;
 282:	36 00       	CLI R6;
 284:	02 04       	ILLEGAL;
 286:	01 4b       	BITTGL (R1, 0x0);		/* bit  0 */
 288:	d8 02       	ILLEGAL;
 28a:	24 13       	IF !CC JUMP 0xd2 <bss_begin+0x6a>;
 28c:	08 e5 08 e5 	P0 = [P1 + -0x6be0];
 290:	02 26       	JUMP.S 0xe94 <_intr_stack+0x62c>;
 292:	14 00       	RTE;
 294:	02 04       	ILLEGAL;
 296:	01 83       	R4.L = W[P1 ++ P0];
 298:	68 02       	FLUSHINV[P0++];
 29a:	24 13       	IF !CC JUMP 0xe2 <bss_begin+0x7a>;
 29c:	08 e5 08 e5 	P0 = [P1 + -0x6be0];
 2a0:	08 e6 03 0c 	[P1 + 0x300c] = R0;
 2a4:	82 03       	AC0_COPY = CC;
 2a6:	0c 01       	ILLEGAL;
 2a8:	03 74       	ILLEGAL;
 2aa:	4a 03       	CC &= ASTAT[10 /* unused bit */];
 2ac:	0c 2e       	JUMP.S 0xfffffec4 <_text_end+0xfefefe84>;
 2ae:	00 02       	R0 = CC;
 2b0:	04 02       	R4 = CC;
 2b2:	99 00       	RAISE 0x9;
 2b4:	02 04       	ILLEGAL;
 2b6:	02 2f       	JUMP.S 0xba <bss_begin+0x52>;
 2b8:	00 02       	R0 = CC;
 2ba:	04 02       	R4 = CC;
 2bc:	49 00       	ILLEGAL;
 2be:	02 04       	ILLEGAL;
 2c0:	02 2f       	JUMP.S 0xc4 <bss_begin+0x5c>;
 2c2:	00 02       	R0 = CC;
 2c4:	04 02       	R4 = CC;
 2c6:	2d 00       	ILLEGAL;
 2c8:	02 04       	ILLEGAL;
 2ca:	02 31       	R0 = A1.X;
 2cc:	00 02       	R0 = CC;
 2ce:	04 02       	R4 = CC;
 2d0:	48 00       	ILLEGAL;
 2d2:	02 04       	ILLEGAL;
 2d4:	02 2f       	JUMP.S 0xd8 <bss_begin+0x70>;
 2d6:	00 02       	R0 = CC;
 2d8:	04 02       	R4 = CC;
 2da:	64 00       	CALL (P4);
 2dc:	02 04       	ILLEGAL;
 2de:	02 32       	P0 = R2;
 2e0:	00 02       	R0 = CC;
 2e2:	04 02       	R4 = CC;
 2e4:	2f 30       	R5 = R7;
 2e6:	00 02       	R0 = CC;
 2e8:	04 01       	ILLEGAL;
 2ea:	f3 03       	AV1S ^= CC;
 2ec:	18 66       	R0 += -0x3d;		/* (-61) */
 2ee:	03 0a       	CC = R3 <= R0 (IU);
 2f0:	4a 51       	R5 = R2 + R1;
 2f2:	a1 47       	ILLEGAL;
 2f4:	4b 83       	R5.L = W[P3 ++ P1];
 2f6:	80 32       	P0 = I0;
 2f8:	4c 4d       	R4 >>>= 0x9;
 2fa:	47 4b       	BITTGL (R7, 0x8);		/* bit  8 */
 2fc:	83 64       	R3 += 0x10;		/* ( 16) */
 2fe:	4c 2c       	JUMP.S 0xfffffb96 <_text_end+0xfefefb56>;
 300:	6a 4c       	BITCLR (R2, 0xd);		/* bit 13 */
 302:	4d 47       	ILLEGAL;
 304:	4b 83       	R5.L = W[P3 ++ P1];
 306:	64 4c       	BITCLR (R4, 0xc);		/* bit 12 */
 308:	2c 6a       	P4 = -0x3b (X);		/*		P4=0xffffffc5(-59) */
 30a:	4c 4d       	R4 >>>= 0x9;
 30c:	47 4b       	BITTGL (R7, 0x8);		/* bit  8 */
 30e:	83 64       	R3 += 0x10;		/* ( 16) */
 310:	4c 2c       	JUMP.S 0xfffffba8 <_text_end+0xfefefb68>;
 312:	6d 00       	ILLEGAL;
 314:	02 04       	ILLEGAL;
 316:	01 9f       	[I0] = R1;
 318:	69 02       	FLUSHINV[P1++];
 31a:	28 13       	IF !CC JUMP 0x16a <bss_begin+0x102>;
 31c:	49 2f       	JUMP.S 0x1ae <bss_begin+0x146>;
 31e:	02 22       	JUMP.S 0x722 <bss_begin+0x6ba>;
 320:	13 02       	ILLEGAL;
 322:	22 13       	IF !CC JUMP 0x166 <bss_begin+0xfe>;
 324:	2d 2f       	JUMP.S 0x17e <bss_begin+0x116>;
 326:	03 f3       	ILLEGAL;
 328:	00 08       	CC = R0 == R0;
 32a:	ac 02       	ILLEGAL;
 32c:	06 00       	ILLEGAL;
 32e:	01 01       	ILLEGAL;
 330:	29 01       	ILLEGAL;
 332:	00 00       	NOP;
 334:	02 00       	ILLEGAL;
 336:	de 00       	ILLEGAL;
 338:	00 00       	NOP;
 33a:	01 01       	ILLEGAL;
 33c:	fb 0e       	ILLEGAL;
 33e:	0d 00       	ILLEGAL;
 340:	01 01       	ILLEGAL;
 342:	01 01       	ILLEGAL;
 344:	00 00       	NOP;
 346:	00 01       	ILLEGAL;
 348:	00 00       	NOP;
 34a:	01 2f       	JUMP.S 0x14c <bss_begin+0xe4>;
 34c:	68 6f       	P0 += -0x13;		/* (-19) */
 34e:	6d 65       	R5 += 0x2d;		/* ( 45) */
 350:	2f 62       	R7 = -0x3b (X);		/*		R7=0xffffffc5(-59) */
 352:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 354:	6c 64       	R4 += 0xd;		/* ( 13) */
 356:	2f 64       	R7 += 0x5;		/* (  5) */
 358:	76 31       	ILLEGAL;
 35a:	30 5f       	P4 = P0 + (SP << 0x2);
 35c:	38 32       	FP = R0;
 35e:	39 70       	ILLEGAL;
 360:	6d 2f       	JUMP.S 0x23a <bss_begin+0x1d2>;
 362:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 364:	63 2d       	JUMP.S 0xfffffe2a <_text_end+0xfefefdea>;
 366:	34 2e       	JUMP.S 0xffffffce <_text_end+0xfefeff8e>;
 368:	35 2f       	JUMP.S 0x1d2 <bss_begin+0x16a>;
 36a:	6e 65       	R6 += 0x2d;		/* ( 45) */
 36c:	77 6c       	FP += 0xe;		/* ( 14) */
 36e:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 370:	2f 6c       	FP += 0x5;		/* (  5) */
 372:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 374:	63 2f       	JUMP.S 0x23a <bss_begin+0x1d2>;
 376:	73 74       	ILLEGAL;
 378:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 37a:	6e 67       	R6 += -0x13;		/* (-19) */
 37c:	00 2f       	JUMP.S 0x17c <bss_begin+0x114>;
 37e:	68 6f       	P0 += -0x13;		/* (-19) */
 380:	6d 65       	R5 += 0x2d;		/* ( 45) */
 382:	2f 62       	R7 = -0x3b (X);		/*		R7=0xffffffc5(-59) */
 384:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 386:	6c 64       	R4 += 0xd;		/* ( 13) */
 388:	2f 64       	R7 += 0x5;		/* (  5) */
 38a:	76 31       	ILLEGAL;
 38c:	30 5f       	P4 = P0 + (SP << 0x2);
 38e:	38 32       	FP = R0;
 390:	39 70       	ILLEGAL;
 392:	6d 2f       	JUMP.S 0x26c <bss_begin+0x204>;
 394:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 396:	63 2d       	JUMP.S 0xfffffe5c <_text_end+0xfefefe1c>;
 398:	34 2e       	JUMP.S 0x0 <data_addr>;
 39a:	35 2f       	JUMP.S 0x204 <bss_begin+0x19c>;
 39c:	6e 65       	R6 += 0x2d;		/* ( 45) */
 39e:	77 6c       	FP += 0xe;		/* ( 14) */
 3a0:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 3a2:	2f 6c       	FP += 0x5;		/* (  5) */
 3a4:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 3a6:	63 2f       	JUMP.S 0x26c <bss_begin+0x204>;
 3a8:	69 6e       	P1 += -0x33;		/* (-51) */
 3aa:	63 6c       	P3 += 0xc;		/* ( 12) */
 3ac:	75 64       	R5 += 0xe;		/* ( 14) */
 3ae:	65 00       	CALL (P5);
 3b0:	2f 68       	FP = 0x5 (X);		/*		FP=0x5(  5) */
 3b2:	6f 6d       	FP += 0x2d;		/* ( 45) */
 3b4:	65 2f       	JUMP.S 0x27e <bss_begin+0x216>;
 3b6:	62 75       	ILLEGAL;
 3b8:	69 6c       	P1 += 0xd;		/* ( 13) */
 3ba:	64 2f       	JUMP.S 0x282 <bss_begin+0x21a>;
 3bc:	64 76       	ILLEGAL;
 3be:	31 30       	R6 = R1;
 3c0:	5f 38       	A1.W = FP;
 3c2:	32 39       	ASTAT = A1.X;
 3c4:	70 6d       	P0 += 0x2e;		/* ( 46) */
 3c6:	2f 64       	R7 += 0x5;		/* (  5) */
 3c8:	76 31       	ILLEGAL;
 3ca:	30 5f       	P4 = P0 + (SP << 0x2);
 3cc:	77 69       	FP = 0x2e (X);		/*		FP=0x2e( 46) */
 3ce:	6e 5f       	P5 = SP + (P5 << 0x2);
 3d0:	62 75       	ILLEGAL;
 3d2:	69 6c       	P1 += 0xd;		/* ( 13) */
 3d4:	64 2f       	JUMP.S 0x29c <bss_begin+0x234>;
 3d6:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 3d8:	63 5f       	P5 = P3 + (P4 << 0x2);
 3da:	62 75       	ILLEGAL;
 3dc:	69 6c       	P1 += 0xd;		/* ( 13) */
 3de:	64 2d       	JUMP.S 0xfffffea6 <_text_end+0xfefefe66>;
 3e0:	34 2e       	JUMP.S 0x48 <_ble_resource+0x14>;
 3e2:	35 2f       	JUMP.S 0x24c <bss_begin+0x1e4>;
 3e4:	2e 2f       	JUMP.S 0x240 <bss_begin+0x1d8>;
 3e6:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 3e8:	63 2f       	JUMP.S 0x2ae <bss_begin+0x246>;
 3ea:	69 6e       	P1 += -0x33;		/* (-51) */
 3ec:	63 6c       	P3 += 0xc;		/* ( 12) */
 3ee:	75 64       	R5 += 0xe;		/* ( 14) */
 3f0:	65 00       	CALL (P5);
 3f2:	00 6d       	P0 += 0x20;		/* ( 32) */
 3f4:	65 6d       	P5 += 0x2c;		/* ( 44) */
 3f6:	63 6d       	P3 += 0x2c;		/* ( 44) */
 3f8:	70 2e       	JUMP.S 0xd8 <bss_begin+0x70>;
 3fa:	63 00       	CALL (P3);
 3fc:	01 00       	ILLEGAL;
 3fe:	00 73       	ILLEGAL;
 400:	74 72       	ILLEGAL;
 402:	69 6e       	P1 += -0x33;		/* (-51) */
 404:	67 2e       	JUMP.S 0xd2 <bss_begin+0x6a>;
 406:	68 00       	ILLEGAL;
 408:	02 00       	ILLEGAL;
 40a:	00 73       	ILLEGAL;
 40c:	74 64       	R4 += 0xe;		/* ( 14) */
 40e:	64 65       	R4 += 0x2c;		/* ( 44) */
 410:	66 2e       	JUMP.S 0xdc <bss_begin+0x74>;
 412:	68 00       	ILLEGAL;
 414:	03 00       	ILLEGAL;
 416:	00 00       	NOP;
 418:	00 05       	(R7:0) = [SP++];
 41a:	02 88       	[P2 ++ P0] = R0;
 41c:	fc 00       	ILLEGAL;
 41e:	01 03       	CC = AN;
 420:	38 01       	USP = [SP++];
 422:	03 10       	IF !CC JUMP 0x428 <bss_begin+0x3c0>;
 424:	66 2f       	JUMP.S 0x2f0 <bss_begin+0x288>;
 426:	35 00       	CLI R5;
 428:	02 04       	ILLEGAL;
 42a:	01 06       	IF !CC R0 = R1;
 42c:	4a 06       	IF !CC R1 = P2;
 42e:	03 17       	IF !CC JUMP 0x234 <bss_begin+0x1cc> (BP);
 430:	ba 80       	R2 = [P2 ++ FP];
 432:	04 02       	R4 = CC;
 434:	03 b1       	[P0 + 0x10] = R3;
 436:	7f 4a       	BITSET (R7, 0xf);		/* bit 15 */
 438:	04 01       	ILLEGAL;
 43a:	03 d1       	ILLEGAL;
 43c:	00 66       	R0 += -0x40;		/* (-64) */
 43e:	9c 03       	ASTAT[28 /* unused bit */] = CC;
 440:	0a 4a       	BITSET (R2, 0x1);		/* bit  1 */
 442:	48 30       	R1 = P0;
 444:	03 61       	R3 = 0x20 (X);		/*		R3=0x20( 32) */
 446:	4a 08       	CC = P2 == P1;
 448:	44 be       	[P0 + 0x24] = P4;
 44a:	33 2f       	JUMP.S 0x2b0 <bss_begin+0x248>;
 44c:	00 02       	R0 = CC;
 44e:	04 01       	ILLEGAL;
 450:	31 03       	CC |= AV0S;
 452:	0a 66       	R2 += -0x3f;		/* (-63) */
 454:	03 79       	ILLEGAL;
 456:	4a 35       	ILLEGAL;
 458:	02 04       	ILLEGAL;
 45a:	00 01       	ILLEGAL;
 45c:	01 2b       	JUMP.S 0xfffffa5e <_text_end+0xfefefa1e>;
 45e:	01 00       	ILLEGAL;
 460:	00 02       	R0 = CC;
 462:	00 de       	ILLEGAL;
 464:	00 00       	NOP;
 466:	00 01       	ILLEGAL;
 468:	01 fb       	ILLEGAL;
 46a:	0e 0d       	CC = R6 <= 0x1;
 46c:	00 01       	ILLEGAL;
 46e:	01 01       	ILLEGAL;
 470:	01 00       	ILLEGAL;
 472:	00 00       	NOP;
 474:	01 00       	ILLEGAL;
 476:	00 01       	ILLEGAL;
 478:	2f 68       	FP = 0x5 (X);		/*		FP=0x5(  5) */
 47a:	6f 6d       	FP += 0x2d;		/* ( 45) */
 47c:	65 2f       	JUMP.S 0x346 <bss_begin+0x2de>;
 47e:	62 75       	ILLEGAL;
 480:	69 6c       	P1 += 0xd;		/* ( 13) */
 482:	64 2f       	JUMP.S 0x34a <bss_begin+0x2e2>;
 484:	64 76       	ILLEGAL;
 486:	31 30       	R6 = R1;
 488:	5f 38       	A1.W = FP;
 48a:	32 39       	ASTAT = A1.X;
 48c:	70 6d       	P0 += 0x2e;		/* ( 46) */
 48e:	2f 67       	R7 += -0x1b;		/* (-27) */
 490:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 492:	2d 34       	M1 = R5;
 494:	2e 35       	ILLEGAL;
 496:	2f 6e       	FP += -0x3b;		/* (-59) */
 498:	65 77       	ILLEGAL;
 49a:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 49c:	62 2f       	JUMP.S 0x360 <bss_begin+0x2f8>;
 49e:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 4a0:	62 63       	R2 = -0x14 (X);		/*		R2=0xffffffec(-20) */
 4a2:	2f 73       	ILLEGAL;
 4a4:	74 72       	ILLEGAL;
 4a6:	69 6e       	P1 += -0x33;		/* (-51) */
 4a8:	67 00       	CALL (FP);
 4aa:	2f 68       	FP = 0x5 (X);		/*		FP=0x5(  5) */
 4ac:	6f 6d       	FP += 0x2d;		/* ( 45) */
 4ae:	65 2f       	JUMP.S 0x378 <bss_begin+0x310>;
 4b0:	62 75       	ILLEGAL;
 4b2:	69 6c       	P1 += 0xd;		/* ( 13) */
 4b4:	64 2f       	JUMP.S 0x37c <bss_begin+0x314>;
 4b6:	64 76       	ILLEGAL;
 4b8:	31 30       	R6 = R1;
 4ba:	5f 38       	A1.W = FP;
 4bc:	32 39       	ASTAT = A1.X;
 4be:	70 6d       	P0 += 0x2e;		/* ( 46) */
 4c0:	2f 67       	R7 += -0x1b;		/* (-27) */
 4c2:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 4c4:	2d 34       	M1 = R5;
 4c6:	2e 35       	ILLEGAL;
 4c8:	2f 6e       	FP += -0x3b;		/* (-59) */
 4ca:	65 77       	ILLEGAL;
 4cc:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 4ce:	62 2f       	JUMP.S 0x392 <bss_begin+0x32a>;
 4d0:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 4d2:	62 63       	R2 = -0x14 (X);		/*		R2=0xffffffec(-20) */
 4d4:	2f 69       	FP = 0x25 (X);		/*		FP=0x25( 37) */
 4d6:	6e 63       	R6 = -0x13 (X);		/*		R6=0xffffffed(-19) */
 4d8:	6c 75       	ILLEGAL;
 4da:	64 65       	R4 += 0x2c;		/* ( 44) */
 4dc:	00 2f       	JUMP.S 0x2dc <bss_begin+0x274>;
 4de:	68 6f       	P0 += -0x13;		/* (-19) */
 4e0:	6d 65       	R5 += 0x2d;		/* ( 45) */
 4e2:	2f 62       	R7 = -0x3b (X);		/*		R7=0xffffffc5(-59) */
 4e4:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 4e6:	6c 64       	R4 += 0xd;		/* ( 13) */
 4e8:	2f 64       	R7 += 0x5;		/* (  5) */
 4ea:	76 31       	ILLEGAL;
 4ec:	30 5f       	P4 = P0 + (SP << 0x2);
 4ee:	38 32       	FP = R0;
 4f0:	39 70       	ILLEGAL;
 4f2:	6d 2f       	JUMP.S 0x3cc <bss_begin+0x364>;
 4f4:	64 76       	ILLEGAL;
 4f6:	31 30       	R6 = R1;
 4f8:	5f 77       	ILLEGAL;
 4fa:	69 6e       	P1 += -0x33;		/* (-51) */
 4fc:	5f 62       	R7 = -0x35 (X);		/*		R7=0xffffffcb(-53) */
 4fe:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 500:	6c 64       	R4 += 0xd;		/* ( 13) */
 502:	2f 67       	R7 += -0x1b;		/* (-27) */
 504:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 506:	5f 62       	R7 = -0x35 (X);		/*		R7=0xffffffcb(-53) */
 508:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 50a:	6c 64       	R4 += 0xd;		/* ( 13) */
 50c:	2d 34       	M1 = R5;
 50e:	2e 35       	ILLEGAL;
 510:	2f 2e       	JUMP.S 0x16e <bss_begin+0x106>;
 512:	2f 67       	R7 += -0x1b;		/* (-27) */
 514:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 516:	2f 69       	FP = 0x25 (X);		/*		FP=0x25( 37) */
 518:	6e 63       	R6 = -0x13 (X);		/*		R6=0xffffffed(-19) */
 51a:	6c 75       	ILLEGAL;
 51c:	64 65       	R4 += 0x2c;		/* ( 44) */
 51e:	00 00       	NOP;
 520:	6d 65       	R5 += 0x2d;		/* ( 45) */
 522:	6d 63       	R5 = -0x13 (X);		/*		R5=0xffffffed(-19) */
 524:	70 79       	ILLEGAL;
 526:	2e 63       	R6 = -0x1b (X);		/*		R6=0xffffffe5(-27) */
 528:	00 01       	ILLEGAL;
 52a:	00 00       	NOP;
 52c:	73 74       	ILLEGAL;
 52e:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 530:	6e 67       	R6 += -0x13;		/* (-19) */
 532:	2e 68       	SP = 0x5 (X);		/*		SP=0x5(  5) */
 534:	00 02       	R0 = CC;
 536:	00 00       	NOP;
 538:	73 74       	ILLEGAL;
 53a:	64 64       	R4 += 0xc;		/* ( 12) */
 53c:	65 66       	R5 += -0x34;		/* (-52) */
 53e:	2e 68       	SP = 0x5 (X);		/*		SP=0x5(  5) */
 540:	00 03       	CC = AZ;
 542:	00 00       	NOP;
 544:	00 00       	NOP;
 546:	05 02       	R5 = CC;
 548:	04 fd       	ILLEGAL;
 54a:	00 01       	ILLEGAL;
 54c:	03 38       	A0.X = R3;
 54e:	01 03       	CC = AN;
 550:	15 2e       	JUMP.S 0x17a <bss_begin+0x112>;
 552:	03 6b       	P3 = -0x20 (X);		/*		P3=0xffffffe0(-32) */
 554:	2e 03       	CC |= ASTAT[14 /* unused bit */];
 556:	0e 4a       	BITSET (R6, 0x1);		/* bit  1 */
 558:	2f 34       	M1 = R7;
 55a:	00 02       	R0 = CC;
 55c:	04 01       	ILLEGAL;
 55e:	06 4a       	BITSET (R6, 0x0);		/* bit  0 */
 560:	06 a1       	R6 = [P0 + 0x10];
 562:	db 4b       	BITTGL (R3, 0x1b);		/* bit 27 */
 564:	4b 4b       	BITTGL (R3, 0x9);		/* bit  9 */
 566:	04 02       	R4 = CC;
 568:	03 bf       	[P0 + 0x30] = P3;
 56a:	7f 4a       	BITSET (R7, 0xf);		/* bit 15 */
 56c:	04 01       	ILLEGAL;
 56e:	03 c6 00 08 	A0 = ASHIFT A0 BY R0.L;
 572:	90 7d       	ILLEGAL;
 574:	4f a0       	R7 = [P1 + 0x4];
 576:	04 02       	R4 = CC;
 578:	03 b8       	R3 = [FP -0x80];
 57a:	7f 4a       	BITSET (R7, 0xf);		/* bit 15 */
 57c:	04 01       	ILLEGAL;
 57e:	03 ce       	A0 = ASHIFT A0 BY R0.L || ILLEGAL || ILLEGAL;		/* ILLEGAL PARALLEL INSTRUCTION */
 580:	00 08       	CC = R0 == R0;
 582:	3c 31       	ILLEGAL;
 584:	83 65       	R3 += 0x30;		/* ( 48) */
 586:	4f 02       	FLUSHINV[FP];
 588:	08 00       	ILLEGAL;
 58a:	01 01       	ILLEGAL;
 58c:	4e 01       	ILLEGAL;
 58e:	00 00       	NOP;
 590:	02 00       	ILLEGAL;
 592:	de 00       	ILLEGAL;
 594:	00 00       	NOP;
 596:	01 01       	ILLEGAL;
 598:	fb 0e       	ILLEGAL;
 59a:	0d 00       	ILLEGAL;
 59c:	01 01       	ILLEGAL;
 59e:	01 01       	ILLEGAL;
 5a0:	00 00       	NOP;
 5a2:	00 01       	ILLEGAL;
 5a4:	00 00       	NOP;
 5a6:	01 2f       	JUMP.S 0x3a8 <bss_begin+0x340>;
 5a8:	68 6f       	P0 += -0x13;		/* (-19) */
 5aa:	6d 65       	R5 += 0x2d;		/* ( 45) */
 5ac:	2f 62       	R7 = -0x3b (X);		/*		R7=0xffffffc5(-59) */
 5ae:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 5b0:	6c 64       	R4 += 0xd;		/* ( 13) */
 5b2:	2f 64       	R7 += 0x5;		/* (  5) */
 5b4:	76 31       	ILLEGAL;
 5b6:	30 5f       	P4 = P0 + (SP << 0x2);
 5b8:	38 32       	FP = R0;
 5ba:	39 70       	ILLEGAL;
 5bc:	6d 2f       	JUMP.S 0x496 <bss_begin+0x42e>;
 5be:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 5c0:	63 2d       	JUMP.S 0x86 <bss_begin+0x1e>;
 5c2:	34 2e       	JUMP.S 0x22a <bss_begin+0x1c2>;
 5c4:	35 2f       	JUMP.S 0x42e <bss_begin+0x3c6>;
 5c6:	6e 65       	R6 += 0x2d;		/* ( 45) */
 5c8:	77 6c       	FP += 0xe;		/* ( 14) */
 5ca:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 5cc:	2f 6c       	FP += 0x5;		/* (  5) */
 5ce:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 5d0:	63 2f       	JUMP.S 0x496 <bss_begin+0x42e>;
 5d2:	73 74       	ILLEGAL;
 5d4:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 5d6:	6e 67       	R6 += -0x13;		/* (-19) */
 5d8:	00 2f       	JUMP.S 0x3d8 <bss_begin+0x370>;
 5da:	68 6f       	P0 += -0x13;		/* (-19) */
 5dc:	6d 65       	R5 += 0x2d;		/* ( 45) */
 5de:	2f 62       	R7 = -0x3b (X);		/*		R7=0xffffffc5(-59) */
 5e0:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 5e2:	6c 64       	R4 += 0xd;		/* ( 13) */
 5e4:	2f 64       	R7 += 0x5;		/* (  5) */
 5e6:	76 31       	ILLEGAL;
 5e8:	30 5f       	P4 = P0 + (SP << 0x2);
 5ea:	38 32       	FP = R0;
 5ec:	39 70       	ILLEGAL;
 5ee:	6d 2f       	JUMP.S 0x4c8 <bss_begin+0x460>;
 5f0:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 5f2:	63 2d       	JUMP.S 0xb8 <bss_begin+0x50>;
 5f4:	34 2e       	JUMP.S 0x25c <bss_begin+0x1f4>;
 5f6:	35 2f       	JUMP.S 0x460 <bss_begin+0x3f8>;
 5f8:	6e 65       	R6 += 0x2d;		/* ( 45) */
 5fa:	77 6c       	FP += 0xe;		/* ( 14) */
 5fc:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 5fe:	2f 6c       	FP += 0x5;		/* (  5) */
 600:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 602:	63 2f       	JUMP.S 0x4c8 <bss_begin+0x460>;
 604:	69 6e       	P1 += -0x33;		/* (-51) */
 606:	63 6c       	P3 += 0xc;		/* ( 12) */
 608:	75 64       	R5 += 0xe;		/* ( 14) */
 60a:	65 00       	CALL (P5);
 60c:	2f 68       	FP = 0x5 (X);		/*		FP=0x5(  5) */
 60e:	6f 6d       	FP += 0x2d;		/* ( 45) */
 610:	65 2f       	JUMP.S 0x4da <bss_begin+0x472>;
 612:	62 75       	ILLEGAL;
 614:	69 6c       	P1 += 0xd;		/* ( 13) */
 616:	64 2f       	JUMP.S 0x4de <bss_begin+0x476>;
 618:	64 76       	ILLEGAL;
 61a:	31 30       	R6 = R1;
 61c:	5f 38       	A1.W = FP;
 61e:	32 39       	ASTAT = A1.X;
 620:	70 6d       	P0 += 0x2e;		/* ( 46) */
 622:	2f 64       	R7 += 0x5;		/* (  5) */
 624:	76 31       	ILLEGAL;
 626:	30 5f       	P4 = P0 + (SP << 0x2);
 628:	77 69       	FP = 0x2e (X);		/*		FP=0x2e( 46) */
 62a:	6e 5f       	P5 = SP + (P5 << 0x2);
 62c:	62 75       	ILLEGAL;
 62e:	69 6c       	P1 += 0xd;		/* ( 13) */
 630:	64 2f       	JUMP.S 0x4f8 <bss_begin+0x490>;
 632:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 634:	63 5f       	P5 = P3 + (P4 << 0x2);
 636:	62 75       	ILLEGAL;
 638:	69 6c       	P1 += 0xd;		/* ( 13) */
 63a:	64 2d       	JUMP.S 0x102 <bss_begin+0x9a>;
 63c:	34 2e       	JUMP.S 0x2a4 <bss_begin+0x23c>;
 63e:	35 2f       	JUMP.S 0x4a8 <bss_begin+0x440>;
 640:	2e 2f       	JUMP.S 0x49c <bss_begin+0x434>;
 642:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 644:	63 2f       	JUMP.S 0x50a <bss_begin+0x4a2>;
 646:	69 6e       	P1 += -0x33;		/* (-51) */
 648:	63 6c       	P3 += 0xc;		/* ( 12) */
 64a:	75 64       	R5 += 0xe;		/* ( 14) */
 64c:	65 00       	CALL (P5);
 64e:	00 6d       	P0 += 0x20;		/* ( 32) */
 650:	65 6d       	P5 += 0x2c;		/* ( 44) */
 652:	73 65       	R3 += 0x2e;		/* ( 46) */
 654:	74 2e       	JUMP.S 0x33c <bss_begin+0x2d4>;
 656:	63 00       	CALL (P3);
 658:	01 00       	ILLEGAL;
 65a:	00 73       	ILLEGAL;
 65c:	74 72       	ILLEGAL;
 65e:	69 6e       	P1 += -0x33;		/* (-51) */
 660:	67 2e       	JUMP.S 0x32e <bss_begin+0x2c6>;
 662:	68 00       	ILLEGAL;
 664:	02 00       	ILLEGAL;
 666:	00 73       	ILLEGAL;
 668:	74 64       	R4 += 0xe;		/* ( 14) */
 66a:	64 65       	R4 += 0x2c;		/* ( 44) */
 66c:	66 2e       	JUMP.S 0x338 <bss_begin+0x2d0>;
 66e:	68 00       	ILLEGAL;
 670:	03 00       	ILLEGAL;
 672:	00 00       	NOP;
 674:	00 05       	(R7:0) = [SP++];
 676:	02 a0       	R2 = [P0 + 0x0];
 678:	fd 00       	ILLEGAL;
 67a:	01 03       	CC = AN;
 67c:	2e 01       	ILLEGAL;
 67e:	03 0a       	CC = R3 <= R0 (IU);
 680:	01 03       	CC = AN;
 682:	76 2e       	JUMP.S 0x36e <bss_begin+0x306>;
 684:	03 0a       	CC = R3 <= R0 (IU);
 686:	2e 03       	CC |= ASTAT[14 /* unused bit */];
 688:	76 2e       	JUMP.S 0x374 <bss_begin+0x30c>;
 68a:	4b 03       	CC &= ASTAT[11 /* unused bit */];
 68c:	09 2e       	JUMP.S 0x29e <bss_begin+0x236>;
 68e:	4c 9c       	R4.H = W[I1++];
 690:	4c 67       	R4 += -0x17;		/* (-23) */
 692:	2b 4d       	R3 >>>= 0x5;
 694:	2b 52       	R0 = R3 - R5;
 696:	03 75       	ILLEGAL;
 698:	4a 03       	CC &= ASTAT[10 /* unused bit */];
 69a:	12 2e       	JUMP.S 0x2be <bss_begin+0x256>;
 69c:	67 6b       	FP = -0x14 (X);		/*		FP=0xffffffec(-20) */
 69e:	03 76       	ILLEGAL;
 6a0:	2e 03       	CC |= ASTAT[14 /* unused bit */];
 6a2:	0a 2e       	JUMP.S 0x2b6 <bss_begin+0x24e>;
 6a4:	08 3e       	SEQSTAT = R0;
 6a6:	2f 2f       	JUMP.S 0x504 <bss_begin+0x49c>;
 6a8:	2f 04       	ILLEGAL;
 6aa:	02 03       	CC = AC0_COPY;
 6ac:	47 2e       	JUMP.S 0x33a <bss_begin+0x2d2>;
 6ae:	04 01       	ILLEGAL;
 6b0:	03 3d       	LC0 = A1.W;
 6b2:	08 20       	JUMP.S 0x6c2 <bss_begin+0x65a>;
 6b4:	04 02       	R4 = CC;
 6b6:	03 43       	R3 = R0.B (X);
 6b8:	2e 04       	ILLEGAL;
 6ba:	01 03       	CC = AN;
 6bc:	3d 2e       	JUMP.S 0x336 <bss_begin+0x2ce>;
 6be:	03 77       	ILLEGAL;
 6c0:	2e 03       	CC |= ASTAT[14 /* unused bit */];
 6c2:	0b d6       	ILLEGAL;
 6c4:	04 02       	R4 = CC;
 6c6:	03 41       	R3 = (R3 + R0) << 0x1;
 6c8:	2e 04       	ILLEGAL;
 6ca:	01 03       	CC = AN;
 6cc:	c3 00       	ILLEGAL;
 6ce:	d6 00       	ILLEGAL;
 6d0:	02 04       	ILLEGAL;
 6d2:	01 33       	P0 = A0.W;
 6d4:	06 4a       	BITSET (R6, 0x0);		/* bit  0 */
 6d6:	06 67       	R6 += -0x20;		/* (-32) */
 6d8:	31 02       	ILLEGAL;
 6da:	08 00       	ILLEGAL;
 6dc:	01 01       	ILLEGAL;
 6de:	ef 00       	ILLEGAL;
 6e0:	00 00       	NOP;
 6e2:	02 00       	ILLEGAL;
 6e4:	90 00       	RAISE 0x0;
 6e6:	00 00       	NOP;
 6e8:	01 01       	ILLEGAL;
 6ea:	fb 0e       	ILLEGAL;
 6ec:	0d 00       	ILLEGAL;
 6ee:	01 01       	ILLEGAL;
 6f0:	01 01       	ILLEGAL;
 6f2:	00 00       	NOP;
 6f4:	00 01       	ILLEGAL;
 6f6:	00 00       	NOP;
 6f8:	01 2f       	JUMP.S 0x4fa <bss_begin+0x492>;
 6fa:	68 6f       	P0 += -0x13;		/* (-19) */
 6fc:	6d 65       	R5 += 0x2d;		/* ( 45) */
 6fe:	2f 62       	R7 = -0x3b (X);		/*		R7=0xffffffc5(-59) */
 700:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 702:	6c 64       	R4 += 0xd;		/* ( 13) */
 704:	2f 64       	R7 += 0x5;		/* (  5) */
 706:	76 31       	ILLEGAL;
 708:	30 5f       	P4 = P0 + (SP << 0x2);
 70a:	38 32       	FP = R0;
 70c:	39 70       	ILLEGAL;
 70e:	6d 2f       	JUMP.S 0x5e8 <bss_begin+0x580>;
 710:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 712:	63 2d       	JUMP.S 0x1d8 <bss_begin+0x170>;
 714:	34 2e       	JUMP.S 0x37c <bss_begin+0x314>;
 716:	35 2f       	JUMP.S 0x580 <bss_begin+0x518>;
 718:	6e 65       	R6 += 0x2d;		/* ( 45) */
 71a:	77 6c       	FP += 0xe;		/* ( 14) */
 71c:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 71e:	2f 6c       	FP += 0x5;		/* (  5) */
 720:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 722:	63 2f       	JUMP.S 0x5e8 <bss_begin+0x580>;
 724:	73 74       	ILLEGAL;
 726:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 728:	6e 67       	R6 += -0x13;		/* (-19) */
 72a:	00 2f       	JUMP.S 0x52a <bss_begin+0x4c2>;
 72c:	68 6f       	P0 += -0x13;		/* (-19) */
 72e:	6d 65       	R5 += 0x2d;		/* ( 45) */
 730:	2f 62       	R7 = -0x3b (X);		/*		R7=0xffffffc5(-59) */
 732:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 734:	6c 64       	R4 += 0xd;		/* ( 13) */
 736:	2f 64       	R7 += 0x5;		/* (  5) */
 738:	76 31       	ILLEGAL;
 73a:	30 5f       	P4 = P0 + (SP << 0x2);
 73c:	38 32       	FP = R0;
 73e:	39 70       	ILLEGAL;
 740:	6d 2f       	JUMP.S 0x61a <bss_begin+0x5b2>;
 742:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 744:	63 2d       	JUMP.S 0x20a <bss_begin+0x1a2>;
 746:	34 2e       	JUMP.S 0x3ae <bss_begin+0x346>;
 748:	35 2f       	JUMP.S 0x5b2 <bss_begin+0x54a>;
 74a:	6e 65       	R6 += 0x2d;		/* ( 45) */
 74c:	77 6c       	FP += 0xe;		/* ( 14) */
 74e:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 750:	2f 6c       	FP += 0x5;		/* (  5) */
 752:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 754:	63 2f       	JUMP.S 0x61a <bss_begin+0x5b2>;
 756:	69 6e       	P1 += -0x33;		/* (-51) */
 758:	63 6c       	P3 += 0xc;		/* ( 12) */
 75a:	75 64       	R5 += 0xe;		/* ( 14) */
 75c:	65 00       	CALL (P5);
 75e:	00 73       	ILLEGAL;
 760:	74 72       	ILLEGAL;
 762:	63 6d       	P3 += 0x2c;		/* ( 44) */
 764:	70 2e       	JUMP.S 0x444 <bss_begin+0x3dc>;
 766:	63 00       	CALL (P3);
 768:	01 00       	ILLEGAL;
 76a:	00 73       	ILLEGAL;
 76c:	74 72       	ILLEGAL;
 76e:	69 6e       	P1 += -0x33;		/* (-51) */
 770:	67 2e       	JUMP.S 0x43e <bss_begin+0x3d6>;
 772:	68 00       	ILLEGAL;
 774:	02 00       	ILLEGAL;
 776:	00 00       	NOP;
 778:	00 05       	(R7:0) = [SP++];
 77a:	02 50       	R0 = R2 + R0;
 77c:	fe 00       	ILLEGAL;
 77e:	01 03       	CC = AN;
 780:	3f 01       	EMUDAT = [SP++];
 782:	03 0e       	CC = R3 <= 0x0 (IU);
 784:	01 03       	CC = AN;
 786:	72 4a       	BITSET (R2, 0xe);		/* bit 14 */
 788:	03 0e       	CC = R3 <= 0x0 (IU);
 78a:	2e 03       	CC |= ASTAT[14 /* unused bit */];
 78c:	72 2e       	JUMP.S 0x470 <bss_begin+0x408>;
 78e:	03 0e       	CC = R3 <= 0x0 (IU);
 790:	4a 4f       	R2 <<= 0x9;
 792:	2c 2f       	JUMP.S 0x5ea <bss_begin+0x582>;
 794:	2f a2       	R7 = [P5 + 0x20];
 796:	04 02       	R4 = CC;
 798:	03 46       	ILLEGAL;
 79a:	08 ac       	P0 = [P1 + 0x0];
 79c:	04 01       	ILLEGAL;
 79e:	03 3a       	ILLEGAL;
 7a0:	82 08       	CC = R2 < R0;
 7a2:	1c 03       	CC = ASTAT[28 /* unused bit */];
 7a4:	0c 82       	R0.L = W[P4 ++ P1];
 7a6:	2f 00       	ILLEGAL;
 7a8:	02 04       	ILLEGAL;
 7aa:	01 31       	R0 = A0.W;
 7ac:	06 ba       	[FP -0x80] = R6;
 7ae:	04 02       	R4 = CC;
 7b0:	06 03       	CC = AQ;
 7b2:	ba 7f       	ILLEGAL;
 7b4:	82 04       	(P5:2) = [SP++];
 7b6:	01 00       	ILLEGAL;
 7b8:	02 04       	ILLEGAL;
 7ba:	02 03       	CC = AC0_COPY;
 7bc:	c6 00       	ILLEGAL;
 7be:	ba 06       	IF !CC FP = R2;
 7c0:	82 06       	IF !CC P0 = R2;
 7c2:	a3 30       	R4 = I3;
 7c4:	64 84       	R1.H = W[P4];
 7c6:	03 6e       	P3 += -0x40;		/* (-64) */
 7c8:	66 03       	CC ^= AQ;
 7ca:	12 2e       	JUMP.S 0x3ee <bss_begin+0x386>;
 7cc:	02 04       	ILLEGAL;
 7ce:	00 01       	ILLEGAL;
 7d0:	01 d4       	ILLEGAL;
 7d2:	00 00       	NOP;
 7d4:	00 02       	R0 = CC;
 7d6:	00 90       	R0 = [P0++];
 7d8:	00 00       	NOP;
 7da:	00 01       	ILLEGAL;
 7dc:	01 fb       	ILLEGAL;
 7de:	0e 0d       	CC = R6 <= 0x1;
 7e0:	00 01       	ILLEGAL;
 7e2:	01 01       	ILLEGAL;
 7e4:	01 00       	ILLEGAL;
 7e6:	00 00       	NOP;
 7e8:	01 00       	ILLEGAL;
 7ea:	00 01       	ILLEGAL;
 7ec:	2f 68       	FP = 0x5 (X);		/*		FP=0x5(  5) */
 7ee:	6f 6d       	FP += 0x2d;		/* ( 45) */
 7f0:	65 2f       	JUMP.S 0x6ba <bss_begin+0x652>;
 7f2:	62 75       	ILLEGAL;
 7f4:	69 6c       	P1 += 0xd;		/* ( 13) */
 7f6:	64 2f       	JUMP.S 0x6be <bss_begin+0x656>;
 7f8:	64 76       	ILLEGAL;
 7fa:	31 30       	R6 = R1;
 7fc:	5f 38       	A1.W = FP;
 7fe:	32 39       	ASTAT = A1.X;
 800:	70 6d       	P0 += 0x2e;		/* ( 46) */
 802:	2f 67       	R7 += -0x1b;		/* (-27) */
 804:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 806:	2d 34       	M1 = R5;
 808:	2e 35       	ILLEGAL;
 80a:	2f 6e       	FP += -0x3b;		/* (-59) */
 80c:	65 77       	ILLEGAL;
 80e:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 810:	62 2f       	JUMP.S 0x6d4 <bss_begin+0x66c>;
 812:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 814:	62 63       	R2 = -0x14 (X);		/*		R2=0xffffffec(-20) */
 816:	2f 73       	ILLEGAL;
 818:	74 72       	ILLEGAL;
 81a:	69 6e       	P1 += -0x33;		/* (-51) */
 81c:	67 00       	CALL (FP);
 81e:	2f 68       	FP = 0x5 (X);		/*		FP=0x5(  5) */
 820:	6f 6d       	FP += 0x2d;		/* ( 45) */
 822:	65 2f       	JUMP.S 0x6ec <bss_begin+0x684>;
 824:	62 75       	ILLEGAL;
 826:	69 6c       	P1 += 0xd;		/* ( 13) */
 828:	64 2f       	JUMP.S 0x6f0 <bss_begin+0x688>;
 82a:	64 76       	ILLEGAL;
 82c:	31 30       	R6 = R1;
 82e:	5f 38       	A1.W = FP;
 830:	32 39       	ASTAT = A1.X;
 832:	70 6d       	P0 += 0x2e;		/* ( 46) */
 834:	2f 67       	R7 += -0x1b;		/* (-27) */
 836:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 838:	2d 34       	M1 = R5;
 83a:	2e 35       	ILLEGAL;
 83c:	2f 6e       	FP += -0x3b;		/* (-59) */
 83e:	65 77       	ILLEGAL;
 840:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 842:	62 2f       	JUMP.S 0x706 <bss_begin+0x69e>;
 844:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 846:	62 63       	R2 = -0x14 (X);		/*		R2=0xffffffec(-20) */
 848:	2f 69       	FP = 0x25 (X);		/*		FP=0x25( 37) */
 84a:	6e 63       	R6 = -0x13 (X);		/*		R6=0xffffffed(-19) */
 84c:	6c 75       	ILLEGAL;
 84e:	64 65       	R4 += 0x2c;		/* ( 44) */
 850:	00 00       	NOP;
 852:	73 74       	ILLEGAL;
 854:	72 63       	R2 = -0x12 (X);		/*		R2=0xffffffee(-18) */
 856:	70 79       	ILLEGAL;
 858:	2e 63       	R6 = -0x1b (X);		/*		R6=0xffffffe5(-27) */
 85a:	00 01       	ILLEGAL;
 85c:	00 00       	NOP;
 85e:	73 74       	ILLEGAL;
 860:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 862:	6e 67       	R6 += -0x13;		/* (-19) */
 864:	2e 68       	SP = 0x5 (X);		/*		SP=0x5(  5) */
 866:	00 02       	R0 = CC;
 868:	00 00       	NOP;
 86a:	00 00       	NOP;
 86c:	05 02       	R5 = CC;
 86e:	00 ff       	ILLEGAL;
 870:	00 01       	ILLEGAL;
 872:	03 3f       	USP = A1.W;
 874:	01 03       	CC = AN;
 876:	0f 01       	ILLEGAL;
 878:	03 71       	ILLEGAL;
 87a:	4a 03       	CC &= ASTAT[10 /* unused bit */];
 87c:	0f 2e       	JUMP.S 0x49a <bss_begin+0x432>;
 87e:	03 71       	ILLEGAL;
 880:	2e 03       	CC |= ASTAT[14 /* unused bit */];
 882:	0f 4a       	BITSET (R7, 0x1);		/* bit  1 */
 884:	69 32       	P5 = P1;
 886:	7d 33       	ILLEGAL;
 888:	04 02       	R4 = CC;
 88a:	03 49       	CC = BITTST (R3, 0x0);		/* bit  0 */
 88c:	08 58       	R0 = R0 ^ R1;
 88e:	04 01       	ILLEGAL;
 890:	03 39       	A0.X = A1.W;
 892:	4a 48       	CC = !BITTST (R2, 0x9);		/* bit  9 */
 894:	a0 2c       	JUMP.S 0x1d4 <bss_begin+0x16c>;
 896:	4f 2f       	JUMP.S 0x734 <bss_begin+0x6cc>;
 898:	00 02       	R0 = CC;
 89a:	04 01       	ILLEGAL;
 89c:	4d a2       	R5 = [P1 + 0x24];
 89e:	03 6c       	P3 += 0x0;		/* (  0) */
 8a0:	82 03       	AC0_COPY = CC;
 8a2:	7a 2e       	JUMP.S 0x596 <bss_begin+0x52e>;
 8a4:	02 04       	ILLEGAL;
 8a6:	00 01       	ILLEGAL;
 8a8:	01 46       	ILLEGAL;
 8aa:	01 00       	ILLEGAL;
 8ac:	00 02       	R0 = CC;
 8ae:	00 de       	ILLEGAL;
 8b0:	00 00       	NOP;
 8b2:	00 01       	ILLEGAL;
 8b4:	01 fb       	ILLEGAL;
 8b6:	0e 0d       	CC = R6 <= 0x1;
 8b8:	00 01       	ILLEGAL;
 8ba:	01 01       	ILLEGAL;
 8bc:	01 00       	ILLEGAL;
 8be:	00 00       	NOP;
 8c0:	01 00       	ILLEGAL;
 8c2:	00 01       	ILLEGAL;
 8c4:	2f 68       	FP = 0x5 (X);		/*		FP=0x5(  5) */
 8c6:	6f 6d       	FP += 0x2d;		/* ( 45) */
 8c8:	65 2f       	JUMP.S 0x792 <bss_begin+0x72a>;
 8ca:	62 75       	ILLEGAL;
 8cc:	69 6c       	P1 += 0xd;		/* ( 13) */
 8ce:	64 2f       	JUMP.S 0x796 <bss_begin+0x72e>;
 8d0:	64 76       	ILLEGAL;
 8d2:	31 30       	R6 = R1;
 8d4:	5f 38       	A1.W = FP;
 8d6:	32 39       	ASTAT = A1.X;
 8d8:	70 6d       	P0 += 0x2e;		/* ( 46) */
 8da:	2f 67       	R7 += -0x1b;		/* (-27) */
 8dc:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 8de:	2d 34       	M1 = R5;
 8e0:	2e 35       	ILLEGAL;
 8e2:	2f 6e       	FP += -0x3b;		/* (-59) */
 8e4:	65 77       	ILLEGAL;
 8e6:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 8e8:	62 2f       	JUMP.S 0x7ac <bss_begin+0x744>;
 8ea:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 8ec:	62 63       	R2 = -0x14 (X);		/*		R2=0xffffffec(-20) */
 8ee:	2f 73       	ILLEGAL;
 8f0:	74 72       	ILLEGAL;
 8f2:	69 6e       	P1 += -0x33;		/* (-51) */
 8f4:	67 00       	CALL (FP);
 8f6:	2f 68       	FP = 0x5 (X);		/*		FP=0x5(  5) */
 8f8:	6f 6d       	FP += 0x2d;		/* ( 45) */
 8fa:	65 2f       	JUMP.S 0x7c4 <bss_begin+0x75c>;
 8fc:	62 75       	ILLEGAL;
 8fe:	69 6c       	P1 += 0xd;		/* ( 13) */
 900:	64 2f       	JUMP.S 0x7c8 <bss_begin+0x760>;
 902:	64 76       	ILLEGAL;
 904:	31 30       	R6 = R1;
 906:	5f 38       	A1.W = FP;
 908:	32 39       	ASTAT = A1.X;
 90a:	70 6d       	P0 += 0x2e;		/* ( 46) */
 90c:	2f 67       	R7 += -0x1b;		/* (-27) */
 90e:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 910:	2d 34       	M1 = R5;
 912:	2e 35       	ILLEGAL;
 914:	2f 6e       	FP += -0x3b;		/* (-59) */
 916:	65 77       	ILLEGAL;
 918:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 91a:	62 2f       	JUMP.S 0x7de <bss_begin+0x776>;
 91c:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 91e:	62 63       	R2 = -0x14 (X);		/*		R2=0xffffffec(-20) */
 920:	2f 69       	FP = 0x25 (X);		/*		FP=0x25( 37) */
 922:	6e 63       	R6 = -0x13 (X);		/*		R6=0xffffffed(-19) */
 924:	6c 75       	ILLEGAL;
 926:	64 65       	R4 += 0x2c;		/* ( 44) */
 928:	00 2f       	JUMP.S 0x728 <bss_begin+0x6c0>;
 92a:	68 6f       	P0 += -0x13;		/* (-19) */
 92c:	6d 65       	R5 += 0x2d;		/* ( 45) */
 92e:	2f 62       	R7 = -0x3b (X);		/*		R7=0xffffffc5(-59) */
 930:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 932:	6c 64       	R4 += 0xd;		/* ( 13) */
 934:	2f 64       	R7 += 0x5;		/* (  5) */
 936:	76 31       	ILLEGAL;
 938:	30 5f       	P4 = P0 + (SP << 0x2);
 93a:	38 32       	FP = R0;
 93c:	39 70       	ILLEGAL;
 93e:	6d 2f       	JUMP.S 0x818 <bss_begin+0x7b0>;
 940:	64 76       	ILLEGAL;
 942:	31 30       	R6 = R1;
 944:	5f 77       	ILLEGAL;
 946:	69 6e       	P1 += -0x33;		/* (-51) */
 948:	5f 62       	R7 = -0x35 (X);		/*		R7=0xffffffcb(-53) */
 94a:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 94c:	6c 64       	R4 += 0xd;		/* ( 13) */
 94e:	2f 67       	R7 += -0x1b;		/* (-27) */
 950:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 952:	5f 62       	R7 = -0x35 (X);		/*		R7=0xffffffcb(-53) */
 954:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 956:	6c 64       	R4 += 0xd;		/* ( 13) */
 958:	2d 34       	M1 = R5;
 95a:	2e 35       	ILLEGAL;
 95c:	2f 2e       	JUMP.S 0x5ba <bss_begin+0x552>;
 95e:	2f 67       	R7 += -0x1b;		/* (-27) */
 960:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 962:	2f 69       	FP = 0x25 (X);		/*		FP=0x25( 37) */
 964:	6e 63       	R6 = -0x13 (X);		/*		R6=0xffffffed(-19) */
 966:	6c 75       	ILLEGAL;
 968:	64 65       	R4 += 0x2c;		/* ( 44) */
 96a:	00 00       	NOP;
 96c:	73 74       	ILLEGAL;
 96e:	72 6c       	P2 += 0xe;		/* ( 14) */
 970:	65 6e       	P5 += -0x34;		/* (-52) */
 972:	2e 63       	R6 = -0x1b (X);		/*		R6=0xffffffe5(-27) */
 974:	00 01       	ILLEGAL;
 976:	00 00       	NOP;
 978:	73 74       	ILLEGAL;
 97a:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 97c:	6e 67       	R6 += -0x13;		/* (-19) */
 97e:	2e 68       	SP = 0x5 (X);		/*		SP=0x5(  5) */
 980:	00 02       	R0 = CC;
 982:	00 00       	NOP;
 984:	73 74       	ILLEGAL;
 986:	64 64       	R4 += 0xc;		/* ( 12) */
 988:	65 66       	R5 += -0x34;		/* (-52) */
 98a:	2e 68       	SP = 0x5 (X);		/*		SP=0x5(  5) */
 98c:	00 03       	CC = AZ;
 98e:	00 00       	NOP;
 990:	00 00       	NOP;
 992:	05 02       	R5 = CC;
 994:	6c ff       	ILLEGAL;
 996:	00 01       	ILLEGAL;
 998:	03 3a       	ILLEGAL;
 99a:	01 19       	IF CC JUMP 0xb9c <_intr_stack+0x334>;
 99c:	03 79       	ILLEGAL;
 99e:	2e 35       	ILLEGAL;
 9a0:	03 79       	ILLEGAL;
 9a2:	2e 51       	R4 = R6 + R5;
 9a4:	84 04       	(P5:4) = [SP++];
 9a6:	02 03       	CC = AC0_COPY;
 9a8:	5e 82       	R1.L = W[SP ++ P3];
 9aa:	04 01       	ILLEGAL;
 9ac:	03 20       	JUMP.S 0x9b2 <_intr_stack+0x14a>;
 9ae:	2e 04       	ILLEGAL;
 9b0:	02 03       	CC = AC0_COPY;
 9b2:	60 2e       	JUMP.S 0x672 <bss_begin+0x60a>;
 9b4:	04 01       	ILLEGAL;
 9b6:	03 22       	JUMP.S 0xdbc <_intr_stack+0x554>;
 9b8:	66 64       	R6 += 0xc;		/* ( 12) */
 9ba:	4d 2b       	JUMP.S 0x54 <_device_ble+0x8>;
 9bc:	03 0a       	CC = R3 <= R0 (IU);
 9be:	4a 08       	CC = P2 == P1;
 9c0:	8f 2f       	JUMP.S 0x8de <_intr_stack+0x76>;
 9c2:	04 02       	R4 = CC;
 9c4:	03 56       	R0 = R3 | R0;
 9c6:	66 04       	ILLEGAL;
 9c8:	01 03       	CC = AN;
 9ca:	2a 2e       	JUMP.S 0x61e <bss_begin+0x5b6>;
 9cc:	03 09       	CC = R3 <= R0;
 9ce:	f2 2a       	JUMP.S 0xffffffb2 <_text_end+0xfefeff72>;
 9d0:	32 04       	ILLEGAL;
 9d2:	02 03       	CC = AC0_COPY;
 9d4:	4d 66       	R5 += -0x37;		/* (-55) */
 9d6:	04 01       	ILLEGAL;
 9d8:	03 33       	P0 = A1.W;
 9da:	2e 84       	R0.H = W[SP ++ P5];
 9dc:	2f 03       	CC |= ASTAT[15 /* unused bit */];
 9de:	6c 82       	R1.L = W[P4 ++ P5];
 9e0:	03 14       	IF !CC JUMP 0x9e6 <_intr_stack+0x17e> (BP);
 9e2:	2e 03       	CC |= ASTAT[14 /* unused bit */];
 9e4:	6c 4a       	BITSET (R4, 0xd);		/* bit 13 */
 9e6:	03 14       	IF !CC JUMP 0x9ec <_intr_stack+0x184> (BP);
 9e8:	2e 03       	CC |= ASTAT[14 /* unused bit */];
 9ea:	6a 4a       	BITSET (R2, 0xd);		/* bit 13 */
 9ec:	4c 2f       	JUMP.S 0x884 <_intr_stack+0x1c>;
 9ee:	02 02       	R2 = CC;
 9f0:	00 01       	ILLEGAL;
 9f2:	01 7c       	ILLEGAL;
 9f4:	00 00       	NOP;
 9f6:	00 02       	R0 = CC;
 9f8:	00 5d       	P4 = P0 + (P0 << 0x1);
 9fa:	00 00       	NOP;
 9fc:	00 01       	ILLEGAL;
 9fe:	01 fb       	ILLEGAL;
 a00:	0e 0d       	CC = R6 <= 0x1;
 a02:	00 01       	ILLEGAL;
 a04:	01 01       	ILLEGAL;
 a06:	01 00       	ILLEGAL;
 a08:	00 00       	NOP;
 a0a:	01 00       	ILLEGAL;
 a0c:	00 01       	ILLEGAL;
 a0e:	2f 68       	FP = 0x5 (X);		/*		FP=0x5(  5) */
 a10:	6f 6d       	FP += 0x2d;		/* ( 45) */
 a12:	65 2f       	JUMP.S 0x8dc <_intr_stack+0x74>;
 a14:	62 75       	ILLEGAL;
 a16:	69 6c       	P1 += 0xd;		/* ( 13) */
 a18:	64 2f       	JUMP.S 0x8e0 <_intr_stack+0x78>;
 a1a:	64 76       	ILLEGAL;
 a1c:	31 30       	R6 = R1;
 a1e:	5f 38       	A1.W = FP;
 a20:	32 39       	ASTAT = A1.X;
 a22:	70 6d       	P0 += 0x2e;		/* ( 46) */
 a24:	2f 67       	R7 += -0x1b;		/* (-27) */
 a26:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 a28:	2d 34       	M1 = R5;
 a2a:	2e 35       	ILLEGAL;
 a2c:	2f 6c       	FP += 0x5;		/* (  5) */
 a2e:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 a30:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 a32:	63 2f       	JUMP.S 0x8f8 <_intr_stack+0x90>;
 a34:	2e 2e       	JUMP.S 0x690 <bss_begin+0x628>;
 a36:	2f 67       	R7 += -0x1b;		/* (-27) */
 a38:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 a3a:	2f 63       	R7 = -0x1b (X);		/*		R7=0xffffffe5(-27) */
 a3c:	6f 6e       	FP += -0x33;		/* (-51) */
 a3e:	66 69       	SP = 0x2c (X);		/*		SP=0x2c( 44) */
 a40:	67 2f       	JUMP.S 0x90e <_intr_stack+0xa6>;
 a42:	64 76       	ILLEGAL;
 a44:	31 30       	R6 = R1;
 a46:	00 00       	NOP;
 a48:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 a4a:	62 31       	ILLEGAL;
 a4c:	66 75       	ILLEGAL;
 a4e:	6e 63       	R6 = -0x13 (X);		/*		R6=0xffffffed(-19) */
 a50:	73 2e       	JUMP.S 0x736 <bss_begin+0x6ce>;
 a52:	61 73       	ILLEGAL;
 a54:	6d 00       	ILLEGAL;
 a56:	01 00       	ILLEGAL;
 a58:	00 00       	NOP;
 a5a:	00 05       	(R7:0) = [SP++];
 a5c:	02 08       	CC = R2 == R0;
 a5e:	00 01       	ILLEGAL;
 a60:	01 03       	CC = AN;
 a62:	d1 00       	ILLEGAL;
 a64:	01 2f       	JUMP.S 0x866 <bss_begin+0x7fe>;
 a66:	2f 2f       	JUMP.S 0x8c4 <_intr_stack+0x5c>;
 a68:	4b 2f       	JUMP.S 0x8fe <_intr_stack+0x96>;
 a6a:	2f 2f       	JUMP.S 0x8c8 <_intr_stack+0x60>;
 a6c:	2f 2f       	JUMP.S 0x8ca <_intr_stack+0x62>;
 a6e:	02 02       	R2 = CC;
 a70:	00 01       	ILLEGAL;
 a72:	01 7a       	ILLEGAL;
 a74:	00 00       	NOP;
 a76:	00 02       	R0 = CC;
 a78:	00 5d       	P4 = P0 + (P0 << 0x1);
 a7a:	00 00       	NOP;
 a7c:	00 01       	ILLEGAL;
 a7e:	01 fb       	ILLEGAL;
 a80:	0e 0d       	CC = R6 <= 0x1;
 a82:	00 01       	ILLEGAL;
 a84:	01 01       	ILLEGAL;
 a86:	01 00       	ILLEGAL;
 a88:	00 00       	NOP;
 a8a:	01 00       	ILLEGAL;
 a8c:	00 01       	ILLEGAL;
 a8e:	2f 68       	FP = 0x5 (X);		/*		FP=0x5(  5) */
 a90:	6f 6d       	FP += 0x2d;		/* ( 45) */
 a92:	65 2f       	JUMP.S 0x95c <_intr_stack+0xf4>;
 a94:	62 75       	ILLEGAL;
 a96:	69 6c       	P1 += 0xd;		/* ( 13) */
 a98:	64 2f       	JUMP.S 0x960 <_intr_stack+0xf8>;
 a9a:	64 76       	ILLEGAL;
 a9c:	31 30       	R6 = R1;
 a9e:	5f 38       	A1.W = FP;
 aa0:	32 39       	ASTAT = A1.X;
 aa2:	70 6d       	P0 += 0x2e;		/* ( 46) */
 aa4:	2f 67       	R7 += -0x1b;		/* (-27) */
 aa6:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 aa8:	2d 34       	M1 = R5;
 aaa:	2e 35       	ILLEGAL;
 aac:	2f 6c       	FP += 0x5;		/* (  5) */
 aae:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 ab0:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 ab2:	63 2f       	JUMP.S 0x978 <_intr_stack+0x110>;
 ab4:	2e 2e       	JUMP.S 0x710 <bss_begin+0x6a8>;
 ab6:	2f 67       	R7 += -0x1b;		/* (-27) */
 ab8:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 aba:	2f 63       	R7 = -0x1b (X);		/*		R7=0xffffffe5(-27) */
 abc:	6f 6e       	FP += -0x33;		/* (-51) */
 abe:	66 69       	SP = 0x2c (X);		/*		SP=0x2c( 44) */
 ac0:	67 2f       	JUMP.S 0x98e <_intr_stack+0x126>;
 ac2:	64 76       	ILLEGAL;
 ac4:	31 30       	R6 = R1;
 ac6:	00 00       	NOP;
 ac8:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 aca:	62 31       	ILLEGAL;
 acc:	66 75       	ILLEGAL;
 ace:	6e 63       	R6 = -0x13 (X);		/*		R6=0xffffffed(-19) */
 ad0:	73 2e       	JUMP.S 0x7b6 <bss_begin+0x74e>;
 ad2:	61 73       	ILLEGAL;
 ad4:	6d 00       	ILLEGAL;
 ad6:	01 00       	ILLEGAL;
 ad8:	00 00       	NOP;
 ada:	00 05       	(R7:0) = [SP++];
 adc:	02 20       	JUMP.S 0xae0 <_intr_stack+0x278>;
 ade:	00 01       	ILLEGAL;
 ae0:	01 03       	CC = AN;
 ae2:	e5 00       	ILLEGAL;
 ae4:	01 4b       	BITTGL (R1, 0x0);		/* bit  0 */
 ae6:	4b 4b       	BITTGL (R3, 0x9);		/* bit  9 */
 ae8:	4b 4b       	BITTGL (R3, 0x9);		/* bit  9 */
 aea:	4b 4b       	BITTGL (R3, 0x9);		/* bit  9 */
 aec:	02 02       	R2 = CC;
 aee:	00 01       	ILLEGAL;
 af0:	Address 0x00000af0 is out of bounds.


Disassembly of section .debug_frame:

00000000 <.debug_frame>:
   0:	0c 00       	ILLEGAL;
   2:	00 00       	NOP;
   4:	ff ff       	ILLEGAL;
   6:	ff ff       	ILLEGAL;
   8:	01 00       	ILLEGAL;
   a:	01 7c       	ILLEGAL;
   c:	23 0c       	CC = R3 == -0x4;
   e:	0e 00       	ILLEGAL;
  10:	28 00       	ILLEGAL;
  12:	00 00       	NOP;
  14:	00 00       	NOP;
  16:	00 00       	NOP;
  18:	fc f3       	ILLEGAL;
  1a:	00 01       	ILLEGAL;
  1c:	62 03       	CC ^= AC0_COPY;
  1e:	00 00       	NOP;
  20:	42 0e       	CC = P2 <= 0x0 (IU);
  22:	1c 8d       	W[P4 ++ P3] = R4.H;
  24:	07 8c       	W[FP ++ P0] = R0.H;
  26:	06 8b       	W[SP ++ P0] = R4.L;
  28:	05 87       	R4 = W[P5 ++ P0] (Z);
  2a:	04 86       	R0 = W[P4 ++ P0] (Z);
  2c:	03 85       	R4.H = W[P3 ++ P0];
  2e:	02 84       	R0.H = W[P2 ++ P0];
  30:	01 52       	R0 = R1 - R0;
  32:	0c 0f       	ILLEGAL;
  34:	24 8f       	R4 = W[P4 ++ P4] (X);
  36:	09 a3       	R1 = [P1 + 0x30];
  38:	08 00       	ILLEGAL;
  3a:	00 00       	NOP;
  3c:	0c 00       	ILLEGAL;
  3e:	00 00       	NOP;
  40:	ff ff       	ILLEGAL;
  42:	ff ff       	ILLEGAL;
  44:	01 00       	ILLEGAL;
  46:	01 7c       	ILLEGAL;
  48:	23 0c       	CC = R3 == -0x4;
  4a:	0e 00       	ILLEGAL;
  4c:	18 00       	ILLEGAL;
  4e:	00 00       	NOP;
  50:	3c 00       	ILLEGAL;
  52:	00 00       	NOP;
  54:	60 f7       	ILLEGAL;
  56:	00 01       	ILLEGAL;
  58:	c6 01       	ILLEGAL;
  5a:	00 00       	NOP;
  5c:	44 0e       	CC = P4 <= 0x0 (IU);
  5e:	04 8d       	W[P4 ++ P0] = R4.H;
  60:	01 03       	CC = AN;
  62:	c0 01       	ILLEGAL;
  64:	0e 00       	ILLEGAL;
  66:	00 00       	NOP;
  68:	18 00       	ILLEGAL;
  6a:	00 00       	NOP;
  6c:	3c 00       	ILLEGAL;
  6e:	00 00       	NOP;
  70:	28 f9       	OUTC 0x28;
  72:	00 01       	ILLEGAL;
  74:	c6 01       	ILLEGAL;
  76:	00 00       	NOP;
  78:	44 0e       	CC = P4 <= 0x0 (IU);
  7a:	04 8d       	W[P4 ++ P0] = R4.H;
  7c:	01 03       	CC = AN;
  7e:	c0 01       	ILLEGAL;
  80:	0e 00       	ILLEGAL;
  82:	00 00       	NOP;
  84:	0c 00       	ILLEGAL;
  86:	00 00       	NOP;
  88:	3c 00       	ILLEGAL;
  8a:	00 00       	NOP;
  8c:	f0 fa       	ILLEGAL;
  8e:	00 01       	ILLEGAL;
  90:	48 00       	ILLEGAL;
  92:	00 00       	NOP;
  94:	18 00       	ILLEGAL;
  96:	00 00       	NOP;
  98:	3c 00       	ILLEGAL;
  9a:	00 00       	NOP;
  9c:	38 fb       	ILLEGAL;
  9e:	00 01       	ILLEGAL;
  a0:	4e 01       	ILLEGAL;
  a2:	00 00       	NOP;
  a4:	44 0e       	CC = P4 <= 0x0 (IU);
  a6:	08 87       	R4 = W[P0 ++ P1] (Z);
  a8:	02 86       	R0 = W[P2 ++ P0] (Z);
  aa:	01 03       	CC = AN;
  ac:	48 01       	[--SP] = P0;
  ae:	0e 00       	ILLEGAL;
  b0:	0c 00       	ILLEGAL;
  b2:	00 00       	NOP;
  b4:	ff ff       	ILLEGAL;
  b6:	ff ff       	ILLEGAL;
  b8:	01 00       	ILLEGAL;
  ba:	01 7c       	ILLEGAL;
  bc:	23 0c       	CC = R3 == -0x4;
  be:	0e 00       	ILLEGAL;
  c0:	1c 00       	ILLEGAL;
  c2:	00 00       	NOP;
  c4:	b0 00       	TESTSET (P0);
  c6:	00 00       	NOP;
  c8:	88 fc       	ILLEGAL;
  ca:	00 01       	ILLEGAL;
  cc:	7a 00       	ILLEGAL;
  ce:	00 00       	NOP;
  d0:	42 0e       	CC = P2 <= 0x0 (IU);
  d2:	04 44       	P4 -= P0;
  d4:	0c 0f       	ILLEGAL;
  d6:	0c 8f       	R4 = W[P4 ++ P1] (X);
  d8:	03 a3       	R3 = [P0 + 0x30];
  da:	02 87       	R4 = W[P2 ++ P0] (Z);
  dc:	01 7e       	ILLEGAL;
  de:	0a 0b       	ILLEGAL;
  e0:	0c 00       	ILLEGAL;
  e2:	00 00       	NOP;
  e4:	ff ff       	ILLEGAL;
  e6:	ff ff       	ILLEGAL;
  e8:	01 00       	ILLEGAL;
  ea:	01 7c       	ILLEGAL;
  ec:	23 0c       	CC = R3 == -0x4;
  ee:	0e 00       	ILLEGAL;
  f0:	20 00       	IDLE;
  f2:	00 00       	NOP;
  f4:	e0 00       	ILLEGAL;
  f6:	00 00       	NOP;
  f8:	04 fd       	ILLEGAL;
  fa:	00 01       	ILLEGAL;
  fc:	9c 00       	RAISE 0xc;
  fe:	00 00       	NOP;
 100:	42 0e       	CC = P2 <= 0x0 (IU);
 102:	0c 46       	ILLEGAL;
 104:	0c 0f       	ILLEGAL;
 106:	14 8f       	R4 = W[P4 ++ P2] (X);
 108:	05 a3       	R5 = [P0 + 0x30];
 10a:	04 8d       	W[P4 ++ P0] = R4.H;
 10c:	03 8c       	W[P3 ++ P0] = R0.H;
 10e:	02 87       	R4 = W[P2 ++ P0] (Z);
 110:	01 00       	ILLEGAL;
 112:	00 00       	NOP;
 114:	0c 00       	ILLEGAL;
 116:	00 00       	NOP;
 118:	ff ff       	ILLEGAL;
 11a:	ff ff       	ILLEGAL;
 11c:	01 00       	ILLEGAL;
 11e:	01 7c       	ILLEGAL;
 120:	23 0c       	CC = R3 == -0x4;
 122:	0e 00       	ILLEGAL;
 124:	20 00       	IDLE;
 126:	00 00       	NOP;
 128:	14 01       	M0 = [SP++];
 12a:	00 00       	NOP;
 12c:	a0 fd       	ILLEGAL;
 12e:	00 01       	ILLEGAL;
 130:	ae 00       	EXCPT 0xe;
 132:	00 00       	NOP;
 134:	44 0e       	CC = P4 <= 0x0 (IU);
 136:	0c 46       	ILLEGAL;
 138:	0c 0f       	ILLEGAL;
 13a:	14 8f       	R4 = W[P4 ++ P2] (X);
 13c:	05 a3       	R5 = [P0 + 0x30];
 13e:	04 87       	R4 = W[P4 ++ P0] (Z);
 140:	03 86       	R0 = W[P3 ++ P0] (Z);
 142:	02 85       	R4.H = W[P2 ++ P0];
 144:	01 00       	ILLEGAL;
 146:	00 00       	NOP;
 148:	0c 00       	ILLEGAL;
 14a:	00 00       	NOP;
 14c:	ff ff       	ILLEGAL;
 14e:	ff ff       	ILLEGAL;
 150:	01 00       	ILLEGAL;
 152:	01 7c       	ILLEGAL;
 154:	23 0c       	CC = R3 == -0x4;
 156:	0e 00       	ILLEGAL;
 158:	20 00       	IDLE;
 15a:	00 00       	NOP;
 15c:	48 01       	[--SP] = P0;
 15e:	00 00       	NOP;
 160:	50 fe       	ILLEGAL;
 162:	00 01       	ILLEGAL;
 164:	b0 00       	TESTSET (P0);
 166:	00 00       	NOP;
 168:	46 0e       	CC = SP <= 0x0 (IU);
 16a:	08 46       	ILLEGAL;
 16c:	0c 0f       	ILLEGAL;
 16e:	10 8f       	R4 = W[P0 ++ P2] (X);
 170:	04 a3       	R4 = [P0 + 0x30];
 172:	03 87       	R4 = W[P3 ++ P0] (Z);
 174:	02 86       	R0 = W[P2 ++ P0] (Z);
 176:	01 02       	R1 = CC;
 178:	9a 0a       	ILLEGAL;
 17a:	0b 00       	ILLEGAL;
 17c:	0c 00       	ILLEGAL;
 17e:	00 00       	NOP;
 180:	ff ff       	ILLEGAL;
 182:	ff ff       	ILLEGAL;
 184:	01 00       	ILLEGAL;
 186:	01 7c       	ILLEGAL;
 188:	23 0c       	CC = R3 == -0x4;
 18a:	0e 00       	ILLEGAL;
 18c:	20 00       	IDLE;
 18e:	00 00       	NOP;
 190:	7c 01       	[--SP] = RETX;
 192:	00 00       	NOP;
 194:	00 ff       	ILLEGAL;
 196:	00 01       	ILLEGAL;
 198:	6a 00       	ILLEGAL;
 19a:	00 00       	NOP;
 19c:	46 0e       	CC = SP <= 0x0 (IU);
 19e:	08 46       	ILLEGAL;
 1a0:	0c 0f       	ILLEGAL;
 1a2:	10 8f       	R4 = W[P0 ++ P2] (X);
 1a4:	04 a3       	R4 = [P0 + 0x30];
 1a6:	03 87       	R4 = W[P3 ++ P0] (Z);
 1a8:	02 86       	R0 = W[P2 ++ P0] (Z);
 1aa:	01 02       	R1 = CC;
 1ac:	58 0a       	CC = P0 <= P3 (IU);
 1ae:	0b 00       	ILLEGAL;
 1b0:	0c 00       	ILLEGAL;
 1b2:	00 00       	NOP;
 1b4:	ff ff       	ILLEGAL;
 1b6:	ff ff       	ILLEGAL;
 1b8:	01 00       	ILLEGAL;
 1ba:	01 7c       	ILLEGAL;
 1bc:	23 0c       	CC = R3 == -0x4;
 1be:	0e 00       	ILLEGAL;
 1c0:	20 00       	IDLE;
 1c2:	00 00       	NOP;
 1c4:	b0 01       	ILLEGAL;
 1c6:	00 00       	NOP;
 1c8:	6c ff       	ILLEGAL;
 1ca:	00 01       	ILLEGAL;
 1cc:	9a 00       	RAISE 0xa;
 1ce:	00 00       	NOP;
 1d0:	44 0e       	CC = P4 <= 0x0 (IU);
 1d2:	04 46       	ILLEGAL;
 1d4:	0c 0f       	ILLEGAL;
 1d6:	0c 8f       	R4 = W[P4 ++ P1] (X);
 1d8:	03 a3       	R3 = [P0 + 0x30];
 1da:	02 87       	R4 = W[P2 ++ P0] (Z);
 1dc:	01 02       	R1 = CC;
 1de:	7c 0a       	CC = P4 <= FP (IU);
 1e0:	0b 4c       	BITCLR (R3, 0x1);		/* bit  1 */
 1e2:	0a 0b       	ILLEGAL;

Disassembly of section .debug_loc:

00000000 <.debug_loc>:
   0:	00 00       	NOP;
   2:	00 00       	NOP;
   4:	02 00       	ILLEGAL;
   6:	00 00       	NOP;
   8:	02 00       	ILLEGAL;
   a:	7e 00       	ILLEGAL;
   c:	02 00       	ILLEGAL;
   e:	00 00       	NOP;
  10:	14 00       	RTE;
  12:	00 00       	NOP;
  14:	02 00       	ILLEGAL;
  16:	7e 1c       	IF CC JUMP 0x112 <bss_begin+0xaa> (BP);
  18:	14 00       	RTE;
  1a:	00 00       	NOP;
  1c:	62 03       	CC ^= AC0_COPY;
  1e:	00 00       	NOP;
  20:	02 00       	ILLEGAL;
  22:	7f 24       	JUMP.S 0x920 <_intr_stack+0xb8>;
	...
  30:	2e 00       	ILLEGAL;
  32:	00 00       	NOP;
  34:	01 00       	ILLEGAL;
  36:	50 2e       	JUMP.S 0xfffffcd6 <_text_end+0xfefefc96>;
  38:	00 00       	NOP;
  3a:	00 1c       	IF CC JUMP 0x3a <_ble_resource+0x6> (BP);
  3c:	01 00       	ILLEGAL;
  3e:	00 01       	ILLEGAL;
  40:	00 5c       	P0 = P0 + (P0 << 0x1);
	...
  4e:	0e 00       	ILLEGAL;
  50:	00 00       	NOP;
  52:	01 00       	ILLEGAL;
  54:	51 0e       	CC = P1 <= 0x2 (IU);
  56:	00 00       	NOP;
  58:	00 d0       	ILLEGAL;
  5a:	00 00       	NOP;
  5c:	00 01       	ILLEGAL;
  5e:	00 5b       	P4 = P0 << 0x1;
	...
  6c:	0a 00       	ILLEGAL;
  6e:	00 00       	NOP;
  70:	01 00       	ILLEGAL;
  72:	52 0a       	CC = P2 <= P2 (IU);
  74:	00 00       	NOP;
  76:	00 4a       	BITSET (R0, 0x0);		/* bit  0 */
  78:	01 00       	ILLEGAL;
  7a:	00 01       	ILLEGAL;
  7c:	00 57       	R4 = R0 | R0;
  7e:	a2 01       	ILLEGAL;
  80:	00 00       	NOP;
  82:	aa 01       	ILLEGAL;
  84:	00 00       	NOP;
  86:	01 00       	ILLEGAL;
  88:	57 26       	JUMP.S 0xd36 <_intr_stack+0x4ce>;
  8a:	02 00       	ILLEGAL;
  8c:	00 28       	JUMP.S 0xfffff08c <_text_end+0xfefef04c>;
  8e:	02 00       	ILLEGAL;
  90:	00 01       	ILLEGAL;
  92:	00 57       	R4 = R0 | R0;
	...
  9c:	b4 02       	ILLEGAL;
  9e:	00 00       	NOP;
  a0:	bc 02       	ILLEGAL;
  a2:	00 00       	NOP;
  a4:	02 00       	ILLEGAL;
  a6:	76 00       	CALL (PC + SP);
  a8:	c8 02       	ILLEGAL;
  aa:	00 00       	NOP;
  ac:	f4 02       	ILLEGAL;
  ae:	00 00       	NOP;
  b0:	01 00       	ILLEGAL;
  b2:	57 00       	JUMP (FP);
  b4:	00 00       	NOP;
  b6:	00 00       	NOP;
  b8:	00 00       	NOP;
  ba:	00 54       	R0 = R0 & R0;
  bc:	00 00       	NOP;
  be:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
  c0:	00 00       	NOP;
  c2:	00 01       	ILLEGAL;
  c4:	00 50       	R0 = R0 + R0;
  c6:	dc 00       	ILLEGAL;
  c8:	00 00       	NOP;
  ca:	e2 00       	ILLEGAL;
  cc:	00 00       	NOP;
  ce:	01 00       	ILLEGAL;
  d0:	50 08       	CC = P0 == P2;
  d2:	01 00       	ILLEGAL;
  d4:	00 0c       	CC = R0 == 0x0;
  d6:	01 00       	ILLEGAL;
  d8:	00 01       	ILLEGAL;
  da:	00 50       	R0 = R0 + R0;
  dc:	5e 01       	[--SP] = L2;
  de:	00 00       	NOP;
  e0:	6e 01       	ILLEGAL;
  e2:	00 00       	NOP;
  e4:	01 00       	ILLEGAL;
  e6:	50 94       	R0 = W[P2++] (X);
  e8:	01 00       	ILLEGAL;
  ea:	00 9c       	R0 = [I0++];
  ec:	01 00       	ILLEGAL;
  ee:	00 01       	ILLEGAL;
  f0:	00 50       	R0 = R0 + R0;
  f2:	de 01       	ILLEGAL;
  f4:	00 00       	NOP;
  f6:	e8 01       	ILLEGAL;
  f8:	00 00       	NOP;
  fa:	01 00       	ILLEGAL;
  fc:	50 18       	IF CC JUMP 0x19c <bss_begin+0x134>;
  fe:	02 00       	ILLEGAL;
 100:	00 20       	JUMP.S 0x100 <bss_begin+0x98>;
 102:	02 00       	ILLEGAL;
 104:	00 01       	ILLEGAL;
 106:	00 50       	R0 = R0 + R0;
 108:	98 02       	ILLEGAL;
 10a:	00 00       	NOP;
 10c:	9e 02       	ILLEGAL;
 10e:	00 00       	NOP;
 110:	01 00       	ILLEGAL;
 112:	50 e0       	ILLEGAL;
 114:	02 00       	ILLEGAL;
 116:	00 e6 02 00 	[P0 + 0x8] = R0;
 11a:	00 01       	ILLEGAL;
 11c:	00 50       	R0 = R0 + R0;
 11e:	22 03       	CC |= AC0_COPY;
 120:	00 00       	NOP;
 122:	28 03       	CC |= RND_MOD;
 124:	00 00       	NOP;
 126:	01 00       	ILLEGAL;
 128:	50 38       	A1.X = P0;
 12a:	03 00       	ILLEGAL;
 12c:	00 62       	R0 = -0x40 (X);		/*		R0=0xffffffc0(-64) */
 12e:	03 00       	ILLEGAL;
 130:	00 01       	ILLEGAL;
 132:	00 50       	R0 = R0 + R0;
	...
 140:	22 00       	ILLEGAL;
 142:	00 00       	NOP;
 144:	02 00       	ILLEGAL;
 146:	30 9f       	W[I2] = R0.L;
 148:	22 00       	ILLEGAL;
 14a:	00 00       	NOP;
 14c:	2e 00       	ILLEGAL;
 14e:	00 00       	NOP;
 150:	02 00       	ILLEGAL;
 152:	31 9f       	W[I2] = R1.L;
 154:	3c 00       	ILLEGAL;
 156:	00 00       	NOP;
 158:	46 00       	STI R6;
 15a:	00 00       	NOP;
 15c:	02 00       	ILLEGAL;
 15e:	3f 9f       	W[I3] = R7.L;
 160:	46 00       	STI R6;
 162:	00 00       	NOP;
 164:	5c 00       	ILLEGAL;
 166:	00 00       	NOP;
 168:	02 00       	ILLEGAL;
 16a:	40 9f       	W[I0] = R0.H;
 16c:	5c 00       	ILLEGAL;
 16e:	00 00       	NOP;
 170:	78 00       	ILLEGAL;
 172:	00 00       	NOP;
 174:	02 00       	ILLEGAL;
 176:	30 9f       	W[I2] = R0.L;
 178:	78 00       	ILLEGAL;
 17a:	00 00       	NOP;
 17c:	7c 00       	ILLEGAL;
 17e:	00 00       	NOP;
 180:	02 00       	ILLEGAL;
 182:	31 9f       	W[I2] = R1.L;
 184:	7c 00       	ILLEGAL;
 186:	00 00       	NOP;
 188:	80 00       	JUMP (PC + P0);
 18a:	00 00       	NOP;
 18c:	02 00       	ILLEGAL;
 18e:	32 9f       	W[I2] = R2.L;
 190:	80 00       	JUMP (PC + P0);
 192:	00 00       	NOP;
 194:	86 00       	JUMP (PC + SP);
 196:	00 00       	NOP;
 198:	02 00       	ILLEGAL;
 19a:	30 9f       	W[I2] = R0.L;
 19c:	86 00       	JUMP (PC + SP);
 19e:	00 00       	NOP;
 1a0:	8e 00       	ILLEGAL;
 1a2:	00 00       	NOP;
 1a4:	02 00       	ILLEGAL;
 1a6:	31 9f       	W[I2] = R1.L;
 1a8:	8e 00       	ILLEGAL;
 1aa:	00 00       	NOP;
 1ac:	9c 00       	RAISE 0xc;
 1ae:	00 00       	NOP;
 1b0:	02 00       	ILLEGAL;
 1b2:	32 9f       	W[I2] = R2.L;
 1b4:	9c 00       	RAISE 0xc;
 1b6:	00 00       	NOP;
 1b8:	aa 00       	EXCPT 0xa;
 1ba:	00 00       	NOP;
 1bc:	02 00       	ILLEGAL;
 1be:	33 9f       	W[I2] = R3.L;
 1c0:	aa 00       	EXCPT 0xa;
 1c2:	00 00       	NOP;
 1c4:	b4 00       	TESTSET (P4);
 1c6:	00 00       	NOP;
 1c8:	02 00       	ILLEGAL;
 1ca:	34 9f       	W[I2] = R4.L;
 1cc:	b4 00       	TESTSET (P4);
 1ce:	00 00       	NOP;
 1d0:	be 00       	ILLEGAL;
 1d2:	00 00       	NOP;
 1d4:	02 00       	ILLEGAL;
 1d6:	35 9f       	W[I2] = R5.L;
 1d8:	be 00       	ILLEGAL;
 1da:	00 00       	NOP;
 1dc:	c0 00       	ILLEGAL;
 1de:	00 00       	NOP;
 1e0:	02 00       	ILLEGAL;
 1e2:	36 9f       	W[I2] = R6.L;
 1e4:	d0 00       	ILLEGAL;
 1e6:	00 00       	NOP;
 1e8:	db 00       	ILLEGAL;
 1ea:	00 00       	NOP;
 1ec:	01 00       	ILLEGAL;
 1ee:	5a e2 00 00 	JUMP.L 0xb401ee <bss_end+0xb3bc22>;
 1f2:	00 ee       	ILLEGAL;
 1f4:	00 00       	NOP;
 1f6:	00 01       	ILLEGAL;
 1f8:	00 5a       	P0 = P0 << 0x1;
 1fa:	ee 00       	ILLEGAL;
 1fc:	00 00       	NOP;
 1fe:	f0 00       	ILLEGAL;
 200:	00 00       	NOP;
 202:	01 00       	ILLEGAL;
 204:	5a f0 00 00 	DBGA (B2.H, 0x0);
 208:	00 00       	NOP;
 20a:	01 00       	ILLEGAL;
 20c:	00 01       	ILLEGAL;
 20e:	00 5a       	P0 = P0 << 0x1;
 210:	0c 01       	ILLEGAL;
 212:	00 00       	NOP;
 214:	14 01       	M0 = [SP++];
 216:	00 00       	NOP;
 218:	02 00       	ILLEGAL;
 21a:	30 9f       	W[I2] = R0.L;
 21c:	14 01       	M0 = [SP++];
 21e:	00 00       	NOP;
 220:	1c 01       	L0 = [SP++];
 222:	00 00       	NOP;
 224:	02 00       	ILLEGAL;
 226:	31 9f       	W[I2] = R1.L;
 228:	20 01       	A0.X = [SP++];
 22a:	00 00       	NOP;
 22c:	26 01       	ASTAT = [SP++];
 22e:	00 00       	NOP;
 230:	02 00       	ILLEGAL;
 232:	3e 9f       	W[I3] = R6.L;
 234:	26 01       	ASTAT = [SP++];
 236:	00 00       	NOP;
 238:	2a 01       	ILLEGAL;
 23a:	00 00       	NOP;
 23c:	02 00       	ILLEGAL;
 23e:	3f 9f       	W[I3] = R7.L;
 240:	2a 01       	ILLEGAL;
 242:	00 00       	NOP;
 244:	68 02       	FLUSHINV[P0++];
 246:	00 00       	NOP;
 248:	02 00       	ILLEGAL;
 24a:	30 9f       	W[I2] = R0.L;
 24c:	68 02       	FLUSHINV[P0++];
 24e:	00 00       	NOP;
 250:	e6 02       	ILLEGAL;
 252:	00 00       	NOP;
 254:	01 00       	ILLEGAL;
 256:	5b e6 02 00 	W[P3 + 0x4] = R3;
 25a:	00 f8       	DBG R0;
 25c:	02 00       	ILLEGAL;
 25e:	00 01       	ILLEGAL;
 260:	00 5b       	P4 = P0 << 0x1;
 262:	f8 02       	ILLEGAL;
 264:	00 00       	NOP;
 266:	04 03       	CC = ASTAT[4 /* unused bit */];
 268:	00 00       	NOP;
 26a:	01 00       	ILLEGAL;
 26c:	5b 28       	JUMP.S 0xfffff322 <_text_end+0xfefef2e2>;
 26e:	03 00       	ILLEGAL;
 270:	00 3e       	USP = R0;
 272:	03 00       	ILLEGAL;
 274:	00 01       	ILLEGAL;
 276:	00 5b       	P4 = P0 << 0x1;
	...
 280:	22 00       	ILLEGAL;
 282:	00 00       	NOP;
 284:	2e 00       	ILLEGAL;
 286:	00 00       	NOP;
 288:	02 00       	ILLEGAL;
 28a:	30 9f       	W[I2] = R0.L;
 28c:	d0 00       	ILLEGAL;
 28e:	00 00       	NOP;
 290:	f0 00       	ILLEGAL;
 292:	00 00       	NOP;
 294:	01 00       	ILLEGAL;
 296:	56 f0 00 00 	DBGA (M2.H, 0x0);
 29a:	00 0c       	CC = R0 == 0x0;
 29c:	01 00       	ILLEGAL;
 29e:	00 01       	ILLEGAL;
 2a0:	00 56       	R0 = R0 | R0;
 2a2:	14 01       	M0 = [SP++];
 2a4:	00 00       	NOP;
 2a6:	1c 01       	L0 = [SP++];
 2a8:	00 00       	NOP;
 2aa:	02 00       	ILLEGAL;
 2ac:	30 9f       	W[I2] = R0.L;
 2ae:	32 01       	LB0 = [SP++];
 2b0:	00 00       	NOP;
 2b2:	56 01       	[--SP] = M2;
 2b4:	00 00       	NOP;
 2b6:	02 00       	ILLEGAL;
 2b8:	30 9f       	W[I2] = R0.L;
 2ba:	9a 01       	ILLEGAL;
 2bc:	00 00       	NOP;
 2be:	a2 01       	ILLEGAL;
 2c0:	00 00       	NOP;
 2c2:	01 00       	ILLEGAL;
 2c4:	5d a2       	R5 = [P3 + 0x24];
 2c6:	01 00       	ILLEGAL;
 2c8:	00 ba       	[FP -0x80] = R0;
 2ca:	01 00       	ILLEGAL;
 2cc:	00 02       	R0 = CC;
 2ce:	00 30       	R0 = R0;
 2d0:	9f 1e       	IF CC JUMP 0xe <_test_buf+0x2> (BP);
 2d2:	02 00       	ILLEGAL;
 2d4:	00 26       	JUMP.S 0xed4 <_intr_stack+0x66c>;
 2d6:	02 00       	ILLEGAL;
 2d8:	00 01       	ILLEGAL;
 2da:	00 5d       	P4 = P0 + (P0 << 0x1);
 2dc:	26 02       	ILLEGAL;
 2de:	00 00       	NOP;
 2e0:	28 02       	ILLEGAL;
 2e2:	00 00       	NOP;
 2e4:	02 00       	ILLEGAL;
 2e6:	30 9f       	W[I2] = R0.L;
 2e8:	68 02       	FLUSHINV[P0++];
 2ea:	00 00       	NOP;
 2ec:	ea 02       	ILLEGAL;
 2ee:	00 00       	NOP;
 2f0:	01 00       	ILLEGAL;
 2f2:	5d ea       	ILLEGAL;
 2f4:	02 00       	ILLEGAL;
 2f6:	00 f8       	DBG R0;
 2f8:	02 00       	ILLEGAL;
 2fa:	00 03       	CC = AZ;
 2fc:	00 7d       	ILLEGAL;
 2fe:	7f 9f       	ILLEGAL;
 300:	f8 02       	ILLEGAL;
 302:	00 00       	NOP;
 304:	04 03       	CC = ASTAT[4 /* unused bit */];
 306:	00 00       	NOP;
 308:	01 00       	ILLEGAL;
 30a:	5d 04       	ILLEGAL;
 30c:	03 00       	ILLEGAL;
 30e:	00 0a       	CC = R0 <= R0 (IU);
 310:	03 00       	ILLEGAL;
 312:	00 02       	R0 = CC;
 314:	00 3f       	USP = A0.X;
 316:	9f 0a       	ILLEGAL;
 318:	03 00       	ILLEGAL;
 31a:	00 0e       	CC = R0 <= 0x0 (IU);
 31c:	03 00       	ILLEGAL;
 31e:	00 02       	R0 = CC;
 320:	00 3e       	USP = R0;
 322:	9f 0e       	ILLEGAL;
 324:	03 00       	ILLEGAL;
 326:	00 28       	JUMP.S 0xfffff326 <_text_end+0xfefef2e6>;
 328:	03 00       	ILLEGAL;
 32a:	00 02       	R0 = CC;
 32c:	00 3d       	LC0 = A0.X;
 32e:	9f 28       	JUMP.S 0xfffff46c <_text_end+0xfefef42c>;
 330:	03 00       	ILLEGAL;
 332:	00 3e       	USP = R0;
 334:	03 00       	ILLEGAL;
 336:	00 01       	ILLEGAL;
 338:	00 5d       	P4 = P0 + (P0 << 0x1);
 33a:	3e 03       	CC |= ASTAT[30 /* unused bit */];
 33c:	00 00       	NOP;
 33e:	56 03       	CC &= ASTAT[22 /* unused bit */];
 340:	00 00       	NOP;
 342:	02 00       	ILLEGAL;
 344:	3d 9f       	W[I3] = R5.L;
	...
 34e:	ba 01       	ILLEGAL;
 350:	00 00       	NOP;
 352:	ca 01       	ILLEGAL;
 354:	00 00       	NOP;
 356:	02 00       	ILLEGAL;
 358:	3f 9f       	W[I3] = R7.L;
 35a:	ca 01       	ILLEGAL;
 35c:	00 00       	NOP;
 35e:	d6 01       	ILLEGAL;
 360:	00 00       	NOP;
 362:	02 00       	ILLEGAL;
 364:	3e 9f       	W[I3] = R6.L;
 366:	4c 02       	FLUSHINV[P4];
 368:	00 00       	NOP;
 36a:	5c 02       	IFLUSH[P4];
 36c:	00 00       	NOP;
 36e:	02 00       	ILLEGAL;
 370:	3f 9f       	W[I3] = R7.L;
 372:	5c 02       	IFLUSH[P4];
 374:	00 00       	NOP;
 376:	68 02       	FLUSHINV[P0++];
 378:	00 00       	NOP;
 37a:	02 00       	ILLEGAL;
 37c:	3e 9f       	W[I3] = R6.L;
 37e:	6e 02       	FLUSHINV[SP++];
 380:	00 00       	NOP;
 382:	7e 02       	IFLUSH[SP++];
 384:	00 00       	NOP;
 386:	02 00       	ILLEGAL;
 388:	3f 9f       	W[I3] = R7.L;
 38a:	7e 02       	IFLUSH[SP++];
 38c:	00 00       	NOP;
 38e:	88 02       	ILLEGAL;
 390:	00 00       	NOP;
 392:	02 00       	ILLEGAL;
 394:	3e 9f       	W[I3] = R6.L;
	...
 39e:	2a 01       	ILLEGAL;
 3a0:	00 00       	NOP;
 3a2:	68 02       	FLUSHINV[P0++];
 3a4:	00 00       	NOP;
 3a6:	02 00       	ILLEGAL;
 3a8:	40 9f       	W[I0] = R0.H;
 3aa:	68 02       	FLUSHINV[P0++];
 3ac:	00 00       	NOP;
 3ae:	9e 02       	ILLEGAL;
 3b0:	00 00       	NOP;
 3b2:	01 00       	ILLEGAL;
 3b4:	5c 9e       	W[I3++] = R4.H;
 3b6:	02 00       	ILLEGAL;
 3b8:	00 b0       	[P0 + 0x0] = R0;
 3ba:	02 00       	ILLEGAL;
 3bc:	00 01       	ILLEGAL;
 3be:	00 5c       	P0 = P0 + (P0 << 0x1);
 3c0:	b0 02       	ILLEGAL;
 3c2:	00 00       	NOP;
 3c4:	ba 02       	ILLEGAL;
 3c6:	00 00       	NOP;
 3c8:	03 00       	ILLEGAL;
 3ca:	70 7f       	ILLEGAL;
 3cc:	9f ba       	[FP -0x5c] = FP;
 3ce:	02 00       	ILLEGAL;
 3d0:	00 bc       	[P0 + 0x0] = P0;
 3d2:	02 00       	ILLEGAL;
 3d4:	00 01       	ILLEGAL;
 3d6:	00 50       	R0 = R0 + R0;
 3d8:	bc 02       	ILLEGAL;
 3da:	00 00       	NOP;
 3dc:	ca 02       	ILLEGAL;
 3de:	00 00       	NOP;
 3e0:	03 00       	ILLEGAL;
 3e2:	70 7f       	ILLEGAL;
 3e4:	9f ca       	R1 = R0.L * R2.L (M, FU) || R0 = R0 +|+ R2 || ILLEGAL;		/* ILLEGAL PARALLEL INSTRUCTION */
 3e6:	02 00       	ILLEGAL;
 3e8:	00 cc       	R0 = R0 +|+ R2 || ILLEGAL || R0 = R0 + R0;		/* ILLEGAL PARALLEL INSTRUCTION */
 3ea:	02 00       	ILLEGAL;
 3ec:	00 01       	ILLEGAL;
 3ee:	00 50       	R0 = R0 + R0;
 3f0:	f8 02       	ILLEGAL;
 3f2:	00 00       	NOP;
 3f4:	04 03       	CC = ASTAT[4 /* unused bit */];
 3f6:	00 00       	NOP;
 3f8:	01 00       	ILLEGAL;
 3fa:	5c 28       	JUMP.S 0xfffff4b2 <_text_end+0xfefef472>;
 3fc:	03 00       	ILLEGAL;
 3fe:	00 3e       	USP = R0;
 400:	03 00       	ILLEGAL;
 402:	00 01       	ILLEGAL;
 404:	00 5c       	P0 = P0 + (P0 << 0x1);
	...
 412:	04 00       	ILLEGAL;
 414:	00 00       	NOP;
 416:	02 00       	ILLEGAL;
 418:	7e 00       	ILLEGAL;
 41a:	04 00       	ILLEGAL;
 41c:	00 00       	NOP;
 41e:	c4 01       	ILLEGAL;
 420:	00 00       	NOP;
 422:	02 00       	ILLEGAL;
 424:	7e 04       	ILLEGAL;
 426:	c4 01       	ILLEGAL;
 428:	00 00       	NOP;
 42a:	c6 01       	ILLEGAL;
 42c:	00 00       	NOP;
 42e:	02 00       	ILLEGAL;
 430:	7e 00       	ILLEGAL;
	...
 43e:	16 00       	ILLEGAL;
 440:	00 00       	NOP;
 442:	01 00       	ILLEGAL;
 444:	50 16       	IF !CC JUMP 0xe4 <bss_begin+0x7c> (BP);
 446:	00 00       	NOP;
 448:	00 86       	R0 = W[P0 ++ P0] (Z);
 44a:	00 00       	NOP;
 44c:	00 01       	ILLEGAL;
 44e:	00 5a       	P0 = P0 << 0x1;
	...
 45c:	12 00       	RTX;
 45e:	00 00       	NOP;
 460:	01 00       	ILLEGAL;
 462:	51 12       	IF !CC JUMP 0x104 <bss_begin+0x9c>;
 464:	00 00       	NOP;
 466:	00 26       	JUMP.S 0x1066 <_intr_stack+0x7fe>;
 468:	01 00       	ILLEGAL;
 46a:	00 01       	ILLEGAL;
 46c:	00 59       	R4 = R0 ^ R0;
	...
 476:	c8 01       	ILLEGAL;
 478:	00 00       	NOP;
 47a:	cc 01       	ILLEGAL;
 47c:	00 00       	NOP;
 47e:	02 00       	ILLEGAL;
 480:	7e 00       	ILLEGAL;
 482:	cc 01       	ILLEGAL;
 484:	00 00       	NOP;
 486:	8c 03       	AC0 = CC;
 488:	00 00       	NOP;
 48a:	02 00       	ILLEGAL;
 48c:	7e 04       	ILLEGAL;
 48e:	8c 03       	AC0 = CC;
 490:	00 00       	NOP;
 492:	8e 03       	ASTAT[14 /* unused bit */] = CC;
 494:	00 00       	NOP;
 496:	02 00       	ILLEGAL;
 498:	7e 00       	ILLEGAL;
	...
 4a2:	c8 01       	ILLEGAL;
 4a4:	00 00       	NOP;
 4a6:	de 01       	ILLEGAL;
 4a8:	00 00       	NOP;
 4aa:	01 00       	ILLEGAL;
 4ac:	50 de       	ILLEGAL;
 4ae:	01 00       	ILLEGAL;
 4b0:	00 4e       	R0 >>= 0x0;
 4b2:	02 00       	ILLEGAL;
 4b4:	00 01       	ILLEGAL;
 4b6:	00 5a       	P0 = P0 << 0x1;
	...
 4c0:	c8 01       	ILLEGAL;
 4c2:	00 00       	NOP;
 4c4:	da 01       	ILLEGAL;
 4c6:	00 00       	NOP;
 4c8:	01 00       	ILLEGAL;
 4ca:	51 da       	ILLEGAL;
 4cc:	01 00       	ILLEGAL;
 4ce:	00 ee       	ILLEGAL;
 4d0:	02 00       	ILLEGAL;
 4d2:	00 01       	ILLEGAL;
 4d4:	00 59       	R4 = R0 ^ R0;
	...
 4de:	90 03       	AV0 = CC;
 4e0:	00 00       	NOP;
 4e2:	a0 03       	AZ |= CC;
 4e4:	00 00       	NOP;
 4e6:	01 00       	ILLEGAL;
 4e8:	50 a0       	R0 = [P2 + 0x4];
 4ea:	03 00       	ILLEGAL;
 4ec:	00 bc       	[P0 + 0x0] = P0;
 4ee:	03 00       	ILLEGAL;
 4f0:	00 01       	ILLEGAL;
 4f2:	00 5a       	P0 = P0 << 0x1;
 4f4:	bc 03       	ASTAT[28 /* unused bit */] |= CC;
 4f6:	00 00       	NOP;
 4f8:	c2 03       	AC0_COPY &= CC;
 4fa:	00 00       	NOP;
 4fc:	01 00       	ILLEGAL;
 4fe:	5a 00       	ILLEGAL;
 500:	00 00       	NOP;
 502:	00 00       	NOP;
 504:	00 00       	NOP;
 506:	00 90       	R0 = [P0++];
 508:	03 00       	ILLEGAL;
 50a:	00 a0       	R0 = [P0 + 0x0];
 50c:	03 00       	ILLEGAL;
 50e:	00 02       	R0 = CC;
 510:	00 30       	R0 = R0;
 512:	9f 00       	RAISE 0xf;
 514:	00 00       	NOP;
 516:	00 00       	NOP;
 518:	00 00       	NOP;
 51a:	00 ba       	[FP -0x80] = R0;
 51c:	03 00       	ILLEGAL;
 51e:	00 c8       	A1 = R0.L * R3.L, A0 = R0.L * R3.L || ILLEGAL || R0 = R0 + R0;		/* ILLEGAL PARALLEL INSTRUCTION */
 520:	03 00       	ILLEGAL;
 522:	00 01       	ILLEGAL;
 524:	00 50       	R0 = R0 + R0;
 526:	c8 03       	RND_MOD &= CC;
 528:	00 00       	NOP;
 52a:	d8 03       	V &= CC;
 52c:	00 00       	NOP;
 52e:	02 00       	ILLEGAL;
 530:	78 00       	ILLEGAL;
	...
 53a:	d8 03       	V &= CC;
 53c:	00 00       	NOP;
 53e:	dc 03       	ASTAT[28 /* unused bit */] &= CC;
 540:	00 00       	NOP;
 542:	02 00       	ILLEGAL;
 544:	7e 00       	ILLEGAL;
 546:	dc 03       	ASTAT[28 /* unused bit */] &= CC;
 548:	00 00       	NOP;
 54a:	24 05       	ILLEGAL;
 54c:	00 00       	NOP;
 54e:	02 00       	ILLEGAL;
 550:	7e 08       	CC = SP == FP;
 552:	24 05       	ILLEGAL;
 554:	00 00       	NOP;
 556:	26 05       	ILLEGAL;
 558:	00 00       	NOP;
 55a:	02 00       	ILLEGAL;
 55c:	7e 00       	ILLEGAL;
	...
 566:	d8 03       	V &= CC;
 568:	00 00       	NOP;
 56a:	e6 03       	AQ ^= CC;
 56c:	00 00       	NOP;
 56e:	01 00       	ILLEGAL;
 570:	50 e6 03 00 	W[P2 + 0x6] = R0;
 574:	00 04       	ILLEGAL;
 576:	04 00       	ILLEGAL;
 578:	00 01       	ILLEGAL;
 57a:	00 5a       	P0 = P0 << 0x1;
 57c:	04 04       	ILLEGAL;
 57e:	00 00       	NOP;
 580:	2e 04       	ILLEGAL;
 582:	00 00       	NOP;
 584:	01 00       	ILLEGAL;
 586:	59 2e       	JUMP.S 0x238 <bss_begin+0x1d0>;
 588:	04 00       	ILLEGAL;
 58a:	00 58       	R0 = R0 ^ R0;
 58c:	04 00       	ILLEGAL;
 58e:	00 01       	ILLEGAL;
 590:	00 5a       	P0 = P0 << 0x1;
 592:	58 04       	ILLEGAL;
 594:	00 00       	NOP;
 596:	ba 04       	ILLEGAL;
 598:	00 00       	NOP;
 59a:	01 00       	ILLEGAL;
 59c:	59 00       	ILLEGAL;
 59e:	00 00       	NOP;
 5a0:	00 00       	NOP;
 5a2:	00 00       	NOP;
 5a4:	00 d8       	ILLEGAL;
 5a6:	03 00       	ILLEGAL;
 5a8:	00 e8 04 00 	LINK 0x10;		/* (16) */
 5ac:	00 01       	ILLEGAL;
 5ae:	00 51       	R4 = R0 + R0;
 5b0:	e8 04       	ILLEGAL;
 5b2:	00 00       	NOP;
 5b4:	26 05       	ILLEGAL;
 5b6:	00 00       	NOP;
 5b8:	03 00       	ILLEGAL;
 5ba:	7a 7c       	ILLEGAL;
 5bc:	9f 00       	RAISE 0xf;
 5be:	00 00       	NOP;
 5c0:	00 00       	NOP;
 5c2:	00 00       	NOP;
 5c4:	00 8e       	R0 = W[P0 ++ P0] (X);
 5c6:	04 00       	ILLEGAL;
 5c8:	00 bc       	[P0 + 0x0] = P0;
 5ca:	04 00       	ILLEGAL;
 5cc:	00 01       	ILLEGAL;
 5ce:	00 51       	R4 = R0 + R0;
 5d0:	bc 04       	ILLEGAL;
 5d2:	00 00       	NOP;
 5d4:	04 05       	ILLEGAL;
 5d6:	00 00       	NOP;
 5d8:	03 00       	ILLEGAL;
 5da:	7a 04       	ILLEGAL;
 5dc:	9f 04       	ILLEGAL;
 5de:	05 00       	ILLEGAL;
 5e0:	00 20       	JUMP.S 0x5e0 <bss_begin+0x578>;
 5e2:	05 00       	ILLEGAL;
 5e4:	00 03       	CC = AZ;
 5e6:	00 7a       	ILLEGAL;
 5e8:	08 9f       	[I1] = R0;
 5ea:	20 05       	(R7:4) = [SP++];
 5ec:	00 00       	NOP;
 5ee:	26 05       	ILLEGAL;
 5f0:	00 00       	NOP;
 5f2:	03 00       	ILLEGAL;
 5f4:	7a 0c       	CC = P2 == -0x1;
 5f6:	9f 00       	RAISE 0xf;
	...
 600:	00 00       	NOP;
 602:	00 02       	R0 = CC;
 604:	00 00       	NOP;
 606:	00 02       	R0 = CC;
 608:	00 7e       	ILLEGAL;
 60a:	00 02       	R0 = CC;
 60c:	00 00       	NOP;
 60e:	00 06       	IF !CC R0 = R0;
 610:	00 00       	NOP;
 612:	00 02       	R0 = CC;
 614:	00 7e       	ILLEGAL;
 616:	04 06       	IF !CC R0 = R4;
 618:	00 00       	NOP;
 61a:	00 7a       	ILLEGAL;
 61c:	00 00       	NOP;
 61e:	00 02       	R0 = CC;
 620:	00 7f       	ILLEGAL;
 622:	0c 00       	ILLEGAL;
	...
 62c:	00 00       	NOP;
 62e:	00 18       	IF CC JUMP 0x62e <bss_begin+0x5c6>;
 630:	00 00       	NOP;
 632:	00 01       	ILLEGAL;
 634:	00 50       	R0 = R0 + R0;
 636:	44 00       	STI R4;
 638:	00 00       	NOP;
 63a:	54 00       	JUMP (P4);
 63c:	00 00       	NOP;
 63e:	01 00       	ILLEGAL;
 640:	50 00       	JUMP (P0);
	...
 64a:	00 00       	NOP;
 64c:	00 18       	IF CC JUMP 0x64c <bss_begin+0x5e4>;
 64e:	00 00       	NOP;
 650:	00 01       	ILLEGAL;
 652:	00 51       	R4 = R0 + R0;
 654:	44 00       	STI R4;
 656:	00 00       	NOP;
 658:	54 00       	JUMP (P4);
 65a:	00 00       	NOP;
 65c:	01 00       	ILLEGAL;
 65e:	51 00       	JUMP (P1);
	...
 668:	00 00       	NOP;
 66a:	00 18       	IF CC JUMP 0x66a <bss_begin+0x602>;
 66c:	00 00       	NOP;
 66e:	00 01       	ILLEGAL;
 670:	00 52       	R0 = R0 - R0;
 672:	44 00       	STI R4;
 674:	00 00       	NOP;
 676:	66 00       	CALL (SP);
 678:	00 00       	NOP;
 67a:	01 00       	ILLEGAL;
 67c:	52 66       	R2 += -0x36;		/* (-54) */
 67e:	00 00       	NOP;
 680:	00 6a       	P0 = -0x40 (X);		/*		P0=0xffffffc0(-64) */
 682:	00 00       	NOP;
 684:	00 01       	ILLEGAL;
 686:	00 52       	R0 = R0 - R0;
 688:	6a 00       	ILLEGAL;
 68a:	00 00       	NOP;
 68c:	70 00       	CALL (PC + P0);
 68e:	00 00       	NOP;
 690:	03 00       	ILLEGAL;
 692:	72 7f       	ILLEGAL;
 694:	9f 00       	RAISE 0xf;
 696:	00 00       	NOP;
 698:	00 00       	NOP;
 69a:	00 00       	NOP;
 69c:	00 08       	CC = R0 == R0;
 69e:	00 00       	NOP;
 6a0:	00 18       	IF CC JUMP 0x6a0 <bss_begin+0x638>;
 6a2:	00 00       	NOP;
 6a4:	00 01       	ILLEGAL;
 6a6:	00 50       	R0 = R0 + R0;
 6a8:	18 00       	ILLEGAL;
 6aa:	00 00       	NOP;
 6ac:	28 00       	ILLEGAL;
 6ae:	00 00       	NOP;
 6b0:	01 00       	ILLEGAL;
 6b2:	59 28       	JUMP.S 0xfffff764 <_text_end+0xfefef724>;
 6b4:	00 00       	NOP;
 6b6:	00 2c       	JUMP.S 0xfffffeb6 <_text_end+0xfefefe76>;
 6b8:	00 00       	NOP;
 6ba:	00 03       	CC = AZ;
 6bc:	00 79       	ILLEGAL;
 6be:	7f 9f       	ILLEGAL;
 6c0:	44 00       	STI R4;
 6c2:	00 00       	NOP;
 6c4:	54 00       	JUMP (P4);
 6c6:	00 00       	NOP;
 6c8:	01 00       	ILLEGAL;
 6ca:	50 68       	P0 = 0xa (X);		/*		P0=0xa( 10) */
 6cc:	00 00       	NOP;
 6ce:	00 6a       	P0 = -0x40 (X);		/*		P0=0xffffffc0(-64) */
 6d0:	00 00       	NOP;
 6d2:	00 01       	ILLEGAL;
 6d4:	00 51       	R4 = R0 + R0;
 6d6:	6a 00       	ILLEGAL;
 6d8:	00 00       	NOP;
 6da:	70 00       	CALL (PC + P0);
 6dc:	00 00       	NOP;
 6de:	01 00       	ILLEGAL;
 6e0:	59 00       	ILLEGAL;
 6e2:	00 00       	NOP;
 6e4:	00 00       	NOP;
 6e6:	00 00       	NOP;
 6e8:	00 0a       	CC = R0 <= R0 (IU);
 6ea:	00 00       	NOP;
 6ec:	00 18       	IF CC JUMP 0x6ec <bss_begin+0x684>;
 6ee:	00 00       	NOP;
 6f0:	00 01       	ILLEGAL;
 6f2:	00 51       	R4 = R0 + R0;
 6f4:	18 00       	ILLEGAL;
 6f6:	00 00       	NOP;
 6f8:	2a 00       	ILLEGAL;
 6fa:	00 00       	NOP;
 6fc:	01 00       	ILLEGAL;
 6fe:	5a 2a       	JUMP.S 0xfffffbb2 <_text_end+0xfefefb72>;
 700:	00 00       	NOP;
 702:	00 2c       	JUMP.S 0xffffff02 <_text_end+0xfefefec2>;
 704:	00 00       	NOP;
 706:	00 03       	CC = AZ;
 708:	00 7a       	ILLEGAL;
 70a:	7f 9f       	ILLEGAL;
 70c:	44 00       	STI R4;
 70e:	00 00       	NOP;
 710:	54 00       	JUMP (P4);
 712:	00 00       	NOP;
 714:	01 00       	ILLEGAL;
 716:	51 6a       	P1 = -0x36 (X);		/*		P1=0xffffffca(-54) */
 718:	00 00       	NOP;
 71a:	00 70       	ILLEGAL;
 71c:	00 00       	NOP;
 71e:	00 01       	ILLEGAL;
 720:	00 5a       	P0 = P0 << 0x1;
	...
 72a:	44 00       	STI R4;
 72c:	00 00       	NOP;
 72e:	54 00       	JUMP (P4);
 730:	00 00       	NOP;
 732:	01 00       	ILLEGAL;
 734:	50 62       	R0 = -0x36 (X);		/*		R0=0xffffffca(-54) */
 736:	00 00       	NOP;
 738:	00 66       	R0 += -0x40;		/* (-64) */
 73a:	00 00       	NOP;
 73c:	00 01       	ILLEGAL;
 73e:	00 5a       	P0 = P0 << 0x1;
	...
 748:	44 00       	STI R4;
 74a:	00 00       	NOP;
 74c:	54 00       	JUMP (P4);
 74e:	00 00       	NOP;
 750:	01 00       	ILLEGAL;
 752:	51 64       	R1 += 0xa;		/* ( 10) */
 754:	00 00       	NOP;
 756:	00 66       	R0 += -0x40;		/* (-64) */
 758:	00 00       	NOP;
 75a:	00 01       	ILLEGAL;
 75c:	00 58       	R0 = R0 ^ R0;
	...
 76a:	02 00       	ILLEGAL;
 76c:	00 00       	NOP;
 76e:	02 00       	ILLEGAL;
 770:	7e 00       	ILLEGAL;
 772:	02 00       	ILLEGAL;
 774:	00 00       	NOP;
 776:	08 00       	ILLEGAL;
 778:	00 00       	NOP;
 77a:	02 00       	ILLEGAL;
 77c:	7e 0c       	CC = SP == -0x1;
 77e:	08 00       	ILLEGAL;
 780:	00 00       	NOP;
 782:	9c 00       	RAISE 0xc;
 784:	00 00       	NOP;
 786:	02 00       	ILLEGAL;
 788:	7f 14       	IF !CC JUMP 0x886 <_intr_stack+0x1e> (BP);
	...
 796:	48 00       	ILLEGAL;
 798:	00 00       	NOP;
 79a:	01 00       	ILLEGAL;
 79c:	51 00       	JUMP (P1);
	...
 7a6:	00 00       	NOP;
 7a8:	00 28       	JUMP.S 0xfffff7a8 <_text_end+0xfefef768>;
 7aa:	00 00       	NOP;
 7ac:	00 01       	ILLEGAL;
 7ae:	00 52       	R0 = R0 - R0;
 7b0:	50 00       	JUMP (P0);
 7b2:	00 00       	NOP;
 7b4:	68 00       	ILLEGAL;
 7b6:	00 00       	NOP;
 7b8:	01 00       	ILLEGAL;
 7ba:	52 82       	R1.L = W[P2];
 7bc:	00 00       	NOP;
 7be:	00 8a       	W[P0] = R0.L;
 7c0:	00 00       	NOP;
 7c2:	00 03       	CC = AZ;
 7c4:	00 72       	ILLEGAL;
 7c6:	7f 9f       	ILLEGAL;
	...
 7d0:	0a 00       	ILLEGAL;
 7d2:	00 00       	NOP;
 7d4:	80 00       	JUMP (PC + P0);
 7d6:	00 00       	NOP;
 7d8:	01 00       	ILLEGAL;
 7da:	50 80       	R1 = [P0 ++ P2];
 7dc:	00 00       	NOP;
 7de:	00 90       	R0 = [P0++];
 7e0:	00 00       	NOP;
 7e2:	00 01       	ILLEGAL;
 7e4:	00 5a       	P0 = P0 << 0x1;
 7e6:	90 00       	RAISE 0x0;
 7e8:	00 00       	NOP;
 7ea:	9c 00       	RAISE 0xc;
 7ec:	00 00       	NOP;
 7ee:	01 00       	ILLEGAL;
 7f0:	5a 00       	ILLEGAL;
 7f2:	00 00       	NOP;
 7f4:	00 00       	NOP;
 7f6:	00 00       	NOP;
 7f8:	00 0c       	CC = R0 == 0x0;
 7fa:	00 00       	NOP;
 7fc:	00 48       	CC = !BITTST (R0, 0x0);		/* bit  0 */
 7fe:	00 00       	NOP;
 800:	00 01       	ILLEGAL;
 802:	00 51       	R4 = R0 + R0;
 804:	82 00       	JUMP (PC + P2);
 806:	00 00       	NOP;
 808:	8a 00       	ILLEGAL;
 80a:	00 00       	NOP;
 80c:	01 00       	ILLEGAL;
 80e:	5c 00       	ILLEGAL;
 810:	00 00       	NOP;
 812:	00 00       	NOP;
 814:	00 00       	NOP;
 816:	00 1a       	IF CC JUMP 0x416 <bss_begin+0x3ae>;
 818:	00 00       	NOP;
 81a:	00 28       	JUMP.S 0xfffff81a <_text_end+0xfefef7da>;
 81c:	00 00       	NOP;
 81e:	00 01       	ILLEGAL;
 820:	00 50       	R0 = R0 + R0;
 822:	28 00       	ILLEGAL;
 824:	00 00       	NOP;
 826:	2c 00       	ILLEGAL;
 828:	00 00       	NOP;
 82a:	01 00       	ILLEGAL;
 82c:	5a 2c       	JUMP.S 0xe0 <bss_begin+0x78>;
 82e:	00 00       	NOP;
 830:	00 30       	R0 = R0;
 832:	00 00       	NOP;
 834:	00 03       	CC = AZ;
 836:	00 7a       	ILLEGAL;
 838:	04 9f       	[I0] = R4;
 83a:	30 00       	CLI R0;
 83c:	00 00       	NOP;
 83e:	34 00       	CLI R4;
 840:	00 00       	NOP;
 842:	03 00       	ILLEGAL;
 844:	7a 08       	CC = P2 == FP;
 846:	9f 34       	I3 = M3;
 848:	00 00       	NOP;
 84a:	00 3a       	ILLEGAL;
 84c:	00 00       	NOP;
 84e:	00 03       	CC = AZ;
 850:	00 7a       	ILLEGAL;
 852:	0c 9f       	[I1] = R4;
 854:	3a 00       	ILLEGAL;
 856:	00 00       	NOP;
 858:	50 00       	JUMP (P0);
 85a:	00 00       	NOP;
 85c:	01 00       	ILLEGAL;
 85e:	5a 50       	R1 = R2 + R3;
 860:	00 00       	NOP;
 862:	00 68       	P0 = 0x0 (X);		/*		P0=0x0(  0) */
 864:	00 00       	NOP;
 866:	00 01       	ILLEGAL;
 868:	00 57       	R4 = R0 | R0;
 86a:	68 00       	ILLEGAL;
 86c:	00 00       	NOP;
 86e:	6c 00       	ILLEGAL;
 870:	00 00       	NOP;
 872:	01 00       	ILLEGAL;
 874:	59 6c       	P1 += 0xb;		/* ( 11) */
 876:	00 00       	NOP;
 878:	00 7c       	ILLEGAL;
 87a:	00 00       	NOP;
 87c:	00 01       	ILLEGAL;
 87e:	00 59       	R4 = R0 ^ R0;
	...
 888:	1a 00       	ILLEGAL;
 88a:	00 00       	NOP;
 88c:	28 00       	ILLEGAL;
 88e:	00 00       	NOP;
 890:	01 00       	ILLEGAL;
 892:	51 28       	JUMP.S 0xfffff934 <_text_end+0xfefef8f4>;
 894:	00 00       	NOP;
 896:	00 2c       	JUMP.S 0x96 <bss_begin+0x2e>;
 898:	00 00       	NOP;
 89a:	00 01       	ILLEGAL;
 89c:	00 59       	R4 = R0 ^ R0;
 89e:	2c 00       	ILLEGAL;
 8a0:	00 00       	NOP;
 8a2:	30 00       	CLI R0;
 8a4:	00 00       	NOP;
 8a6:	03 00       	ILLEGAL;
 8a8:	79 04       	ILLEGAL;
 8aa:	9f 30       	R3 = M3;
 8ac:	00 00       	NOP;
 8ae:	00 34       	I0 = R0;
 8b0:	00 00       	NOP;
 8b2:	00 03       	CC = AZ;
 8b4:	00 79       	ILLEGAL;
 8b6:	08 9f       	[I1] = R0;
 8b8:	34 00       	CLI R4;
 8ba:	00 00       	NOP;
 8bc:	3c 00       	ILLEGAL;
 8be:	00 00       	NOP;
 8c0:	03 00       	ILLEGAL;
 8c2:	79 0c       	CC = P1 == -0x1;
 8c4:	9f 3c       	ILLEGAL;
 8c6:	00 00       	NOP;
 8c8:	00 50       	R0 = R0 + R0;
 8ca:	00 00       	NOP;
 8cc:	00 01       	ILLEGAL;
 8ce:	00 59       	R4 = R0 ^ R0;
 8d0:	50 00       	JUMP (P0);
 8d2:	00 00       	NOP;
 8d4:	68 00       	ILLEGAL;
 8d6:	00 00       	NOP;
 8d8:	01 00       	ILLEGAL;
 8da:	5c 00       	ILLEGAL;
	...
 8e4:	00 00       	NOP;
 8e6:	00 04       	ILLEGAL;
 8e8:	00 00       	NOP;
 8ea:	00 02       	R0 = CC;
 8ec:	00 7e       	ILLEGAL;
 8ee:	00 04       	ILLEGAL;
 8f0:	00 00       	NOP;
 8f2:	00 0a       	CC = R0 <= R0 (IU);
 8f4:	00 00       	NOP;
 8f6:	00 02       	R0 = CC;
 8f8:	00 7e       	ILLEGAL;
 8fa:	0c 0a       	CC = R4 <= R1 (IU);
 8fc:	00 00       	NOP;
 8fe:	00 ae       	P0 = [P0 + 0x20];
 900:	00 00       	NOP;
 902:	00 02       	R0 = CC;
 904:	00 7f       	ILLEGAL;
 906:	14 00       	RTE;
	...
 910:	00 00       	NOP;
 912:	00 10       	IF !CC JUMP 0x912 <_intr_stack+0xaa>;
 914:	00 00       	NOP;
 916:	00 01       	ILLEGAL;
 918:	00 52       	R0 = R0 - R0;
 91a:	10 00       	RTS;
 91c:	00 00       	NOP;
 91e:	16 00       	ILLEGAL;
 920:	00 00       	NOP;
 922:	03 00       	ILLEGAL;
 924:	72 7f       	ILLEGAL;
 926:	9f 16       	IF !CC JUMP 0x664 <bss_begin+0x5fc> (BP);
 928:	00 00       	NOP;
 92a:	00 1e       	IF CC JUMP 0x52a <bss_begin+0x4c2> (BP);
 92c:	00 00       	NOP;
 92e:	00 01       	ILLEGAL;
 930:	00 52       	R0 = R0 - R0;
 932:	1e 00       	ILLEGAL;
 934:	00 00       	NOP;
 936:	24 00       	SSYNC;
 938:	00 00       	NOP;
 93a:	03 00       	ILLEGAL;
 93c:	72 7f       	ILLEGAL;
 93e:	9f 24       	JUMP.S 0x127c <_bredr_base_addr+0x214>;
 940:	00 00       	NOP;
 942:	00 5a       	P0 = P0 << 0x1;
 944:	00 00       	NOP;
 946:	00 01       	ILLEGAL;
 948:	00 52       	R0 = R0 - R0;
 94a:	78 00       	ILLEGAL;
 94c:	00 00       	NOP;
 94e:	88 00       	ILLEGAL;
 950:	00 00       	NOP;
 952:	01 00       	ILLEGAL;
 954:	52 9a       	ILLEGAL;
 956:	00 00       	NOP;
 958:	00 a4       	R0 = W[P0 + 0x0] (Z);
 95a:	00 00       	NOP;
 95c:	00 03       	CC = AZ;
 95e:	00 72       	ILLEGAL;
 960:	7f 9f       	ILLEGAL;
	...
 96a:	0c 00       	ILLEGAL;
 96c:	00 00       	NOP;
 96e:	1e 00       	ILLEGAL;
 970:	00 00       	NOP;
 972:	01 00       	ILLEGAL;
 974:	50 1e       	IF CC JUMP 0x614 <bss_begin+0x5ac> (BP);
 976:	00 00       	NOP;
 978:	00 24       	JUMP.S 0x1178 <_bredr_base_addr+0x110>;
 97a:	00 00       	NOP;
 97c:	00 01       	ILLEGAL;
 97e:	00 55       	R4 = R0 & R0;
 980:	24 00       	SSYNC;
 982:	00 00       	NOP;
 984:	2c 00       	ILLEGAL;
 986:	00 00       	NOP;
 988:	01 00       	ILLEGAL;
 98a:	59 2c       	JUMP.S 0x23c <bss_begin+0x1d4>;
 98c:	00 00       	NOP;
 98e:	00 30       	R0 = R0;
 990:	00 00       	NOP;
 992:	00 01       	ILLEGAL;
 994:	00 5a       	P0 = P0 << 0x1;
 996:	30 00       	CLI R0;
 998:	00 00       	NOP;
 99a:	4a 00       	ILLEGAL;
 99c:	00 00       	NOP;
 99e:	01 00       	ILLEGAL;
 9a0:	59 4a       	BITSET (R1, 0xb);		/* bit 11 */
 9a2:	00 00       	NOP;
 9a4:	00 52       	R0 = R0 - R0;
 9a6:	00 00       	NOP;
 9a8:	00 01       	ILLEGAL;
 9aa:	00 58       	R0 = R0 ^ R0;
 9ac:	52 00       	JUMP (P2);
 9ae:	00 00       	NOP;
 9b0:	7e 00       	ILLEGAL;
 9b2:	00 00       	NOP;
 9b4:	01 00       	ILLEGAL;
 9b6:	59 9a       	ILLEGAL;
 9b8:	00 00       	NOP;
 9ba:	00 a6       	R0 = W[P0 + 0x10] (Z);
 9bc:	00 00       	NOP;
 9be:	00 01       	ILLEGAL;
 9c0:	00 59       	R4 = R0 ^ R0;
 9c2:	a6 00       	EXCPT 0x6;
 9c4:	00 00       	NOP;
 9c6:	ae 00       	EXCPT 0xe;
 9c8:	00 00       	NOP;
 9ca:	01 00       	ILLEGAL;
 9cc:	59 00       	ILLEGAL;
 9ce:	00 00       	NOP;
 9d0:	00 00       	NOP;
 9d2:	00 00       	NOP;
 9d4:	00 46       	ILLEGAL;
 9d6:	00 00       	NOP;
 9d8:	00 9a       	B[P0++] = R0;
 9da:	00 00       	NOP;
 9dc:	00 03       	CC = AZ;
 9de:	00 08       	CC = R0 == R0;
 9e0:	20 9f       	W[I0] = R0.L;
	...
 9ea:	46 00       	STI R6;
 9ec:	00 00       	NOP;
 9ee:	90 00       	RAISE 0x0;
 9f0:	00 00       	NOP;
 9f2:	01 00       	ILLEGAL;
 9f4:	53 00       	JUMP (P3);
 9f6:	00 00       	NOP;
 9f8:	00 00       	NOP;
 9fa:	00 00       	NOP;
 9fc:	00 46       	ILLEGAL;
 9fe:	00 00       	NOP;
 a00:	00 4a       	BITSET (R0, 0x0);		/* bit  0 */
 a02:	00 00       	NOP;
 a04:	00 01       	ILLEGAL;
 a06:	00 59       	R4 = R0 ^ R0;
 a08:	4a 00       	ILLEGAL;
 a0a:	00 00       	NOP;
 a0c:	52 00       	JUMP (P2);
 a0e:	00 00       	NOP;
 a10:	01 00       	ILLEGAL;
 a12:	58 52       	R1 = R0 - R3;
 a14:	00 00       	NOP;
 a16:	00 5a       	P0 = P0 << 0x1;
 a18:	00 00       	NOP;
 a1a:	00 01       	ILLEGAL;
 a1c:	00 59       	R4 = R0 ^ R0;
 a1e:	5a 00       	ILLEGAL;
 a20:	00 00       	NOP;
 a22:	5c 00       	ILLEGAL;
 a24:	00 00       	NOP;
 a26:	01 00       	ILLEGAL;
 a28:	5a 5c       	P1 = P2 + (P3 << 0x1);
 a2a:	00 00       	NOP;
 a2c:	00 5e       	P0 = P0 + (P0 << 0x2);
 a2e:	00 00       	NOP;
 a30:	00 03       	CC = AZ;
 a32:	00 7a       	ILLEGAL;
 a34:	04 9f       	[I0] = R4;
 a36:	5e 00       	ILLEGAL;
 a38:	00 00       	NOP;
 a3a:	60 00       	CALL (P0);
 a3c:	00 00       	NOP;
 a3e:	03 00       	ILLEGAL;
 a40:	7a 08       	CC = P2 == FP;
 a42:	9f 60       	R7 = 0x13 (X);		/*		R7=0x13( 19) */
 a44:	00 00       	NOP;
 a46:	00 64       	R0 += 0x0;		/* (  0) */
 a48:	00 00       	NOP;
 a4a:	00 03       	CC = AZ;
 a4c:	00 7a       	ILLEGAL;
 a4e:	0c 9f       	[I1] = R4;
 a50:	64 00       	CALL (P4);
 a52:	00 00       	NOP;
 a54:	70 00       	CALL (PC + P0);
 a56:	00 00       	NOP;
 a58:	01 00       	ILLEGAL;
 a5a:	5a 78       	ILLEGAL;
 a5c:	00 00       	NOP;
 a5e:	00 88       	[P0 ++ P0] = R0;
 a60:	00 00       	NOP;
 a62:	00 01       	ILLEGAL;
 a64:	00 58       	R0 = R0 ^ R0;
 a66:	88 00       	ILLEGAL;
 a68:	00 00       	NOP;
 a6a:	8a 00       	ILLEGAL;
 a6c:	00 00       	NOP;
 a6e:	01 00       	ILLEGAL;
 a70:	59 8a       	W[P1 ++ P3] = R1.L;
 a72:	00 00       	NOP;
 a74:	00 8e       	R0 = W[P0 ++ P0] (X);
 a76:	00 00       	NOP;
 a78:	00 01       	ILLEGAL;
 a7a:	00 59       	R4 = R0 ^ R0;
	...
 a88:	06 00       	ILLEGAL;
 a8a:	00 00       	NOP;
 a8c:	02 00       	ILLEGAL;
 a8e:	7e 00       	ILLEGAL;
 a90:	06 00       	ILLEGAL;
 a92:	00 00       	NOP;
 a94:	0c 00       	ILLEGAL;
 a96:	00 00       	NOP;
 a98:	02 00       	ILLEGAL;
 a9a:	7e 08       	CC = SP == FP;
 a9c:	0c 00       	ILLEGAL;
 a9e:	00 00       	NOP;
 aa0:	b0 00       	TESTSET (P0);
 aa2:	00 00       	NOP;
 aa4:	02 00       	ILLEGAL;
 aa6:	7f 10       	IF !CC JUMP 0xba4 <_intr_stack+0x33c>;
	...
 ab4:	44 00       	STI R4;
 ab6:	00 00       	NOP;
 ab8:	01 00       	ILLEGAL;
 aba:	50 60       	R0 = 0xa (X);		/*		R0=0xa( 10) */
 abc:	00 00       	NOP;
 abe:	00 62       	R0 = -0x40 (X);		/*		R0=0xffffffc0(-64) */
 ac0:	00 00       	NOP;
 ac2:	00 01       	ILLEGAL;
 ac4:	00 53       	R4 = R0 - R0;
 ac6:	62 00       	CALL (P2);
 ac8:	00 00       	NOP;
 aca:	8c 00       	ILLEGAL;
 acc:	00 00       	NOP;
 ace:	01 00       	ILLEGAL;
 ad0:	50 8c       	W[P0 ++ P2] = R1.H;
 ad2:	00 00       	NOP;
 ad4:	00 90       	R0 = [P0++];
 ad6:	00 00       	NOP;
 ad8:	00 01       	ILLEGAL;
 ada:	00 5a       	P0 = P0 << 0x1;
 adc:	90 00       	RAISE 0x0;
 ade:	00 00       	NOP;
 ae0:	a2 00       	EXCPT 0x2;
 ae2:	00 00       	NOP;
 ae4:	01 00       	ILLEGAL;
 ae6:	50 00       	JUMP (P0);
	...
 af0:	00 00       	NOP;
 af2:	00 44       	P0 -= P0;
 af4:	00 00       	NOP;
 af6:	00 01       	ILLEGAL;
 af8:	00 51       	R4 = R0 + R0;
 afa:	62 00       	CALL (P2);
 afc:	00 00       	NOP;
 afe:	8e 00       	ILLEGAL;
 b00:	00 00       	NOP;
 b02:	01 00       	ILLEGAL;
 b04:	51 8e       	R1 = W[P1 ++ P2] (X);
 b06:	00 00       	NOP;
 b08:	00 94       	R0 = W[P0++] (Z);
 b0a:	00 00       	NOP;
 b0c:	00 01       	ILLEGAL;
 b0e:	00 59       	R4 = R0 ^ R0;
 b10:	94 00       	RAISE 0x4;
 b12:	00 00       	NOP;
 b14:	a6 00       	EXCPT 0x6;
 b16:	00 00       	NOP;
 b18:	01 00       	ILLEGAL;
 b1a:	51 00       	JUMP (P1);
 b1c:	00 00       	NOP;
 b1e:	00 00       	NOP;
 b20:	00 00       	NOP;
 b22:	00 14       	IF !CC JUMP 0xb22 <_intr_stack+0x2ba> (BP);
 b24:	00 00       	NOP;
 b26:	00 44       	P0 -= P0;
 b28:	00 00       	NOP;
 b2a:	00 01       	ILLEGAL;
 b2c:	00 50       	R0 = R0 + R0;
 b2e:	44 00       	STI R4;
 b30:	00 00       	NOP;
 b32:	54 00       	JUMP (P4);
 b34:	00 00       	NOP;
 b36:	01 00       	ILLEGAL;
 b38:	53 54       	R1 = R3 & R2;
 b3a:	00 00       	NOP;
 b3c:	00 58       	R0 = R0 ^ R0;
 b3e:	00 00       	NOP;
 b40:	00 01       	ILLEGAL;
 b42:	00 59       	R4 = R0 ^ R0;
 b44:	58 00       	ILLEGAL;
 b46:	00 00       	NOP;
 b48:	62 00       	CALL (P2);
 b4a:	00 00       	NOP;
 b4c:	01 00       	ILLEGAL;
 b4e:	53 a6       	R3 = W[P2 + 0x12] (Z);
 b50:	00 00       	NOP;
 b52:	00 b0       	[P0 + 0x0] = R0;
 b54:	00 00       	NOP;
 b56:	00 01       	ILLEGAL;
 b58:	00 53       	R4 = R0 - R0;
	...
 b62:	16 00       	ILLEGAL;
 b64:	00 00       	NOP;
 b66:	44 00       	STI R4;
 b68:	00 00       	NOP;
 b6a:	01 00       	ILLEGAL;
 b6c:	51 44       	P1 = P2 << 0x2;
 b6e:	00 00       	NOP;
 b70:	00 52       	R0 = R0 - R0;
 b72:	00 00       	NOP;
 b74:	00 01       	ILLEGAL;
 b76:	00 52       	R0 = R0 - R0;
 b78:	56 00       	JUMP (SP);
 b7a:	00 00       	NOP;
 b7c:	5a 00       	ILLEGAL;
 b7e:	00 00       	NOP;
 b80:	01 00       	ILLEGAL;
 b82:	5a 5a       	P1 = P2 + P3;
 b84:	00 00       	NOP;
 b86:	00 62       	R0 = -0x40 (X);		/*		R0=0xffffffc0(-64) */
 b88:	00 00       	NOP;
 b8a:	00 01       	ILLEGAL;
 b8c:	00 52       	R0 = R0 - R0;
	...
 b9a:	06 00       	ILLEGAL;
 b9c:	00 00       	NOP;
 b9e:	02 00       	ILLEGAL;
 ba0:	7e 00       	ILLEGAL;
 ba2:	06 00       	ILLEGAL;
 ba4:	00 00       	NOP;
 ba6:	0c 00       	ILLEGAL;
 ba8:	00 00       	NOP;
 baa:	02 00       	ILLEGAL;
 bac:	7e 08       	CC = SP == FP;
 bae:	0c 00       	ILLEGAL;
 bb0:	00 00       	NOP;
 bb2:	6a 00       	ILLEGAL;
 bb4:	00 00       	NOP;
 bb6:	02 00       	ILLEGAL;
 bb8:	7f 10       	IF !CC JUMP 0xcb6 <_intr_stack+0x44e>;
	...
 bc6:	12 00       	RTX;
 bc8:	00 00       	NOP;
 bca:	01 00       	ILLEGAL;
 bcc:	50 38       	A1.X = P0;
 bce:	00 00       	NOP;
 bd0:	00 6a       	P0 = -0x40 (X);		/*		P0=0xffffffc0(-64) */
 bd2:	00 00       	NOP;
 bd4:	00 01       	ILLEGAL;
 bd6:	00 50       	R0 = R0 + R0;
	...
 be4:	12 00       	RTX;
 be6:	00 00       	NOP;
 be8:	01 00       	ILLEGAL;
 bea:	51 64       	R1 += 0xa;		/* ( 10) */
 bec:	00 00       	NOP;
 bee:	00 6a       	P0 = -0x40 (X);		/*		P0=0xffffffc0(-64) */
 bf0:	00 00       	NOP;
 bf2:	00 01       	ILLEGAL;
 bf4:	00 51       	R4 = R0 + R0;
	...
 c02:	4e 00       	ILLEGAL;
 c04:	00 00       	NOP;
 c06:	01 00       	ILLEGAL;
 c08:	50 4e       	R0 >>= 0xa;
 c0a:	00 00       	NOP;
 c0c:	00 50       	R0 = R0 + R0;
 c0e:	00 00       	NOP;
 c10:	00 01       	ILLEGAL;
 c12:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 c14:	50 00       	JUMP (P0);
 c16:	00 00       	NOP;
 c18:	56 00       	JUMP (SP);
 c1a:	00 00       	NOP;
 c1c:	01 00       	ILLEGAL;
 c1e:	5a 56       	R1 = R2 | R3;
 c20:	00 00       	NOP;
 c22:	00 64       	R0 += 0x0;		/* (  0) */
 c24:	00 00       	NOP;
 c26:	00 01       	ILLEGAL;
 c28:	00 5a       	P0 = P0 << 0x1;
 c2a:	64 00       	CALL (P4);
 c2c:	00 00       	NOP;
 c2e:	6a 00       	ILLEGAL;
 c30:	00 00       	NOP;
 c32:	01 00       	ILLEGAL;
 c34:	50 00       	JUMP (P0);
	...
 c3e:	00 00       	NOP;
 c40:	00 38       	A0.X = R0;
 c42:	00 00       	NOP;
 c44:	00 01       	ILLEGAL;
 c46:	00 51       	R4 = R0 + R0;
 c48:	64 00       	CALL (P4);
 c4a:	00 00       	NOP;
 c4c:	6a 00       	ILLEGAL;
 c4e:	00 00       	NOP;
 c50:	01 00       	ILLEGAL;
 c52:	51 00       	JUMP (P1);
 c54:	00 00       	NOP;
 c56:	00 00       	NOP;
 c58:	00 00       	NOP;
 c5a:	00 1e       	IF CC JUMP 0x85a <bss_begin+0x7f2> (BP);
 c5c:	00 00       	NOP;
 c5e:	00 38       	A0.X = R0;
 c60:	00 00       	NOP;
 c62:	00 01       	ILLEGAL;
 c64:	00 50       	R0 = R0 + R0;
 c66:	38 00       	ILLEGAL;
 c68:	00 00       	NOP;
 c6a:	3a 00       	ILLEGAL;
 c6c:	00 00       	NOP;
 c6e:	01 00       	ILLEGAL;
 c70:	5a 3a       	ILLEGAL;
 c72:	00 00       	NOP;
 c74:	00 48       	CC = !BITTST (R0, 0x0);		/* bit  0 */
 c76:	00 00       	NOP;
 c78:	00 01       	ILLEGAL;
 c7a:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
 c7c:	48 00       	ILLEGAL;
 c7e:	00 00       	NOP;
 c80:	4e 00       	ILLEGAL;
 c82:	00 00       	NOP;
 c84:	01 00       	ILLEGAL;
 c86:	5a 4e       	R2 >>= 0xb;
 c88:	00 00       	NOP;
 c8a:	00 50       	R0 = R0 + R0;
 c8c:	00 00       	NOP;
 c8e:	00 01       	ILLEGAL;
 c90:	00 60       	R0 = 0x0 (X);		/*		R0=0x0(  0) */
	...
 c9a:	1e 00       	ILLEGAL;
 c9c:	00 00       	NOP;
 c9e:	38 00       	ILLEGAL;
 ca0:	00 00       	NOP;
 ca2:	01 00       	ILLEGAL;
 ca4:	51 00       	JUMP (P1);
	...
 cae:	00 00       	NOP;
 cb0:	00 04       	ILLEGAL;
 cb2:	00 00       	NOP;
 cb4:	00 02       	R0 = CC;
 cb6:	00 7e       	ILLEGAL;
 cb8:	00 04       	ILLEGAL;
 cba:	00 00       	NOP;
 cbc:	00 0a       	CC = R0 <= R0 (IU);
 cbe:	00 00       	NOP;
 cc0:	00 02       	R0 = CC;
 cc2:	00 7e       	ILLEGAL;
 cc4:	04 0a       	CC = R4 <= R0 (IU);
 cc6:	00 00       	NOP;
 cc8:	00 9a       	B[P0++] = R0;
 cca:	00 00       	NOP;
 ccc:	00 02       	R0 = CC;
 cce:	00 7f       	ILLEGAL;
 cd0:	0c 00       	ILLEGAL;
	...
 cda:	00 00       	NOP;
 cdc:	00 22       	JUMP.S 0x10dc <_bredr_base_addr+0x74>;
 cde:	00 00       	NOP;
 ce0:	00 01       	ILLEGAL;
 ce2:	00 50       	R0 = R0 + R0;
 ce4:	22 00       	ILLEGAL;
 ce6:	00 00       	NOP;
 ce8:	2a 00       	ILLEGAL;
 cea:	00 00       	NOP;
 cec:	01 00       	ILLEGAL;
 cee:	53 30       	R2 = P3;
 cf0:	00 00       	NOP;
 cf2:	00 34       	I0 = R0;
 cf4:	00 00       	NOP;
 cf6:	00 01       	ILLEGAL;
 cf8:	00 5a       	P0 = P0 << 0x1;
 cfa:	34 00       	CLI R4;
 cfc:	00 00       	NOP;
 cfe:	58 00       	ILLEGAL;
 d00:	00 00       	NOP;
 d02:	01 00       	ILLEGAL;
 d04:	59 6c       	P1 += 0xb;		/* ( 11) */
 d06:	00 00       	NOP;
 d08:	00 72       	ILLEGAL;
 d0a:	00 00       	NOP;
 d0c:	00 01       	ILLEGAL;
 d0e:	00 5a       	P0 = P0 << 0x1;
 d10:	72 00       	CALL (PC + P2);
 d12:	00 00       	NOP;
 d14:	76 00       	CALL (PC + SP);
 d16:	00 00       	NOP;
 d18:	01 00       	ILLEGAL;
 d1a:	52 76       	ILLEGAL;
 d1c:	00 00       	NOP;
 d1e:	00 78       	ILLEGAL;
 d20:	00 00       	NOP;
 d22:	00 01       	ILLEGAL;
 d24:	00 5a       	P0 = P0 << 0x1;
 d26:	78 00       	ILLEGAL;
 d28:	00 00       	NOP;
 d2a:	7e 00       	ILLEGAL;
 d2c:	00 00       	NOP;
 d2e:	01 00       	ILLEGAL;
 d30:	52 86       	R1 = W[P2 ++ P2] (Z);
 d32:	00 00       	NOP;
 d34:	00 92       	[P0++] = R0;
 d36:	00 00       	NOP;
 d38:	00 01       	ILLEGAL;
 d3a:	00 53       	R4 = R0 - R0;
 d3c:	92 00       	RAISE 0x2;
 d3e:	00 00       	NOP;
 d40:	98 00       	RAISE 0x8;
 d42:	00 00       	NOP;
 d44:	01 00       	ILLEGAL;
 d46:	50 98       	R0 = B[P2++] (X);
 d48:	00 00       	NOP;
 d4a:	00 9a       	B[P0++] = R0;
 d4c:	00 00       	NOP;
 d4e:	00 01       	ILLEGAL;
 d50:	00 5a       	P0 = P0 << 0x1;
	...
 d5e:	7e 00       	ILLEGAL;
 d60:	00 00       	NOP;
 d62:	01 00       	ILLEGAL;
 d64:	50 86       	R1 = W[P0 ++ P2] (Z);
 d66:	00 00       	NOP;
 d68:	00 8e       	R0 = W[P0 ++ P0] (X);
 d6a:	00 00       	NOP;
 d6c:	00 01       	ILLEGAL;
 d6e:	00 50       	R0 = R0 + R0;
 d70:	92 00       	RAISE 0x2;
 d72:	00 00       	NOP;
 d74:	98 00       	RAISE 0x8;
 d76:	00 00       	NOP;
 d78:	01 00       	ILLEGAL;
 d7a:	50 98       	R0 = B[P2++] (X);
 d7c:	00 00       	NOP;
 d7e:	00 9a       	B[P0++] = R0;
 d80:	00 00       	NOP;
 d82:	00 01       	ILLEGAL;
 d84:	00 5a       	P0 = P0 << 0x1;
	...
 d8e:	50 00       	JUMP (P0);
 d90:	00 00       	NOP;
 d92:	58 00       	ILLEGAL;
 d94:	00 00       	NOP;
 d96:	01 00       	ILLEGAL;
 d98:	59 58       	R1 = R1 ^ R3;
 d9a:	00 00       	NOP;
 d9c:	00 5a       	P0 = P0 << 0x1;
 d9e:	00 00       	NOP;
 da0:	00 01       	ILLEGAL;
 da2:	00 5a       	P0 = P0 << 0x1;
 da4:	5a 00       	ILLEGAL;
 da6:	00 00       	NOP;
 da8:	5c 00       	ILLEGAL;
 daa:	00 00       	NOP;
 dac:	01 00       	ILLEGAL;
 dae:	59 5c       	P1 = P1 + (P3 << 0x1);
 db0:	00 00       	NOP;
 db2:	00 72       	ILLEGAL;
 db4:	00 00       	NOP;
 db6:	00 01       	ILLEGAL;
 db8:	00 5a       	P0 = P0 << 0x1;
	...

Disassembly of section .debug_pubnames:

00000000 <.debug_pubnames>:
   0:	1d 00       	ILLEGAL;
   2:	00 00       	NOP;
   4:	02 00       	ILLEGAL;
   6:	00 00       	NOP;
   8:	00 00       	NOP;
   a:	89 02       	ILLEGAL;
   c:	00 00       	NOP;
   e:	38 01       	USP = [SP++];
  10:	00 00       	NOP;
  12:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
  14:	6d 5f       	P5 = P5 + (P5 << 0x2);
  16:	6d 65       	R5 += 0x2d;		/* ( 45) */
  18:	6d 6f       	P5 += -0x13;		/* (-19) */
  1a:	72 79       	ILLEGAL;
  1c:	00 00       	NOP;
  1e:	00 00       	NOP;
  20:	00 64       	R0 += 0x0;		/* (  0) */
  22:	00 00       	NOP;
  24:	00 02       	R0 = CC;
  26:	00 89       	[P0 ++ P0] = R4;
  28:	02 00       	ILLEGAL;
  2a:	00 db       	ILLEGAL;
  2c:	02 00       	ILLEGAL;
  2e:	00 1d       	IF CC JUMP 0x22e <bss_begin+0x1c6> (BP);
  30:	01 00       	ILLEGAL;
  32:	00 61       	R0 = 0x20 (X);		/*		R0=0x20( 32) */
  34:	65 73       	ILLEGAL;
  36:	31 32       	SP = R1;
  38:	38 5f       	P4 = P0 + (FP << 0x2);
  3a:	73 74       	ILLEGAL;
  3c:	61 72       	ILLEGAL;
  3e:	74 5f       	P5 = P4 + (SP << 0x2);
  40:	65 6e       	P5 += -0x34;		/* (-52) */
  42:	63 00       	CALL (P3);
  44:	77 01       	[--SP] = CYCLES2;
  46:	00 00       	NOP;
  48:	61 65       	R1 += 0x2c;		/* ( 44) */
  4a:	73 31       	ILLEGAL;
  4c:	32 38       	ASTAT = R2;
  4e:	5f 73       	ILLEGAL;
  50:	74 61       	R4 = 0x2e (X);		/*		R4=0x2e( 46) */
  52:	72 74       	ILLEGAL;
  54:	5f 64       	R7 += 0xb;		/* ( 11) */
  56:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
  58:	00 cb       	ILLEGAL;
  5a:	01 00       	ILLEGAL;
  5c:	00 72       	ILLEGAL;
  5e:	69 6a       	P1 = -0x33 (X);		/*		P1=0xffffffcd(-51) */
  60:	6e 64       	R6 += 0xd;		/* ( 13) */
  62:	61 65       	R1 += 0x2c;		/* ( 44) */
  64:	6c 5f       	P5 = P4 + (P5 << 0x2);
  66:	73 65       	R3 += 0x2e;		/* ( 46) */
  68:	74 75       	ILLEGAL;
  6a:	70 00       	CALL (PC + P0);
  6c:	28 02       	ILLEGAL;
  6e:	00 00       	NOP;
  70:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
  72:	6a 6e       	P2 += -0x33;		/* (-51) */
  74:	64 61       	R4 = 0x2c (X);		/*		R4=0x2c( 44) */
  76:	65 6c       	P5 += 0xc;		/* ( 12) */
  78:	5f 65       	R7 += 0x2b;		/* ( 43) */
  7a:	63 62       	R3 = -0x34 (X);		/*		R3=0xffffffcc(-52) */
  7c:	5f 65       	R7 += 0x2b;		/* ( 43) */
  7e:	6e 63       	R6 = -0x13 (X);		/*		R6=0xffffffed(-19) */
  80:	72 79       	ILLEGAL;
  82:	70 74       	ILLEGAL;
  84:	00 00       	NOP;
  86:	00 00       	NOP;
  88:	00 19       	IF CC JUMP 0x288 <bss_begin+0x220>;
  8a:	00 00       	NOP;
  8c:	00 02       	R0 = CC;
  8e:	00 64       	R0 += 0x0;		/* (  0) */
  90:	05 00       	ILLEGAL;
  92:	00 0c       	CC = R0 == 0x0;
  94:	01 00       	ILLEGAL;
  96:	00 7f       	ILLEGAL;
  98:	00 00       	NOP;
  9a:	00 6d       	P0 += 0x20;		/* ( 32) */
  9c:	65 6d       	P5 += 0x2c;		/* ( 44) */
  9e:	63 6d       	P3 += 0x2c;		/* ( 44) */
  a0:	70 00       	CALL (PC + P0);
  a2:	00 00       	NOP;
  a4:	00 00       	NOP;
  a6:	19 00       	ILLEGAL;
  a8:	00 00       	NOP;
  aa:	02 00       	ILLEGAL;
  ac:	70 06       	IF !CC R6 = P0;
  ae:	00 00       	NOP;
  b0:	2a 01       	ILLEGAL;
  b2:	00 00       	NOP;
  b4:	8c 00       	ILLEGAL;
  b6:	00 00       	NOP;
  b8:	6d 65       	R5 += 0x2d;		/* ( 45) */
  ba:	6d 63       	R5 = -0x13 (X);		/*		R5=0xffffffed(-19) */
  bc:	70 79       	ILLEGAL;
  be:	00 00       	NOP;
  c0:	00 00       	NOP;
  c2:	00 19       	IF CC JUMP 0x2c2 <bss_begin+0x25a>;
  c4:	00 00       	NOP;
  c6:	00 02       	R0 = CC;
  c8:	00 9a       	B[P0++] = R0;
  ca:	07 00       	ILLEGAL;
  cc:	00 11       	IF !CC JUMP 0x2cc <bss_begin+0x264>;
  ce:	01 00       	ILLEGAL;
  d0:	00 81       	R4 = [P0 ++ P0];
  d2:	00 00       	NOP;
  d4:	00 6d       	P0 += 0x20;		/* ( 32) */
  d6:	65 6d       	P5 += 0x2c;		/* ( 44) */
  d8:	73 65       	R3 += 0x2e;		/* ( 46) */
  da:	74 00       	CALL (PC + P4);
  dc:	00 00       	NOP;
  de:	00 00       	NOP;
  e0:	19 00       	ILLEGAL;
  e2:	00 00       	NOP;
  e4:	02 00       	ILLEGAL;
  e6:	ab 08       	CC = R3 < R5;
  e8:	00 00       	NOP;
  ea:	d6 00       	ILLEGAL;
  ec:	00 00       	NOP;
  ee:	79 00       	ILLEGAL;
  f0:	00 00       	NOP;
  f2:	73 74       	ILLEGAL;
  f4:	72 63       	R2 = -0x12 (X);		/*		R2=0xffffffee(-18) */
  f6:	6d 70       	ILLEGAL;
  f8:	00 00       	NOP;
  fa:	00 00       	NOP;
  fc:	00 19       	IF CC JUMP 0x2fc <bss_begin+0x294>;
  fe:	00 00       	NOP;
 100:	00 02       	R0 = CC;
 102:	00 81       	R4 = [P0 ++ P0];
 104:	09 00       	ILLEGAL;
 106:	00 09       	CC = R0 <= R0;
 108:	01 00       	ILLEGAL;
 10a:	00 7f       	ILLEGAL;
 10c:	00 00       	NOP;
 10e:	00 73       	ILLEGAL;
 110:	74 72       	ILLEGAL;
 112:	63 70       	ILLEGAL;
 114:	79 00       	ILLEGAL;
 116:	00 00       	NOP;
 118:	00 00       	NOP;
 11a:	19 00       	ILLEGAL;
 11c:	00 00       	NOP;
 11e:	02 00       	ILLEGAL;
 120:	8a 0a       	ILLEGAL;
 122:	00 00       	NOP;
 124:	d6 00       	ILLEGAL;
 126:	00 00       	NOP;
 128:	84 00       	JUMP (PC + P4);
 12a:	00 00       	NOP;
 12c:	73 74       	ILLEGAL;
 12e:	72 6c       	P2 += 0xe;		/* ( 14) */
 130:	65 6e       	P5 += -0x34;		/* (-52) */
 132:	00 00       	NOP;
 134:	00 00       	NOP;
	...

Disassembly of section .debug_pubtypes:

00000000 <.debug_pubtypes>:
   0:	20 00       	IDLE;
   2:	00 00       	NOP;
   4:	02 00       	ILLEGAL;
   6:	00 00       	NOP;
   8:	00 00       	NOP;
   a:	89 02       	ILLEGAL;
   c:	00 00       	NOP;
   e:	2d 01       	ILLEGAL;
  10:	00 00       	NOP;
  12:	4c 54       	R1 = R4 & R1;
  14:	43 5f       	P5 = P3 + (P0 << 0x2);
  16:	46 41       	R6 = (R6 + R0) << 0x2;
  18:	53 54       	R1 = R3 & R2;
  1a:	5f 54       	R1 = R7 & R3;
  1c:	59 50       	R1 = R1 + R3;
  1e:	45 00       	STI R5;
  20:	00 00       	NOP;
  22:	00 00       	NOP;
  24:	0e 00       	ILLEGAL;
  26:	00 00       	NOP;
  28:	02 00       	ILLEGAL;
  2a:	89 02       	ILLEGAL;
  2c:	00 00       	NOP;
  2e:	db 02       	ILLEGAL;
  30:	00 00       	NOP;
  32:	00 00       	NOP;
  34:	00 00       	NOP;
  36:	19 00       	ILLEGAL;
  38:	00 00       	NOP;
  3a:	02 00       	ILLEGAL;
  3c:	64 05       	ILLEGAL;
  3e:	00 00       	NOP;
  40:	0c 01       	ILLEGAL;
  42:	00 00       	NOP;
  44:	74 00       	CALL (PC + P4);
  46:	00 00       	NOP;
  48:	73 69       	P3 = 0x2e (X);		/*		P3=0x2e( 46) */
  4a:	7a 65       	R2 += 0x2f;		/* ( 47) */
  4c:	5f 74       	ILLEGAL;
  4e:	00 00       	NOP;
  50:	00 00       	NOP;
  52:	00 19       	IF CC JUMP 0x252 <bss_begin+0x1ea>;
  54:	00 00       	NOP;
  56:	00 02       	R0 = CC;
  58:	00 70       	ILLEGAL;
  5a:	06 00       	ILLEGAL;
  5c:	00 2a       	JUMP.S 0xfffff45c <_text_end+0xfefef41c>;
  5e:	01 00       	ILLEGAL;
  60:	00 81       	R4 = [P0 ++ P0];
  62:	00 00       	NOP;
  64:	00 73       	ILLEGAL;
  66:	69 7a       	ILLEGAL;
  68:	65 5f       	P5 = P5 + (P4 << 0x2);
  6a:	74 00       	CALL (PC + P4);
  6c:	00 00       	NOP;
  6e:	00 00       	NOP;
  70:	19 00       	ILLEGAL;
  72:	00 00       	NOP;
  74:	02 00       	ILLEGAL;
  76:	9a 07       	IF CC P3 = R2;
  78:	00 00       	NOP;
  7a:	11 01       	I1 = [SP++];
  7c:	00 00       	NOP;
  7e:	76 00       	CALL (PC + SP);
  80:	00 00       	NOP;
  82:	73 69       	P3 = 0x2e (X);		/*		P3=0x2e( 46) */
  84:	7a 65       	R2 += 0x2f;		/* ( 47) */
  86:	5f 74       	ILLEGAL;
  88:	00 00       	NOP;
  8a:	00 00       	NOP;
  8c:	00 0e       	CC = R0 <= 0x0 (IU);
  8e:	00 00       	NOP;
  90:	00 02       	R0 = CC;
  92:	00 ab       	R0 = W[P0 + 0x18] (X);
  94:	08 00       	ILLEGAL;
  96:	00 d6       	ILLEGAL;
  98:	00 00       	NOP;
  9a:	00 00       	NOP;
  9c:	00 00       	NOP;
  9e:	00 0e       	CC = R0 <= 0x0 (IU);
  a0:	00 00       	NOP;
  a2:	00 02       	R0 = CC;
  a4:	00 81       	R4 = [P0 ++ P0];
  a6:	09 00       	ILLEGAL;
  a8:	00 09       	CC = R0 <= R0;
  aa:	01 00       	ILLEGAL;
  ac:	00 00       	NOP;
  ae:	00 00       	NOP;
  b0:	00 19       	IF CC JUMP 0x2b0 <bss_begin+0x248>;
  b2:	00 00       	NOP;
  b4:	00 02       	R0 = CC;
  b6:	00 8a       	W[P0] = R0.L;
  b8:	0a 00       	ILLEGAL;
  ba:	00 d6       	ILLEGAL;
  bc:	00 00       	NOP;
  be:	00 79       	ILLEGAL;
  c0:	00 00       	NOP;
  c2:	00 73       	ILLEGAL;
  c4:	69 7a       	ILLEGAL;
  c6:	65 5f       	P5 = P5 + (P4 << 0x2);
  c8:	74 00       	CALL (PC + P4);
  ca:	00 00       	NOP;
	...

Disassembly of section .debug_aranges:

00000000 <.debug_aranges>:
   0:	1c 00       	ILLEGAL;
   2:	00 00       	NOP;
   4:	02 00       	ILLEGAL;
   6:	00 00       	NOP;
   8:	00 00       	NOP;
   a:	04 00       	ILLEGAL;
   c:	00 00       	NOP;
   e:	00 00       	NOP;
  10:	fc f3       	ILLEGAL;
  12:	00 01       	ILLEGAL;
  14:	62 03       	CC ^= AC0_COPY;
	...
  1e:	00 00       	NOP;
  20:	1c 00       	ILLEGAL;
  22:	00 00       	NOP;
  24:	02 00       	ILLEGAL;
  26:	89 02       	ILLEGAL;
  28:	00 00       	NOP;
  2a:	04 00       	ILLEGAL;
  2c:	00 00       	NOP;
  2e:	00 00       	NOP;
  30:	60 f7       	ILLEGAL;
  32:	00 01       	ILLEGAL;
  34:	26 05       	ILLEGAL;
	...
  3e:	00 00       	NOP;
  40:	1c 00       	ILLEGAL;
  42:	00 00       	NOP;
  44:	02 00       	ILLEGAL;
  46:	64 05       	ILLEGAL;
  48:	00 00       	NOP;
  4a:	04 00       	ILLEGAL;
  4c:	00 00       	NOP;
  4e:	00 00       	NOP;
  50:	88 fc       	ILLEGAL;
  52:	00 01       	ILLEGAL;
  54:	7a 00       	ILLEGAL;
	...
  5e:	00 00       	NOP;
  60:	1c 00       	ILLEGAL;
  62:	00 00       	NOP;
  64:	02 00       	ILLEGAL;
  66:	70 06       	IF !CC R6 = P0;
  68:	00 00       	NOP;
  6a:	04 00       	ILLEGAL;
  6c:	00 00       	NOP;
  6e:	00 00       	NOP;
  70:	04 fd       	ILLEGAL;
  72:	00 01       	ILLEGAL;
  74:	9c 00       	RAISE 0xc;
	...
  7e:	00 00       	NOP;
  80:	1c 00       	ILLEGAL;
  82:	00 00       	NOP;
  84:	02 00       	ILLEGAL;
  86:	9a 07       	IF CC P3 = R2;
  88:	00 00       	NOP;
  8a:	04 00       	ILLEGAL;
  8c:	00 00       	NOP;
  8e:	00 00       	NOP;
  90:	a0 fd       	ILLEGAL;
  92:	00 01       	ILLEGAL;
  94:	ae 00       	EXCPT 0xe;
	...
  9e:	00 00       	NOP;
  a0:	1c 00       	ILLEGAL;
  a2:	00 00       	NOP;
  a4:	02 00       	ILLEGAL;
  a6:	ab 08       	CC = R3 < R5;
  a8:	00 00       	NOP;
  aa:	04 00       	ILLEGAL;
  ac:	00 00       	NOP;
  ae:	00 00       	NOP;
  b0:	50 fe       	ILLEGAL;
  b2:	00 01       	ILLEGAL;
  b4:	b0 00       	TESTSET (P0);
	...
  be:	00 00       	NOP;
  c0:	1c 00       	ILLEGAL;
  c2:	00 00       	NOP;
  c4:	02 00       	ILLEGAL;
  c6:	81 09       	CC = R1 < R0 (IU);
  c8:	00 00       	NOP;
  ca:	04 00       	ILLEGAL;
  cc:	00 00       	NOP;
  ce:	00 00       	NOP;
  d0:	00 ff       	ILLEGAL;
  d2:	00 01       	ILLEGAL;
  d4:	6a 00       	ILLEGAL;
	...
  de:	00 00       	NOP;
  e0:	1c 00       	ILLEGAL;
  e2:	00 00       	NOP;
  e4:	02 00       	ILLEGAL;
  e6:	8a 0a       	ILLEGAL;
  e8:	00 00       	NOP;
  ea:	04 00       	ILLEGAL;
  ec:	00 00       	NOP;
  ee:	00 00       	NOP;
  f0:	6c ff       	ILLEGAL;
  f2:	00 01       	ILLEGAL;
  f4:	9a 00       	RAISE 0xa;
	...
  fe:	00 00       	NOP;
 100:	1c 00       	ILLEGAL;
 102:	00 00       	NOP;
 104:	02 00       	ILLEGAL;
 106:	60 0b       	ILLEGAL;
 108:	00 00       	NOP;
 10a:	04 00       	ILLEGAL;
 10c:	00 00       	NOP;
 10e:	00 00       	NOP;
 110:	08 00       	ILLEGAL;
 112:	01 01       	ILLEGAL;
 114:	16 00       	ILLEGAL;
	...
 11e:	00 00       	NOP;
 120:	1c 00       	ILLEGAL;
 122:	00 00       	NOP;
 124:	02 00       	ILLEGAL;
 126:	11 0c       	CC = R1 == 0x2;
 128:	00 00       	NOP;
 12a:	04 00       	ILLEGAL;
 12c:	00 00       	NOP;
 12e:	00 00       	NOP;
 130:	20 00       	IDLE;
 132:	01 01       	ILLEGAL;
 134:	1e 00       	ILLEGAL;
	...

Disassembly of section .debug_str:

00000000 <.debug_str>:
   0:	43 52       	R1 = R3 - R0;
   2:	59 50       	R1 = R1 + R3;
   4:	54 5f       	P5 = P4 + (P2 << 0x2);
   6:	50 4b       	BITTGL (R0, 0xa);		/* bit 10 */
   8:	5f 44       	FP = P3 << 0x2;
   a:	55 50       	R1 = R5 + R2;
   c:	00 68       	P0 = 0x0 (X);		/*		P0=0x0(  0) */
   e:	65 61       	R5 = 0x2c (X);		/*		R5=0x2c( 44) */
  10:	64 65       	R4 += 0x2c;		/* ( 44) */
  12:	72 6c       	P2 += 0xe;		/* ( 14) */
  14:	65 6e       	P5 += -0x34;		/* (-52) */
  16:	00 70       	ILLEGAL;
  18:	74 6c       	P4 += 0xe;		/* ( 14) */
  1a:	65 6e       	P5 += -0x34;		/* (-52) */
  1c:	00 64       	R0 += 0x0;		/* (  0) */
  1e:	69 72       	ILLEGAL;
  20:	65 63       	R5 = -0x14 (X);		/*		R5=0xffffffec(-20) */
  22:	74 69       	P4 = 0x2e (X);		/*		P4=0x2e( 46) */
  24:	6f 6e       	FP += -0x33;		/* (-51) */
  26:	00 6c       	P0 += 0x0;		/* (  0) */
  28:	6f 6e       	FP += -0x33;		/* (-51) */
  2a:	67 20       	JUMP.S 0xf8 <bss_begin+0x90>;
  2c:	6c 6f       	P4 += -0x13;		/* (-19) */
  2e:	6e 67       	R6 += -0x13;		/* (-19) */
  30:	20 75       	ILLEGAL;
  32:	6e 73       	ILLEGAL;
  34:	69 67       	R1 += -0x13;		/* (-19) */
  36:	6e 65       	R6 += 0x2d;		/* ( 45) */
  38:	64 20       	JUMP.S 0x100 <bss_begin+0x98>;
  3a:	69 6e       	P1 += -0x33;		/* (-51) */
  3c:	74 00       	CALL (PC + P4);
  3e:	43 52       	R1 = R3 - R0;
  40:	59 50       	R1 = R1 + R3;
  42:	54 5f       	P5 = P4 + (P2 << 0x2);
  44:	50 4b       	BITTGL (R0, 0xa);		/* bit 10 */
  46:	5f 49       	CC = BITTST (R7, 0xb);		/* bit 11 */
  48:	4e 56       	R1 = R6 | R1;
  4a:	41 4c       	BITCLR (R1, 0x8);		/* bit  8 */
  4c:	49 44       	P1 = P1 << 0x2;
  4e:	5f 54       	R1 = R7 & R3;
  50:	59 50       	R1 = R1 + R3;
  52:	45 00       	STI R5;
  54:	43 52       	R1 = R3 - R0;
  56:	59 50       	R1 = R1 + R3;
  58:	54 5f       	P5 = P4 + (P2 << 0x2);
  5a:	45 52       	R1 = R5 - R0;
  5c:	52 4f       	R2 <<= 0xa;
  5e:	52 00       	JUMP (P2);
  60:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
  62:	6d 5f       	P5 = P5 + (P5 << 0x2);
  64:	6d 65       	R5 += 0x2d;		/* ( 45) */
  66:	6d 6f       	P5 += -0x13;		/* (-19) */
  68:	72 79       	ILLEGAL;
  6a:	00 43       	R0 = R0.B (X);
  6c:	52 59       	R5 = R2 ^ R2;
  6e:	50 54       	R1 = R0 & R2;
  70:	5f 50       	R1 = R7 + R3;
  72:	4b 5f       	P5 = P3 + (P1 << 0x2);
  74:	4e 4f       	R6 <<= 0x9;
  76:	54 5f       	P5 = P4 + (P2 << 0x2);
  78:	46 4f       	R6 <<= 0x8;
  7a:	55 4e       	R5 >>= 0xa;
  7c:	44 00       	STI R4;
  7e:	43 52       	R1 = R3 - R0;
  80:	59 50       	R1 = R1 + R3;
  82:	54 5f       	P5 = P4 + (P2 << 0x2);
  84:	42 55       	R5 = R2 & R0;
  86:	46 46       	ILLEGAL;
  88:	45 52       	R1 = R5 - R0;
  8a:	5f 4f       	R7 <<= 0xb;
  8c:	56 45       	SP += P2 (BREV);
  8e:	52 46       	ILLEGAL;
  90:	4c 4f       	R4 <<= 0x9;
  92:	57 00       	JUMP (FP);
  94:	2e 2e       	JUMP.S 0xfffffcf0 <_text_end+0xfefefcb0>;
  96:	5c 63       	R4 = -0x15 (X);		/*		R4=0xffffffeb(-21) */
  98:	63 6d       	P3 += 0x2c;		/* ( 44) */
  9a:	5c 63       	R4 = -0x15 (X);		/*		R4=0xffffffeb(-21) */
  9c:	63 6d       	P3 += 0x2c;		/* ( 44) */
  9e:	5f 6d       	FP += 0x2b;		/* ( 43) */
  a0:	65 6d       	P5 += 0x2c;		/* ( 44) */
  a2:	6f 72       	ILLEGAL;
  a4:	79 2e       	JUMP.S 0xfffffd96 <_text_end+0xfefefd56>;
  a6:	63 00       	CALL (P3);
  a8:	43 52       	R1 = R3 - R0;
  aa:	59 50       	R1 = R1 + R3;
  ac:	54 5f       	P5 = P4 + (P2 << 0x2);
  ae:	46 41       	R6 = (R6 + R0) << 0x2;
  b0:	49 4c       	BITCLR (R1, 0x9);		/* bit  9 */
  b2:	5f 54       	R1 = R7 & R3;
  b4:	45 53       	R5 = R5 - R0;
  b6:	54 56       	R1 = R4 | R2;
  b8:	45 43       	R5 = R0.B (Z);
  ba:	54 4f       	R4 <<= 0xa;
  bc:	52 00       	JUMP (P2);
  be:	43 52       	R1 = R3 - R0;
  c0:	59 50       	R1 = R1 + R3;
  c2:	54 5f       	P5 = P4 + (P2 << 0x2);
  c4:	45 52       	R1 = R5 - R0;
  c6:	52 4f       	R2 <<= 0xa;
  c8:	52 5f       	P5 = P2 + (P2 << 0x2);
  ca:	52 45       	P2 += P2 (BREV);
  cc:	41 44       	P1 = P0 << 0x2;
  ce:	50 52       	R1 = R0 - R2;
  d0:	4e 47       	ILLEGAL;
  d2:	00 6c       	P0 += 0x0;		/* (  0) */
  d4:	6f 6e       	FP += -0x33;		/* (-51) */
  d6:	67 20       	JUMP.S 0x1a4 <bss_begin+0x13c>;
  d8:	6c 6f       	P4 += -0x13;		/* (-19) */
  da:	6e 67       	R6 += -0x13;		/* (-19) */
  dc:	20 69       	P0 = 0x24 (X);		/*		P0=0x24( 36) */
  de:	6e 74       	ILLEGAL;
  e0:	00 4c       	BITCLR (R0, 0x0);		/* bit  0 */
  e2:	54 43       	R4 = R2.B (Z);
  e4:	5f 46       	ILLEGAL;
  e6:	41 53       	R5 = R1 - R0;
  e8:	54 5f       	P5 = P4 + (P2 << 0x2);
  ea:	54 59       	R5 = R4 ^ R2;
  ec:	50 45       	P0 += P2 (BREV);
  ee:	00 43       	R0 = R0.B (X);
  f0:	52 59       	R5 = R2 ^ R2;
  f2:	50 54       	R1 = R0 & R2;
  f4:	5f 49       	CC = BITTST (R7, 0xb);		/* bit 11 */
  f6:	4e 56       	R1 = R6 | R1;
  f8:	41 4c       	BITCLR (R1, 0x8);		/* bit  8 */
  fa:	49 44       	P1 = P1 << 0x2;
  fc:	5f 43       	R7 = R3.B (Z);
  fe:	49 50       	R1 = R1 + R1;
 100:	48 45       	P0 += P1 (BREV);
 102:	52 00       	JUMP (P2);
 104:	43 52       	R1 = R3 - R0;
 106:	59 50       	R1 = R1 + R3;
 108:	54 5f       	P5 = P4 + (P2 << 0x2);
 10a:	4f 4b       	BITTGL (R7, 0x9);		/* bit  9 */
 10c:	00 43       	R0 = R0.B (X);
 10e:	54 52       	R1 = R4 - R2;
 110:	6c 65       	R4 += 0x2d;		/* ( 45) */
 112:	6e 00       	ILLEGAL;
 114:	43 52       	R1 = R3 - R0;
 116:	59 50       	R1 = R1 + R3;
 118:	54 5f       	P5 = P4 + (P2 << 0x2);
 11a:	49 4e       	R1 >>= 0x9;
 11c:	56 41       	R6 = (R6 + R2) << 0x2;
 11e:	4c 49       	CC = BITTST (R4, 0x9);		/* bit  9 */
 120:	44 5f       	P5 = P4 + (P0 << 0x2);
 122:	52 4f       	R2 <<= 0xa;
 124:	55 4e       	R5 >>= 0xa;
 126:	44 53       	R5 = R4 - R0;
 128:	00 43       	R0 = R0.B (X);
 12a:	52 59       	R5 = R2 ^ R2;
 12c:	50 54       	R1 = R0 & R2;
 12e:	5f 46       	ILLEGAL;
 130:	49 4c       	BITCLR (R1, 0x9);		/* bit  9 */
 132:	45 5f       	P5 = P5 + (P0 << 0x2);
 134:	4e 4f       	R6 <<= 0x9;
 136:	54 46       	ILLEGAL;
 138:	4f 55       	R5 = R7 & R1;
 13a:	4e 44       	SP = P1 << 0x2;
 13c:	00 73       	ILLEGAL;
 13e:	68 6f       	P0 += -0x13;		/* (-19) */
 140:	72 74       	ILLEGAL;
 142:	20 75       	ILLEGAL;
 144:	6e 73       	ILLEGAL;
 146:	69 67       	R1 += -0x13;		/* (-19) */
 148:	6e 65       	R6 += 0x2d;		/* ( 45) */
 14a:	64 20       	JUMP.S 0x212 <bss_begin+0x1aa>;
 14c:	69 6e       	P1 += -0x33;		/* (-51) */
 14e:	74 00       	CALL (PC + P4);
 150:	43 52       	R1 = R3 - R0;
 152:	59 50       	R1 = R1 + R3;
 154:	54 5f       	P5 = P4 + (P2 << 0x2);
 156:	49 4e       	R1 >>= 0x9;
 158:	56 41       	R6 = (R6 + R2) << 0x2;
 15a:	4c 49       	CC = BITTST (R4, 0x9);		/* bit  9 */
 15c:	44 5f       	P5 = P4 + (P0 << 0x2);
 15e:	48 41       	R0 = (R0 + R1) << 0x2;
 160:	53 48       	CC = !BITTST (R3, 0xa);		/* bit 10 */
 162:	00 43       	R0 = R0.B (X);
 164:	52 59       	R5 = R2 ^ R2;
 166:	50 54       	R1 = R0 & R2;
 168:	5f 50       	R1 = R7 + R3;
 16a:	4b 5f       	P5 = P3 + (P1 << 0x2);
 16c:	49 4e       	R1 >>= 0x9;
 16e:	56 41       	R6 = (R6 + R2) << 0x2;
 170:	4c 49       	CC = BITTST (R4, 0x9);		/* bit  9 */
 172:	44 5f       	P5 = P4 + (P0 << 0x2);
 174:	53 49       	CC = BITTST (R3, 0xa);		/* bit 10 */
 176:	5a 45       	P2 += P3 (BREV);
 178:	00 45       	P0 = P0 >> 0x1;
 17a:	3a 5c       	P0 = P2 + (FP << 0x1);
 17c:	42 54       	R1 = R2 & R0;
 17e:	31 36       	L2 = R1;
 180:	5c 62       	R4 = -0x35 (X);		/*		R4=0xffffffcb(-53) */
 182:	74 31       	ILLEGAL;
 184:	36 5f       	P4 = SP + (SP << 0x2);
 186:	66 70       	ILLEGAL;
 188:	67 61       	R7 = 0x2c (X);		/*		R7=0x2c( 44) */
 18a:	5f 32       	P3 = FP;
 18c:	30 31       	R6 = A0.X;
 18e:	35 30       	R6 = R5;
 190:	35 31       	ILLEGAL;
 192:	38 5c       	P0 = P0 + (FP << 0x1);
 194:	42 54       	R1 = R2 & R0;
 196:	31 36       	L2 = R1;
 198:	5f 43       	R7 = R3.B (Z);
 19a:	43 4d       	R3 >>>= 0x8;
 19c:	5f 4c       	BITCLR (R7, 0xb);		/* bit 11 */
 19e:	49 42       	DIVS (R1, R1);
 1a0:	5c 70       	ILLEGAL;
 1a2:	72 6f       	P2 += -0x12;		/* (-18) */
 1a4:	6a 65       	R2 += 0x2d;		/* ( 45) */
 1a6:	63 74       	ILLEGAL;
 1a8:	00 43       	R0 = R0.B (X);
 1aa:	52 59       	R5 = R2 ^ R2;
 1ac:	50 54       	R1 = R0 & R2;
 1ae:	5f 50       	R1 = R7 + R3;
 1b0:	4b 5f       	P5 = P3 + (P1 << 0x2);
 1b2:	4e 4f       	R6 <<= 0x9;
 1b4:	54 5f       	P5 = P4 + (P2 << 0x2);
 1b6:	50 52       	R1 = R0 - R2;
 1b8:	49 56       	R1 = R1 | R1;
 1ba:	41 54       	R1 = R1 & R0;
 1bc:	45 00       	STI R5;
 1be:	43 54       	R1 = R3 & R0;
 1c0:	52 50       	R1 = R2 + R2;
 1c2:	41 44       	P1 = P0 << 0x2;
 1c4:	00 65       	R0 += 0x20;		/* ( 32) */
 1c6:	72 72       	ILLEGAL;
 1c8:	6f 72       	ILLEGAL;
 1ca:	00 43       	R0 = R0.B (X);
 1cc:	52 59       	R5 = R2 ^ R2;
 1ce:	50 54       	R1 = R0 & R2;
 1d0:	5f 49       	CC = BITTST (R7, 0xb);		/* bit 11 */
 1d2:	4e 56       	R1 = R6 | R1;
 1d4:	41 4c       	BITCLR (R1, 0x8);		/* bit  8 */
 1d6:	49 44       	P1 = P1 << 0x2;
 1d8:	5f 41       	R7 = (R7 + R3) << 0x2;
 1da:	52 47       	ILLEGAL;
 1dc:	00 75       	ILLEGAL;
 1de:	6e 73       	ILLEGAL;
 1e0:	69 67       	R1 += -0x13;		/* (-19) */
 1e2:	6e 65       	R6 += 0x2d;		/* ( 45) */
 1e4:	64 20       	JUMP.S 0x2ac <bss_begin+0x244>;
 1e6:	63 68       	P3 = 0xc (X);		/*		P3=0xc( 12) */
 1e8:	61 72       	ILLEGAL;
 1ea:	00 73       	ILLEGAL;
 1ec:	68 6f       	P0 += -0x13;		/* (-19) */
 1ee:	72 74       	ILLEGAL;
 1f0:	20 69       	P0 = 0x24 (X);		/*		P0=0x24( 36) */
 1f2:	6e 74       	ILLEGAL;
 1f4:	00 43       	R0 = R0.B (X);
 1f6:	52 59       	R5 = R2 ^ R2;
 1f8:	50 54       	R1 = R0 & R2;
 1fa:	5f 4d       	R7 >>>= 0xb;
 1fc:	45 4d       	R5 >>>= 0x8;
 1fe:	00 6e       	P0 += -0x40;		/* (-64) */
 200:	6f 6e       	FP += -0x33;		/* (-51) */
 202:	63 65       	R3 += 0x2c;		/* ( 44) */
 204:	00 74       	ILLEGAL;
 206:	61 67       	R1 += -0x14;		/* (-20) */
 208:	6c 65       	R4 += 0x2d;		/* ( 45) */
 20a:	6e 00       	ILLEGAL;
 20c:	43 52       	R1 = R3 - R0;
 20e:	59 50       	R1 = R1 + R3;
 210:	54 5f       	P5 = P4 + (P2 << 0x2);
 212:	49 4e       	R1 >>= 0x9;
 214:	56 41       	R6 = (R6 + R2) << 0x2;
 216:	4c 49       	CC = BITTST (R4, 0x9);		/* bit  9 */
 218:	44 5f       	P5 = P4 + (P0 << 0x2);
 21a:	50 52       	R1 = R0 - R2;
 21c:	49 4d       	R1 >>>= 0x9;
 21e:	45 5f       	P5 = P5 + (P0 << 0x2);
 220:	53 49       	CC = BITTST (R3, 0xa);		/* bit 10 */
 222:	5a 45       	P2 += P3 (BREV);
 224:	00 43       	R0 = R0.B (X);
 226:	52 59       	R5 = R2 ^ R2;
 228:	50 54       	R1 = R0 & R2;
 22a:	5f 50       	R1 = R7 + R3;
 22c:	4b 5f       	P5 = P3 + (P1 << 0x2);
 22e:	49 4e       	R1 >>= 0x9;
 230:	56 41       	R6 = (R6 + R2) << 0x2;
 232:	4c 49       	CC = BITTST (R4, 0x9);		/* bit  9 */
 234:	44 5f       	P5 = P4 + (P0 << 0x2);
 236:	53 59       	R5 = R3 ^ R2;
 238:	53 54       	R1 = R3 & R2;
 23a:	45 4d       	R5 >>>= 0x8;
 23c:	00 6e       	P0 += -0x40;		/* (-64) */
 23e:	6f 6e       	FP += -0x33;		/* (-51) */
 240:	63 65       	R3 += 0x2c;		/* ( 44) */
 242:	6c 65       	R4 += 0x2d;		/* ( 45) */
 244:	6e 00       	ILLEGAL;
 246:	43 52       	R1 = R3 - R0;
 248:	59 50       	R1 = R1 + R3;
 24a:	54 5f       	P5 = P4 + (P2 << 0x2);
 24c:	50 4b       	BITTGL (R0, 0xa);		/* bit 10 */
 24e:	5f 49       	CC = BITTST (R7, 0xb);		/* bit 11 */
 250:	4e 56       	R1 = R6 | R1;
 252:	41 4c       	BITCLR (R1, 0x8);		/* bit  8 */
 254:	49 44       	P1 = P1 << 0x2;
 256:	5f 50       	R1 = R7 + R3;
 258:	41 44       	P1 = P0 << 0x2;
 25a:	44 49       	CC = BITTST (R4, 0x8);		/* bit  8 */
 25c:	4e 47       	ILLEGAL;
 25e:	00 43       	R0 = R0.B (X);
 260:	52 59       	R5 = R2 ^ R2;
 262:	50 54       	R1 = R0 & R2;
 264:	5f 49       	CC = BITTST (R7, 0xb);		/* bit 11 */
 266:	4e 56       	R1 = R6 | R1;
 268:	41 4c       	BITCLR (R1, 0x8);		/* bit  8 */
 26a:	49 44       	P1 = P1 << 0x2;
 26c:	5f 50       	R1 = R7 + R3;
 26e:	52 4e       	R2 >>= 0xa;
 270:	47 00       	STI R7;
 272:	43 52       	R1 = R3 - R0;
 274:	59 50       	R1 = R1 + R3;
 276:	54 5f       	P5 = P4 + (P2 << 0x2);
 278:	4e 4f       	R6 <<= 0x9;
 27a:	50 00       	JUMP (P0);
 27c:	43 52       	R1 = R3 - R0;
 27e:	59 50       	R1 = R1 + R3;
 280:	54 5f       	P5 = P4 + (P2 << 0x2);
 282:	49 4e       	R1 >>= 0x9;
 284:	56 41       	R6 = (R6 + R2) << 0x2;
 286:	4c 49       	CC = BITTST (R4, 0x9);		/* bit  9 */
 288:	44 5f       	P5 = P4 + (P0 << 0x2);
 28a:	4b 45       	P3 += P1 (BREV);
 28c:	59 53       	R5 = R1 - R3;
 28e:	49 5a       	P1 = P1 << 0x1;
 290:	45 00       	STI R5;
 292:	43 52       	R1 = R3 - R0;
 294:	59 50       	R1 = R1 + R3;
 296:	54 5f       	P5 = P4 + (P2 << 0x2);
 298:	49 4e       	R1 >>= 0x9;
 29a:	56 41       	R6 = (R6 + R2) << 0x2;
 29c:	4c 49       	CC = BITTST (R4, 0x9);		/* bit  9 */
 29e:	44 5f       	P5 = P4 + (P0 << 0x2);
 2a0:	50 52       	R1 = R0 - R2;
 2a2:	4e 47       	ILLEGAL;
 2a4:	53 49       	CC = BITTST (R3, 0xa);		/* bit 10 */
 2a6:	5a 45       	P2 += P3 (BREV);
 2a8:	00 43       	R0 = R0.B (X);
 2aa:	52 59       	R5 = R2 ^ R2;
 2ac:	50 54       	R1 = R0 & R2;
 2ae:	5f 48       	CC = !BITTST (R7, 0xb);		/* bit 11 */
 2b0:	41 53       	R5 = R1 - R0;
 2b2:	48 5f       	P5 = P0 + (P1 << 0x2);
 2b4:	4f 56       	R1 = R7 | R1;
 2b6:	45 52       	R1 = R5 - R0;
 2b8:	46 4c       	BITCLR (R6, 0x8);		/* bit  8 */
 2ba:	4f 57       	R5 = R7 | R1;
 2bc:	00 43       	R0 = R0.B (X);
 2be:	52 59       	R5 = R2 ^ R2;
 2c0:	50 54       	R1 = R0 & R2;
 2c2:	5f 50       	R1 = R7 + R3;
 2c4:	4b 5f       	P5 = P3 + (P1 << 0x2);
 2c6:	54 59       	R5 = R4 ^ R2;
 2c8:	50 45       	P0 += P2 (BREV);
 2ca:	5f 4d       	R7 >>>= 0xb;
 2cc:	49 53       	R5 = R1 - R1;
 2ce:	4d 41       	R5 = (R5 + R1) << 0x2;
 2d0:	54 43       	R4 = R2.B (Z);
 2d2:	48 00       	ILLEGAL;
 2d4:	47 4e       	R7 >>= 0x8;
 2d6:	55 20       	JUMP.S 0x380 <bss_begin+0x318>;
 2d8:	43 20       	JUMP.S 0x35e <bss_begin+0x2f6>;
 2da:	34 2e       	JUMP.S 0xffffff42 <_text_end+0xfefeff02>;
 2dc:	35 2e       	JUMP.S 0xffffff46 <_text_end+0xfefeff06>;
 2de:	33 00       	CLI R3;
 2e0:	43 52       	R1 = R3 - R0;
 2e2:	59 50       	R1 = R1 + R3;
 2e4:	54 5f       	P5 = P4 + (P2 << 0x2);
 2e6:	49 4e       	R1 >>= 0x9;
 2e8:	56 41       	R6 = (R6 + R2) << 0x2;
 2ea:	4c 49       	CC = BITTST (R4, 0x9);		/* bit  9 */
 2ec:	44 5f       	P5 = P4 + (P0 << 0x2);
 2ee:	50 41       	R0 = (R0 + R2) << 0x2;
 2f0:	43 4b       	BITTGL (R3, 0x8);		/* bit  8 */
 2f2:	45 54       	R1 = R5 & R0;
 2f4:	00 68       	P0 = 0x0 (X);		/*		P0=0x0(  0) */
 2f6:	65 61       	R5 = 0x2c (X);		/*		R5=0x2c( 44) */
 2f8:	64 65       	R4 += 0x2c;		/* ( 44) */
 2fa:	72 00       	CALL (PC + P2);
 2fc:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 2fe:	6a 6e       	P2 += -0x33;		/* (-51) */
 300:	64 61       	R4 = 0x2c (X);		/*		R4=0x2c( 44) */
 302:	65 6c       	P5 += 0xc;		/* ( 12) */
 304:	5f 65       	R7 += 0x2b;		/* ( 43) */
 306:	63 62       	R3 = -0x34 (X);		/*		R3=0xffffffcc(-52) */
 308:	5f 65       	R7 += 0x2b;		/* ( 43) */
 30a:	6e 63       	R6 = -0x13 (X);		/*		R6=0xffffffed(-19) */
 30c:	72 79       	ILLEGAL;
 30e:	70 74       	ILLEGAL;
 310:	00 61       	R0 = 0x20 (X);		/*		R0=0x20( 32) */
 312:	65 73       	ILLEGAL;
 314:	31 32       	SP = R1;
 316:	38 5f       	P4 = P0 + (FP << 0x2);
 318:	73 74       	ILLEGAL;
 31a:	61 72       	ILLEGAL;
 31c:	74 5f       	P5 = P4 + (SP << 0x2);
 31e:	65 6e       	P5 += -0x34;		/* (-52) */
 320:	63 00       	CALL (P3);
 322:	70 6c       	P0 += 0xe;		/* ( 14) */
 324:	61 69       	P1 = 0x2c (X);		/*		P1=0x2c( 44) */
 326:	6e 74       	ILLEGAL;
 328:	65 78       	ILLEGAL;
 32a:	74 00       	CALL (PC + P4);
 32c:	74 65       	R4 += 0x2e;		/* ( 46) */
 32e:	6d 70       	ILLEGAL;
 330:	00 61       	R0 = 0x20 (X);		/*		R0=0x20( 32) */
 332:	65 73       	ILLEGAL;
 334:	31 32       	SP = R1;
 336:	38 5f       	P4 = P0 + (FP << 0x2);
 338:	73 74       	ILLEGAL;
 33a:	61 72       	ILLEGAL;
 33c:	74 5f       	P5 = P4 + (SP << 0x2);
 33e:	64 65       	R4 += 0x2c;		/* ( 44) */
 340:	63 00       	CALL (P3);
 342:	63 74       	ILLEGAL;
 344:	70 74       	ILLEGAL;
 346:	72 00       	CALL (PC + P2);
 348:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 34a:	6a 6e       	P2 += -0x33;		/* (-51) */
 34c:	64 61       	R4 = 0x2c (X);		/*		R4=0x2c( 44) */
 34e:	65 6c       	P5 += 0xc;		/* ( 12) */
 350:	5f 73       	ILLEGAL;
 352:	65 74       	ILLEGAL;
 354:	75 70       	ILLEGAL;
 356:	00 2e       	JUMP.S 0xffffff56 <_text_end+0xfefeff16>;
 358:	2e 5c       	P0 = SP + (P5 << 0x1);
 35a:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 35c:	6d 5c       	P1 = P5 + (P5 << 0x1);
 35e:	61 65       	R1 += 0x2c;		/* ( 44) */
 360:	73 2e       	JUMP.S 0x46 <_ble_resource+0x12>;
 362:	63 00       	CALL (P3);
 364:	73 69       	P3 = 0x2e (X);		/*		P3=0x2e( 46) */
 366:	7a 65       	R2 += 0x2f;		/* ( 47) */
 368:	5f 74       	ILLEGAL;
 36a:	00 2f       	JUMP.S 0x16a <bss_begin+0x102>;
 36c:	68 6f       	P0 += -0x13;		/* (-19) */
 36e:	6d 65       	R5 += 0x2d;		/* ( 45) */
 370:	2f 62       	R7 = -0x3b (X);		/*		R7=0xffffffc5(-59) */
 372:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 374:	6c 64       	R4 += 0xd;		/* ( 13) */
 376:	2f 64       	R7 += 0x5;		/* (  5) */
 378:	76 31       	ILLEGAL;
 37a:	30 5f       	P4 = P0 + (SP << 0x2);
 37c:	38 32       	FP = R0;
 37e:	39 70       	ILLEGAL;
 380:	6d 2f       	JUMP.S 0x25a <bss_begin+0x1f2>;
 382:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 384:	63 2d       	JUMP.S 0xfffffe4a <_text_end+0xfefefe0a>;
 386:	34 2e       	JUMP.S 0xffffffee <_text_end+0xfefeffae>;
 388:	35 2f       	JUMP.S 0x1f2 <bss_begin+0x18a>;
 38a:	6e 65       	R6 += 0x2d;		/* ( 45) */
 38c:	77 6c       	FP += 0xe;		/* ( 14) */
 38e:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 390:	2f 6c       	FP += 0x5;		/* (  5) */
 392:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 394:	63 2f       	JUMP.S 0x25a <bss_begin+0x1f2>;
 396:	73 74       	ILLEGAL;
 398:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 39a:	6e 67       	R6 += -0x13;		/* (-19) */
 39c:	2f 6d       	FP += 0x25;		/* ( 37) */
 39e:	65 6d       	P5 += 0x2c;		/* ( 44) */
 3a0:	63 6d       	P3 += 0x2c;		/* ( 44) */
 3a2:	70 2e       	JUMP.S 0x82 <bss_begin+0x1a>;
 3a4:	63 00       	CALL (P3);
 3a6:	6d 65       	R5 += 0x2d;		/* ( 45) */
 3a8:	6d 63       	R5 = -0x13 (X);		/*		R5=0xffffffed(-19) */
 3aa:	6d 70       	ILLEGAL;
 3ac:	00 2f       	JUMP.S 0x1ac <bss_begin+0x144>;
 3ae:	68 6f       	P0 += -0x13;		/* (-19) */
 3b0:	6d 65       	R5 += 0x2d;		/* ( 45) */
 3b2:	2f 62       	R7 = -0x3b (X);		/*		R7=0xffffffc5(-59) */
 3b4:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 3b6:	6c 64       	R4 += 0xd;		/* ( 13) */
 3b8:	2f 64       	R7 += 0x5;		/* (  5) */
 3ba:	76 31       	ILLEGAL;
 3bc:	30 5f       	P4 = P0 + (SP << 0x2);
 3be:	38 32       	FP = R0;
 3c0:	39 70       	ILLEGAL;
 3c2:	6d 2f       	JUMP.S 0x29c <bss_begin+0x234>;
 3c4:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 3c6:	63 2d       	JUMP.S 0xfffffe8c <_text_end+0xfefefe4c>;
 3c8:	34 2e       	JUMP.S 0x30 <_sm_io_capabilities>;
 3ca:	35 2f       	JUMP.S 0x234 <bss_begin+0x1cc>;
 3cc:	6e 65       	R6 += 0x2d;		/* ( 45) */
 3ce:	77 6c       	FP += 0xe;		/* ( 14) */
 3d0:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 3d2:	2f 6c       	FP += 0x5;		/* (  5) */
 3d4:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 3d6:	63 2f       	JUMP.S 0x29c <bss_begin+0x234>;
 3d8:	73 74       	ILLEGAL;
 3da:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 3dc:	6e 67       	R6 += -0x13;		/* (-19) */
 3de:	2f 6d       	FP += 0x25;		/* ( 37) */
 3e0:	65 6d       	P5 += 0x2c;		/* ( 44) */
 3e2:	63 70       	ILLEGAL;
 3e4:	79 2e       	JUMP.S 0xd6 <bss_begin+0x6e>;
 3e6:	63 00       	CALL (P3);
 3e8:	61 6c       	P1 += 0xc;		/* ( 12) */
 3ea:	69 67       	R1 += -0x13;		/* (-19) */
 3ec:	6e 65       	R6 += 0x2d;		/* ( 45) */
 3ee:	64 5f       	P5 = P4 + (P4 << 0x2);
 3f0:	64 73       	ILLEGAL;
 3f2:	74 00       	CALL (PC + P4);
 3f4:	73 72       	ILLEGAL;
 3f6:	63 30       	R4 = P3;
 3f8:	00 64       	R0 += 0x0;		/* (  0) */
 3fa:	73 74       	ILLEGAL;
 3fc:	30 00       	CLI R0;
 3fe:	61 6c       	P1 += 0xc;		/* ( 12) */
 400:	69 67       	R1 += -0x13;		/* (-19) */
 402:	6e 65       	R6 += 0x2d;		/* ( 45) */
 404:	64 5f       	P5 = P4 + (P4 << 0x2);
 406:	73 72       	ILLEGAL;
 408:	63 00       	CALL (P3);
 40a:	6d 65       	R5 += 0x2d;		/* ( 45) */
 40c:	6d 63       	R5 = -0x13 (X);		/*		R5=0xffffffed(-19) */
 40e:	70 79       	ILLEGAL;
 410:	00 6c       	P0 += 0x0;		/* (  0) */
 412:	65 6e       	P5 += -0x34;		/* (-52) */
 414:	30 00       	CLI R0;
 416:	2f 68       	FP = 0x5 (X);		/*		FP=0x5(  5) */
 418:	6f 6d       	FP += 0x2d;		/* ( 45) */
 41a:	65 2f       	JUMP.S 0x2e4 <bss_begin+0x27c>;
 41c:	62 75       	ILLEGAL;
 41e:	69 6c       	P1 += 0xd;		/* ( 13) */
 420:	64 2f       	JUMP.S 0x2e8 <bss_begin+0x280>;
 422:	64 76       	ILLEGAL;
 424:	31 30       	R6 = R1;
 426:	5f 38       	A1.W = FP;
 428:	32 39       	ASTAT = A1.X;
 42a:	70 6d       	P0 += 0x2e;		/* ( 46) */
 42c:	2f 67       	R7 += -0x1b;		/* (-27) */
 42e:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 430:	2d 34       	M1 = R5;
 432:	2e 35       	ILLEGAL;
 434:	2f 6e       	FP += -0x3b;		/* (-59) */
 436:	65 77       	ILLEGAL;
 438:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 43a:	62 2f       	JUMP.S 0x2fe <bss_begin+0x296>;
 43c:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 43e:	62 63       	R2 = -0x14 (X);		/*		R2=0xffffffec(-20) */
 440:	2f 73       	ILLEGAL;
 442:	74 72       	ILLEGAL;
 444:	69 6e       	P1 += -0x33;		/* (-51) */
 446:	67 2f       	JUMP.S 0x314 <bss_begin+0x2ac>;
 448:	6d 65       	R5 += 0x2d;		/* ( 45) */
 44a:	6d 73       	ILLEGAL;
 44c:	65 74       	ILLEGAL;
 44e:	2e 63       	R6 = -0x1b (X);		/*		R6=0xffffffe5(-27) */
 450:	00 61       	R0 = 0x20 (X);		/*		R0=0x20( 32) */
 452:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 454:	67 6e       	FP += -0x34;		/* (-52) */
 456:	65 64       	R5 += 0xc;		/* ( 12) */
 458:	5f 61       	R7 = 0x2b (X);		/*		R7=0x2b( 43) */
 45a:	64 64       	R4 += 0xc;		/* ( 12) */
 45c:	72 00       	CALL (PC + P2);
 45e:	6d 65       	R5 += 0x2d;		/* ( 45) */
 460:	6d 73       	ILLEGAL;
 462:	65 74       	ILLEGAL;
 464:	00 62       	R0 = -0x40 (X);		/*		R0=0xffffffc0(-64) */
 466:	75 66       	R5 += -0x32;		/* (-50) */
 468:	66 65       	R6 += 0x2c;		/* ( 44) */
 46a:	72 00       	CALL (PC + P2);
 46c:	73 74       	ILLEGAL;
 46e:	72 63       	R2 = -0x12 (X);		/*		R2=0xffffffee(-18) */
 470:	6d 70       	ILLEGAL;
 472:	00 2f       	JUMP.S 0x272 <bss_begin+0x20a>;
 474:	68 6f       	P0 += -0x13;		/* (-19) */
 476:	6d 65       	R5 += 0x2d;		/* ( 45) */
 478:	2f 62       	R7 = -0x3b (X);		/*		R7=0xffffffc5(-59) */
 47a:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 47c:	6c 64       	R4 += 0xd;		/* ( 13) */
 47e:	2f 64       	R7 += 0x5;		/* (  5) */
 480:	76 31       	ILLEGAL;
 482:	30 5f       	P4 = P0 + (SP << 0x2);
 484:	38 32       	FP = R0;
 486:	39 70       	ILLEGAL;
 488:	6d 2f       	JUMP.S 0x362 <bss_begin+0x2fa>;
 48a:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 48c:	63 2d       	JUMP.S 0xffffff52 <_text_end+0xfefeff12>;
 48e:	34 2e       	JUMP.S 0xf6 <bss_begin+0x8e>;
 490:	35 2f       	JUMP.S 0x2fa <bss_begin+0x292>;
 492:	6e 65       	R6 += 0x2d;		/* ( 45) */
 494:	77 6c       	FP += 0xe;		/* ( 14) */
 496:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 498:	2f 6c       	FP += 0x5;		/* (  5) */
 49a:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 49c:	63 2f       	JUMP.S 0x362 <bss_begin+0x2fa>;
 49e:	73 74       	ILLEGAL;
 4a0:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 4a2:	6e 67       	R6 += -0x13;		/* (-19) */
 4a4:	2f 73       	ILLEGAL;
 4a6:	74 72       	ILLEGAL;
 4a8:	63 6d       	P3 += 0x2c;		/* ( 44) */
 4aa:	70 2e       	JUMP.S 0x18a <bss_begin+0x122>;
 4ac:	63 00       	CALL (P3);
 4ae:	73 74       	ILLEGAL;
 4b0:	72 63       	R2 = -0x12 (X);		/*		R2=0xffffffee(-18) */
 4b2:	70 79       	ILLEGAL;
 4b4:	00 2f       	JUMP.S 0x2b4 <bss_begin+0x24c>;
 4b6:	68 6f       	P0 += -0x13;		/* (-19) */
 4b8:	6d 65       	R5 += 0x2d;		/* ( 45) */
 4ba:	2f 62       	R7 = -0x3b (X);		/*		R7=0xffffffc5(-59) */
 4bc:	75 69       	P5 = 0x2e (X);		/*		P5=0x2e( 46) */
 4be:	6c 64       	R4 += 0xd;		/* ( 13) */
 4c0:	2f 64       	R7 += 0x5;		/* (  5) */
 4c2:	76 31       	ILLEGAL;
 4c4:	30 5f       	P4 = P0 + (SP << 0x2);
 4c6:	38 32       	FP = R0;
 4c8:	39 70       	ILLEGAL;
 4ca:	6d 2f       	JUMP.S 0x3a4 <bss_begin+0x33c>;
 4cc:	67 63       	R7 = -0x14 (X);		/*		R7=0xffffffec(-20) */
 4ce:	63 2d       	JUMP.S 0xffffff94 <_text_end+0xfefeff54>;
 4d0:	34 2e       	JUMP.S 0x138 <bss_begin+0xd0>;
 4d2:	35 2f       	JUMP.S 0x33c <bss_begin+0x2d4>;
 4d4:	6e 65       	R6 += 0x2d;		/* ( 45) */
 4d6:	77 6c       	FP += 0xe;		/* ( 14) */
 4d8:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 4da:	2f 6c       	FP += 0x5;		/* (  5) */
 4dc:	69 62       	R1 = -0x33 (X);		/*		R1=0xffffffcd(-51) */
 4de:	63 2f       	JUMP.S 0x3a4 <bss_begin+0x33c>;
 4e0:	73 74       	ILLEGAL;
 4e2:	72 69       	P2 = 0x2e (X);		/*		P2=0x2e( 46) */
 4e4:	6e 67       	R6 += -0x13;		/* (-19) */
 4e6:	2f 73       	ILLEGAL;
 4e8:	74 72       	ILLEGAL;
 4ea:	63 70       	ILLEGAL;
 4ec:	79 2e       	JUMP.S 0x1de <bss_begin+0x176>;
 4ee:	63 00       	CALL (P3);
 4f0:	2f 68       	FP = 0x5 (X);		/*		FP=0x5(  5) */
 4f2:	6f 6d       	FP += 0x2d;		/* ( 45) */
 4f4:	65 2f       	JUMP.S 0x3be <bss_begin+0x356>;
 4f6:	62 75       	ILLEGAL;
 4f8:	69 6c       	P1 += 0xd;		/* ( 13) */
 4fa:	64 2f       	JUMP.S 0x3c2 <bss_begin+0x35a>;
 4fc:	64 76       	ILLEGAL;
 4fe:	31 30       	R6 = R1;
 500:	5f 38       	A1.W = FP;
 502:	32 39       	ASTAT = A1.X;
 504:	70 6d       	P0 += 0x2e;		/* ( 46) */
 506:	2f 67       	R7 += -0x1b;		/* (-27) */
 508:	63 63       	R3 = -0x14 (X);		/*		R3=0xffffffec(-20) */
 50a:	2d 34       	M1 = R5;
 50c:	2e 35       	ILLEGAL;
 50e:	2f 6e       	FP += -0x3b;		/* (-59) */
 510:	65 77       	ILLEGAL;
 512:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 514:	62 2f       	JUMP.S 0x3d8 <bss_begin+0x370>;
 516:	6c 69       	P4 = 0x2d (X);		/*		P4=0x2d( 45) */
 518:	62 63       	R2 = -0x14 (X);		/*		R2=0xffffffec(-20) */
 51a:	2f 73       	ILLEGAL;
 51c:	74 72       	ILLEGAL;
 51e:	69 6e       	P1 += -0x33;		/* (-51) */
 520:	67 2f       	JUMP.S 0x3ee <bss_begin+0x386>;
 522:	73 74       	ILLEGAL;
 524:	72 6c       	P2 += 0xe;		/* ( 14) */
 526:	65 6e       	P5 += -0x34;		/* (-52) */
 528:	2e 63       	R6 = -0x1b (X);		/*		R6=0xffffffe5(-27) */
 52a:	00 73       	ILLEGAL;
 52c:	74 72       	ILLEGAL;
 52e:	6c 65       	R4 += 0x2d;		/* ( 45) */
 530:	6e 00       	ILLEGAL;
 532:	73 74       	ILLEGAL;
 534:	61 72       	ILLEGAL;
 536:	74 00       	CALL (PC + P4);
